0: unit: 
 1: function: 
  2: type: 
   3: name: void
  4: name: gf_isom_cenc_get_default_info_internal
  5: parameter_list: 
   6: parameter: 
    7: decl: 
     8: type: 
      9: name: GF_TrackBox
      10: modifier: *
     11: name: trak
   12: parameter: 
    13: decl: 
     14: type: 
      15: name: u32
     16: name: sampleDescriptionIndex
   17: parameter: 
    18: decl: 
     19: type: 
      20: name: u32
      21: modifier: *
     22: name: container_type
   23: parameter: 
    24: decl: 
     25: type: 
      26: name: Bool
      27: modifier: *
     28: name: default_IsEncrypted
   29: parameter: 
    30: decl: 
     31: type: 
      32: name: u8
      33: modifier: *
     34: name: crypt_byte_block
   35: parameter: 
    36: decl: 
     37: type: 
      38: name: u8
      39: modifier: *
     40: name: skip_byte_block
   41: parameter: 
    42: decl: 
     43: type: 
      44: specifier: const
      45: name: u8
      46: modifier: *
      47: modifier: *
     48: name: key_info
   49: parameter: 
    50: decl: 
     51: type: 
      52: name: u32
      53: modifier: *
     54: name: key_info_size
  55: block: 
   56: block_content: 
    57: decl_stmt: 
     58: decl: 
      59: type: 
       60: name: GF_ProtectionSchemeInfoBox
       61: modifier: *
      62: name: sinf
    63: comment: //setup all default as not encrypted
    64: if_stmt: 
     65: if: 
      66: condition: 
       67: expr: 
        68: name: default_IsEncrypted
      69: block: 
       70: block_content: 
        71: expr_stmt: 
         72: expr: 
          73: operator: *
          74: name: default_IsEncrypted
          75: operator: =
          76: name: GF_FALSE
    77: if_stmt: 
     78: if: 
      79: condition: 
       80: expr: 
        81: name: crypt_byte_block
      82: block: 
       83: block_content: 
        84: expr_stmt: 
         85: expr: 
          86: operator: *
          87: name: crypt_byte_block
          88: operator: =
          89: literal: 0
    90: if_stmt: 
     91: if: 
      92: condition: 
       93: expr: 
        94: name: skip_byte_block
      95: block: 
       96: block_content: 
        97: expr_stmt: 
         98: expr: 
          99: operator: *
          100: name: skip_byte_block
          101: operator: =
          102: literal: 0
    103: if_stmt: 
     104: if: 
      105: condition: 
       106: expr: 
        107: name: container_type
      108: block: 
       109: block_content: 
        110: expr_stmt: 
         111: expr: 
          112: operator: *
          113: name: container_type
          114: operator: =
          115: literal: 0
    116: if_stmt: 
     117: if: 
      118: condition: 
       119: expr: 
        120: name: key_info
      121: block: 
       122: block_content: 
        123: expr_stmt: 
         124: expr: 
          125: operator: *
          126: name: key_info
          127: operator: =
          128: name: NULL
    129: if_stmt: 
     130: if: 
      131: condition: 
       132: expr: 
        133: name: key_info_size
      134: block: 
       135: block_content: 
        136: expr_stmt: 
         137: expr: 
          138: operator: *
          139: name: key_info_size
          140: operator: =
          141: literal: 0
    142: expr_stmt: 
     143: expr: 
      144: name: sinf
      145: operator: =
      146: call: 
       147: name: isom_get_sinf_entry
       148: argument_list: 
        149: argument: 
         150: expr: 
          151: name: trak
        152: argument: 
         153: expr: 
          154: name: sampleDescriptionIndex
        155: argument: 
         156: expr: 
          157: name: GF_ISOM_CENC_SCHEME
        158: argument: 
         159: expr: 
          160: name: NULL
    161: if_stmt: 
     162: if: 
      163: condition: 
       164: expr: 
        165: operator: !
        166: name: sinf
      167: block: 
       168: block_content: 
        169: expr_stmt: 
         170: expr: 
          171: name: sinf
          172: operator: =
          173: call: 
           174: name: isom_get_sinf_entry
           175: argument_list: 
            176: argument: 
             177: expr: 
              178: name: trak
            179: argument: 
             180: expr: 
              181: name: sampleDescriptionIndex
            182: argument: 
             183: expr: 
              184: name: GF_ISOM_CBC_SCHEME
            185: argument: 
             186: expr: 
              187: name: NULL
    188: if_stmt: 
     189: if: 
      190: condition: 
       191: expr: 
        192: operator: !
        193: name: sinf
      194: block: 
       195: block_content: 
        196: expr_stmt: 
         197: expr: 
          198: name: sinf
          199: operator: =
          200: call: 
           201: name: isom_get_sinf_entry
           202: argument_list: 
            203: argument: 
             204: expr: 
              205: name: trak
            206: argument: 
             207: expr: 
              208: name: sampleDescriptionIndex
            209: argument: 
             210: expr: 
              211: name: GF_ISOM_CENS_SCHEME
            212: argument: 
             213: expr: 
              214: name: NULL
    215: if_stmt: 
     216: if: 
      217: condition: 
       218: expr: 
        219: operator: !
        220: name: sinf
      221: block: 
       222: block_content: 
        223: expr_stmt: 
         224: expr: 
          225: name: sinf
          226: operator: =
          227: call: 
           228: name: isom_get_sinf_entry
           229: argument_list: 
            230: argument: 
             231: expr: 
              232: name: trak
            233: argument: 
             234: expr: 
              235: name: sampleDescriptionIndex
            236: argument: 
             237: expr: 
              238: name: GF_ISOM_CBCS_SCHEME
            239: argument: 
             240: expr: 
              241: name: NULL
    242: if_stmt: 
     243: if: 
      244: condition: 
       245: expr: 
        246: operator: !
        247: name: sinf
      248: block: 
       249: block_content: 
        250: expr_stmt: 
         251: expr: 
          252: name: sinf
          253: operator: =
          254: call: 
           255: name: isom_get_sinf_entry
           256: argument_list: 
            257: argument: 
             258: expr: 
              259: name: trak
            260: argument: 
             261: expr: 
              262: name: sampleDescriptionIndex
            263: argument: 
             264: expr: 
              265: name: GF_ISOM_PIFF_SCHEME
            266: argument: 
             267: expr: 
              268: name: NULL
    269: if_stmt: 
     270: if: 
      271: condition: 
       272: expr: 
        273: operator: !
        274: name: sinf
      275: block: 
       276: block_content: 
        277: decl_stmt: 
         278: decl: 
          279: type: 
           280: name: u32
          281: name: i
         282: decl: 
          283: type: 
          284: name: nb_stsd
          285: init: 
           286: expr: 
            287: call: 
             288: name: gf_list_count
             289: argument_list: 
              290: argument: 
               291: expr: 
                292: name: 
                 293: name: trak
                 294: operator: ->
                 295: name: Media
                 296: operator: ->
                 297: name: information
                 298: operator: ->
                 299: name: sampleTable
                 300: operator: ->
                 301: name: SampleDescription
                 302: operator: ->
                 303: name: child_boxes
        304: for: 
         305: control: 
          306: init: 
           307: expr: 
            308: name: i
            309: operator: =
            310: literal: 0
          311: condition: 
           312: expr: 
            313: name: i
            314: operator: <
            315: name: nb_stsd
          316: incr: 
           317: expr: 
            318: name: i
            319: operator: ++
         320: block: 
          321: block_content: 
           322: decl_stmt: 
            323: decl: 
             324: type: 
              325: name: GF_ProtectionSchemeInfoBox
              326: modifier: *
             327: name: a_sinf
           328: decl_stmt: 
            329: decl: 
             330: type: 
              331: name: GF_SampleEntryBox
              332: modifier: *
             333: name: sentry
             334: init: 
              335: expr: 
               336: name: NULL
           337: if_stmt: 
            338: if: 
             339: condition: 
              340: expr: 
               341: name: i
               342: operator: +
               343: literal: 1
               344: operator: ==
               345: name: sampleDescriptionIndex
             346: block: 
              347: block_content: 
               348: continue: 
           349: expr_stmt: 
            350: expr: 
             351: name: sentry
             352: operator: =
             353: call: 
              354: name: gf_list_get
              355: argument_list: 
               356: argument: 
                357: expr: 
                 358: name: 
                  359: name: trak
                  360: operator: ->
                  361: name: Media
                  362: operator: ->
                  363: name: information
                  364: operator: ->
                  365: name: sampleTable
                  366: operator: ->
                  367: name: SampleDescription
                  368: operator: ->
                  369: name: child_boxes
               370: argument: 
                371: expr: 
                 372: name: i
           373: expr_stmt: 
            374: expr: 
             375: name: a_sinf
             376: operator: =
             377: operator: (
             378: name: GF_ProtectionSchemeInfoBox
             379: operator: *
             380: operator: )
             381: call: 
              382: name: gf_isom_box_find_child
              383: argument_list: 
               384: argument: 
                385: expr: 
                 386: name: 
                  387: name: sentry
                  388: operator: ->
                  389: name: child_boxes
               390: argument: 
                391: expr: 
                 392: name: GF_ISOM_BOX_TYPE_SINF
           393: if_stmt: 
            394: if: 
             395: condition: 
              396: expr: 
               397: operator: !
               398: name: a_sinf
             399: block: 
              400: block_content: 
               401: continue: 
           402: comment: //signal default (not encrypted)
           403: return: 
    404: if_stmt: 
     405: if: 
      406: condition: 
       407: expr: 
        408: name: sinf
        409: operator: &&
        410: name: 
         411: name: sinf
         412: operator: ->
         413: name: info
        414: operator: &&
        415: name: 
         416: name: sinf
         417: operator: ->
         418: name: info
         419: operator: ->
         420: name: tenc
      421: block: 
       422: block_content: 
        423: if_stmt: 
         424: if: 
          425: condition: 
           426: expr: 
            427: name: default_IsEncrypted
          428: block: 
           429: block_content: 
            430: expr_stmt: 
             431: expr: 
              432: operator: *
              433: name: default_IsEncrypted
              434: operator: =
              435: name: 
               436: name: sinf
               437: operator: ->
               438: name: info
               439: operator: ->
               440: name: tenc
               441: operator: ->
               442: name: isProtected
        443: if_stmt: 
         444: if: 
          445: condition: 
           446: expr: 
            447: name: crypt_byte_block
          448: block: 
           449: block_content: 
            450: expr_stmt: 
             451: expr: 
              452: operator: *
              453: name: crypt_byte_block
              454: operator: =
              455: name: 
               456: name: sinf
               457: operator: ->
               458: name: info
               459: operator: ->
               460: name: tenc
               461: operator: ->
               462: name: crypt_byte_block
        463: if_stmt: 
         464: if: 
          465: condition: 
           466: expr: 
            467: name: skip_byte_block
          468: block: 
           469: block_content: 
            470: expr_stmt: 
             471: expr: 
              472: operator: *
              473: name: skip_byte_block
              474: operator: =
              475: name: 
               476: name: sinf
               477: operator: ->
               478: name: info
               479: operator: ->
               480: name: tenc
               481: operator: ->
               482: name: skip_byte_block
        483: if_stmt: 
         484: if: 
          485: condition: 
           486: expr: 
            487: name: key_info
          488: block: 
           489: block_content: 
            490: expr_stmt: 
             491: expr: 
              492: operator: *
              493: name: key_info
              494: operator: =
              495: name: 
               496: name: sinf
               497: operator: ->
               498: name: info
               499: operator: ->
               500: name: tenc
               501: operator: ->
               502: name: key_info
        503: if_stmt: 
         504: if: 
          505: condition: 
           506: expr: 
            507: name: key_info_size
          508: block: 
           509: block_content: 
            510: expr_stmt: 
             511: expr: 
              512: operator: *
              513: name: key_info_size
              514: operator: =
              515: literal: 20
            516: if_stmt: 
             517: if: 
              518: condition: 
               519: expr: 
                520: operator: !
                521: name: 
                 522: name: sinf
                 523: operator: ->
                 524: name: info
                 525: operator: ->
                 526: name: tenc
                 527: operator: ->
                 528: name: key_info
                 529: index: 
                  530: expr: 
                   531: literal: 3
              532: block: 
               533: block_content: 
                534: expr_stmt: 
                 535: expr: 
                  536: operator: *
                  537: name: key_info_size
                  538: operator: +=
                  539: literal: 1
                  540: operator: +
                  541: name: 
                   542: name: sinf
                   543: operator: ->
                   544: name: info
                   545: operator: ->
                   546: name: tenc
                   547: operator: ->
                   548: name: key_info
                   549: index: 
                    550: expr: 
                     551: literal: 20
        552: comment: //set default value, overwritten below
        553: if_stmt: 
         554: if: 
          555: condition: 
           556: expr: 
            557: name: container_type
          558: block: 
           559: block_content: 
            560: expr_stmt: 
             561: expr: 
              562: operator: *
              563: name: container_type
              564: operator: =
              565: name: GF_ISOM_BOX_TYPE_SENC
     566: if: 
      567: condition: 
       568: expr: 
        569: name: sinf
        570: operator: &&
        571: name: 
         572: name: sinf
         573: operator: ->
         574: name: info
        575: operator: &&
        576: name: 
         577: name: sinf
         578: operator: ->
         579: name: info
         580: operator: ->
         581: name: piff_tenc
      582: block: 
       583: block_content: 
        584: if_stmt: 
         585: if: 
          586: condition: 
           587: expr: 
            588: name: default_IsEncrypted
          589: block: 
           590: block_content: 
            591: expr_stmt: 
             592: expr: 
              593: operator: *
              594: name: default_IsEncrypted
              595: operator: =
              596: name: GF_TRUE
        597: if_stmt: 
         598: if: 
          599: condition: 
           600: expr: 
            601: name: key_info
          602: block: 
           603: block_content: 
            604: expr_stmt: 
             605: expr: 
              606: operator: *
              607: name: key_info
              608: operator: =
              609: name: 
               610: name: sinf
               611: operator: ->
               612: name: info
               613: operator: ->
               614: name: piff_tenc
               615: operator: ->
               616: name: key_info
        617: if_stmt: 
         618: if: 
          619: condition: 
           620: expr: 
            621: name: key_info_size
          622: block: 
           623: block_content: 
            624: expr_stmt: 
             625: expr: 
              626: operator: *
              627: name: key_info_size
              628: operator: =
              629: literal: 19
        630: comment: //set default value, overwritten below
        631: if_stmt: 
         632: if: 
          633: condition: 
           634: expr: 
            635: name: container_type
          636: block: 
           637: block_content: 
            638: expr_stmt: 
             639: expr: 
              640: operator: *
              641: name: container_type
              642: operator: =
              643: name: GF_ISOM_BOX_UUID_PSEC
     644: else: 
      645: block: 
       646: block_content: 
        647: decl_stmt: 
         648: decl: 
          649: type: 
           650: name: u32
          651: name: i
         652: decl: 
          653: type: 
          654: name: count
          655: init: 
           656: expr: 
            657: literal: 0
        658: decl_stmt: 
         659: decl: 
          660: type: 
           661: name: GF_CENCSampleEncryptionGroupEntry
           662: modifier: *
          663: name: seig_entry
          664: init: 
           665: expr: 
            666: name: NULL
        667: if_stmt: 
         668: if: 
          669: condition: 
           670: expr: 
            671: operator: !
            672: name: 
             673: name: trak
             674: operator: ->
             675: name: moov
             676: operator: ->
             677: name: mov
             678: operator: ->
             679: name: is_smooth
          680: block: 
           681: block_content: 
            682: expr_stmt: 
             683: expr: 
              684: name: count
              685: operator: =
              686: call: 
               687: name: gf_list_count
               688: argument_list: 
                689: argument: 
                 690: expr: 
                  691: name: 
                   692: name: trak
                   693: operator: ->
                   694: name: Media
                   695: operator: ->
                   696: name: information
                   697: operator: ->
                   698: name: sampleTable
                   699: operator: ->
                   700: name: sampleGroupsDescription
        701: for: 
         702: control: 
          703: init: 
           704: expr: 
            705: name: i
            706: operator: =
            707: literal: 0
          708: condition: 
           709: expr: 
            710: name: i
            711: operator: <
            712: name: count
          713: incr: 
           714: expr: 
            715: name: i
            716: operator: ++
         717: block: 
          718: block_content: 
           719: decl_stmt: 
            720: decl: 
             721: type: 
              722: name: GF_SampleGroupDescriptionBox
              723: modifier: *
             724: name: sgdesc
             725: init: 
              726: expr: 
               727: operator: (
               728: name: GF_SampleGroupDescriptionBox
               729: operator: *
               730: operator: )
               731: call: 
                732: name: gf_list_get
                733: argument_list: 
                 734: argument: 
                  735: expr: 
                   736: name: 
                    737: name: trak
                    738: operator: ->
                    739: name: Media
                    740: operator: ->
                    741: name: information
                    742: operator: ->
                    743: name: sampleTable
                    744: operator: ->
                    745: name: sampleGroupsDescription
                 746: argument: 
                  747: expr: 
                   748: name: i
           749: if_stmt: 
            750: if: 
             751: condition: 
              752: expr: 
               753: name: 
                754: name: sgdesc
                755: operator: ->
                756: name: grouping_type
               757: operator: !=
               758: name: GF_ISOM_SAMPLE_GROUP_SEIG
             759: block: 
              760: block_content: 
               761: continue: 
           762: if_stmt: 
            763: if: 
             764: condition: 
              765: expr: 
               766: name: 
                767: name: sgdesc
                768: operator: ->
                769: name: default_description_index
             770: block: 
              771: block_content: 
               772: expr_stmt: 
                773: expr: 
                 774: name: seig_entry
                 775: operator: =
                 776: call: 
                  777: name: gf_list_get
                  778: argument_list: 
                   779: argument: 
                    780: expr: 
                     781: name: 
                      782: name: sgdesc
                      783: operator: ->
                      784: name: group_descriptions
                   785: argument: 
                    786: expr: 
                     787: name: 
                      788: name: sgdesc
                      789: operator: ->
                      790: name: default_description_index
                     791: operator: -
                     792: literal: 1
            793: else: 
             794: block: 
              795: block_content: 
               796: expr_stmt: 
                797: expr: 
                 798: name: seig_entry
                 799: operator: =
                 800: call: 
                  801: name: gf_list_get
                  802: argument_list: 
                   803: argument: 
                    804: expr: 
                     805: name: 
                      806: name: sgdesc
                      807: operator: ->
                      808: name: group_descriptions
                   809: argument: 
                    810: expr: 
                     811: literal: 0
           812: if_stmt: 
            813: if: 
             814: condition: 
              815: expr: 
               816: operator: !
               817: name: 
                818: name: seig_entry
                819: operator: ->
                820: name: key_info
                821: index: 
                 822: expr: 
                  823: literal: 0
             824: block: 
              825: block_content: 
               826: expr_stmt: 
                827: expr: 
                 828: name: seig_entry
                 829: operator: =
                 830: name: NULL
           831: break: 
        832: if_stmt: 
         833: if: 
          834: condition: 
           835: expr: 
            836: name: seig_entry
          837: block: 
           838: block_content: 
            839: if_stmt: 
             840: if: 
              841: condition: 
               842: expr: 
                843: name: default_IsEncrypted
              844: block: 
               845: block_content: 
                846: expr_stmt: 
                 847: expr: 
                  848: operator: *
                  849: name: default_IsEncrypted
                  850: operator: =
                  851: name: 
                   852: name: seig_entry
                   853: operator: ->
                   854: name: IsProtected
            855: if_stmt: 
             856: if: 
              857: condition: 
               858: expr: 
                859: name: crypt_byte_block
              860: block: 
               861: block_content: 
                862: expr_stmt: 
                 863: expr: 
                  864: operator: *
                  865: name: crypt_byte_block
                  866: operator: =
                  867: name: 
                   868: name: seig_entry
                   869: operator: ->
                   870: name: crypt_byte_block
            871: if_stmt: 
             872: if: 
              873: condition: 
               874: expr: 
                875: name: skip_byte_block
              876: block: 
               877: block_content: 
                878: expr_stmt: 
                 879: expr: 
                  880: operator: *
                  881: name: skip_byte_block
                  882: operator: =
                  883: name: 
                   884: name: seig_entry
                   885: operator: ->
                   886: name: skip_byte_block
            887: if_stmt: 
             888: if: 
              889: condition: 
               890: expr: 
                891: name: key_info
              892: block: 
               893: block_content: 
                894: expr_stmt: 
                 895: expr: 
                  896: operator: *
                  897: name: key_info
                  898: operator: =
                  899: name: 
                   900: name: seig_entry
                   901: operator: ->
                   902: name: key_info
            903: if_stmt: 
             904: if: 
              905: condition: 
               906: expr: 
                907: name: key_info_size
              908: block: 
               909: block_content: 
                910: expr_stmt: 
                 911: expr: 
                  912: operator: *
                  913: name: key_info_size
                  914: operator: =
                  915: name: 
                   916: name: seig_entry
                   917: operator: ->
                   918: name: key_info_size
            919: if_stmt: 
             920: if: 
              921: condition: 
               922: expr: 
                923: name: container_type
              924: block: 
               925: block_content: 
                926: expr_stmt: 
                 927: expr: 
                  928: operator: *
                  929: name: container_type
                  930: operator: =
                  931: name: GF_ISOM_BOX_TYPE_SENC
         932: else: 
          933: block: 
           934: block_content: 
            935: if_stmt: 
             936: if: 
              937: condition: 
               938: expr: 
                939: operator: !
                940: name: 
                 941: name: trak
                 942: operator: ->
                 943: name: moov
                 944: operator: ->
                 945: name: mov
                 946: operator: ->
                 947: name: is_smooth
              948: block: 
               949: block_content: 
                950: expr_stmt: 
                 951: expr: 
                  952: name: 
                   953: name: trak
                   954: operator: ->
                   955: name: moov
                   956: operator: ->
                   957: name: mov
                   958: operator: ->
                   959: name: is_smooth
                  960: operator: =
                  961: name: GF_TRUE
                962: expr_stmt: 
                 963: expr: 
                  964: call: 
                   965: name: GF_LOG
                   966: argument_list: 
                    967: argument: 
                     968: expr: 
                      969: name: GF_LOG_WARNING
                    970: argument: 
                     971: expr: 
                      972: name: GF_LOG_CONTAINER
                    973: argument: 
                     974: expr: 
                      975: operator: (
                      976: literal: "[iso file] senc box without tenc, assuming MS smooth+piff\n"
                      977: operator: )
            978: if_stmt: 
             979: if: 
              980: condition: 
               981: expr: 
                982: name: default_IsEncrypted
              983: block: 
               984: block_content: 
                985: expr_stmt: 
                 986: expr: 
                  987: operator: *
                  988: name: default_IsEncrypted
                  989: operator: =
                  990: name: GF_TRUE
            991: comment: //set default value, overwritten below
            992: if_stmt: 
             993: if: 
              994: condition: 
               995: expr: 
                996: name: container_type
              997: block: 
               998: block_content: 
                999: expr_stmt: 
                 1000: expr: 
                  1001: operator: *
                  1002: name: container_type
                  1003: operator: =
                  1004: name: GF_ISOM_BOX_UUID_PSEC
    1005: if_stmt: 
     1006: if: 
      1007: condition: 
       1008: expr: 
        1009: name: container_type
        1010: operator: &&
        1011: name: 
         1012: name: trak
         1013: operator: ->
         1014: name: sample_encryption
      1015: block: 
       1016: block_content: 
        1017: if_stmt: 
         1018: if: 
          1019: condition: 
           1020: expr: 
            1021: name: 
             1022: name: trak
             1023: operator: ->
             1024: name: sample_encryption
             1025: operator: ->
             1026: name: type
            1027: operator: ==
            1028: name: GF_ISOM_BOX_TYPE_SENC
          1029: block: 
           1030: block_content: 
            1031: expr_stmt: 
             1032: expr: 
              1033: operator: *
              1034: name: container_type
              1035: operator: =
              1036: name: GF_ISOM_BOX_TYPE_SENC
         1037: if: 
          1038: condition: 
           1039: expr: 
            1040: name: 
             1041: name: trak
             1042: operator: ->
             1043: name: sample_encryption
             1044: operator: ->
             1045: name: type
            1046: operator: ==
            1047: name: GF_ISOM_BOX_TYPE_UUID
          1048: block: 
           1049: block_content: 
            1050: expr_stmt: 
             1051: expr: 
              1052: operator: *
              1053: name: container_type
              1054: operator: =
              1055: operator: (
              1056: operator: (
              1057: name: GF_UUIDBox
              1058: operator: *
              1059: operator: )
              1060: name: 
               1061: name: trak
               1062: operator: ->
               1063: name: sample_encryption
              1064: operator: )
              1065: operator: ->
              1066: name: internal_4cc

----------------------------------------
0: unit: 
 1: function: 
  2: type: 
   3: name: void
  4: name: gf_isom_cenc_get_default_info_internal
  5: parameter_list: 
   6: parameter: 
    7: decl: 
     8: type: 
      9: name: GF_TrackBox
      10: modifier: *
     11: name: trak
   12: parameter: 
    13: decl: 
     14: type: 
      15: name: u32
     16: name: sampleDescriptionIndex
   17: parameter: 
    18: decl: 
     19: type: 
      20: name: u32
      21: modifier: *
     22: name: container_type
   23: parameter: 
    24: decl: 
     25: type: 
      26: name: Bool
      27: modifier: *
     28: name: default_IsEncrypted
   29: parameter: 
    30: decl: 
     31: type: 
      32: name: u8
      33: modifier: *
     34: name: crypt_byte_block
   35: parameter: 
    36: decl: 
     37: type: 
      38: name: u8
      39: modifier: *
     40: name: skip_byte_block
   41: parameter: 
    42: decl: 
     43: type: 
      44: specifier: const
      45: name: u8
      46: modifier: *
      47: modifier: *
     48: name: key_info
   49: parameter: 
    50: decl: 
     51: type: 
      52: name: u32
      53: modifier: *
     54: name: key_info_size
  55: block: 
   56: block_content: 
    57: decl_stmt: 
     58: decl: 
      59: type: 
       60: name: GF_ProtectionSchemeInfoBox
       61: modifier: *
      62: name: sinf
    63: comment: //setup all default as not encrypted
    64: if_stmt: 
     65: if: 
      66: condition: 
       67: expr: 
        68: name: default_IsEncrypted
      69: block: 
       70: block_content: 
        71: expr_stmt: 
         72: expr: 
          73: operator: *
          74: name: default_IsEncrypted
          75: operator: =
          76: name: GF_FALSE
    77: if_stmt: 
     78: if: 
      79: condition: 
       80: expr: 
        81: name: crypt_byte_block
      82: block: 
       83: block_content: 
        84: expr_stmt: 
         85: expr: 
          86: operator: *
          87: name: crypt_byte_block
          88: operator: =
          89: literal: 0
    90: if_stmt: 
     91: if: 
      92: condition: 
       93: expr: 
        94: name: skip_byte_block
      95: block: 
       96: block_content: 
        97: expr_stmt: 
         98: expr: 
          99: operator: *
          100: name: skip_byte_block
          101: operator: =
          102: literal: 0
    103: if_stmt: 
     104: if: 
      105: condition: 
       106: expr: 
        107: name: container_type
      108: block: 
       109: block_content: 
        110: expr_stmt: 
         111: expr: 
          112: operator: *
          113: name: container_type
          114: operator: =
          115: literal: 0
    116: if_stmt: 
     117: if: 
      118: condition: 
       119: expr: 
        120: name: key_info
      121: block: 
       122: block_content: 
        123: expr_stmt: 
         124: expr: 
          125: operator: *
          126: name: key_info
          127: operator: =
          128: name: NULL
    129: if_stmt: 
     130: if: 
      131: condition: 
       132: expr: 
        133: name: key_info_size
      134: block: 
       135: block_content: 
        136: expr_stmt: 
         137: expr: 
          138: operator: *
          139: name: key_info_size
          140: operator: =
          141: literal: 0
    142: expr_stmt: 
     143: expr: 
      144: name: sinf
      145: operator: =
      146: call: 
       147: name: isom_get_sinf_entry
       148: argument_list: 
        149: argument: 
         150: expr: 
          151: name: trak
        152: argument: 
         153: expr: 
          154: name: sampleDescriptionIndex
        155: argument: 
         156: expr: 
          157: name: GF_ISOM_CENC_SCHEME
        158: argument: 
         159: expr: 
          160: name: NULL
    161: if_stmt: 
     162: if: 
      163: condition: 
       164: expr: 
        165: operator: !
        166: name: sinf
      167: block: 
       168: block_content: 
        169: expr_stmt: 
         170: expr: 
          171: name: sinf
          172: operator: =
          173: call: 
           174: name: isom_get_sinf_entry
           175: argument_list: 
            176: argument: 
             177: expr: 
              178: name: trak
            179: argument: 
             180: expr: 
              181: name: sampleDescriptionIndex
            182: argument: 
             183: expr: 
              184: name: GF_ISOM_CBC_SCHEME
            185: argument: 
             186: expr: 
              187: name: NULL
    188: if_stmt: 
     189: if: 
      190: condition: 
       191: expr: 
        192: operator: !
        193: name: sinf
      194: block: 
       195: block_content: 
        196: expr_stmt: 
         197: expr: 
          198: name: sinf
          199: operator: =
          200: call: 
           201: name: isom_get_sinf_entry
           202: argument_list: 
            203: argument: 
             204: expr: 
              205: name: trak
            206: argument: 
             207: expr: 
              208: name: sampleDescriptionIndex
            209: argument: 
             210: expr: 
              211: name: GF_ISOM_CENS_SCHEME
            212: argument: 
             213: expr: 
              214: name: NULL
    215: if_stmt: 
     216: if: 
      217: condition: 
       218: expr: 
        219: operator: !
        220: name: sinf
      221: block: 
       222: block_content: 
        223: expr_stmt: 
         224: expr: 
          225: name: sinf
          226: operator: =
          227: call: 
           228: name: isom_get_sinf_entry
           229: argument_list: 
            230: argument: 
             231: expr: 
              232: name: trak
            233: argument: 
             234: expr: 
              235: name: sampleDescriptionIndex
            236: argument: 
             237: expr: 
              238: name: GF_ISOM_CBCS_SCHEME
            239: argument: 
             240: expr: 
              241: name: NULL
    242: if_stmt: 
     243: if: 
      244: condition: 
       245: expr: 
        246: operator: !
        247: name: sinf
      248: block: 
       249: block_content: 
        250: expr_stmt: 
         251: expr: 
          252: name: sinf
          253: operator: =
          254: call: 
           255: name: isom_get_sinf_entry
           256: argument_list: 
            257: argument: 
             258: expr: 
              259: name: trak
            260: argument: 
             261: expr: 
              262: name: sampleDescriptionIndex
            263: argument: 
             264: expr: 
              265: name: GF_ISOM_PIFF_SCHEME
            266: argument: 
             267: expr: 
              268: name: NULL
    269: if_stmt: 
     270: if: 
      271: condition: 
       272: expr: 
        273: operator: !
        274: name: sinf
      275: block: 
       276: block_content: 
        277: decl_stmt: 
         278: decl: 
          279: type: 
           280: name: u32
          281: name: i
         282: decl: 
          283: type: 
          284: name: nb_stsd
          285: init: 
           286: expr: 
            287: call: 
             288: name: gf_list_count
             289: argument_list: 
              290: argument: 
               291: expr: 
                292: name: 
                 293: name: trak
                 294: operator: ->
                 295: name: Media
                 296: operator: ->
                 297: name: information
                 298: operator: ->
                 299: name: sampleTable
                 300: operator: ->
                 301: name: SampleDescription
                 302: operator: ->
                 303: name: child_boxes
        304: for: 
         305: control: 
          306: init: 
           307: expr: 
            308: name: i
            309: operator: =
            310: literal: 0
          311: condition: 
           312: expr: 
            313: name: i
            314: operator: <
            315: name: nb_stsd
          316: incr: 
           317: expr: 
            318: name: i
            319: operator: ++
         320: block: 
          321: block_content: 
           322: decl_stmt: 
            323: decl: 
             324: type: 
              325: name: GF_ProtectionSchemeInfoBox
              326: modifier: *
             327: name: a_sinf
           328: decl_stmt: 
            329: decl: 
             330: type: 
              331: name: GF_SampleEntryBox
              332: modifier: *
             333: name: sentry
             334: init: 
              335: expr: 
               336: name: NULL
           337: if_stmt: 
            338: if: 
             339: condition: 
              340: expr: 
               341: name: i
               342: operator: +
               343: literal: 1
               344: operator: ==
               345: name: sampleDescriptionIndex
             346: block: 
              347: block_content: 
               348: continue: 
           349: expr_stmt: 
            350: expr: 
             351: name: sentry
             352: operator: =
             353: call: 
              354: name: gf_list_get
              355: argument_list: 
               356: argument: 
                357: expr: 
                 358: name: 
                  359: name: trak
                  360: operator: ->
                  361: name: Media
                  362: operator: ->
                  363: name: information
                  364: operator: ->
                  365: name: sampleTable
                  366: operator: ->
                  367: name: SampleDescription
                  368: operator: ->
                  369: name: child_boxes
               370: argument: 
                371: expr: 
                 372: name: i
           373: expr_stmt: 
            374: expr: 
             375: name: a_sinf
             376: operator: =
             377: operator: (
             378: name: GF_ProtectionSchemeInfoBox
             379: operator: *
             380: operator: )
             381: call: 
              382: name: gf_isom_box_find_child
              383: argument_list: 
               384: argument: 
                385: expr: 
                 386: name: 
                  387: name: sentry
                  388: operator: ->
                  389: name: child_boxes
               390: argument: 
                391: expr: 
                 392: name: GF_ISOM_BOX_TYPE_SINF
           393: if_stmt: 
            394: if: 
             395: condition: 
              396: expr: 
               397: operator: !
               398: name: a_sinf
             399: block: 
              400: block_content: 
               401: continue: 
           402: comment: //signal default (not encrypted)
           403: return: 
    404: if_stmt: 
     405: if: 
      406: condition: 
       407: expr: 
        408: name: sinf
        409: operator: &&
        410: name: 
         411: name: sinf
         412: operator: ->
         413: name: info
        414: operator: &&
        415: name: 
         416: name: sinf
         417: operator: ->
         418: name: info
         419: operator: ->
         420: name: tenc
      421: block: 
       422: block_content: 
        423: if_stmt: 
         424: if: 
          425: condition: 
           426: expr: 
            427: name: default_IsEncrypted
          428: block: 
           429: block_content: 
            430: expr_stmt: 
             431: expr: 
              432: operator: *
              433: name: default_IsEncrypted
              434: operator: =
              435: name: 
               436: name: sinf
               437: operator: ->
               438: name: info
               439: operator: ->
               440: name: tenc
               441: operator: ->
               442: name: isProtected
        443: if_stmt: 
         444: if: 
          445: condition: 
           446: expr: 
            447: name: crypt_byte_block
          448: block: 
           449: block_content: 
            450: expr_stmt: 
             451: expr: 
              452: operator: *
              453: name: crypt_byte_block
              454: operator: =
              455: name: 
               456: name: sinf
               457: operator: ->
               458: name: info
               459: operator: ->
               460: name: tenc
               461: operator: ->
               462: name: crypt_byte_block
        463: if_stmt: 
         464: if: 
          465: condition: 
           466: expr: 
            467: name: skip_byte_block
          468: block: 
           469: block_content: 
            470: expr_stmt: 
             471: expr: 
              472: operator: *
              473: name: skip_byte_block
              474: operator: =
              475: name: 
               476: name: sinf
               477: operator: ->
               478: name: info
               479: operator: ->
               480: name: tenc
               481: operator: ->
               482: name: skip_byte_block
        483: if_stmt: 
         484: if: 
          485: condition: 
           486: expr: 
            487: name: key_info
          488: block: 
           489: block_content: 
            490: expr_stmt: 
             491: expr: 
              492: operator: *
              493: name: key_info
              494: operator: =
              495: name: 
               496: name: sinf
               497: operator: ->
               498: name: info
               499: operator: ->
               500: name: tenc
               501: operator: ->
               502: name: key_info
        503: if_stmt: 
         504: if: 
          505: condition: 
           506: expr: 
            507: name: key_info_size
          508: block: 
           509: block_content: 
            510: expr_stmt: 
             511: expr: 
              512: operator: *
              513: name: key_info_size
              514: operator: =
              515: literal: 20
            516: if_stmt: 
             517: if: 
              518: condition: 
               519: expr: 
                520: operator: !
                521: name: 
                 522: name: sinf
                 523: operator: ->
                 524: name: info
                 525: operator: ->
                 526: name: tenc
                 527: operator: ->
                 528: name: key_info
                 529: index: 
                  530: expr: 
                   531: literal: 3
              532: block: 
               533: block_content: 
                534: expr_stmt: 
                 535: expr: 
                  536: operator: *
                  537: name: key_info_size
                  538: operator: +=
                  539: literal: 1
                  540: operator: +
                  541: name: 
                   542: name: sinf
                   543: operator: ->
                   544: name: info
                   545: operator: ->
                   546: name: tenc
                   547: operator: ->
                   548: name: key_info
                   549: index: 
                    550: expr: 
                     551: literal: 20
        552: comment: //set default value, overwritten below
        553: if_stmt: 
         554: if: 
          555: condition: 
           556: expr: 
            557: name: container_type
          558: block: 
           559: block_content: 
            560: expr_stmt: 
             561: expr: 
              562: operator: *
              563: name: container_type
              564: operator: =
              565: name: GF_ISOM_BOX_TYPE_SENC
     566: if: 
      567: condition: 
       568: expr: 
        569: name: sinf
        570: operator: &&
        571: name: 
         572: name: sinf
         573: operator: ->
         574: name: info
        575: operator: &&
        576: name: 
         577: name: sinf
         578: operator: ->
         579: name: info
         580: operator: ->
         581: name: piff_tenc
      582: block: 
       583: block_content: 
        584: if_stmt: 
         585: if: 
          586: condition: 
           587: expr: 
            588: name: default_IsEncrypted
          589: block: 
           590: block_content: 
            591: expr_stmt: 
             592: expr: 
              593: operator: *
              594: name: default_IsEncrypted
              595: operator: =
              596: name: GF_TRUE
        597: if_stmt: 
         598: if: 
          599: condition: 
           600: expr: 
            601: name: key_info
          602: block: 
           603: block_content: 
            604: expr_stmt: 
             605: expr: 
              606: operator: *
              607: name: key_info
              608: operator: =
              609: name: 
               610: name: sinf
               611: operator: ->
               612: name: info
               613: operator: ->
               614: name: piff_tenc
               615: operator: ->
               616: name: key_info
        617: if_stmt: 
         618: if: 
          619: condition: 
           620: expr: 
            621: name: key_info_size
          622: block: 
           623: block_content: 
            624: expr_stmt: 
             625: expr: 
              626: operator: *
              627: name: key_info_size
              628: operator: =
              629: literal: 19
        630: comment: //set default value, overwritten below
        631: if_stmt: 
         632: if: 
          633: condition: 
           634: expr: 
            635: name: container_type
          636: block: 
           637: block_content: 
            638: expr_stmt: 
             639: expr: 
              640: operator: *
              641: name: container_type
              642: operator: =
              643: name: GF_ISOM_BOX_UUID_PSEC
     644: else: 
      645: block: 
       646: block_content: 
        647: decl_stmt: 
         648: decl: 
          649: type: 
           650: name: u32
          651: name: i
         652: decl: 
          653: type: 
          654: name: count
          655: init: 
           656: expr: 
            657: literal: 0
        658: decl_stmt: 
         659: decl: 
          660: type: 
           661: name: GF_CENCSampleEncryptionGroupEntry
           662: modifier: *
          663: name: seig_entry
          664: init: 
           665: expr: 
            666: name: NULL
        667: if_stmt: 
         668: if: 
          669: condition: 
           670: expr: 
            671: operator: !
            672: name: 
             673: name: trak
             674: operator: ->
             675: name: moov
             676: operator: ->
             677: name: mov
             678: operator: ->
             679: name: is_smooth
          680: block: 
           681: block_content: 
            682: expr_stmt: 
             683: expr: 
              684: name: count
              685: operator: =
              686: call: 
               687: name: gf_list_count
               688: argument_list: 
                689: argument: 
                 690: expr: 
                  691: name: 
                   692: name: trak
                   693: operator: ->
                   694: name: Media
                   695: operator: ->
                   696: name: information
                   697: operator: ->
                   698: name: sampleTable
                   699: operator: ->
                   700: name: sampleGroupsDescription
        701: for: 
         702: control: 
          703: init: 
           704: expr: 
            705: name: i
            706: operator: =
            707: literal: 0
          708: condition: 
           709: expr: 
            710: name: i
            711: operator: <
            712: name: count
          713: incr: 
           714: expr: 
            715: name: i
            716: operator: ++
         717: block: 
          718: block_content: 
           719: decl_stmt: 
            720: decl: 
             721: type: 
              722: name: GF_SampleGroupDescriptionBox
              723: modifier: *
             724: name: sgdesc
             725: init: 
              726: expr: 
               727: operator: (
               728: name: GF_SampleGroupDescriptionBox
               729: operator: *
               730: operator: )
               731: call: 
                732: name: gf_list_get
                733: argument_list: 
                 734: argument: 
                  735: expr: 
                   736: name: 
                    737: name: trak
                    738: operator: ->
                    739: name: Media
                    740: operator: ->
                    741: name: information
                    742: operator: ->
                    743: name: sampleTable
                    744: operator: ->
                    745: name: sampleGroupsDescription
                 746: argument: 
                  747: expr: 
                   748: name: i
           749: if_stmt: 
            750: if: 
             751: condition: 
              752: expr: 
               753: name: 
                754: name: sgdesc
                755: operator: ->
                756: name: grouping_type
               757: operator: !=
               758: name: GF_ISOM_SAMPLE_GROUP_SEIG
             759: block: 
              760: block_content: 
               761: continue: 
           762: if_stmt: 
            763: if: 
             764: condition: 
              765: expr: 
               766: name: 
                767: name: sgdesc
                768: operator: ->
                769: name: default_description_index
             770: block: 
              771: block_content: 
               772: expr_stmt: 
                773: expr: 
                 774: name: seig_entry
                 775: operator: =
                 776: call: 
                  777: name: gf_list_get
                  778: argument_list: 
                   779: argument: 
                    780: expr: 
                     781: name: 
                      782: name: sgdesc
                      783: operator: ->
                      784: name: group_descriptions
                   785: argument: 
                    786: expr: 
                     787: name: 
                      788: name: sgdesc
                      789: operator: ->
                      790: name: default_description_index
                     791: operator: -
                     792: literal: 1
            793: else: 
             794: block: 
              795: block_content: 
               796: expr_stmt: 
                797: expr: 
                 798: name: seig_entry
                 799: operator: =
                 800: call: 
                  801: name: gf_list_get
                  802: argument_list: 
                   803: argument: 
                    804: expr: 
                     805: name: 
                      806: name: sgdesc
                      807: operator: ->
                      808: name: group_descriptions
                   809: argument: 
                    810: expr: 
                     811: literal: 0
           812: if_stmt: 
            813: if: 
             814: condition: 
              815: expr: 
               816: name: seig_entry
               817: operator: &&
               818: operator: !
               819: name: 
                820: name: seig_entry
                821: operator: ->
                822: name: key_info
                823: index: 
                 824: expr: 
                  825: literal: 0
             826: block: 
              827: block_content: 
               828: expr_stmt: 
                829: expr: 
                 830: name: seig_entry
                 831: operator: =
                 832: name: NULL
           833: break: 
        834: if_stmt: 
         835: if: 
          836: condition: 
           837: expr: 
            838: name: seig_entry
          839: block: 
           840: block_content: 
            841: if_stmt: 
             842: if: 
              843: condition: 
               844: expr: 
                845: name: default_IsEncrypted
              846: block: 
               847: block_content: 
                848: expr_stmt: 
                 849: expr: 
                  850: operator: *
                  851: name: default_IsEncrypted
                  852: operator: =
                  853: name: 
                   854: name: seig_entry
                   855: operator: ->
                   856: name: IsProtected
            857: if_stmt: 
             858: if: 
              859: condition: 
               860: expr: 
                861: name: crypt_byte_block
              862: block: 
               863: block_content: 
                864: expr_stmt: 
                 865: expr: 
                  866: operator: *
                  867: name: crypt_byte_block
                  868: operator: =
                  869: name: 
                   870: name: seig_entry
                   871: operator: ->
                   872: name: crypt_byte_block
            873: if_stmt: 
             874: if: 
              875: condition: 
               876: expr: 
                877: name: skip_byte_block
              878: block: 
               879: block_content: 
                880: expr_stmt: 
                 881: expr: 
                  882: operator: *
                  883: name: skip_byte_block
                  884: operator: =
                  885: name: 
                   886: name: seig_entry
                   887: operator: ->
                   888: name: skip_byte_block
            889: if_stmt: 
             890: if: 
              891: condition: 
               892: expr: 
                893: name: key_info
              894: block: 
               895: block_content: 
                896: expr_stmt: 
                 897: expr: 
                  898: operator: *
                  899: name: key_info
                  900: operator: =
                  901: name: 
                   902: name: seig_entry
                   903: operator: ->
                   904: name: key_info
            905: if_stmt: 
             906: if: 
              907: condition: 
               908: expr: 
                909: name: key_info_size
              910: block: 
               911: block_content: 
                912: expr_stmt: 
                 913: expr: 
                  914: operator: *
                  915: name: key_info_size
                  916: operator: =
                  917: name: 
                   918: name: seig_entry
                   919: operator: ->
                   920: name: key_info_size
            921: if_stmt: 
             922: if: 
              923: condition: 
               924: expr: 
                925: name: container_type
              926: block: 
               927: block_content: 
                928: expr_stmt: 
                 929: expr: 
                  930: operator: *
                  931: name: container_type
                  932: operator: =
                  933: name: GF_ISOM_BOX_TYPE_SENC
         934: else: 
          935: block: 
           936: block_content: 
            937: if_stmt: 
             938: if: 
              939: condition: 
               940: expr: 
                941: operator: !
                942: name: 
                 943: name: trak
                 944: operator: ->
                 945: name: moov
                 946: operator: ->
                 947: name: mov
                 948: operator: ->
                 949: name: is_smooth
              950: block: 
               951: block_content: 
                952: expr_stmt: 
                 953: expr: 
                  954: name: 
                   955: name: trak
                   956: operator: ->
                   957: name: moov
                   958: operator: ->
                   959: name: mov
                   960: operator: ->
                   961: name: is_smooth
                  962: operator: =
                  963: name: GF_TRUE
                964: expr_stmt: 
                 965: expr: 
                  966: call: 
                   967: name: GF_LOG
                   968: argument_list: 
                    969: argument: 
                     970: expr: 
                      971: name: GF_LOG_WARNING
                    972: argument: 
                     973: expr: 
                      974: name: GF_LOG_CONTAINER
                    975: argument: 
                     976: expr: 
                      977: operator: (
                      978: literal: "[iso file] senc box without tenc, assuming MS smooth+piff\n"
                      979: operator: )
            980: if_stmt: 
             981: if: 
              982: condition: 
               983: expr: 
                984: name: default_IsEncrypted
              985: block: 
               986: block_content: 
                987: expr_stmt: 
                 988: expr: 
                  989: operator: *
                  990: name: default_IsEncrypted
                  991: operator: =
                  992: name: GF_TRUE
            993: comment: //set default value, overwritten below
            994: if_stmt: 
             995: if: 
              996: condition: 
               997: expr: 
                998: name: container_type
              999: block: 
               1000: block_content: 
                1001: expr_stmt: 
                 1002: expr: 
                  1003: operator: *
                  1004: name: container_type
                  1005: operator: =
                  1006: name: GF_ISOM_BOX_UUID_PSEC
    1007: if_stmt: 
     1008: if: 
      1009: condition: 
       1010: expr: 
        1011: name: container_type
        1012: operator: &&
        1013: name: 
         1014: name: trak
         1015: operator: ->
         1016: name: sample_encryption
      1017: block: 
       1018: block_content: 
        1019: if_stmt: 
         1020: if: 
          1021: condition: 
           1022: expr: 
            1023: name: 
             1024: name: trak
             1025: operator: ->
             1026: name: sample_encryption
             1027: operator: ->
             1028: name: type
            1029: operator: ==
            1030: name: GF_ISOM_BOX_TYPE_SENC
          1031: block: 
           1032: block_content: 
            1033: expr_stmt: 
             1034: expr: 
              1035: operator: *
              1036: name: container_type
              1037: operator: =
              1038: name: GF_ISOM_BOX_TYPE_SENC
         1039: if: 
          1040: condition: 
           1041: expr: 
            1042: name: 
             1043: name: trak
             1044: operator: ->
             1045: name: sample_encryption
             1046: operator: ->
             1047: name: type
            1048: operator: ==
            1049: name: GF_ISOM_BOX_TYPE_UUID
          1050: block: 
           1051: block_content: 
            1052: expr_stmt: 
             1053: expr: 
              1054: operator: *
              1055: name: container_type
              1056: operator: =
              1057: operator: (
              1058: operator: (
              1059: name: GF_UUIDBox
              1060: operator: *
              1061: operator: )
              1062: name: 
               1063: name: trak
               1064: operator: ->
               1065: name: sample_encryption
              1066: operator: )
              1067: operator: ->
              1068: name: internal_4cc
=====
0: function: 
 1: type: 
  2: name: void
 3: name: gf_isom_cenc_get_default_info_internal
 4: parameter_list: 
  5: parameter: 
   6: decl: 
    7: type: 
     8: name: GF_TrackBox
     9: modifier: *
    10: name: trak
  11: parameter: 
   12: decl: 
    13: type: 
     14: name: u32
    15: name: sampleDescriptionIndex
  16: parameter: 
   17: decl: 
    18: type: 
     19: name: u32
     20: modifier: *
    21: name: container_type
  22: parameter: 
   23: decl: 
    24: type: 
     25: name: Bool
     26: modifier: *
    27: name: default_IsEncrypted
  28: parameter: 
   29: decl: 
    30: type: 
     31: name: u8
     32: modifier: *
    33: name: crypt_byte_block
  34: parameter: 
   35: decl: 
    36: type: 
     37: name: u8
     38: modifier: *
    39: name: skip_byte_block
  40: parameter: 
   41: decl: 
    42: type: 
     43: specifier: const
     44: name: u8
     45: modifier: *
     46: modifier: *
    47: name: key_info
  48: parameter: 
   49: decl: 
    50: type: 
     51: name: u32
     52: modifier: *
    53: name: key_info_size
 54: block: 
  55: block_content: 
   56: decl_stmt: 
    57: decl: 
     58: type: 
      59: name: GF_ProtectionSchemeInfoBox
      60: modifier: *
     61: name: sinf
   62: comment: //setup all default as not encrypted
   63: if_stmt: 
    64: if: 
     65: condition: 
      66: expr: 
       67: name: default_IsEncrypted
     68: block: 
      69: block_content: 
       70: expr_stmt: 
        71: expr: 
         72: operator: *
         73: name: default_IsEncrypted
         74: operator: =
         75: name: GF_FALSE
   76: if_stmt: 
    77: if: 
     78: condition: 
      79: expr: 
       80: name: crypt_byte_block
     81: block: 
      82: block_content: 
       83: expr_stmt: 
        84: expr: 
         85: operator: *
         86: name: crypt_byte_block
         87: operator: =
         88: literal: 0
   89: if_stmt: 
    90: if: 
     91: condition: 
      92: expr: 
       93: name: skip_byte_block
     94: block: 
      95: block_content: 
       96: expr_stmt: 
        97: expr: 
         98: operator: *
         99: name: skip_byte_block
         100: operator: =
         101: literal: 0
   102: if_stmt: 
    103: if: 
     104: condition: 
      105: expr: 
       106: name: container_type
     107: block: 
      108: block_content: 
       109: expr_stmt: 
        110: expr: 
         111: operator: *
         112: name: container_type
         113: operator: =
         114: literal: 0
   115: if_stmt: 
    116: if: 
     117: condition: 
      118: expr: 
       119: name: key_info
     120: block: 
      121: block_content: 
       122: expr_stmt: 
        123: expr: 
         124: operator: *
         125: name: key_info
         126: operator: =
         127: name: NULL
   128: if_stmt: 
    129: if: 
     130: condition: 
      131: expr: 
       132: name: key_info_size
     133: block: 
      134: block_content: 
       135: expr_stmt: 
        136: expr: 
         137: operator: *
         138: name: key_info_size
         139: operator: =
         140: literal: 0
   141: expr_stmt: 
    142: expr: 
     143: name: sinf
     144: operator: =
     145: call: 
      146: name: isom_get_sinf_entry
      147: argument_list: 
       148: argument: 
        149: expr: 
         150: name: trak
       151: argument: 
        152: expr: 
         153: name: sampleDescriptionIndex
       154: argument: 
        155: expr: 
         156: name: GF_ISOM_CENC_SCHEME
       157: argument: 
        158: expr: 
         159: name: NULL
   160: if_stmt: 
    161: if: 
     162: condition: 
      163: expr: 
       164: operator: !
       165: name: sinf
     166: block: 
      167: block_content: 
       168: expr_stmt: 
        169: expr: 
         170: name: sinf
         171: operator: =
         172: call: 
          173: name: isom_get_sinf_entry
          174: argument_list: 
           175: argument: 
            176: expr: 
             177: name: trak
           178: argument: 
            179: expr: 
             180: name: sampleDescriptionIndex
           181: argument: 
            182: expr: 
             183: name: GF_ISOM_CBC_SCHEME
           184: argument: 
            185: expr: 
             186: name: NULL
   187: if_stmt: 
    188: if: 
     189: condition: 
      190: expr: 
       191: operator: !
       192: name: sinf
     193: block: 
      194: block_content: 
       195: expr_stmt: 
        196: expr: 
         197: name: sinf
         198: operator: =
         199: call: 
          200: name: isom_get_sinf_entry
          201: argument_list: 
           202: argument: 
            203: expr: 
             204: name: trak
           205: argument: 
            206: expr: 
             207: name: sampleDescriptionIndex
           208: argument: 
            209: expr: 
             210: name: GF_ISOM_CENS_SCHEME
           211: argument: 
            212: expr: 
             213: name: NULL
   214: if_stmt: 
    215: if: 
     216: condition: 
      217: expr: 
       218: operator: !
       219: name: sinf
     220: block: 
      221: block_content: 
       222: expr_stmt: 
        223: expr: 
         224: name: sinf
         225: operator: =
         226: call: 
          227: name: isom_get_sinf_entry
          228: argument_list: 
           229: argument: 
            230: expr: 
             231: name: trak
           232: argument: 
            233: expr: 
             234: name: sampleDescriptionIndex
           235: argument: 
            236: expr: 
             237: name: GF_ISOM_CBCS_SCHEME
           238: argument: 
            239: expr: 
             240: name: NULL
   241: if_stmt: 
    242: if: 
     243: condition: 
      244: expr: 
       245: operator: !
       246: name: sinf
     247: block: 
      248: block_content: 
       249: expr_stmt: 
        250: expr: 
         251: name: sinf
         252: operator: =
         253: call: 
          254: name: isom_get_sinf_entry
          255: argument_list: 
           256: argument: 
            257: expr: 
             258: name: trak
           259: argument: 
            260: expr: 
             261: name: sampleDescriptionIndex
           262: argument: 
            263: expr: 
             264: name: GF_ISOM_PIFF_SCHEME
           265: argument: 
            266: expr: 
             267: name: NULL
   268: if_stmt: 
    269: if: 
     270: condition: 
      271: expr: 
       272: operator: !
       273: name: sinf
     274: block: 
      275: block_content: 
       276: decl_stmt: 
        277: decl: 
         278: type: 
          279: name: u32
         280: name: i
        281: decl: 
         282: type: 
         283: name: nb_stsd
         284: init: 
          285: expr: 
           286: call: 
            287: name: gf_list_count
            288: argument_list: 
             289: argument: 
              290: expr: 
               291: name: 
                292: name: trak
                293: operator: ->
                294: name: Media
                295: operator: ->
                296: name: information
                297: operator: ->
                298: name: sampleTable
                299: operator: ->
                300: name: SampleDescription
                301: operator: ->
                302: name: child_boxes
       303: for: 
        304: control: 
         305: init: 
          306: expr: 
           307: name: i
           308: operator: =
           309: literal: 0
         310: condition: 
          311: expr: 
           312: name: i
           313: operator: <
           314: name: nb_stsd
         315: incr: 
          316: expr: 
           317: name: i
           318: operator: ++
        319: block: 
         320: block_content: 
          321: decl_stmt: 
           322: decl: 
            323: type: 
             324: name: GF_ProtectionSchemeInfoBox
             325: modifier: *
            326: name: a_sinf
          327: decl_stmt: 
           328: decl: 
            329: type: 
             330: name: GF_SampleEntryBox
             331: modifier: *
            332: name: sentry
            333: init: 
             334: expr: 
              335: name: NULL
          336: if_stmt: 
           337: if: 
            338: condition: 
             339: expr: 
              340: name: i
              341: operator: +
              342: literal: 1
              343: operator: ==
              344: name: sampleDescriptionIndex
            345: block: 
             346: block_content: 
              347: continue: 
          348: expr_stmt: 
           349: expr: 
            350: name: sentry
            351: operator: =
            352: call: 
             353: name: gf_list_get
             354: argument_list: 
              355: argument: 
               356: expr: 
                357: name: 
                 358: name: trak
                 359: operator: ->
                 360: name: Media
                 361: operator: ->
                 362: name: information
                 363: operator: ->
                 364: name: sampleTable
                 365: operator: ->
                 366: name: SampleDescription
                 367: operator: ->
                 368: name: child_boxes
              369: argument: 
               370: expr: 
                371: name: i
          372: expr_stmt: 
           373: expr: 
            374: name: a_sinf
            375: operator: =
            376: operator: (
            377: name: GF_ProtectionSchemeInfoBox
            378: operator: *
            379: operator: )
            380: call: 
             381: name: gf_isom_box_find_child
             382: argument_list: 
              383: argument: 
               384: expr: 
                385: name: 
                 386: name: sentry
                 387: operator: ->
                 388: name: child_boxes
              389: argument: 
               390: expr: 
                391: name: GF_ISOM_BOX_TYPE_SINF
          392: if_stmt: 
           393: if: 
            394: condition: 
             395: expr: 
              396: operator: !
              397: name: a_sinf
            398: block: 
             399: block_content: 
              400: continue: 
          401: comment: //signal default (not encrypted)
          402: return: 
   403: if_stmt: 
    404: if: 
     405: condition: 
      406: expr: 
       407: name: sinf
       408: operator: &&
       409: name: 
        410: name: sinf
        411: operator: ->
        412: name: info
       413: operator: &&
       414: name: 
        415: name: sinf
        416: operator: ->
        417: name: info
        418: operator: ->
        419: name: tenc
     420: block: 
      421: block_content: 
       422: if_stmt: 
        423: if: 
         424: condition: 
          425: expr: 
           426: name: default_IsEncrypted
         427: block: 
          428: block_content: 
           429: expr_stmt: 
            430: expr: 
             431: operator: *
             432: name: default_IsEncrypted
             433: operator: =
             434: name: 
              435: name: sinf
              436: operator: ->
              437: name: info
              438: operator: ->
              439: name: tenc
              440: operator: ->
              441: name: isProtected
       442: if_stmt: 
        443: if: 
         444: condition: 
          445: expr: 
           446: name: crypt_byte_block
         447: block: 
          448: block_content: 
           449: expr_stmt: 
            450: expr: 
             451: operator: *
             452: name: crypt_byte_block
             453: operator: =
             454: name: 
              455: name: sinf
              456: operator: ->
              457: name: info
              458: operator: ->
              459: name: tenc
              460: operator: ->
              461: name: crypt_byte_block
       462: if_stmt: 
        463: if: 
         464: condition: 
          465: expr: 
           466: name: skip_byte_block
         467: block: 
          468: block_content: 
           469: expr_stmt: 
            470: expr: 
             471: operator: *
             472: name: skip_byte_block
             473: operator: =
             474: name: 
              475: name: sinf
              476: operator: ->
              477: name: info
              478: operator: ->
              479: name: tenc
              480: operator: ->
              481: name: skip_byte_block
       482: if_stmt: 
        483: if: 
         484: condition: 
          485: expr: 
           486: name: key_info
         487: block: 
          488: block_content: 
           489: expr_stmt: 
            490: expr: 
             491: operator: *
             492: name: key_info
             493: operator: =
             494: name: 
              495: name: sinf
              496: operator: ->
              497: name: info
              498: operator: ->
              499: name: tenc
              500: operator: ->
              501: name: key_info
       502: if_stmt: 
        503: if: 
         504: condition: 
          505: expr: 
           506: name: key_info_size
         507: block: 
          508: block_content: 
           509: expr_stmt: 
            510: expr: 
             511: operator: *
             512: name: key_info_size
             513: operator: =
             514: literal: 20
           515: if_stmt: 
            516: if: 
             517: condition: 
              518: expr: 
               519: operator: !
               520: name: 
                521: name: sinf
                522: operator: ->
                523: name: info
                524: operator: ->
                525: name: tenc
                526: operator: ->
                527: name: key_info
                528: index: 
                 529: expr: 
                  530: literal: 3
             531: block: 
              532: block_content: 
               533: expr_stmt: 
                534: expr: 
                 535: operator: *
                 536: name: key_info_size
                 537: operator: +=
                 538: literal: 1
                 539: operator: +
                 540: name: 
                  541: name: sinf
                  542: operator: ->
                  543: name: info
                  544: operator: ->
                  545: name: tenc
                  546: operator: ->
                  547: name: key_info
                  548: index: 
                   549: expr: 
                    550: literal: 20
       551: comment: //set default value, overwritten below
       552: if_stmt: 
        553: if: 
         554: condition: 
          555: expr: 
           556: name: container_type
         557: block: 
          558: block_content: 
           559: expr_stmt: 
            560: expr: 
             561: operator: *
             562: name: container_type
             563: operator: =
             564: name: GF_ISOM_BOX_TYPE_SENC
    565: if: 
     566: condition: 
      567: expr: 
       568: name: sinf
       569: operator: &&
       570: name: 
        571: name: sinf
        572: operator: ->
        573: name: info
       574: operator: &&
       575: name: 
        576: name: sinf
        577: operator: ->
        578: name: info
        579: operator: ->
        580: name: piff_tenc
     581: block: 
      582: block_content: 
       583: if_stmt: 
        584: if: 
         585: condition: 
          586: expr: 
           587: name: default_IsEncrypted
         588: block: 
          589: block_content: 
           590: expr_stmt: 
            591: expr: 
             592: operator: *
             593: name: default_IsEncrypted
             594: operator: =
             595: name: GF_TRUE
       596: if_stmt: 
        597: if: 
         598: condition: 
          599: expr: 
           600: name: key_info
         601: block: 
          602: block_content: 
           603: expr_stmt: 
            604: expr: 
             605: operator: *
             606: name: key_info
             607: operator: =
             608: name: 
              609: name: sinf
              610: operator: ->
              611: name: info
              612: operator: ->
              613: name: piff_tenc
              614: operator: ->
              615: name: key_info
       616: if_stmt: 
        617: if: 
         618: condition: 
          619: expr: 
           620: name: key_info_size
         621: block: 
          622: block_content: 
           623: expr_stmt: 
            624: expr: 
             625: operator: *
             626: name: key_info_size
             627: operator: =
             628: literal: 19
       629: comment: //set default value, overwritten below
       630: if_stmt: 
        631: if: 
         632: condition: 
          633: expr: 
           634: name: container_type
         635: block: 
          636: block_content: 
           637: expr_stmt: 
            638: expr: 
             639: operator: *
             640: name: container_type
             641: operator: =
             642: name: GF_ISOM_BOX_UUID_PSEC
    643: else: 
     644: block: 
      645: block_content: 
       646: decl_stmt: 
        647: decl: 
         648: type: 
          649: name: u32
         650: name: i
        651: decl: 
         652: type: 
         653: name: count
         654: init: 
          655: expr: 
           656: literal: 0
       657: decl_stmt: 
        658: decl: 
         659: type: 
          660: name: GF_CENCSampleEncryptionGroupEntry
          661: modifier: *
         662: name: seig_entry
         663: init: 
          664: expr: 
           665: name: NULL
       666: if_stmt: 
        667: if: 
         668: condition: 
          669: expr: 
           670: operator: !
           671: name: 
            672: name: trak
            673: operator: ->
            674: name: moov
            675: operator: ->
            676: name: mov
            677: operator: ->
            678: name: is_smooth
         679: block: 
          680: block_content: 
           681: expr_stmt: 
            682: expr: 
             683: name: count
             684: operator: =
             685: call: 
              686: name: gf_list_count
              687: argument_list: 
               688: argument: 
                689: expr: 
                 690: name: 
                  691: name: trak
                  692: operator: ->
                  693: name: Media
                  694: operator: ->
                  695: name: information
                  696: operator: ->
                  697: name: sampleTable
                  698: operator: ->
                  699: name: sampleGroupsDescription
       700: for: 
        701: control: 
         702: init: 
          703: expr: 
           704: name: i
           705: operator: =
           706: literal: 0
         707: condition: 
          708: expr: 
           709: name: i
           710: operator: <
           711: name: count
         712: incr: 
          713: expr: 
           714: name: i
           715: operator: ++
        716: block: 
         717: block_content: 
          718: decl_stmt: 
           719: decl: 
            720: type: 
             721: name: GF_SampleGroupDescriptionBox
             722: modifier: *
            723: name: sgdesc
            724: init: 
             725: expr: 
              726: operator: (
              727: name: GF_SampleGroupDescriptionBox
              728: operator: *
              729: operator: )
              730: call: 
               731: name: gf_list_get
               732: argument_list: 
                733: argument: 
                 734: expr: 
                  735: name: 
                   736: name: trak
                   737: operator: ->
                   738: name: Media
                   739: operator: ->
                   740: name: information
                   741: operator: ->
                   742: name: sampleTable
                   743: operator: ->
                   744: name: sampleGroupsDescription
                745: argument: 
                 746: expr: 
                  747: name: i
          748: if_stmt: 
           749: if: 
            750: condition: 
             751: expr: 
              752: name: 
               753: name: sgdesc
               754: operator: ->
               755: name: grouping_type
              756: operator: !=
              757: name: GF_ISOM_SAMPLE_GROUP_SEIG
            758: block: 
             759: block_content: 
              760: continue: 
          761: if_stmt: 
           762: if: 
            763: condition: 
             764: expr: 
              765: name: 
               766: name: sgdesc
               767: operator: ->
               768: name: default_description_index
            769: block: 
             770: block_content: 
              771: expr_stmt: 
               772: expr: 
                773: name: seig_entry
                774: operator: =
                775: call: 
                 776: name: gf_list_get
                 777: argument_list: 
                  778: argument: 
                   779: expr: 
                    780: name: 
                     781: name: sgdesc
                     782: operator: ->
                     783: name: group_descriptions
                  784: argument: 
                   785: expr: 
                    786: name: 
                     787: name: sgdesc
                     788: operator: ->
                     789: name: default_description_index
                    790: operator: -
                    791: literal: 1
           792: else: 
            793: block: 
             794: block_content: 
              795: expr_stmt: 
               796: expr: 
                797: name: seig_entry
                798: operator: =
                799: call: 
                 800: name: gf_list_get
                 801: argument_list: 
                  802: argument: 
                   803: expr: 
                    804: name: 
                     805: name: sgdesc
                     806: operator: ->
                     807: name: group_descriptions
                  808: argument: 
                   809: expr: 
                    810: literal: 0
          811: if_stmt: 
           812: if: 
            813: condition: 
             814: expr: 
              815: operator: !
              816: name: 
               817: name: seig_entry
               818: operator: ->
               819: name: key_info
               820: index: 
                821: expr: 
                 822: literal: 0
            823: block: 
             824: block_content: 
              825: expr_stmt: 
               826: expr: 
                827: name: seig_entry
                828: operator: =
                829: name: NULL
          830: break: 
       831: if_stmt: 
        832: if: 
         833: condition: 
          834: expr: 
           835: name: seig_entry
         836: block: 
          837: block_content: 
           838: if_stmt: 
            839: if: 
             840: condition: 
              841: expr: 
               842: name: default_IsEncrypted
             843: block: 
              844: block_content: 
               845: expr_stmt: 
                846: expr: 
                 847: operator: *
                 848: name: default_IsEncrypted
                 849: operator: =
                 850: name: 
                  851: name: seig_entry
                  852: operator: ->
                  853: name: IsProtected
           854: if_stmt: 
            855: if: 
             856: condition: 
              857: expr: 
               858: name: crypt_byte_block
             859: block: 
              860: block_content: 
               861: expr_stmt: 
                862: expr: 
                 863: operator: *
                 864: name: crypt_byte_block
                 865: operator: =
                 866: name: 
                  867: name: seig_entry
                  868: operator: ->
                  869: name: crypt_byte_block
           870: if_stmt: 
            871: if: 
             872: condition: 
              873: expr: 
               874: name: skip_byte_block
             875: block: 
              876: block_content: 
               877: expr_stmt: 
                878: expr: 
                 879: operator: *
                 880: name: skip_byte_block
                 881: operator: =
                 882: name: 
                  883: name: seig_entry
                  884: operator: ->
                  885: name: skip_byte_block
           886: if_stmt: 
            887: if: 
             888: condition: 
              889: expr: 
               890: name: key_info
             891: block: 
              892: block_content: 
               893: expr_stmt: 
                894: expr: 
                 895: operator: *
                 896: name: key_info
                 897: operator: =
                 898: name: 
                  899: name: seig_entry
                  900: operator: ->
                  901: name: key_info
           902: if_stmt: 
            903: if: 
             904: condition: 
              905: expr: 
               906: name: key_info_size
             907: block: 
              908: block_content: 
               909: expr_stmt: 
                910: expr: 
                 911: operator: *
                 912: name: key_info_size
                 913: operator: =
                 914: name: 
                  915: name: seig_entry
                  916: operator: ->
                  917: name: key_info_size
           918: if_stmt: 
            919: if: 
             920: condition: 
              921: expr: 
               922: name: container_type
             923: block: 
              924: block_content: 
               925: expr_stmt: 
                926: expr: 
                 927: operator: *
                 928: name: container_type
                 929: operator: =
                 930: name: GF_ISOM_BOX_TYPE_SENC
        931: else: 
         932: block: 
          933: block_content: 
           934: if_stmt: 
            935: if: 
             936: condition: 
              937: expr: 
               938: operator: !
               939: name: 
                940: name: trak
                941: operator: ->
                942: name: moov
                943: operator: ->
                944: name: mov
                945: operator: ->
                946: name: is_smooth
             947: block: 
              948: block_content: 
               949: expr_stmt: 
                950: expr: 
                 951: name: 
                  952: name: trak
                  953: operator: ->
                  954: name: moov
                  955: operator: ->
                  956: name: mov
                  957: operator: ->
                  958: name: is_smooth
                 959: operator: =
                 960: name: GF_TRUE
               961: expr_stmt: 
                962: expr: 
                 963: call: 
                  964: name: GF_LOG
                  965: argument_list: 
                   966: argument: 
                    967: expr: 
                     968: name: GF_LOG_WARNING
                   969: argument: 
                    970: expr: 
                     971: name: GF_LOG_CONTAINER
                   972: argument: 
                    973: expr: 
                     974: operator: (
                     975: literal: "[iso file] senc box without tenc, assuming MS smooth+piff\n"
                     976: operator: )
           977: if_stmt: 
            978: if: 
             979: condition: 
              980: expr: 
               981: name: default_IsEncrypted
             982: block: 
              983: block_content: 
               984: expr_stmt: 
                985: expr: 
                 986: operator: *
                 987: name: default_IsEncrypted
                 988: operator: =
                 989: name: GF_TRUE
           990: comment: //set default value, overwritten below
           991: if_stmt: 
            992: if: 
             993: condition: 
              994: expr: 
               995: name: container_type
             996: block: 
              997: block_content: 
               998: expr_stmt: 
                999: expr: 
                 1000: operator: *
                 1001: name: container_type
                 1002: operator: =
                 1003: name: GF_ISOM_BOX_UUID_PSEC
   1004: if_stmt: 
    1005: if: 
     1006: condition: 
      1007: expr: 
       1008: name: container_type
       1009: operator: &&
       1010: name: 
        1011: name: trak
        1012: operator: ->
        1013: name: sample_encryption
     1014: block: 
      1015: block_content: 
       1016: if_stmt: 
        1017: if: 
         1018: condition: 
          1019: expr: 
           1020: name: 
            1021: name: trak
            1022: operator: ->
            1023: name: sample_encryption
            1024: operator: ->
            1025: name: type
           1026: operator: ==
           1027: name: GF_ISOM_BOX_TYPE_SENC
         1028: block: 
          1029: block_content: 
           1030: expr_stmt: 
            1031: expr: 
             1032: operator: *
             1033: name: container_type
             1034: operator: =
             1035: name: GF_ISOM_BOX_TYPE_SENC
        1036: if: 
         1037: condition: 
          1038: expr: 
           1039: name: 
            1040: name: trak
            1041: operator: ->
            1042: name: sample_encryption
            1043: operator: ->
            1044: name: type
           1045: operator: ==
           1046: name: GF_ISOM_BOX_TYPE_UUID
         1047: block: 
          1048: block_content: 
           1049: expr_stmt: 
            1050: expr: 
             1051: operator: *
             1052: name: container_type
             1053: operator: =
             1054: operator: (
             1055: operator: (
             1056: name: GF_UUIDBox
             1057: operator: *
             1058: operator: )
             1059: name: 
              1060: name: trak
              1061: operator: ->
              1062: name: sample_encryption
             1063: operator: )
             1064: operator: ->
             1065: name: internal_4cc

----------------------------------------
0: function: 
 1: type: 
  2: name: void
 3: name: gf_isom_cenc_get_default_info_internal
 4: parameter_list: 
  5: parameter: 
   6: decl: 
    7: type: 
     8: name: GF_TrackBox
     9: modifier: *
    10: name: trak
  11: parameter: 
   12: decl: 
    13: type: 
     14: name: u32
    15: name: sampleDescriptionIndex
  16: parameter: 
   17: decl: 
    18: type: 
     19: name: u32
     20: modifier: *
    21: name: container_type
  22: parameter: 
   23: decl: 
    24: type: 
     25: name: Bool
     26: modifier: *
    27: name: default_IsEncrypted
  28: parameter: 
   29: decl: 
    30: type: 
     31: name: u8
     32: modifier: *
    33: name: crypt_byte_block
  34: parameter: 
   35: decl: 
    36: type: 
     37: name: u8
     38: modifier: *
    39: name: skip_byte_block
  40: parameter: 
   41: decl: 
    42: type: 
     43: specifier: const
     44: name: u8
     45: modifier: *
     46: modifier: *
    47: name: key_info
  48: parameter: 
   49: decl: 
    50: type: 
     51: name: u32
     52: modifier: *
    53: name: key_info_size
 54: block: 
  55: block_content: 
   56: decl_stmt: 
    57: decl: 
     58: type: 
      59: name: GF_ProtectionSchemeInfoBox
      60: modifier: *
     61: name: sinf
   62: comment: //setup all default as not encrypted
   63: if_stmt: 
    64: if: 
     65: condition: 
      66: expr: 
       67: name: default_IsEncrypted
     68: block: 
      69: block_content: 
       70: expr_stmt: 
        71: expr: 
         72: operator: *
         73: name: default_IsEncrypted
         74: operator: =
         75: name: GF_FALSE
   76: if_stmt: 
    77: if: 
     78: condition: 
      79: expr: 
       80: name: crypt_byte_block
     81: block: 
      82: block_content: 
       83: expr_stmt: 
        84: expr: 
         85: operator: *
         86: name: crypt_byte_block
         87: operator: =
         88: literal: 0
   89: if_stmt: 
    90: if: 
     91: condition: 
      92: expr: 
       93: name: skip_byte_block
     94: block: 
      95: block_content: 
       96: expr_stmt: 
        97: expr: 
         98: operator: *
         99: name: skip_byte_block
         100: operator: =
         101: literal: 0
   102: if_stmt: 
    103: if: 
     104: condition: 
      105: expr: 
       106: name: container_type
     107: block: 
      108: block_content: 
       109: expr_stmt: 
        110: expr: 
         111: operator: *
         112: name: container_type
         113: operator: =
         114: literal: 0
   115: if_stmt: 
    116: if: 
     117: condition: 
      118: expr: 
       119: name: key_info
     120: block: 
      121: block_content: 
       122: expr_stmt: 
        123: expr: 
         124: operator: *
         125: name: key_info
         126: operator: =
         127: name: NULL
   128: if_stmt: 
    129: if: 
     130: condition: 
      131: expr: 
       132: name: key_info_size
     133: block: 
      134: block_content: 
       135: expr_stmt: 
        136: expr: 
         137: operator: *
         138: name: key_info_size
         139: operator: =
         140: literal: 0
   141: expr_stmt: 
    142: expr: 
     143: name: sinf
     144: operator: =
     145: call: 
      146: name: isom_get_sinf_entry
      147: argument_list: 
       148: argument: 
        149: expr: 
         150: name: trak
       151: argument: 
        152: expr: 
         153: name: sampleDescriptionIndex
       154: argument: 
        155: expr: 
         156: name: GF_ISOM_CENC_SCHEME
       157: argument: 
        158: expr: 
         159: name: NULL
   160: if_stmt: 
    161: if: 
     162: condition: 
      163: expr: 
       164: operator: !
       165: name: sinf
     166: block: 
      167: block_content: 
       168: expr_stmt: 
        169: expr: 
         170: name: sinf
         171: operator: =
         172: call: 
          173: name: isom_get_sinf_entry
          174: argument_list: 
           175: argument: 
            176: expr: 
             177: name: trak
           178: argument: 
            179: expr: 
             180: name: sampleDescriptionIndex
           181: argument: 
            182: expr: 
             183: name: GF_ISOM_CBC_SCHEME
           184: argument: 
            185: expr: 
             186: name: NULL
   187: if_stmt: 
    188: if: 
     189: condition: 
      190: expr: 
       191: operator: !
       192: name: sinf
     193: block: 
      194: block_content: 
       195: expr_stmt: 
        196: expr: 
         197: name: sinf
         198: operator: =
         199: call: 
          200: name: isom_get_sinf_entry
          201: argument_list: 
           202: argument: 
            203: expr: 
             204: name: trak
           205: argument: 
            206: expr: 
             207: name: sampleDescriptionIndex
           208: argument: 
            209: expr: 
             210: name: GF_ISOM_CENS_SCHEME
           211: argument: 
            212: expr: 
             213: name: NULL
   214: if_stmt: 
    215: if: 
     216: condition: 
      217: expr: 
       218: operator: !
       219: name: sinf
     220: block: 
      221: block_content: 
       222: expr_stmt: 
        223: expr: 
         224: name: sinf
         225: operator: =
         226: call: 
          227: name: isom_get_sinf_entry
          228: argument_list: 
           229: argument: 
            230: expr: 
             231: name: trak
           232: argument: 
            233: expr: 
             234: name: sampleDescriptionIndex
           235: argument: 
            236: expr: 
             237: name: GF_ISOM_CBCS_SCHEME
           238: argument: 
            239: expr: 
             240: name: NULL
   241: if_stmt: 
    242: if: 
     243: condition: 
      244: expr: 
       245: operator: !
       246: name: sinf
     247: block: 
      248: block_content: 
       249: expr_stmt: 
        250: expr: 
         251: name: sinf
         252: operator: =
         253: call: 
          254: name: isom_get_sinf_entry
          255: argument_list: 
           256: argument: 
            257: expr: 
             258: name: trak
           259: argument: 
            260: expr: 
             261: name: sampleDescriptionIndex
           262: argument: 
            263: expr: 
             264: name: GF_ISOM_PIFF_SCHEME
           265: argument: 
            266: expr: 
             267: name: NULL
   268: if_stmt: 
    269: if: 
     270: condition: 
      271: expr: 
       272: operator: !
       273: name: sinf
     274: block: 
      275: block_content: 
       276: decl_stmt: 
        277: decl: 
         278: type: 
          279: name: u32
         280: name: i
        281: decl: 
         282: type: 
         283: name: nb_stsd
         284: init: 
          285: expr: 
           286: call: 
            287: name: gf_list_count
            288: argument_list: 
             289: argument: 
              290: expr: 
               291: name: 
                292: name: trak
                293: operator: ->
                294: name: Media
                295: operator: ->
                296: name: information
                297: operator: ->
                298: name: sampleTable
                299: operator: ->
                300: name: SampleDescription
                301: operator: ->
                302: name: child_boxes
       303: for: 
        304: control: 
         305: init: 
          306: expr: 
           307: name: i
           308: operator: =
           309: literal: 0
         310: condition: 
          311: expr: 
           312: name: i
           313: operator: <
           314: name: nb_stsd
         315: incr: 
          316: expr: 
           317: name: i
           318: operator: ++
        319: block: 
         320: block_content: 
          321: decl_stmt: 
           322: decl: 
            323: type: 
             324: name: GF_ProtectionSchemeInfoBox
             325: modifier: *
            326: name: a_sinf
          327: decl_stmt: 
           328: decl: 
            329: type: 
             330: name: GF_SampleEntryBox
             331: modifier: *
            332: name: sentry
            333: init: 
             334: expr: 
              335: name: NULL
          336: if_stmt: 
           337: if: 
            338: condition: 
             339: expr: 
              340: name: i
              341: operator: +
              342: literal: 1
              343: operator: ==
              344: name: sampleDescriptionIndex
            345: block: 
             346: block_content: 
              347: continue: 
          348: expr_stmt: 
           349: expr: 
            350: name: sentry
            351: operator: =
            352: call: 
             353: name: gf_list_get
             354: argument_list: 
              355: argument: 
               356: expr: 
                357: name: 
                 358: name: trak
                 359: operator: ->
                 360: name: Media
                 361: operator: ->
                 362: name: information
                 363: operator: ->
                 364: name: sampleTable
                 365: operator: ->
                 366: name: SampleDescription
                 367: operator: ->
                 368: name: child_boxes
              369: argument: 
               370: expr: 
                371: name: i
          372: expr_stmt: 
           373: expr: 
            374: name: a_sinf
            375: operator: =
            376: operator: (
            377: name: GF_ProtectionSchemeInfoBox
            378: operator: *
            379: operator: )
            380: call: 
             381: name: gf_isom_box_find_child
             382: argument_list: 
              383: argument: 
               384: expr: 
                385: name: 
                 386: name: sentry
                 387: operator: ->
                 388: name: child_boxes
              389: argument: 
               390: expr: 
                391: name: GF_ISOM_BOX_TYPE_SINF
          392: if_stmt: 
           393: if: 
            394: condition: 
             395: expr: 
              396: operator: !
              397: name: a_sinf
            398: block: 
             399: block_content: 
              400: continue: 
          401: comment: //signal default (not encrypted)
          402: return: 
   403: if_stmt: 
    404: if: 
     405: condition: 
      406: expr: 
       407: name: sinf
       408: operator: &&
       409: name: 
        410: name: sinf
        411: operator: ->
        412: name: info
       413: operator: &&
       414: name: 
        415: name: sinf
        416: operator: ->
        417: name: info
        418: operator: ->
        419: name: tenc
     420: block: 
      421: block_content: 
       422: if_stmt: 
        423: if: 
         424: condition: 
          425: expr: 
           426: name: default_IsEncrypted
         427: block: 
          428: block_content: 
           429: expr_stmt: 
            430: expr: 
             431: operator: *
             432: name: default_IsEncrypted
             433: operator: =
             434: name: 
              435: name: sinf
              436: operator: ->
              437: name: info
              438: operator: ->
              439: name: tenc
              440: operator: ->
              441: name: isProtected
       442: if_stmt: 
        443: if: 
         444: condition: 
          445: expr: 
           446: name: crypt_byte_block
         447: block: 
          448: block_content: 
           449: expr_stmt: 
            450: expr: 
             451: operator: *
             452: name: crypt_byte_block
             453: operator: =
             454: name: 
              455: name: sinf
              456: operator: ->
              457: name: info
              458: operator: ->
              459: name: tenc
              460: operator: ->
              461: name: crypt_byte_block
       462: if_stmt: 
        463: if: 
         464: condition: 
          465: expr: 
           466: name: skip_byte_block
         467: block: 
          468: block_content: 
           469: expr_stmt: 
            470: expr: 
             471: operator: *
             472: name: skip_byte_block
             473: operator: =
             474: name: 
              475: name: sinf
              476: operator: ->
              477: name: info
              478: operator: ->
              479: name: tenc
              480: operator: ->
              481: name: skip_byte_block
       482: if_stmt: 
        483: if: 
         484: condition: 
          485: expr: 
           486: name: key_info
         487: block: 
          488: block_content: 
           489: expr_stmt: 
            490: expr: 
             491: operator: *
             492: name: key_info
             493: operator: =
             494: name: 
              495: name: sinf
              496: operator: ->
              497: name: info
              498: operator: ->
              499: name: tenc
              500: operator: ->
              501: name: key_info
       502: if_stmt: 
        503: if: 
         504: condition: 
          505: expr: 
           506: name: key_info_size
         507: block: 
          508: block_content: 
           509: expr_stmt: 
            510: expr: 
             511: operator: *
             512: name: key_info_size
             513: operator: =
             514: literal: 20
           515: if_stmt: 
            516: if: 
             517: condition: 
              518: expr: 
               519: operator: !
               520: name: 
                521: name: sinf
                522: operator: ->
                523: name: info
                524: operator: ->
                525: name: tenc
                526: operator: ->
                527: name: key_info
                528: index: 
                 529: expr: 
                  530: literal: 3
             531: block: 
              532: block_content: 
               533: expr_stmt: 
                534: expr: 
                 535: operator: *
                 536: name: key_info_size
                 537: operator: +=
                 538: literal: 1
                 539: operator: +
                 540: name: 
                  541: name: sinf
                  542: operator: ->
                  543: name: info
                  544: operator: ->
                  545: name: tenc
                  546: operator: ->
                  547: name: key_info
                  548: index: 
                   549: expr: 
                    550: literal: 20
       551: comment: //set default value, overwritten below
       552: if_stmt: 
        553: if: 
         554: condition: 
          555: expr: 
           556: name: container_type
         557: block: 
          558: block_content: 
           559: expr_stmt: 
            560: expr: 
             561: operator: *
             562: name: container_type
             563: operator: =
             564: name: GF_ISOM_BOX_TYPE_SENC
    565: if: 
     566: condition: 
      567: expr: 
       568: name: sinf
       569: operator: &&
       570: name: 
        571: name: sinf
        572: operator: ->
        573: name: info
       574: operator: &&
       575: name: 
        576: name: sinf
        577: operator: ->
        578: name: info
        579: operator: ->
        580: name: piff_tenc
     581: block: 
      582: block_content: 
       583: if_stmt: 
        584: if: 
         585: condition: 
          586: expr: 
           587: name: default_IsEncrypted
         588: block: 
          589: block_content: 
           590: expr_stmt: 
            591: expr: 
             592: operator: *
             593: name: default_IsEncrypted
             594: operator: =
             595: name: GF_TRUE
       596: if_stmt: 
        597: if: 
         598: condition: 
          599: expr: 
           600: name: key_info
         601: block: 
          602: block_content: 
           603: expr_stmt: 
            604: expr: 
             605: operator: *
             606: name: key_info
             607: operator: =
             608: name: 
              609: name: sinf
              610: operator: ->
              611: name: info
              612: operator: ->
              613: name: piff_tenc
              614: operator: ->
              615: name: key_info
       616: if_stmt: 
        617: if: 
         618: condition: 
          619: expr: 
           620: name: key_info_size
         621: block: 
          622: block_content: 
           623: expr_stmt: 
            624: expr: 
             625: operator: *
             626: name: key_info_size
             627: operator: =
             628: literal: 19
       629: comment: //set default value, overwritten below
       630: if_stmt: 
        631: if: 
         632: condition: 
          633: expr: 
           634: name: container_type
         635: block: 
          636: block_content: 
           637: expr_stmt: 
            638: expr: 
             639: operator: *
             640: name: container_type
             641: operator: =
             642: name: GF_ISOM_BOX_UUID_PSEC
    643: else: 
     644: block: 
      645: block_content: 
       646: decl_stmt: 
        647: decl: 
         648: type: 
          649: name: u32
         650: name: i
        651: decl: 
         652: type: 
         653: name: count
         654: init: 
          655: expr: 
           656: literal: 0
       657: decl_stmt: 
        658: decl: 
         659: type: 
          660: name: GF_CENCSampleEncryptionGroupEntry
          661: modifier: *
         662: name: seig_entry
         663: init: 
          664: expr: 
           665: name: NULL
       666: if_stmt: 
        667: if: 
         668: condition: 
          669: expr: 
           670: operator: !
           671: name: 
            672: name: trak
            673: operator: ->
            674: name: moov
            675: operator: ->
            676: name: mov
            677: operator: ->
            678: name: is_smooth
         679: block: 
          680: block_content: 
           681: expr_stmt: 
            682: expr: 
             683: name: count
             684: operator: =
             685: call: 
              686: name: gf_list_count
              687: argument_list: 
               688: argument: 
                689: expr: 
                 690: name: 
                  691: name: trak
                  692: operator: ->
                  693: name: Media
                  694: operator: ->
                  695: name: information
                  696: operator: ->
                  697: name: sampleTable
                  698: operator: ->
                  699: name: sampleGroupsDescription
       700: for: 
        701: control: 
         702: init: 
          703: expr: 
           704: name: i
           705: operator: =
           706: literal: 0
         707: condition: 
          708: expr: 
           709: name: i
           710: operator: <
           711: name: count
         712: incr: 
          713: expr: 
           714: name: i
           715: operator: ++
        716: block: 
         717: block_content: 
          718: decl_stmt: 
           719: decl: 
            720: type: 
             721: name: GF_SampleGroupDescriptionBox
             722: modifier: *
            723: name: sgdesc
            724: init: 
             725: expr: 
              726: operator: (
              727: name: GF_SampleGroupDescriptionBox
              728: operator: *
              729: operator: )
              730: call: 
               731: name: gf_list_get
               732: argument_list: 
                733: argument: 
                 734: expr: 
                  735: name: 
                   736: name: trak
                   737: operator: ->
                   738: name: Media
                   739: operator: ->
                   740: name: information
                   741: operator: ->
                   742: name: sampleTable
                   743: operator: ->
                   744: name: sampleGroupsDescription
                745: argument: 
                 746: expr: 
                  747: name: i
          748: if_stmt: 
           749: if: 
            750: condition: 
             751: expr: 
              752: name: 
               753: name: sgdesc
               754: operator: ->
               755: name: grouping_type
              756: operator: !=
              757: name: GF_ISOM_SAMPLE_GROUP_SEIG
            758: block: 
             759: block_content: 
              760: continue: 
          761: if_stmt: 
           762: if: 
            763: condition: 
             764: expr: 
              765: name: 
               766: name: sgdesc
               767: operator: ->
               768: name: default_description_index
            769: block: 
             770: block_content: 
              771: expr_stmt: 
               772: expr: 
                773: name: seig_entry
                774: operator: =
                775: call: 
                 776: name: gf_list_get
                 777: argument_list: 
                  778: argument: 
                   779: expr: 
                    780: name: 
                     781: name: sgdesc
                     782: operator: ->
                     783: name: group_descriptions
                  784: argument: 
                   785: expr: 
                    786: name: 
                     787: name: sgdesc
                     788: operator: ->
                     789: name: default_description_index
                    790: operator: -
                    791: literal: 1
           792: else: 
            793: block: 
             794: block_content: 
              795: expr_stmt: 
               796: expr: 
                797: name: seig_entry
                798: operator: =
                799: call: 
                 800: name: gf_list_get
                 801: argument_list: 
                  802: argument: 
                   803: expr: 
                    804: name: 
                     805: name: sgdesc
                     806: operator: ->
                     807: name: group_descriptions
                  808: argument: 
                   809: expr: 
                    810: literal: 0
          811: if_stmt: 
           812: if: 
            813: condition: 
             814: expr: 
              815: name: seig_entry
              816: operator: &&
              817: operator: !
              818: name: 
               819: name: seig_entry
               820: operator: ->
               821: name: key_info
               822: index: 
                823: expr: 
                 824: literal: 0
            825: block: 
             826: block_content: 
              827: expr_stmt: 
               828: expr: 
                829: name: seig_entry
                830: operator: =
                831: name: NULL
          832: break: 
       833: if_stmt: 
        834: if: 
         835: condition: 
          836: expr: 
           837: name: seig_entry
         838: block: 
          839: block_content: 
           840: if_stmt: 
            841: if: 
             842: condition: 
              843: expr: 
               844: name: default_IsEncrypted
             845: block: 
              846: block_content: 
               847: expr_stmt: 
                848: expr: 
                 849: operator: *
                 850: name: default_IsEncrypted
                 851: operator: =
                 852: name: 
                  853: name: seig_entry
                  854: operator: ->
                  855: name: IsProtected
           856: if_stmt: 
            857: if: 
             858: condition: 
              859: expr: 
               860: name: crypt_byte_block
             861: block: 
              862: block_content: 
               863: expr_stmt: 
                864: expr: 
                 865: operator: *
                 866: name: crypt_byte_block
                 867: operator: =
                 868: name: 
                  869: name: seig_entry
                  870: operator: ->
                  871: name: crypt_byte_block
           872: if_stmt: 
            873: if: 
             874: condition: 
              875: expr: 
               876: name: skip_byte_block
             877: block: 
              878: block_content: 
               879: expr_stmt: 
                880: expr: 
                 881: operator: *
                 882: name: skip_byte_block
                 883: operator: =
                 884: name: 
                  885: name: seig_entry
                  886: operator: ->
                  887: name: skip_byte_block
           888: if_stmt: 
            889: if: 
             890: condition: 
              891: expr: 
               892: name: key_info
             893: block: 
              894: block_content: 
               895: expr_stmt: 
                896: expr: 
                 897: operator: *
                 898: name: key_info
                 899: operator: =
                 900: name: 
                  901: name: seig_entry
                  902: operator: ->
                  903: name: key_info
           904: if_stmt: 
            905: if: 
             906: condition: 
              907: expr: 
               908: name: key_info_size
             909: block: 
              910: block_content: 
               911: expr_stmt: 
                912: expr: 
                 913: operator: *
                 914: name: key_info_size
                 915: operator: =
                 916: name: 
                  917: name: seig_entry
                  918: operator: ->
                  919: name: key_info_size
           920: if_stmt: 
            921: if: 
             922: condition: 
              923: expr: 
               924: name: container_type
             925: block: 
              926: block_content: 
               927: expr_stmt: 
                928: expr: 
                 929: operator: *
                 930: name: container_type
                 931: operator: =
                 932: name: GF_ISOM_BOX_TYPE_SENC
        933: else: 
         934: block: 
          935: block_content: 
           936: if_stmt: 
            937: if: 
             938: condition: 
              939: expr: 
               940: operator: !
               941: name: 
                942: name: trak
                943: operator: ->
                944: name: moov
                945: operator: ->
                946: name: mov
                947: operator: ->
                948: name: is_smooth
             949: block: 
              950: block_content: 
               951: expr_stmt: 
                952: expr: 
                 953: name: 
                  954: name: trak
                  955: operator: ->
                  956: name: moov
                  957: operator: ->
                  958: name: mov
                  959: operator: ->
                  960: name: is_smooth
                 961: operator: =
                 962: name: GF_TRUE
               963: expr_stmt: 
                964: expr: 
                 965: call: 
                  966: name: GF_LOG
                  967: argument_list: 
                   968: argument: 
                    969: expr: 
                     970: name: GF_LOG_WARNING
                   971: argument: 
                    972: expr: 
                     973: name: GF_LOG_CONTAINER
                   974: argument: 
                    975: expr: 
                     976: operator: (
                     977: literal: "[iso file] senc box without tenc, assuming MS smooth+piff\n"
                     978: operator: )
           979: if_stmt: 
            980: if: 
             981: condition: 
              982: expr: 
               983: name: default_IsEncrypted
             984: block: 
              985: block_content: 
               986: expr_stmt: 
                987: expr: 
                 988: operator: *
                 989: name: default_IsEncrypted
                 990: operator: =
                 991: name: GF_TRUE
           992: comment: //set default value, overwritten below
           993: if_stmt: 
            994: if: 
             995: condition: 
              996: expr: 
               997: name: container_type
             998: block: 
              999: block_content: 
               1000: expr_stmt: 
                1001: expr: 
                 1002: operator: *
                 1003: name: container_type
                 1004: operator: =
                 1005: name: GF_ISOM_BOX_UUID_PSEC
   1006: if_stmt: 
    1007: if: 
     1008: condition: 
      1009: expr: 
       1010: name: container_type
       1011: operator: &&
       1012: name: 
        1013: name: trak
        1014: operator: ->
        1015: name: sample_encryption
     1016: block: 
      1017: block_content: 
       1018: if_stmt: 
        1019: if: 
         1020: condition: 
          1021: expr: 
           1022: name: 
            1023: name: trak
            1024: operator: ->
            1025: name: sample_encryption
            1026: operator: ->
            1027: name: type
           1028: operator: ==
           1029: name: GF_ISOM_BOX_TYPE_SENC
         1030: block: 
          1031: block_content: 
           1032: expr_stmt: 
            1033: expr: 
             1034: operator: *
             1035: name: container_type
             1036: operator: =
             1037: name: GF_ISOM_BOX_TYPE_SENC
        1038: if: 
         1039: condition: 
          1040: expr: 
           1041: name: 
            1042: name: trak
            1043: operator: ->
            1044: name: sample_encryption
            1045: operator: ->
            1046: name: type
           1047: operator: ==
           1048: name: GF_ISOM_BOX_TYPE_UUID
         1049: block: 
          1050: block_content: 
           1051: expr_stmt: 
            1052: expr: 
             1053: operator: *
             1054: name: container_type
             1055: operator: =
             1056: operator: (
             1057: operator: (
             1058: name: GF_UUIDBox
             1059: operator: *
             1060: operator: )
             1061: name: 
              1062: name: trak
              1063: operator: ->
              1064: name: sample_encryption
             1065: operator: )
             1066: operator: ->
             1067: name: internal_4cc
=====
0: name: gf_isom_cenc_get_default_info_internal

----------------------------------------
=====
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: GF_ProtectionSchemeInfoBox
     6: modifier: *
    7: name: sinf
  8: comment: //setup all default as not encrypted
  9: if_stmt: 
   10: if: 
    11: condition: 
     12: expr: 
      13: name: default_IsEncrypted
    14: block: 
     15: block_content: 
      16: expr_stmt: 
       17: expr: 
        18: operator: *
        19: name: default_IsEncrypted
        20: operator: =
        21: name: GF_FALSE
  22: if_stmt: 
   23: if: 
    24: condition: 
     25: expr: 
      26: name: crypt_byte_block
    27: block: 
     28: block_content: 
      29: expr_stmt: 
       30: expr: 
        31: operator: *
        32: name: crypt_byte_block
        33: operator: =
        34: literal: 0
  35: if_stmt: 
   36: if: 
    37: condition: 
     38: expr: 
      39: name: skip_byte_block
    40: block: 
     41: block_content: 
      42: expr_stmt: 
       43: expr: 
        44: operator: *
        45: name: skip_byte_block
        46: operator: =
        47: literal: 0
  48: if_stmt: 
   49: if: 
    50: condition: 
     51: expr: 
      52: name: container_type
    53: block: 
     54: block_content: 
      55: expr_stmt: 
       56: expr: 
        57: operator: *
        58: name: container_type
        59: operator: =
        60: literal: 0
  61: if_stmt: 
   62: if: 
    63: condition: 
     64: expr: 
      65: name: key_info
    66: block: 
     67: block_content: 
      68: expr_stmt: 
       69: expr: 
        70: operator: *
        71: name: key_info
        72: operator: =
        73: name: NULL
  74: if_stmt: 
   75: if: 
    76: condition: 
     77: expr: 
      78: name: key_info_size
    79: block: 
     80: block_content: 
      81: expr_stmt: 
       82: expr: 
        83: operator: *
        84: name: key_info_size
        85: operator: =
        86: literal: 0
  87: expr_stmt: 
   88: expr: 
    89: name: sinf
    90: operator: =
    91: call: 
     92: name: isom_get_sinf_entry
     93: argument_list: 
      94: argument: 
       95: expr: 
        96: name: trak
      97: argument: 
       98: expr: 
        99: name: sampleDescriptionIndex
      100: argument: 
       101: expr: 
        102: name: GF_ISOM_CENC_SCHEME
      103: argument: 
       104: expr: 
        105: name: NULL
  106: if_stmt: 
   107: if: 
    108: condition: 
     109: expr: 
      110: operator: !
      111: name: sinf
    112: block: 
     113: block_content: 
      114: expr_stmt: 
       115: expr: 
        116: name: sinf
        117: operator: =
        118: call: 
         119: name: isom_get_sinf_entry
         120: argument_list: 
          121: argument: 
           122: expr: 
            123: name: trak
          124: argument: 
           125: expr: 
            126: name: sampleDescriptionIndex
          127: argument: 
           128: expr: 
            129: name: GF_ISOM_CBC_SCHEME
          130: argument: 
           131: expr: 
            132: name: NULL
  133: if_stmt: 
   134: if: 
    135: condition: 
     136: expr: 
      137: operator: !
      138: name: sinf
    139: block: 
     140: block_content: 
      141: expr_stmt: 
       142: expr: 
        143: name: sinf
        144: operator: =
        145: call: 
         146: name: isom_get_sinf_entry
         147: argument_list: 
          148: argument: 
           149: expr: 
            150: name: trak
          151: argument: 
           152: expr: 
            153: name: sampleDescriptionIndex
          154: argument: 
           155: expr: 
            156: name: GF_ISOM_CENS_SCHEME
          157: argument: 
           158: expr: 
            159: name: NULL
  160: if_stmt: 
   161: if: 
    162: condition: 
     163: expr: 
      164: operator: !
      165: name: sinf
    166: block: 
     167: block_content: 
      168: expr_stmt: 
       169: expr: 
        170: name: sinf
        171: operator: =
        172: call: 
         173: name: isom_get_sinf_entry
         174: argument_list: 
          175: argument: 
           176: expr: 
            177: name: trak
          178: argument: 
           179: expr: 
            180: name: sampleDescriptionIndex
          181: argument: 
           182: expr: 
            183: name: GF_ISOM_CBCS_SCHEME
          184: argument: 
           185: expr: 
            186: name: NULL
  187: if_stmt: 
   188: if: 
    189: condition: 
     190: expr: 
      191: operator: !
      192: name: sinf
    193: block: 
     194: block_content: 
      195: expr_stmt: 
       196: expr: 
        197: name: sinf
        198: operator: =
        199: call: 
         200: name: isom_get_sinf_entry
         201: argument_list: 
          202: argument: 
           203: expr: 
            204: name: trak
          205: argument: 
           206: expr: 
            207: name: sampleDescriptionIndex
          208: argument: 
           209: expr: 
            210: name: GF_ISOM_PIFF_SCHEME
          211: argument: 
           212: expr: 
            213: name: NULL
  214: if_stmt: 
   215: if: 
    216: condition: 
     217: expr: 
      218: operator: !
      219: name: sinf
    220: block: 
     221: block_content: 
      222: decl_stmt: 
       223: decl: 
        224: type: 
         225: name: u32
        226: name: i
       227: decl: 
        228: type: 
        229: name: nb_stsd
        230: init: 
         231: expr: 
          232: call: 
           233: name: gf_list_count
           234: argument_list: 
            235: argument: 
             236: expr: 
              237: name: 
               238: name: trak
               239: operator: ->
               240: name: Media
               241: operator: ->
               242: name: information
               243: operator: ->
               244: name: sampleTable
               245: operator: ->
               246: name: SampleDescription
               247: operator: ->
               248: name: child_boxes
      249: for: 
       250: control: 
        251: init: 
         252: expr: 
          253: name: i
          254: operator: =
          255: literal: 0
        256: condition: 
         257: expr: 
          258: name: i
          259: operator: <
          260: name: nb_stsd
        261: incr: 
         262: expr: 
          263: name: i
          264: operator: ++
       265: block: 
        266: block_content: 
         267: decl_stmt: 
          268: decl: 
           269: type: 
            270: name: GF_ProtectionSchemeInfoBox
            271: modifier: *
           272: name: a_sinf
         273: decl_stmt: 
          274: decl: 
           275: type: 
            276: name: GF_SampleEntryBox
            277: modifier: *
           278: name: sentry
           279: init: 
            280: expr: 
             281: name: NULL
         282: if_stmt: 
          283: if: 
           284: condition: 
            285: expr: 
             286: name: i
             287: operator: +
             288: literal: 1
             289: operator: ==
             290: name: sampleDescriptionIndex
           291: block: 
            292: block_content: 
             293: continue: 
         294: expr_stmt: 
          295: expr: 
           296: name: sentry
           297: operator: =
           298: call: 
            299: name: gf_list_get
            300: argument_list: 
             301: argument: 
              302: expr: 
               303: name: 
                304: name: trak
                305: operator: ->
                306: name: Media
                307: operator: ->
                308: name: information
                309: operator: ->
                310: name: sampleTable
                311: operator: ->
                312: name: SampleDescription
                313: operator: ->
                314: name: child_boxes
             315: argument: 
              316: expr: 
               317: name: i
         318: expr_stmt: 
          319: expr: 
           320: name: a_sinf
           321: operator: =
           322: operator: (
           323: name: GF_ProtectionSchemeInfoBox
           324: operator: *
           325: operator: )
           326: call: 
            327: name: gf_isom_box_find_child
            328: argument_list: 
             329: argument: 
              330: expr: 
               331: name: 
                332: name: sentry
                333: operator: ->
                334: name: child_boxes
             335: argument: 
              336: expr: 
               337: name: GF_ISOM_BOX_TYPE_SINF
         338: if_stmt: 
          339: if: 
           340: condition: 
            341: expr: 
             342: operator: !
             343: name: a_sinf
           344: block: 
            345: block_content: 
             346: continue: 
         347: comment: //signal default (not encrypted)
         348: return: 
  349: if_stmt: 
   350: if: 
    351: condition: 
     352: expr: 
      353: name: sinf
      354: operator: &&
      355: name: 
       356: name: sinf
       357: operator: ->
       358: name: info
      359: operator: &&
      360: name: 
       361: name: sinf
       362: operator: ->
       363: name: info
       364: operator: ->
       365: name: tenc
    366: block: 
     367: block_content: 
      368: if_stmt: 
       369: if: 
        370: condition: 
         371: expr: 
          372: name: default_IsEncrypted
        373: block: 
         374: block_content: 
          375: expr_stmt: 
           376: expr: 
            377: operator: *
            378: name: default_IsEncrypted
            379: operator: =
            380: name: 
             381: name: sinf
             382: operator: ->
             383: name: info
             384: operator: ->
             385: name: tenc
             386: operator: ->
             387: name: isProtected
      388: if_stmt: 
       389: if: 
        390: condition: 
         391: expr: 
          392: name: crypt_byte_block
        393: block: 
         394: block_content: 
          395: expr_stmt: 
           396: expr: 
            397: operator: *
            398: name: crypt_byte_block
            399: operator: =
            400: name: 
             401: name: sinf
             402: operator: ->
             403: name: info
             404: operator: ->
             405: name: tenc
             406: operator: ->
             407: name: crypt_byte_block
      408: if_stmt: 
       409: if: 
        410: condition: 
         411: expr: 
          412: name: skip_byte_block
        413: block: 
         414: block_content: 
          415: expr_stmt: 
           416: expr: 
            417: operator: *
            418: name: skip_byte_block
            419: operator: =
            420: name: 
             421: name: sinf
             422: operator: ->
             423: name: info
             424: operator: ->
             425: name: tenc
             426: operator: ->
             427: name: skip_byte_block
      428: if_stmt: 
       429: if: 
        430: condition: 
         431: expr: 
          432: name: key_info
        433: block: 
         434: block_content: 
          435: expr_stmt: 
           436: expr: 
            437: operator: *
            438: name: key_info
            439: operator: =
            440: name: 
             441: name: sinf
             442: operator: ->
             443: name: info
             444: operator: ->
             445: name: tenc
             446: operator: ->
             447: name: key_info
      448: if_stmt: 
       449: if: 
        450: condition: 
         451: expr: 
          452: name: key_info_size
        453: block: 
         454: block_content: 
          455: expr_stmt: 
           456: expr: 
            457: operator: *
            458: name: key_info_size
            459: operator: =
            460: literal: 20
          461: if_stmt: 
           462: if: 
            463: condition: 
             464: expr: 
              465: operator: !
              466: name: 
               467: name: sinf
               468: operator: ->
               469: name: info
               470: operator: ->
               471: name: tenc
               472: operator: ->
               473: name: key_info
               474: index: 
                475: expr: 
                 476: literal: 3
            477: block: 
             478: block_content: 
              479: expr_stmt: 
               480: expr: 
                481: operator: *
                482: name: key_info_size
                483: operator: +=
                484: literal: 1
                485: operator: +
                486: name: 
                 487: name: sinf
                 488: operator: ->
                 489: name: info
                 490: operator: ->
                 491: name: tenc
                 492: operator: ->
                 493: name: key_info
                 494: index: 
                  495: expr: 
                   496: literal: 20
      497: comment: //set default value, overwritten below
      498: if_stmt: 
       499: if: 
        500: condition: 
         501: expr: 
          502: name: container_type
        503: block: 
         504: block_content: 
          505: expr_stmt: 
           506: expr: 
            507: operator: *
            508: name: container_type
            509: operator: =
            510: name: GF_ISOM_BOX_TYPE_SENC
   511: if: 
    512: condition: 
     513: expr: 
      514: name: sinf
      515: operator: &&
      516: name: 
       517: name: sinf
       518: operator: ->
       519: name: info
      520: operator: &&
      521: name: 
       522: name: sinf
       523: operator: ->
       524: name: info
       525: operator: ->
       526: name: piff_tenc
    527: block: 
     528: block_content: 
      529: if_stmt: 
       530: if: 
        531: condition: 
         532: expr: 
          533: name: default_IsEncrypted
        534: block: 
         535: block_content: 
          536: expr_stmt: 
           537: expr: 
            538: operator: *
            539: name: default_IsEncrypted
            540: operator: =
            541: name: GF_TRUE
      542: if_stmt: 
       543: if: 
        544: condition: 
         545: expr: 
          546: name: key_info
        547: block: 
         548: block_content: 
          549: expr_stmt: 
           550: expr: 
            551: operator: *
            552: name: key_info
            553: operator: =
            554: name: 
             555: name: sinf
             556: operator: ->
             557: name: info
             558: operator: ->
             559: name: piff_tenc
             560: operator: ->
             561: name: key_info
      562: if_stmt: 
       563: if: 
        564: condition: 
         565: expr: 
          566: name: key_info_size
        567: block: 
         568: block_content: 
          569: expr_stmt: 
           570: expr: 
            571: operator: *
            572: name: key_info_size
            573: operator: =
            574: literal: 19
      575: comment: //set default value, overwritten below
      576: if_stmt: 
       577: if: 
        578: condition: 
         579: expr: 
          580: name: container_type
        581: block: 
         582: block_content: 
          583: expr_stmt: 
           584: expr: 
            585: operator: *
            586: name: container_type
            587: operator: =
            588: name: GF_ISOM_BOX_UUID_PSEC
   589: else: 
    590: block: 
     591: block_content: 
      592: decl_stmt: 
       593: decl: 
        594: type: 
         595: name: u32
        596: name: i
       597: decl: 
        598: type: 
        599: name: count
        600: init: 
         601: expr: 
          602: literal: 0
      603: decl_stmt: 
       604: decl: 
        605: type: 
         606: name: GF_CENCSampleEncryptionGroupEntry
         607: modifier: *
        608: name: seig_entry
        609: init: 
         610: expr: 
          611: name: NULL
      612: if_stmt: 
       613: if: 
        614: condition: 
         615: expr: 
          616: operator: !
          617: name: 
           618: name: trak
           619: operator: ->
           620: name: moov
           621: operator: ->
           622: name: mov
           623: operator: ->
           624: name: is_smooth
        625: block: 
         626: block_content: 
          627: expr_stmt: 
           628: expr: 
            629: name: count
            630: operator: =
            631: call: 
             632: name: gf_list_count
             633: argument_list: 
              634: argument: 
               635: expr: 
                636: name: 
                 637: name: trak
                 638: operator: ->
                 639: name: Media
                 640: operator: ->
                 641: name: information
                 642: operator: ->
                 643: name: sampleTable
                 644: operator: ->
                 645: name: sampleGroupsDescription
      646: for: 
       647: control: 
        648: init: 
         649: expr: 
          650: name: i
          651: operator: =
          652: literal: 0
        653: condition: 
         654: expr: 
          655: name: i
          656: operator: <
          657: name: count
        658: incr: 
         659: expr: 
          660: name: i
          661: operator: ++
       662: block: 
        663: block_content: 
         664: decl_stmt: 
          665: decl: 
           666: type: 
            667: name: GF_SampleGroupDescriptionBox
            668: modifier: *
           669: name: sgdesc
           670: init: 
            671: expr: 
             672: operator: (
             673: name: GF_SampleGroupDescriptionBox
             674: operator: *
             675: operator: )
             676: call: 
              677: name: gf_list_get
              678: argument_list: 
               679: argument: 
                680: expr: 
                 681: name: 
                  682: name: trak
                  683: operator: ->
                  684: name: Media
                  685: operator: ->
                  686: name: information
                  687: operator: ->
                  688: name: sampleTable
                  689: operator: ->
                  690: name: sampleGroupsDescription
               691: argument: 
                692: expr: 
                 693: name: i
         694: if_stmt: 
          695: if: 
           696: condition: 
            697: expr: 
             698: name: 
              699: name: sgdesc
              700: operator: ->
              701: name: grouping_type
             702: operator: !=
             703: name: GF_ISOM_SAMPLE_GROUP_SEIG
           704: block: 
            705: block_content: 
             706: continue: 
         707: if_stmt: 
          708: if: 
           709: condition: 
            710: expr: 
             711: name: 
              712: name: sgdesc
              713: operator: ->
              714: name: default_description_index
           715: block: 
            716: block_content: 
             717: expr_stmt: 
              718: expr: 
               719: name: seig_entry
               720: operator: =
               721: call: 
                722: name: gf_list_get
                723: argument_list: 
                 724: argument: 
                  725: expr: 
                   726: name: 
                    727: name: sgdesc
                    728: operator: ->
                    729: name: group_descriptions
                 730: argument: 
                  731: expr: 
                   732: name: 
                    733: name: sgdesc
                    734: operator: ->
                    735: name: default_description_index
                   736: operator: -
                   737: literal: 1
          738: else: 
           739: block: 
            740: block_content: 
             741: expr_stmt: 
              742: expr: 
               743: name: seig_entry
               744: operator: =
               745: call: 
                746: name: gf_list_get
                747: argument_list: 
                 748: argument: 
                  749: expr: 
                   750: name: 
                    751: name: sgdesc
                    752: operator: ->
                    753: name: group_descriptions
                 754: argument: 
                  755: expr: 
                   756: literal: 0
         757: if_stmt: 
          758: if: 
           759: condition: 
            760: expr: 
             761: operator: !
             762: name: 
              763: name: seig_entry
              764: operator: ->
              765: name: key_info
              766: index: 
               767: expr: 
                768: literal: 0
           769: block: 
            770: block_content: 
             771: expr_stmt: 
              772: expr: 
               773: name: seig_entry
               774: operator: =
               775: name: NULL
         776: break: 
      777: if_stmt: 
       778: if: 
        779: condition: 
         780: expr: 
          781: name: seig_entry
        782: block: 
         783: block_content: 
          784: if_stmt: 
           785: if: 
            786: condition: 
             787: expr: 
              788: name: default_IsEncrypted
            789: block: 
             790: block_content: 
              791: expr_stmt: 
               792: expr: 
                793: operator: *
                794: name: default_IsEncrypted
                795: operator: =
                796: name: 
                 797: name: seig_entry
                 798: operator: ->
                 799: name: IsProtected
          800: if_stmt: 
           801: if: 
            802: condition: 
             803: expr: 
              804: name: crypt_byte_block
            805: block: 
             806: block_content: 
              807: expr_stmt: 
               808: expr: 
                809: operator: *
                810: name: crypt_byte_block
                811: operator: =
                812: name: 
                 813: name: seig_entry
                 814: operator: ->
                 815: name: crypt_byte_block
          816: if_stmt: 
           817: if: 
            818: condition: 
             819: expr: 
              820: name: skip_byte_block
            821: block: 
             822: block_content: 
              823: expr_stmt: 
               824: expr: 
                825: operator: *
                826: name: skip_byte_block
                827: operator: =
                828: name: 
                 829: name: seig_entry
                 830: operator: ->
                 831: name: skip_byte_block
          832: if_stmt: 
           833: if: 
            834: condition: 
             835: expr: 
              836: name: key_info
            837: block: 
             838: block_content: 
              839: expr_stmt: 
               840: expr: 
                841: operator: *
                842: name: key_info
                843: operator: =
                844: name: 
                 845: name: seig_entry
                 846: operator: ->
                 847: name: key_info
          848: if_stmt: 
           849: if: 
            850: condition: 
             851: expr: 
              852: name: key_info_size
            853: block: 
             854: block_content: 
              855: expr_stmt: 
               856: expr: 
                857: operator: *
                858: name: key_info_size
                859: operator: =
                860: name: 
                 861: name: seig_entry
                 862: operator: ->
                 863: name: key_info_size
          864: if_stmt: 
           865: if: 
            866: condition: 
             867: expr: 
              868: name: container_type
            869: block: 
             870: block_content: 
              871: expr_stmt: 
               872: expr: 
                873: operator: *
                874: name: container_type
                875: operator: =
                876: name: GF_ISOM_BOX_TYPE_SENC
       877: else: 
        878: block: 
         879: block_content: 
          880: if_stmt: 
           881: if: 
            882: condition: 
             883: expr: 
              884: operator: !
              885: name: 
               886: name: trak
               887: operator: ->
               888: name: moov
               889: operator: ->
               890: name: mov
               891: operator: ->
               892: name: is_smooth
            893: block: 
             894: block_content: 
              895: expr_stmt: 
               896: expr: 
                897: name: 
                 898: name: trak
                 899: operator: ->
                 900: name: moov
                 901: operator: ->
                 902: name: mov
                 903: operator: ->
                 904: name: is_smooth
                905: operator: =
                906: name: GF_TRUE
              907: expr_stmt: 
               908: expr: 
                909: call: 
                 910: name: GF_LOG
                 911: argument_list: 
                  912: argument: 
                   913: expr: 
                    914: name: GF_LOG_WARNING
                  915: argument: 
                   916: expr: 
                    917: name: GF_LOG_CONTAINER
                  918: argument: 
                   919: expr: 
                    920: operator: (
                    921: literal: "[iso file] senc box without tenc, assuming MS smooth+piff\n"
                    922: operator: )
          923: if_stmt: 
           924: if: 
            925: condition: 
             926: expr: 
              927: name: default_IsEncrypted
            928: block: 
             929: block_content: 
              930: expr_stmt: 
               931: expr: 
                932: operator: *
                933: name: default_IsEncrypted
                934: operator: =
                935: name: GF_TRUE
          936: comment: //set default value, overwritten below
          937: if_stmt: 
           938: if: 
            939: condition: 
             940: expr: 
              941: name: container_type
            942: block: 
             943: block_content: 
              944: expr_stmt: 
               945: expr: 
                946: operator: *
                947: name: container_type
                948: operator: =
                949: name: GF_ISOM_BOX_UUID_PSEC
  950: if_stmt: 
   951: if: 
    952: condition: 
     953: expr: 
      954: name: container_type
      955: operator: &&
      956: name: 
       957: name: trak
       958: operator: ->
       959: name: sample_encryption
    960: block: 
     961: block_content: 
      962: if_stmt: 
       963: if: 
        964: condition: 
         965: expr: 
          966: name: 
           967: name: trak
           968: operator: ->
           969: name: sample_encryption
           970: operator: ->
           971: name: type
          972: operator: ==
          973: name: GF_ISOM_BOX_TYPE_SENC
        974: block: 
         975: block_content: 
          976: expr_stmt: 
           977: expr: 
            978: operator: *
            979: name: container_type
            980: operator: =
            981: name: GF_ISOM_BOX_TYPE_SENC
       982: if: 
        983: condition: 
         984: expr: 
          985: name: 
           986: name: trak
           987: operator: ->
           988: name: sample_encryption
           989: operator: ->
           990: name: type
          991: operator: ==
          992: name: GF_ISOM_BOX_TYPE_UUID
        993: block: 
         994: block_content: 
          995: expr_stmt: 
           996: expr: 
            997: operator: *
            998: name: container_type
            999: operator: =
            1000: operator: (
            1001: operator: (
            1002: name: GF_UUIDBox
            1003: operator: *
            1004: operator: )
            1005: name: 
             1006: name: trak
             1007: operator: ->
             1008: name: sample_encryption
            1009: operator: )
            1010: operator: ->
            1011: name: internal_4cc

----------------------------------------
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: GF_ProtectionSchemeInfoBox
     6: modifier: *
    7: name: sinf
  8: comment: //setup all default as not encrypted
  9: if_stmt: 
   10: if: 
    11: condition: 
     12: expr: 
      13: name: default_IsEncrypted
    14: block: 
     15: block_content: 
      16: expr_stmt: 
       17: expr: 
        18: operator: *
        19: name: default_IsEncrypted
        20: operator: =
        21: name: GF_FALSE
  22: if_stmt: 
   23: if: 
    24: condition: 
     25: expr: 
      26: name: crypt_byte_block
    27: block: 
     28: block_content: 
      29: expr_stmt: 
       30: expr: 
        31: operator: *
        32: name: crypt_byte_block
        33: operator: =
        34: literal: 0
  35: if_stmt: 
   36: if: 
    37: condition: 
     38: expr: 
      39: name: skip_byte_block
    40: block: 
     41: block_content: 
      42: expr_stmt: 
       43: expr: 
        44: operator: *
        45: name: skip_byte_block
        46: operator: =
        47: literal: 0
  48: if_stmt: 
   49: if: 
    50: condition: 
     51: expr: 
      52: name: container_type
    53: block: 
     54: block_content: 
      55: expr_stmt: 
       56: expr: 
        57: operator: *
        58: name: container_type
        59: operator: =
        60: literal: 0
  61: if_stmt: 
   62: if: 
    63: condition: 
     64: expr: 
      65: name: key_info
    66: block: 
     67: block_content: 
      68: expr_stmt: 
       69: expr: 
        70: operator: *
        71: name: key_info
        72: operator: =
        73: name: NULL
  74: if_stmt: 
   75: if: 
    76: condition: 
     77: expr: 
      78: name: key_info_size
    79: block: 
     80: block_content: 
      81: expr_stmt: 
       82: expr: 
        83: operator: *
        84: name: key_info_size
        85: operator: =
        86: literal: 0
  87: expr_stmt: 
   88: expr: 
    89: name: sinf
    90: operator: =
    91: call: 
     92: name: isom_get_sinf_entry
     93: argument_list: 
      94: argument: 
       95: expr: 
        96: name: trak
      97: argument: 
       98: expr: 
        99: name: sampleDescriptionIndex
      100: argument: 
       101: expr: 
        102: name: GF_ISOM_CENC_SCHEME
      103: argument: 
       104: expr: 
        105: name: NULL
  106: if_stmt: 
   107: if: 
    108: condition: 
     109: expr: 
      110: operator: !
      111: name: sinf
    112: block: 
     113: block_content: 
      114: expr_stmt: 
       115: expr: 
        116: name: sinf
        117: operator: =
        118: call: 
         119: name: isom_get_sinf_entry
         120: argument_list: 
          121: argument: 
           122: expr: 
            123: name: trak
          124: argument: 
           125: expr: 
            126: name: sampleDescriptionIndex
          127: argument: 
           128: expr: 
            129: name: GF_ISOM_CBC_SCHEME
          130: argument: 
           131: expr: 
            132: name: NULL
  133: if_stmt: 
   134: if: 
    135: condition: 
     136: expr: 
      137: operator: !
      138: name: sinf
    139: block: 
     140: block_content: 
      141: expr_stmt: 
       142: expr: 
        143: name: sinf
        144: operator: =
        145: call: 
         146: name: isom_get_sinf_entry
         147: argument_list: 
          148: argument: 
           149: expr: 
            150: name: trak
          151: argument: 
           152: expr: 
            153: name: sampleDescriptionIndex
          154: argument: 
           155: expr: 
            156: name: GF_ISOM_CENS_SCHEME
          157: argument: 
           158: expr: 
            159: name: NULL
  160: if_stmt: 
   161: if: 
    162: condition: 
     163: expr: 
      164: operator: !
      165: name: sinf
    166: block: 
     167: block_content: 
      168: expr_stmt: 
       169: expr: 
        170: name: sinf
        171: operator: =
        172: call: 
         173: name: isom_get_sinf_entry
         174: argument_list: 
          175: argument: 
           176: expr: 
            177: name: trak
          178: argument: 
           179: expr: 
            180: name: sampleDescriptionIndex
          181: argument: 
           182: expr: 
            183: name: GF_ISOM_CBCS_SCHEME
          184: argument: 
           185: expr: 
            186: name: NULL
  187: if_stmt: 
   188: if: 
    189: condition: 
     190: expr: 
      191: operator: !
      192: name: sinf
    193: block: 
     194: block_content: 
      195: expr_stmt: 
       196: expr: 
        197: name: sinf
        198: operator: =
        199: call: 
         200: name: isom_get_sinf_entry
         201: argument_list: 
          202: argument: 
           203: expr: 
            204: name: trak
          205: argument: 
           206: expr: 
            207: name: sampleDescriptionIndex
          208: argument: 
           209: expr: 
            210: name: GF_ISOM_PIFF_SCHEME
          211: argument: 
           212: expr: 
            213: name: NULL
  214: if_stmt: 
   215: if: 
    216: condition: 
     217: expr: 
      218: operator: !
      219: name: sinf
    220: block: 
     221: block_content: 
      222: decl_stmt: 
       223: decl: 
        224: type: 
         225: name: u32
        226: name: i
       227: decl: 
        228: type: 
        229: name: nb_stsd
        230: init: 
         231: expr: 
          232: call: 
           233: name: gf_list_count
           234: argument_list: 
            235: argument: 
             236: expr: 
              237: name: 
               238: name: trak
               239: operator: ->
               240: name: Media
               241: operator: ->
               242: name: information
               243: operator: ->
               244: name: sampleTable
               245: operator: ->
               246: name: SampleDescription
               247: operator: ->
               248: name: child_boxes
      249: for: 
       250: control: 
        251: init: 
         252: expr: 
          253: name: i
          254: operator: =
          255: literal: 0
        256: condition: 
         257: expr: 
          258: name: i
          259: operator: <
          260: name: nb_stsd
        261: incr: 
         262: expr: 
          263: name: i
          264: operator: ++
       265: block: 
        266: block_content: 
         267: decl_stmt: 
          268: decl: 
           269: type: 
            270: name: GF_ProtectionSchemeInfoBox
            271: modifier: *
           272: name: a_sinf
         273: decl_stmt: 
          274: decl: 
           275: type: 
            276: name: GF_SampleEntryBox
            277: modifier: *
           278: name: sentry
           279: init: 
            280: expr: 
             281: name: NULL
         282: if_stmt: 
          283: if: 
           284: condition: 
            285: expr: 
             286: name: i
             287: operator: +
             288: literal: 1
             289: operator: ==
             290: name: sampleDescriptionIndex
           291: block: 
            292: block_content: 
             293: continue: 
         294: expr_stmt: 
          295: expr: 
           296: name: sentry
           297: operator: =
           298: call: 
            299: name: gf_list_get
            300: argument_list: 
             301: argument: 
              302: expr: 
               303: name: 
                304: name: trak
                305: operator: ->
                306: name: Media
                307: operator: ->
                308: name: information
                309: operator: ->
                310: name: sampleTable
                311: operator: ->
                312: name: SampleDescription
                313: operator: ->
                314: name: child_boxes
             315: argument: 
              316: expr: 
               317: name: i
         318: expr_stmt: 
          319: expr: 
           320: name: a_sinf
           321: operator: =
           322: operator: (
           323: name: GF_ProtectionSchemeInfoBox
           324: operator: *
           325: operator: )
           326: call: 
            327: name: gf_isom_box_find_child
            328: argument_list: 
             329: argument: 
              330: expr: 
               331: name: 
                332: name: sentry
                333: operator: ->
                334: name: child_boxes
             335: argument: 
              336: expr: 
               337: name: GF_ISOM_BOX_TYPE_SINF
         338: if_stmt: 
          339: if: 
           340: condition: 
            341: expr: 
             342: operator: !
             343: name: a_sinf
           344: block: 
            345: block_content: 
             346: continue: 
         347: comment: //signal default (not encrypted)
         348: return: 
  349: if_stmt: 
   350: if: 
    351: condition: 
     352: expr: 
      353: name: sinf
      354: operator: &&
      355: name: 
       356: name: sinf
       357: operator: ->
       358: name: info
      359: operator: &&
      360: name: 
       361: name: sinf
       362: operator: ->
       363: name: info
       364: operator: ->
       365: name: tenc
    366: block: 
     367: block_content: 
      368: if_stmt: 
       369: if: 
        370: condition: 
         371: expr: 
          372: name: default_IsEncrypted
        373: block: 
         374: block_content: 
          375: expr_stmt: 
           376: expr: 
            377: operator: *
            378: name: default_IsEncrypted
            379: operator: =
            380: name: 
             381: name: sinf
             382: operator: ->
             383: name: info
             384: operator: ->
             385: name: tenc
             386: operator: ->
             387: name: isProtected
      388: if_stmt: 
       389: if: 
        390: condition: 
         391: expr: 
          392: name: crypt_byte_block
        393: block: 
         394: block_content: 
          395: expr_stmt: 
           396: expr: 
            397: operator: *
            398: name: crypt_byte_block
            399: operator: =
            400: name: 
             401: name: sinf
             402: operator: ->
             403: name: info
             404: operator: ->
             405: name: tenc
             406: operator: ->
             407: name: crypt_byte_block
      408: if_stmt: 
       409: if: 
        410: condition: 
         411: expr: 
          412: name: skip_byte_block
        413: block: 
         414: block_content: 
          415: expr_stmt: 
           416: expr: 
            417: operator: *
            418: name: skip_byte_block
            419: operator: =
            420: name: 
             421: name: sinf
             422: operator: ->
             423: name: info
             424: operator: ->
             425: name: tenc
             426: operator: ->
             427: name: skip_byte_block
      428: if_stmt: 
       429: if: 
        430: condition: 
         431: expr: 
          432: name: key_info
        433: block: 
         434: block_content: 
          435: expr_stmt: 
           436: expr: 
            437: operator: *
            438: name: key_info
            439: operator: =
            440: name: 
             441: name: sinf
             442: operator: ->
             443: name: info
             444: operator: ->
             445: name: tenc
             446: operator: ->
             447: name: key_info
      448: if_stmt: 
       449: if: 
        450: condition: 
         451: expr: 
          452: name: key_info_size
        453: block: 
         454: block_content: 
          455: expr_stmt: 
           456: expr: 
            457: operator: *
            458: name: key_info_size
            459: operator: =
            460: literal: 20
          461: if_stmt: 
           462: if: 
            463: condition: 
             464: expr: 
              465: operator: !
              466: name: 
               467: name: sinf
               468: operator: ->
               469: name: info
               470: operator: ->
               471: name: tenc
               472: operator: ->
               473: name: key_info
               474: index: 
                475: expr: 
                 476: literal: 3
            477: block: 
             478: block_content: 
              479: expr_stmt: 
               480: expr: 
                481: operator: *
                482: name: key_info_size
                483: operator: +=
                484: literal: 1
                485: operator: +
                486: name: 
                 487: name: sinf
                 488: operator: ->
                 489: name: info
                 490: operator: ->
                 491: name: tenc
                 492: operator: ->
                 493: name: key_info
                 494: index: 
                  495: expr: 
                   496: literal: 20
      497: comment: //set default value, overwritten below
      498: if_stmt: 
       499: if: 
        500: condition: 
         501: expr: 
          502: name: container_type
        503: block: 
         504: block_content: 
          505: expr_stmt: 
           506: expr: 
            507: operator: *
            508: name: container_type
            509: operator: =
            510: name: GF_ISOM_BOX_TYPE_SENC
   511: if: 
    512: condition: 
     513: expr: 
      514: name: sinf
      515: operator: &&
      516: name: 
       517: name: sinf
       518: operator: ->
       519: name: info
      520: operator: &&
      521: name: 
       522: name: sinf
       523: operator: ->
       524: name: info
       525: operator: ->
       526: name: piff_tenc
    527: block: 
     528: block_content: 
      529: if_stmt: 
       530: if: 
        531: condition: 
         532: expr: 
          533: name: default_IsEncrypted
        534: block: 
         535: block_content: 
          536: expr_stmt: 
           537: expr: 
            538: operator: *
            539: name: default_IsEncrypted
            540: operator: =
            541: name: GF_TRUE
      542: if_stmt: 
       543: if: 
        544: condition: 
         545: expr: 
          546: name: key_info
        547: block: 
         548: block_content: 
          549: expr_stmt: 
           550: expr: 
            551: operator: *
            552: name: key_info
            553: operator: =
            554: name: 
             555: name: sinf
             556: operator: ->
             557: name: info
             558: operator: ->
             559: name: piff_tenc
             560: operator: ->
             561: name: key_info
      562: if_stmt: 
       563: if: 
        564: condition: 
         565: expr: 
          566: name: key_info_size
        567: block: 
         568: block_content: 
          569: expr_stmt: 
           570: expr: 
            571: operator: *
            572: name: key_info_size
            573: operator: =
            574: literal: 19
      575: comment: //set default value, overwritten below
      576: if_stmt: 
       577: if: 
        578: condition: 
         579: expr: 
          580: name: container_type
        581: block: 
         582: block_content: 
          583: expr_stmt: 
           584: expr: 
            585: operator: *
            586: name: container_type
            587: operator: =
            588: name: GF_ISOM_BOX_UUID_PSEC
   589: else: 
    590: block: 
     591: block_content: 
      592: decl_stmt: 
       593: decl: 
        594: type: 
         595: name: u32
        596: name: i
       597: decl: 
        598: type: 
        599: name: count
        600: init: 
         601: expr: 
          602: literal: 0
      603: decl_stmt: 
       604: decl: 
        605: type: 
         606: name: GF_CENCSampleEncryptionGroupEntry
         607: modifier: *
        608: name: seig_entry
        609: init: 
         610: expr: 
          611: name: NULL
      612: if_stmt: 
       613: if: 
        614: condition: 
         615: expr: 
          616: operator: !
          617: name: 
           618: name: trak
           619: operator: ->
           620: name: moov
           621: operator: ->
           622: name: mov
           623: operator: ->
           624: name: is_smooth
        625: block: 
         626: block_content: 
          627: expr_stmt: 
           628: expr: 
            629: name: count
            630: operator: =
            631: call: 
             632: name: gf_list_count
             633: argument_list: 
              634: argument: 
               635: expr: 
                636: name: 
                 637: name: trak
                 638: operator: ->
                 639: name: Media
                 640: operator: ->
                 641: name: information
                 642: operator: ->
                 643: name: sampleTable
                 644: operator: ->
                 645: name: sampleGroupsDescription
      646: for: 
       647: control: 
        648: init: 
         649: expr: 
          650: name: i
          651: operator: =
          652: literal: 0
        653: condition: 
         654: expr: 
          655: name: i
          656: operator: <
          657: name: count
        658: incr: 
         659: expr: 
          660: name: i
          661: operator: ++
       662: block: 
        663: block_content: 
         664: decl_stmt: 
          665: decl: 
           666: type: 
            667: name: GF_SampleGroupDescriptionBox
            668: modifier: *
           669: name: sgdesc
           670: init: 
            671: expr: 
             672: operator: (
             673: name: GF_SampleGroupDescriptionBox
             674: operator: *
             675: operator: )
             676: call: 
              677: name: gf_list_get
              678: argument_list: 
               679: argument: 
                680: expr: 
                 681: name: 
                  682: name: trak
                  683: operator: ->
                  684: name: Media
                  685: operator: ->
                  686: name: information
                  687: operator: ->
                  688: name: sampleTable
                  689: operator: ->
                  690: name: sampleGroupsDescription
               691: argument: 
                692: expr: 
                 693: name: i
         694: if_stmt: 
          695: if: 
           696: condition: 
            697: expr: 
             698: name: 
              699: name: sgdesc
              700: operator: ->
              701: name: grouping_type
             702: operator: !=
             703: name: GF_ISOM_SAMPLE_GROUP_SEIG
           704: block: 
            705: block_content: 
             706: continue: 
         707: if_stmt: 
          708: if: 
           709: condition: 
            710: expr: 
             711: name: 
              712: name: sgdesc
              713: operator: ->
              714: name: default_description_index
           715: block: 
            716: block_content: 
             717: expr_stmt: 
              718: expr: 
               719: name: seig_entry
               720: operator: =
               721: call: 
                722: name: gf_list_get
                723: argument_list: 
                 724: argument: 
                  725: expr: 
                   726: name: 
                    727: name: sgdesc
                    728: operator: ->
                    729: name: group_descriptions
                 730: argument: 
                  731: expr: 
                   732: name: 
                    733: name: sgdesc
                    734: operator: ->
                    735: name: default_description_index
                   736: operator: -
                   737: literal: 1
          738: else: 
           739: block: 
            740: block_content: 
             741: expr_stmt: 
              742: expr: 
               743: name: seig_entry
               744: operator: =
               745: call: 
                746: name: gf_list_get
                747: argument_list: 
                 748: argument: 
                  749: expr: 
                   750: name: 
                    751: name: sgdesc
                    752: operator: ->
                    753: name: group_descriptions
                 754: argument: 
                  755: expr: 
                   756: literal: 0
         757: if_stmt: 
          758: if: 
           759: condition: 
            760: expr: 
             761: name: seig_entry
             762: operator: &&
             763: operator: !
             764: name: 
              765: name: seig_entry
              766: operator: ->
              767: name: key_info
              768: index: 
               769: expr: 
                770: literal: 0
           771: block: 
            772: block_content: 
             773: expr_stmt: 
              774: expr: 
               775: name: seig_entry
               776: operator: =
               777: name: NULL
         778: break: 
      779: if_stmt: 
       780: if: 
        781: condition: 
         782: expr: 
          783: name: seig_entry
        784: block: 
         785: block_content: 
          786: if_stmt: 
           787: if: 
            788: condition: 
             789: expr: 
              790: name: default_IsEncrypted
            791: block: 
             792: block_content: 
              793: expr_stmt: 
               794: expr: 
                795: operator: *
                796: name: default_IsEncrypted
                797: operator: =
                798: name: 
                 799: name: seig_entry
                 800: operator: ->
                 801: name: IsProtected
          802: if_stmt: 
           803: if: 
            804: condition: 
             805: expr: 
              806: name: crypt_byte_block
            807: block: 
             808: block_content: 
              809: expr_stmt: 
               810: expr: 
                811: operator: *
                812: name: crypt_byte_block
                813: operator: =
                814: name: 
                 815: name: seig_entry
                 816: operator: ->
                 817: name: crypt_byte_block
          818: if_stmt: 
           819: if: 
            820: condition: 
             821: expr: 
              822: name: skip_byte_block
            823: block: 
             824: block_content: 
              825: expr_stmt: 
               826: expr: 
                827: operator: *
                828: name: skip_byte_block
                829: operator: =
                830: name: 
                 831: name: seig_entry
                 832: operator: ->
                 833: name: skip_byte_block
          834: if_stmt: 
           835: if: 
            836: condition: 
             837: expr: 
              838: name: key_info
            839: block: 
             840: block_content: 
              841: expr_stmt: 
               842: expr: 
                843: operator: *
                844: name: key_info
                845: operator: =
                846: name: 
                 847: name: seig_entry
                 848: operator: ->
                 849: name: key_info
          850: if_stmt: 
           851: if: 
            852: condition: 
             853: expr: 
              854: name: key_info_size
            855: block: 
             856: block_content: 
              857: expr_stmt: 
               858: expr: 
                859: operator: *
                860: name: key_info_size
                861: operator: =
                862: name: 
                 863: name: seig_entry
                 864: operator: ->
                 865: name: key_info_size
          866: if_stmt: 
           867: if: 
            868: condition: 
             869: expr: 
              870: name: container_type
            871: block: 
             872: block_content: 
              873: expr_stmt: 
               874: expr: 
                875: operator: *
                876: name: container_type
                877: operator: =
                878: name: GF_ISOM_BOX_TYPE_SENC
       879: else: 
        880: block: 
         881: block_content: 
          882: if_stmt: 
           883: if: 
            884: condition: 
             885: expr: 
              886: operator: !
              887: name: 
               888: name: trak
               889: operator: ->
               890: name: moov
               891: operator: ->
               892: name: mov
               893: operator: ->
               894: name: is_smooth
            895: block: 
             896: block_content: 
              897: expr_stmt: 
               898: expr: 
                899: name: 
                 900: name: trak
                 901: operator: ->
                 902: name: moov
                 903: operator: ->
                 904: name: mov
                 905: operator: ->
                 906: name: is_smooth
                907: operator: =
                908: name: GF_TRUE
              909: expr_stmt: 
               910: expr: 
                911: call: 
                 912: name: GF_LOG
                 913: argument_list: 
                  914: argument: 
                   915: expr: 
                    916: name: GF_LOG_WARNING
                  917: argument: 
                   918: expr: 
                    919: name: GF_LOG_CONTAINER
                  920: argument: 
                   921: expr: 
                    922: operator: (
                    923: literal: "[iso file] senc box without tenc, assuming MS smooth+piff\n"
                    924: operator: )
          925: if_stmt: 
           926: if: 
            927: condition: 
             928: expr: 
              929: name: default_IsEncrypted
            930: block: 
             931: block_content: 
              932: expr_stmt: 
               933: expr: 
                934: operator: *
                935: name: default_IsEncrypted
                936: operator: =
                937: name: GF_TRUE
          938: comment: //set default value, overwritten below
          939: if_stmt: 
           940: if: 
            941: condition: 
             942: expr: 
              943: name: container_type
            944: block: 
             945: block_content: 
              946: expr_stmt: 
               947: expr: 
                948: operator: *
                949: name: container_type
                950: operator: =
                951: name: GF_ISOM_BOX_UUID_PSEC
  952: if_stmt: 
   953: if: 
    954: condition: 
     955: expr: 
      956: name: container_type
      957: operator: &&
      958: name: 
       959: name: trak
       960: operator: ->
       961: name: sample_encryption
    962: block: 
     963: block_content: 
      964: if_stmt: 
       965: if: 
        966: condition: 
         967: expr: 
          968: name: 
           969: name: trak
           970: operator: ->
           971: name: sample_encryption
           972: operator: ->
           973: name: type
          974: operator: ==
          975: name: GF_ISOM_BOX_TYPE_SENC
        976: block: 
         977: block_content: 
          978: expr_stmt: 
           979: expr: 
            980: operator: *
            981: name: container_type
            982: operator: =
            983: name: GF_ISOM_BOX_TYPE_SENC
       984: if: 
        985: condition: 
         986: expr: 
          987: name: 
           988: name: trak
           989: operator: ->
           990: name: sample_encryption
           991: operator: ->
           992: name: type
          993: operator: ==
          994: name: GF_ISOM_BOX_TYPE_UUID
        995: block: 
         996: block_content: 
          997: expr_stmt: 
           998: expr: 
            999: operator: *
            1000: name: container_type
            1001: operator: =
            1002: operator: (
            1003: operator: (
            1004: name: GF_UUIDBox
            1005: operator: *
            1006: operator: )
            1007: name: 
             1008: name: trak
             1009: operator: ->
             1010: name: sample_encryption
            1011: operator: )
            1012: operator: ->
            1013: name: internal_4cc
=====
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: GF_ProtectionSchemeInfoBox
    5: modifier: *
   6: name: sinf
 7: comment: //setup all default as not encrypted
 8: if_stmt: 
  9: if: 
   10: condition: 
    11: expr: 
     12: name: default_IsEncrypted
   13: block: 
    14: block_content: 
     15: expr_stmt: 
      16: expr: 
       17: operator: *
       18: name: default_IsEncrypted
       19: operator: =
       20: name: GF_FALSE
 21: if_stmt: 
  22: if: 
   23: condition: 
    24: expr: 
     25: name: crypt_byte_block
   26: block: 
    27: block_content: 
     28: expr_stmt: 
      29: expr: 
       30: operator: *
       31: name: crypt_byte_block
       32: operator: =
       33: literal: 0
 34: if_stmt: 
  35: if: 
   36: condition: 
    37: expr: 
     38: name: skip_byte_block
   39: block: 
    40: block_content: 
     41: expr_stmt: 
      42: expr: 
       43: operator: *
       44: name: skip_byte_block
       45: operator: =
       46: literal: 0
 47: if_stmt: 
  48: if: 
   49: condition: 
    50: expr: 
     51: name: container_type
   52: block: 
    53: block_content: 
     54: expr_stmt: 
      55: expr: 
       56: operator: *
       57: name: container_type
       58: operator: =
       59: literal: 0
 60: if_stmt: 
  61: if: 
   62: condition: 
    63: expr: 
     64: name: key_info
   65: block: 
    66: block_content: 
     67: expr_stmt: 
      68: expr: 
       69: operator: *
       70: name: key_info
       71: operator: =
       72: name: NULL
 73: if_stmt: 
  74: if: 
   75: condition: 
    76: expr: 
     77: name: key_info_size
   78: block: 
    79: block_content: 
     80: expr_stmt: 
      81: expr: 
       82: operator: *
       83: name: key_info_size
       84: operator: =
       85: literal: 0
 86: expr_stmt: 
  87: expr: 
   88: name: sinf
   89: operator: =
   90: call: 
    91: name: isom_get_sinf_entry
    92: argument_list: 
     93: argument: 
      94: expr: 
       95: name: trak
     96: argument: 
      97: expr: 
       98: name: sampleDescriptionIndex
     99: argument: 
      100: expr: 
       101: name: GF_ISOM_CENC_SCHEME
     102: argument: 
      103: expr: 
       104: name: NULL
 105: if_stmt: 
  106: if: 
   107: condition: 
    108: expr: 
     109: operator: !
     110: name: sinf
   111: block: 
    112: block_content: 
     113: expr_stmt: 
      114: expr: 
       115: name: sinf
       116: operator: =
       117: call: 
        118: name: isom_get_sinf_entry
        119: argument_list: 
         120: argument: 
          121: expr: 
           122: name: trak
         123: argument: 
          124: expr: 
           125: name: sampleDescriptionIndex
         126: argument: 
          127: expr: 
           128: name: GF_ISOM_CBC_SCHEME
         129: argument: 
          130: expr: 
           131: name: NULL
 132: if_stmt: 
  133: if: 
   134: condition: 
    135: expr: 
     136: operator: !
     137: name: sinf
   138: block: 
    139: block_content: 
     140: expr_stmt: 
      141: expr: 
       142: name: sinf
       143: operator: =
       144: call: 
        145: name: isom_get_sinf_entry
        146: argument_list: 
         147: argument: 
          148: expr: 
           149: name: trak
         150: argument: 
          151: expr: 
           152: name: sampleDescriptionIndex
         153: argument: 
          154: expr: 
           155: name: GF_ISOM_CENS_SCHEME
         156: argument: 
          157: expr: 
           158: name: NULL
 159: if_stmt: 
  160: if: 
   161: condition: 
    162: expr: 
     163: operator: !
     164: name: sinf
   165: block: 
    166: block_content: 
     167: expr_stmt: 
      168: expr: 
       169: name: sinf
       170: operator: =
       171: call: 
        172: name: isom_get_sinf_entry
        173: argument_list: 
         174: argument: 
          175: expr: 
           176: name: trak
         177: argument: 
          178: expr: 
           179: name: sampleDescriptionIndex
         180: argument: 
          181: expr: 
           182: name: GF_ISOM_CBCS_SCHEME
         183: argument: 
          184: expr: 
           185: name: NULL
 186: if_stmt: 
  187: if: 
   188: condition: 
    189: expr: 
     190: operator: !
     191: name: sinf
   192: block: 
    193: block_content: 
     194: expr_stmt: 
      195: expr: 
       196: name: sinf
       197: operator: =
       198: call: 
        199: name: isom_get_sinf_entry
        200: argument_list: 
         201: argument: 
          202: expr: 
           203: name: trak
         204: argument: 
          205: expr: 
           206: name: sampleDescriptionIndex
         207: argument: 
          208: expr: 
           209: name: GF_ISOM_PIFF_SCHEME
         210: argument: 
          211: expr: 
           212: name: NULL
 213: if_stmt: 
  214: if: 
   215: condition: 
    216: expr: 
     217: operator: !
     218: name: sinf
   219: block: 
    220: block_content: 
     221: decl_stmt: 
      222: decl: 
       223: type: 
        224: name: u32
       225: name: i
      226: decl: 
       227: type: 
       228: name: nb_stsd
       229: init: 
        230: expr: 
         231: call: 
          232: name: gf_list_count
          233: argument_list: 
           234: argument: 
            235: expr: 
             236: name: 
              237: name: trak
              238: operator: ->
              239: name: Media
              240: operator: ->
              241: name: information
              242: operator: ->
              243: name: sampleTable
              244: operator: ->
              245: name: SampleDescription
              246: operator: ->
              247: name: child_boxes
     248: for: 
      249: control: 
       250: init: 
        251: expr: 
         252: name: i
         253: operator: =
         254: literal: 0
       255: condition: 
        256: expr: 
         257: name: i
         258: operator: <
         259: name: nb_stsd
       260: incr: 
        261: expr: 
         262: name: i
         263: operator: ++
      264: block: 
       265: block_content: 
        266: decl_stmt: 
         267: decl: 
          268: type: 
           269: name: GF_ProtectionSchemeInfoBox
           270: modifier: *
          271: name: a_sinf
        272: decl_stmt: 
         273: decl: 
          274: type: 
           275: name: GF_SampleEntryBox
           276: modifier: *
          277: name: sentry
          278: init: 
           279: expr: 
            280: name: NULL
        281: if_stmt: 
         282: if: 
          283: condition: 
           284: expr: 
            285: name: i
            286: operator: +
            287: literal: 1
            288: operator: ==
            289: name: sampleDescriptionIndex
          290: block: 
           291: block_content: 
            292: continue: 
        293: expr_stmt: 
         294: expr: 
          295: name: sentry
          296: operator: =
          297: call: 
           298: name: gf_list_get
           299: argument_list: 
            300: argument: 
             301: expr: 
              302: name: 
               303: name: trak
               304: operator: ->
               305: name: Media
               306: operator: ->
               307: name: information
               308: operator: ->
               309: name: sampleTable
               310: operator: ->
               311: name: SampleDescription
               312: operator: ->
               313: name: child_boxes
            314: argument: 
             315: expr: 
              316: name: i
        317: expr_stmt: 
         318: expr: 
          319: name: a_sinf
          320: operator: =
          321: operator: (
          322: name: GF_ProtectionSchemeInfoBox
          323: operator: *
          324: operator: )
          325: call: 
           326: name: gf_isom_box_find_child
           327: argument_list: 
            328: argument: 
             329: expr: 
              330: name: 
               331: name: sentry
               332: operator: ->
               333: name: child_boxes
            334: argument: 
             335: expr: 
              336: name: GF_ISOM_BOX_TYPE_SINF
        337: if_stmt: 
         338: if: 
          339: condition: 
           340: expr: 
            341: operator: !
            342: name: a_sinf
          343: block: 
           344: block_content: 
            345: continue: 
        346: comment: //signal default (not encrypted)
        347: return: 
 348: if_stmt: 
  349: if: 
   350: condition: 
    351: expr: 
     352: name: sinf
     353: operator: &&
     354: name: 
      355: name: sinf
      356: operator: ->
      357: name: info
     358: operator: &&
     359: name: 
      360: name: sinf
      361: operator: ->
      362: name: info
      363: operator: ->
      364: name: tenc
   365: block: 
    366: block_content: 
     367: if_stmt: 
      368: if: 
       369: condition: 
        370: expr: 
         371: name: default_IsEncrypted
       372: block: 
        373: block_content: 
         374: expr_stmt: 
          375: expr: 
           376: operator: *
           377: name: default_IsEncrypted
           378: operator: =
           379: name: 
            380: name: sinf
            381: operator: ->
            382: name: info
            383: operator: ->
            384: name: tenc
            385: operator: ->
            386: name: isProtected
     387: if_stmt: 
      388: if: 
       389: condition: 
        390: expr: 
         391: name: crypt_byte_block
       392: block: 
        393: block_content: 
         394: expr_stmt: 
          395: expr: 
           396: operator: *
           397: name: crypt_byte_block
           398: operator: =
           399: name: 
            400: name: sinf
            401: operator: ->
            402: name: info
            403: operator: ->
            404: name: tenc
            405: operator: ->
            406: name: crypt_byte_block
     407: if_stmt: 
      408: if: 
       409: condition: 
        410: expr: 
         411: name: skip_byte_block
       412: block: 
        413: block_content: 
         414: expr_stmt: 
          415: expr: 
           416: operator: *
           417: name: skip_byte_block
           418: operator: =
           419: name: 
            420: name: sinf
            421: operator: ->
            422: name: info
            423: operator: ->
            424: name: tenc
            425: operator: ->
            426: name: skip_byte_block
     427: if_stmt: 
      428: if: 
       429: condition: 
        430: expr: 
         431: name: key_info
       432: block: 
        433: block_content: 
         434: expr_stmt: 
          435: expr: 
           436: operator: *
           437: name: key_info
           438: operator: =
           439: name: 
            440: name: sinf
            441: operator: ->
            442: name: info
            443: operator: ->
            444: name: tenc
            445: operator: ->
            446: name: key_info
     447: if_stmt: 
      448: if: 
       449: condition: 
        450: expr: 
         451: name: key_info_size
       452: block: 
        453: block_content: 
         454: expr_stmt: 
          455: expr: 
           456: operator: *
           457: name: key_info_size
           458: operator: =
           459: literal: 20
         460: if_stmt: 
          461: if: 
           462: condition: 
            463: expr: 
             464: operator: !
             465: name: 
              466: name: sinf
              467: operator: ->
              468: name: info
              469: operator: ->
              470: name: tenc
              471: operator: ->
              472: name: key_info
              473: index: 
               474: expr: 
                475: literal: 3
           476: block: 
            477: block_content: 
             478: expr_stmt: 
              479: expr: 
               480: operator: *
               481: name: key_info_size
               482: operator: +=
               483: literal: 1
               484: operator: +
               485: name: 
                486: name: sinf
                487: operator: ->
                488: name: info
                489: operator: ->
                490: name: tenc
                491: operator: ->
                492: name: key_info
                493: index: 
                 494: expr: 
                  495: literal: 20
     496: comment: //set default value, overwritten below
     497: if_stmt: 
      498: if: 
       499: condition: 
        500: expr: 
         501: name: container_type
       502: block: 
        503: block_content: 
         504: expr_stmt: 
          505: expr: 
           506: operator: *
           507: name: container_type
           508: operator: =
           509: name: GF_ISOM_BOX_TYPE_SENC
  510: if: 
   511: condition: 
    512: expr: 
     513: name: sinf
     514: operator: &&
     515: name: 
      516: name: sinf
      517: operator: ->
      518: name: info
     519: operator: &&
     520: name: 
      521: name: sinf
      522: operator: ->
      523: name: info
      524: operator: ->
      525: name: piff_tenc
   526: block: 
    527: block_content: 
     528: if_stmt: 
      529: if: 
       530: condition: 
        531: expr: 
         532: name: default_IsEncrypted
       533: block: 
        534: block_content: 
         535: expr_stmt: 
          536: expr: 
           537: operator: *
           538: name: default_IsEncrypted
           539: operator: =
           540: name: GF_TRUE
     541: if_stmt: 
      542: if: 
       543: condition: 
        544: expr: 
         545: name: key_info
       546: block: 
        547: block_content: 
         548: expr_stmt: 
          549: expr: 
           550: operator: *
           551: name: key_info
           552: operator: =
           553: name: 
            554: name: sinf
            555: operator: ->
            556: name: info
            557: operator: ->
            558: name: piff_tenc
            559: operator: ->
            560: name: key_info
     561: if_stmt: 
      562: if: 
       563: condition: 
        564: expr: 
         565: name: key_info_size
       566: block: 
        567: block_content: 
         568: expr_stmt: 
          569: expr: 
           570: operator: *
           571: name: key_info_size
           572: operator: =
           573: literal: 19
     574: comment: //set default value, overwritten below
     575: if_stmt: 
      576: if: 
       577: condition: 
        578: expr: 
         579: name: container_type
       580: block: 
        581: block_content: 
         582: expr_stmt: 
          583: expr: 
           584: operator: *
           585: name: container_type
           586: operator: =
           587: name: GF_ISOM_BOX_UUID_PSEC
  588: else: 
   589: block: 
    590: block_content: 
     591: decl_stmt: 
      592: decl: 
       593: type: 
        594: name: u32
       595: name: i
      596: decl: 
       597: type: 
       598: name: count
       599: init: 
        600: expr: 
         601: literal: 0
     602: decl_stmt: 
      603: decl: 
       604: type: 
        605: name: GF_CENCSampleEncryptionGroupEntry
        606: modifier: *
       607: name: seig_entry
       608: init: 
        609: expr: 
         610: name: NULL
     611: if_stmt: 
      612: if: 
       613: condition: 
        614: expr: 
         615: operator: !
         616: name: 
          617: name: trak
          618: operator: ->
          619: name: moov
          620: operator: ->
          621: name: mov
          622: operator: ->
          623: name: is_smooth
       624: block: 
        625: block_content: 
         626: expr_stmt: 
          627: expr: 
           628: name: count
           629: operator: =
           630: call: 
            631: name: gf_list_count
            632: argument_list: 
             633: argument: 
              634: expr: 
               635: name: 
                636: name: trak
                637: operator: ->
                638: name: Media
                639: operator: ->
                640: name: information
                641: operator: ->
                642: name: sampleTable
                643: operator: ->
                644: name: sampleGroupsDescription
     645: for: 
      646: control: 
       647: init: 
        648: expr: 
         649: name: i
         650: operator: =
         651: literal: 0
       652: condition: 
        653: expr: 
         654: name: i
         655: operator: <
         656: name: count
       657: incr: 
        658: expr: 
         659: name: i
         660: operator: ++
      661: block: 
       662: block_content: 
        663: decl_stmt: 
         664: decl: 
          665: type: 
           666: name: GF_SampleGroupDescriptionBox
           667: modifier: *
          668: name: sgdesc
          669: init: 
           670: expr: 
            671: operator: (
            672: name: GF_SampleGroupDescriptionBox
            673: operator: *
            674: operator: )
            675: call: 
             676: name: gf_list_get
             677: argument_list: 
              678: argument: 
               679: expr: 
                680: name: 
                 681: name: trak
                 682: operator: ->
                 683: name: Media
                 684: operator: ->
                 685: name: information
                 686: operator: ->
                 687: name: sampleTable
                 688: operator: ->
                 689: name: sampleGroupsDescription
              690: argument: 
               691: expr: 
                692: name: i
        693: if_stmt: 
         694: if: 
          695: condition: 
           696: expr: 
            697: name: 
             698: name: sgdesc
             699: operator: ->
             700: name: grouping_type
            701: operator: !=
            702: name: GF_ISOM_SAMPLE_GROUP_SEIG
          703: block: 
           704: block_content: 
            705: continue: 
        706: if_stmt: 
         707: if: 
          708: condition: 
           709: expr: 
            710: name: 
             711: name: sgdesc
             712: operator: ->
             713: name: default_description_index
          714: block: 
           715: block_content: 
            716: expr_stmt: 
             717: expr: 
              718: name: seig_entry
              719: operator: =
              720: call: 
               721: name: gf_list_get
               722: argument_list: 
                723: argument: 
                 724: expr: 
                  725: name: 
                   726: name: sgdesc
                   727: operator: ->
                   728: name: group_descriptions
                729: argument: 
                 730: expr: 
                  731: name: 
                   732: name: sgdesc
                   733: operator: ->
                   734: name: default_description_index
                  735: operator: -
                  736: literal: 1
         737: else: 
          738: block: 
           739: block_content: 
            740: expr_stmt: 
             741: expr: 
              742: name: seig_entry
              743: operator: =
              744: call: 
               745: name: gf_list_get
               746: argument_list: 
                747: argument: 
                 748: expr: 
                  749: name: 
                   750: name: sgdesc
                   751: operator: ->
                   752: name: group_descriptions
                753: argument: 
                 754: expr: 
                  755: literal: 0
        756: if_stmt: 
         757: if: 
          758: condition: 
           759: expr: 
            760: operator: !
            761: name: 
             762: name: seig_entry
             763: operator: ->
             764: name: key_info
             765: index: 
              766: expr: 
               767: literal: 0
          768: block: 
           769: block_content: 
            770: expr_stmt: 
             771: expr: 
              772: name: seig_entry
              773: operator: =
              774: name: NULL
        775: break: 
     776: if_stmt: 
      777: if: 
       778: condition: 
        779: expr: 
         780: name: seig_entry
       781: block: 
        782: block_content: 
         783: if_stmt: 
          784: if: 
           785: condition: 
            786: expr: 
             787: name: default_IsEncrypted
           788: block: 
            789: block_content: 
             790: expr_stmt: 
              791: expr: 
               792: operator: *
               793: name: default_IsEncrypted
               794: operator: =
               795: name: 
                796: name: seig_entry
                797: operator: ->
                798: name: IsProtected
         799: if_stmt: 
          800: if: 
           801: condition: 
            802: expr: 
             803: name: crypt_byte_block
           804: block: 
            805: block_content: 
             806: expr_stmt: 
              807: expr: 
               808: operator: *
               809: name: crypt_byte_block
               810: operator: =
               811: name: 
                812: name: seig_entry
                813: operator: ->
                814: name: crypt_byte_block
         815: if_stmt: 
          816: if: 
           817: condition: 
            818: expr: 
             819: name: skip_byte_block
           820: block: 
            821: block_content: 
             822: expr_stmt: 
              823: expr: 
               824: operator: *
               825: name: skip_byte_block
               826: operator: =
               827: name: 
                828: name: seig_entry
                829: operator: ->
                830: name: skip_byte_block
         831: if_stmt: 
          832: if: 
           833: condition: 
            834: expr: 
             835: name: key_info
           836: block: 
            837: block_content: 
             838: expr_stmt: 
              839: expr: 
               840: operator: *
               841: name: key_info
               842: operator: =
               843: name: 
                844: name: seig_entry
                845: operator: ->
                846: name: key_info
         847: if_stmt: 
          848: if: 
           849: condition: 
            850: expr: 
             851: name: key_info_size
           852: block: 
            853: block_content: 
             854: expr_stmt: 
              855: expr: 
               856: operator: *
               857: name: key_info_size
               858: operator: =
               859: name: 
                860: name: seig_entry
                861: operator: ->
                862: name: key_info_size
         863: if_stmt: 
          864: if: 
           865: condition: 
            866: expr: 
             867: name: container_type
           868: block: 
            869: block_content: 
             870: expr_stmt: 
              871: expr: 
               872: operator: *
               873: name: container_type
               874: operator: =
               875: name: GF_ISOM_BOX_TYPE_SENC
      876: else: 
       877: block: 
        878: block_content: 
         879: if_stmt: 
          880: if: 
           881: condition: 
            882: expr: 
             883: operator: !
             884: name: 
              885: name: trak
              886: operator: ->
              887: name: moov
              888: operator: ->
              889: name: mov
              890: operator: ->
              891: name: is_smooth
           892: block: 
            893: block_content: 
             894: expr_stmt: 
              895: expr: 
               896: name: 
                897: name: trak
                898: operator: ->
                899: name: moov
                900: operator: ->
                901: name: mov
                902: operator: ->
                903: name: is_smooth
               904: operator: =
               905: name: GF_TRUE
             906: expr_stmt: 
              907: expr: 
               908: call: 
                909: name: GF_LOG
                910: argument_list: 
                 911: argument: 
                  912: expr: 
                   913: name: GF_LOG_WARNING
                 914: argument: 
                  915: expr: 
                   916: name: GF_LOG_CONTAINER
                 917: argument: 
                  918: expr: 
                   919: operator: (
                   920: literal: "[iso file] senc box without tenc, assuming MS smooth+piff\n"
                   921: operator: )
         922: if_stmt: 
          923: if: 
           924: condition: 
            925: expr: 
             926: name: default_IsEncrypted
           927: block: 
            928: block_content: 
             929: expr_stmt: 
              930: expr: 
               931: operator: *
               932: name: default_IsEncrypted
               933: operator: =
               934: name: GF_TRUE
         935: comment: //set default value, overwritten below
         936: if_stmt: 
          937: if: 
           938: condition: 
            939: expr: 
             940: name: container_type
           941: block: 
            942: block_content: 
             943: expr_stmt: 
              944: expr: 
               945: operator: *
               946: name: container_type
               947: operator: =
               948: name: GF_ISOM_BOX_UUID_PSEC
 949: if_stmt: 
  950: if: 
   951: condition: 
    952: expr: 
     953: name: container_type
     954: operator: &&
     955: name: 
      956: name: trak
      957: operator: ->
      958: name: sample_encryption
   959: block: 
    960: block_content: 
     961: if_stmt: 
      962: if: 
       963: condition: 
        964: expr: 
         965: name: 
          966: name: trak
          967: operator: ->
          968: name: sample_encryption
          969: operator: ->
          970: name: type
         971: operator: ==
         972: name: GF_ISOM_BOX_TYPE_SENC
       973: block: 
        974: block_content: 
         975: expr_stmt: 
          976: expr: 
           977: operator: *
           978: name: container_type
           979: operator: =
           980: name: GF_ISOM_BOX_TYPE_SENC
      981: if: 
       982: condition: 
        983: expr: 
         984: name: 
          985: name: trak
          986: operator: ->
          987: name: sample_encryption
          988: operator: ->
          989: name: type
         990: operator: ==
         991: name: GF_ISOM_BOX_TYPE_UUID
       992: block: 
        993: block_content: 
         994: expr_stmt: 
          995: expr: 
           996: operator: *
           997: name: container_type
           998: operator: =
           999: operator: (
           1000: operator: (
           1001: name: GF_UUIDBox
           1002: operator: *
           1003: operator: )
           1004: name: 
            1005: name: trak
            1006: operator: ->
            1007: name: sample_encryption
           1008: operator: )
           1009: operator: ->
           1010: name: internal_4cc

----------------------------------------
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: GF_ProtectionSchemeInfoBox
    5: modifier: *
   6: name: sinf
 7: comment: //setup all default as not encrypted
 8: if_stmt: 
  9: if: 
   10: condition: 
    11: expr: 
     12: name: default_IsEncrypted
   13: block: 
    14: block_content: 
     15: expr_stmt: 
      16: expr: 
       17: operator: *
       18: name: default_IsEncrypted
       19: operator: =
       20: name: GF_FALSE
 21: if_stmt: 
  22: if: 
   23: condition: 
    24: expr: 
     25: name: crypt_byte_block
   26: block: 
    27: block_content: 
     28: expr_stmt: 
      29: expr: 
       30: operator: *
       31: name: crypt_byte_block
       32: operator: =
       33: literal: 0
 34: if_stmt: 
  35: if: 
   36: condition: 
    37: expr: 
     38: name: skip_byte_block
   39: block: 
    40: block_content: 
     41: expr_stmt: 
      42: expr: 
       43: operator: *
       44: name: skip_byte_block
       45: operator: =
       46: literal: 0
 47: if_stmt: 
  48: if: 
   49: condition: 
    50: expr: 
     51: name: container_type
   52: block: 
    53: block_content: 
     54: expr_stmt: 
      55: expr: 
       56: operator: *
       57: name: container_type
       58: operator: =
       59: literal: 0
 60: if_stmt: 
  61: if: 
   62: condition: 
    63: expr: 
     64: name: key_info
   65: block: 
    66: block_content: 
     67: expr_stmt: 
      68: expr: 
       69: operator: *
       70: name: key_info
       71: operator: =
       72: name: NULL
 73: if_stmt: 
  74: if: 
   75: condition: 
    76: expr: 
     77: name: key_info_size
   78: block: 
    79: block_content: 
     80: expr_stmt: 
      81: expr: 
       82: operator: *
       83: name: key_info_size
       84: operator: =
       85: literal: 0
 86: expr_stmt: 
  87: expr: 
   88: name: sinf
   89: operator: =
   90: call: 
    91: name: isom_get_sinf_entry
    92: argument_list: 
     93: argument: 
      94: expr: 
       95: name: trak
     96: argument: 
      97: expr: 
       98: name: sampleDescriptionIndex
     99: argument: 
      100: expr: 
       101: name: GF_ISOM_CENC_SCHEME
     102: argument: 
      103: expr: 
       104: name: NULL
 105: if_stmt: 
  106: if: 
   107: condition: 
    108: expr: 
     109: operator: !
     110: name: sinf
   111: block: 
    112: block_content: 
     113: expr_stmt: 
      114: expr: 
       115: name: sinf
       116: operator: =
       117: call: 
        118: name: isom_get_sinf_entry
        119: argument_list: 
         120: argument: 
          121: expr: 
           122: name: trak
         123: argument: 
          124: expr: 
           125: name: sampleDescriptionIndex
         126: argument: 
          127: expr: 
           128: name: GF_ISOM_CBC_SCHEME
         129: argument: 
          130: expr: 
           131: name: NULL
 132: if_stmt: 
  133: if: 
   134: condition: 
    135: expr: 
     136: operator: !
     137: name: sinf
   138: block: 
    139: block_content: 
     140: expr_stmt: 
      141: expr: 
       142: name: sinf
       143: operator: =
       144: call: 
        145: name: isom_get_sinf_entry
        146: argument_list: 
         147: argument: 
          148: expr: 
           149: name: trak
         150: argument: 
          151: expr: 
           152: name: sampleDescriptionIndex
         153: argument: 
          154: expr: 
           155: name: GF_ISOM_CENS_SCHEME
         156: argument: 
          157: expr: 
           158: name: NULL
 159: if_stmt: 
  160: if: 
   161: condition: 
    162: expr: 
     163: operator: !
     164: name: sinf
   165: block: 
    166: block_content: 
     167: expr_stmt: 
      168: expr: 
       169: name: sinf
       170: operator: =
       171: call: 
        172: name: isom_get_sinf_entry
        173: argument_list: 
         174: argument: 
          175: expr: 
           176: name: trak
         177: argument: 
          178: expr: 
           179: name: sampleDescriptionIndex
         180: argument: 
          181: expr: 
           182: name: GF_ISOM_CBCS_SCHEME
         183: argument: 
          184: expr: 
           185: name: NULL
 186: if_stmt: 
  187: if: 
   188: condition: 
    189: expr: 
     190: operator: !
     191: name: sinf
   192: block: 
    193: block_content: 
     194: expr_stmt: 
      195: expr: 
       196: name: sinf
       197: operator: =
       198: call: 
        199: name: isom_get_sinf_entry
        200: argument_list: 
         201: argument: 
          202: expr: 
           203: name: trak
         204: argument: 
          205: expr: 
           206: name: sampleDescriptionIndex
         207: argument: 
          208: expr: 
           209: name: GF_ISOM_PIFF_SCHEME
         210: argument: 
          211: expr: 
           212: name: NULL
 213: if_stmt: 
  214: if: 
   215: condition: 
    216: expr: 
     217: operator: !
     218: name: sinf
   219: block: 
    220: block_content: 
     221: decl_stmt: 
      222: decl: 
       223: type: 
        224: name: u32
       225: name: i
      226: decl: 
       227: type: 
       228: name: nb_stsd
       229: init: 
        230: expr: 
         231: call: 
          232: name: gf_list_count
          233: argument_list: 
           234: argument: 
            235: expr: 
             236: name: 
              237: name: trak
              238: operator: ->
              239: name: Media
              240: operator: ->
              241: name: information
              242: operator: ->
              243: name: sampleTable
              244: operator: ->
              245: name: SampleDescription
              246: operator: ->
              247: name: child_boxes
     248: for: 
      249: control: 
       250: init: 
        251: expr: 
         252: name: i
         253: operator: =
         254: literal: 0
       255: condition: 
        256: expr: 
         257: name: i
         258: operator: <
         259: name: nb_stsd
       260: incr: 
        261: expr: 
         262: name: i
         263: operator: ++
      264: block: 
       265: block_content: 
        266: decl_stmt: 
         267: decl: 
          268: type: 
           269: name: GF_ProtectionSchemeInfoBox
           270: modifier: *
          271: name: a_sinf
        272: decl_stmt: 
         273: decl: 
          274: type: 
           275: name: GF_SampleEntryBox
           276: modifier: *
          277: name: sentry
          278: init: 
           279: expr: 
            280: name: NULL
        281: if_stmt: 
         282: if: 
          283: condition: 
           284: expr: 
            285: name: i
            286: operator: +
            287: literal: 1
            288: operator: ==
            289: name: sampleDescriptionIndex
          290: block: 
           291: block_content: 
            292: continue: 
        293: expr_stmt: 
         294: expr: 
          295: name: sentry
          296: operator: =
          297: call: 
           298: name: gf_list_get
           299: argument_list: 
            300: argument: 
             301: expr: 
              302: name: 
               303: name: trak
               304: operator: ->
               305: name: Media
               306: operator: ->
               307: name: information
               308: operator: ->
               309: name: sampleTable
               310: operator: ->
               311: name: SampleDescription
               312: operator: ->
               313: name: child_boxes
            314: argument: 
             315: expr: 
              316: name: i
        317: expr_stmt: 
         318: expr: 
          319: name: a_sinf
          320: operator: =
          321: operator: (
          322: name: GF_ProtectionSchemeInfoBox
          323: operator: *
          324: operator: )
          325: call: 
           326: name: gf_isom_box_find_child
           327: argument_list: 
            328: argument: 
             329: expr: 
              330: name: 
               331: name: sentry
               332: operator: ->
               333: name: child_boxes
            334: argument: 
             335: expr: 
              336: name: GF_ISOM_BOX_TYPE_SINF
        337: if_stmt: 
         338: if: 
          339: condition: 
           340: expr: 
            341: operator: !
            342: name: a_sinf
          343: block: 
           344: block_content: 
            345: continue: 
        346: comment: //signal default (not encrypted)
        347: return: 
 348: if_stmt: 
  349: if: 
   350: condition: 
    351: expr: 
     352: name: sinf
     353: operator: &&
     354: name: 
      355: name: sinf
      356: operator: ->
      357: name: info
     358: operator: &&
     359: name: 
      360: name: sinf
      361: operator: ->
      362: name: info
      363: operator: ->
      364: name: tenc
   365: block: 
    366: block_content: 
     367: if_stmt: 
      368: if: 
       369: condition: 
        370: expr: 
         371: name: default_IsEncrypted
       372: block: 
        373: block_content: 
         374: expr_stmt: 
          375: expr: 
           376: operator: *
           377: name: default_IsEncrypted
           378: operator: =
           379: name: 
            380: name: sinf
            381: operator: ->
            382: name: info
            383: operator: ->
            384: name: tenc
            385: operator: ->
            386: name: isProtected
     387: if_stmt: 
      388: if: 
       389: condition: 
        390: expr: 
         391: name: crypt_byte_block
       392: block: 
        393: block_content: 
         394: expr_stmt: 
          395: expr: 
           396: operator: *
           397: name: crypt_byte_block
           398: operator: =
           399: name: 
            400: name: sinf
            401: operator: ->
            402: name: info
            403: operator: ->
            404: name: tenc
            405: operator: ->
            406: name: crypt_byte_block
     407: if_stmt: 
      408: if: 
       409: condition: 
        410: expr: 
         411: name: skip_byte_block
       412: block: 
        413: block_content: 
         414: expr_stmt: 
          415: expr: 
           416: operator: *
           417: name: skip_byte_block
           418: operator: =
           419: name: 
            420: name: sinf
            421: operator: ->
            422: name: info
            423: operator: ->
            424: name: tenc
            425: operator: ->
            426: name: skip_byte_block
     427: if_stmt: 
      428: if: 
       429: condition: 
        430: expr: 
         431: name: key_info
       432: block: 
        433: block_content: 
         434: expr_stmt: 
          435: expr: 
           436: operator: *
           437: name: key_info
           438: operator: =
           439: name: 
            440: name: sinf
            441: operator: ->
            442: name: info
            443: operator: ->
            444: name: tenc
            445: operator: ->
            446: name: key_info
     447: if_stmt: 
      448: if: 
       449: condition: 
        450: expr: 
         451: name: key_info_size
       452: block: 
        453: block_content: 
         454: expr_stmt: 
          455: expr: 
           456: operator: *
           457: name: key_info_size
           458: operator: =
           459: literal: 20
         460: if_stmt: 
          461: if: 
           462: condition: 
            463: expr: 
             464: operator: !
             465: name: 
              466: name: sinf
              467: operator: ->
              468: name: info
              469: operator: ->
              470: name: tenc
              471: operator: ->
              472: name: key_info
              473: index: 
               474: expr: 
                475: literal: 3
           476: block: 
            477: block_content: 
             478: expr_stmt: 
              479: expr: 
               480: operator: *
               481: name: key_info_size
               482: operator: +=
               483: literal: 1
               484: operator: +
               485: name: 
                486: name: sinf
                487: operator: ->
                488: name: info
                489: operator: ->
                490: name: tenc
                491: operator: ->
                492: name: key_info
                493: index: 
                 494: expr: 
                  495: literal: 20
     496: comment: //set default value, overwritten below
     497: if_stmt: 
      498: if: 
       499: condition: 
        500: expr: 
         501: name: container_type
       502: block: 
        503: block_content: 
         504: expr_stmt: 
          505: expr: 
           506: operator: *
           507: name: container_type
           508: operator: =
           509: name: GF_ISOM_BOX_TYPE_SENC
  510: if: 
   511: condition: 
    512: expr: 
     513: name: sinf
     514: operator: &&
     515: name: 
      516: name: sinf
      517: operator: ->
      518: name: info
     519: operator: &&
     520: name: 
      521: name: sinf
      522: operator: ->
      523: name: info
      524: operator: ->
      525: name: piff_tenc
   526: block: 
    527: block_content: 
     528: if_stmt: 
      529: if: 
       530: condition: 
        531: expr: 
         532: name: default_IsEncrypted
       533: block: 
        534: block_content: 
         535: expr_stmt: 
          536: expr: 
           537: operator: *
           538: name: default_IsEncrypted
           539: operator: =
           540: name: GF_TRUE
     541: if_stmt: 
      542: if: 
       543: condition: 
        544: expr: 
         545: name: key_info
       546: block: 
        547: block_content: 
         548: expr_stmt: 
          549: expr: 
           550: operator: *
           551: name: key_info
           552: operator: =
           553: name: 
            554: name: sinf
            555: operator: ->
            556: name: info
            557: operator: ->
            558: name: piff_tenc
            559: operator: ->
            560: name: key_info
     561: if_stmt: 
      562: if: 
       563: condition: 
        564: expr: 
         565: name: key_info_size
       566: block: 
        567: block_content: 
         568: expr_stmt: 
          569: expr: 
           570: operator: *
           571: name: key_info_size
           572: operator: =
           573: literal: 19
     574: comment: //set default value, overwritten below
     575: if_stmt: 
      576: if: 
       577: condition: 
        578: expr: 
         579: name: container_type
       580: block: 
        581: block_content: 
         582: expr_stmt: 
          583: expr: 
           584: operator: *
           585: name: container_type
           586: operator: =
           587: name: GF_ISOM_BOX_UUID_PSEC
  588: else: 
   589: block: 
    590: block_content: 
     591: decl_stmt: 
      592: decl: 
       593: type: 
        594: name: u32
       595: name: i
      596: decl: 
       597: type: 
       598: name: count
       599: init: 
        600: expr: 
         601: literal: 0
     602: decl_stmt: 
      603: decl: 
       604: type: 
        605: name: GF_CENCSampleEncryptionGroupEntry
        606: modifier: *
       607: name: seig_entry
       608: init: 
        609: expr: 
         610: name: NULL
     611: if_stmt: 
      612: if: 
       613: condition: 
        614: expr: 
         615: operator: !
         616: name: 
          617: name: trak
          618: operator: ->
          619: name: moov
          620: operator: ->
          621: name: mov
          622: operator: ->
          623: name: is_smooth
       624: block: 
        625: block_content: 
         626: expr_stmt: 
          627: expr: 
           628: name: count
           629: operator: =
           630: call: 
            631: name: gf_list_count
            632: argument_list: 
             633: argument: 
              634: expr: 
               635: name: 
                636: name: trak
                637: operator: ->
                638: name: Media
                639: operator: ->
                640: name: information
                641: operator: ->
                642: name: sampleTable
                643: operator: ->
                644: name: sampleGroupsDescription
     645: for: 
      646: control: 
       647: init: 
        648: expr: 
         649: name: i
         650: operator: =
         651: literal: 0
       652: condition: 
        653: expr: 
         654: name: i
         655: operator: <
         656: name: count
       657: incr: 
        658: expr: 
         659: name: i
         660: operator: ++
      661: block: 
       662: block_content: 
        663: decl_stmt: 
         664: decl: 
          665: type: 
           666: name: GF_SampleGroupDescriptionBox
           667: modifier: *
          668: name: sgdesc
          669: init: 
           670: expr: 
            671: operator: (
            672: name: GF_SampleGroupDescriptionBox
            673: operator: *
            674: operator: )
            675: call: 
             676: name: gf_list_get
             677: argument_list: 
              678: argument: 
               679: expr: 
                680: name: 
                 681: name: trak
                 682: operator: ->
                 683: name: Media
                 684: operator: ->
                 685: name: information
                 686: operator: ->
                 687: name: sampleTable
                 688: operator: ->
                 689: name: sampleGroupsDescription
              690: argument: 
               691: expr: 
                692: name: i
        693: if_stmt: 
         694: if: 
          695: condition: 
           696: expr: 
            697: name: 
             698: name: sgdesc
             699: operator: ->
             700: name: grouping_type
            701: operator: !=
            702: name: GF_ISOM_SAMPLE_GROUP_SEIG
          703: block: 
           704: block_content: 
            705: continue: 
        706: if_stmt: 
         707: if: 
          708: condition: 
           709: expr: 
            710: name: 
             711: name: sgdesc
             712: operator: ->
             713: name: default_description_index
          714: block: 
           715: block_content: 
            716: expr_stmt: 
             717: expr: 
              718: name: seig_entry
              719: operator: =
              720: call: 
               721: name: gf_list_get
               722: argument_list: 
                723: argument: 
                 724: expr: 
                  725: name: 
                   726: name: sgdesc
                   727: operator: ->
                   728: name: group_descriptions
                729: argument: 
                 730: expr: 
                  731: name: 
                   732: name: sgdesc
                   733: operator: ->
                   734: name: default_description_index
                  735: operator: -
                  736: literal: 1
         737: else: 
          738: block: 
           739: block_content: 
            740: expr_stmt: 
             741: expr: 
              742: name: seig_entry
              743: operator: =
              744: call: 
               745: name: gf_list_get
               746: argument_list: 
                747: argument: 
                 748: expr: 
                  749: name: 
                   750: name: sgdesc
                   751: operator: ->
                   752: name: group_descriptions
                753: argument: 
                 754: expr: 
                  755: literal: 0
        756: if_stmt: 
         757: if: 
          758: condition: 
           759: expr: 
            760: name: seig_entry
            761: operator: &&
            762: operator: !
            763: name: 
             764: name: seig_entry
             765: operator: ->
             766: name: key_info
             767: index: 
              768: expr: 
               769: literal: 0
          770: block: 
           771: block_content: 
            772: expr_stmt: 
             773: expr: 
              774: name: seig_entry
              775: operator: =
              776: name: NULL
        777: break: 
     778: if_stmt: 
      779: if: 
       780: condition: 
        781: expr: 
         782: name: seig_entry
       783: block: 
        784: block_content: 
         785: if_stmt: 
          786: if: 
           787: condition: 
            788: expr: 
             789: name: default_IsEncrypted
           790: block: 
            791: block_content: 
             792: expr_stmt: 
              793: expr: 
               794: operator: *
               795: name: default_IsEncrypted
               796: operator: =
               797: name: 
                798: name: seig_entry
                799: operator: ->
                800: name: IsProtected
         801: if_stmt: 
          802: if: 
           803: condition: 
            804: expr: 
             805: name: crypt_byte_block
           806: block: 
            807: block_content: 
             808: expr_stmt: 
              809: expr: 
               810: operator: *
               811: name: crypt_byte_block
               812: operator: =
               813: name: 
                814: name: seig_entry
                815: operator: ->
                816: name: crypt_byte_block
         817: if_stmt: 
          818: if: 
           819: condition: 
            820: expr: 
             821: name: skip_byte_block
           822: block: 
            823: block_content: 
             824: expr_stmt: 
              825: expr: 
               826: operator: *
               827: name: skip_byte_block
               828: operator: =
               829: name: 
                830: name: seig_entry
                831: operator: ->
                832: name: skip_byte_block
         833: if_stmt: 
          834: if: 
           835: condition: 
            836: expr: 
             837: name: key_info
           838: block: 
            839: block_content: 
             840: expr_stmt: 
              841: expr: 
               842: operator: *
               843: name: key_info
               844: operator: =
               845: name: 
                846: name: seig_entry
                847: operator: ->
                848: name: key_info
         849: if_stmt: 
          850: if: 
           851: condition: 
            852: expr: 
             853: name: key_info_size
           854: block: 
            855: block_content: 
             856: expr_stmt: 
              857: expr: 
               858: operator: *
               859: name: key_info_size
               860: operator: =
               861: name: 
                862: name: seig_entry
                863: operator: ->
                864: name: key_info_size
         865: if_stmt: 
          866: if: 
           867: condition: 
            868: expr: 
             869: name: container_type
           870: block: 
            871: block_content: 
             872: expr_stmt: 
              873: expr: 
               874: operator: *
               875: name: container_type
               876: operator: =
               877: name: GF_ISOM_BOX_TYPE_SENC
      878: else: 
       879: block: 
        880: block_content: 
         881: if_stmt: 
          882: if: 
           883: condition: 
            884: expr: 
             885: operator: !
             886: name: 
              887: name: trak
              888: operator: ->
              889: name: moov
              890: operator: ->
              891: name: mov
              892: operator: ->
              893: name: is_smooth
           894: block: 
            895: block_content: 
             896: expr_stmt: 
              897: expr: 
               898: name: 
                899: name: trak
                900: operator: ->
                901: name: moov
                902: operator: ->
                903: name: mov
                904: operator: ->
                905: name: is_smooth
               906: operator: =
               907: name: GF_TRUE
             908: expr_stmt: 
              909: expr: 
               910: call: 
                911: name: GF_LOG
                912: argument_list: 
                 913: argument: 
                  914: expr: 
                   915: name: GF_LOG_WARNING
                 916: argument: 
                  917: expr: 
                   918: name: GF_LOG_CONTAINER
                 919: argument: 
                  920: expr: 
                   921: operator: (
                   922: literal: "[iso file] senc box without tenc, assuming MS smooth+piff\n"
                   923: operator: )
         924: if_stmt: 
          925: if: 
           926: condition: 
            927: expr: 
             928: name: default_IsEncrypted
           929: block: 
            930: block_content: 
             931: expr_stmt: 
              932: expr: 
               933: operator: *
               934: name: default_IsEncrypted
               935: operator: =
               936: name: GF_TRUE
         937: comment: //set default value, overwritten below
         938: if_stmt: 
          939: if: 
           940: condition: 
            941: expr: 
             942: name: container_type
           943: block: 
            944: block_content: 
             945: expr_stmt: 
              946: expr: 
               947: operator: *
               948: name: container_type
               949: operator: =
               950: name: GF_ISOM_BOX_UUID_PSEC
 951: if_stmt: 
  952: if: 
   953: condition: 
    954: expr: 
     955: name: container_type
     956: operator: &&
     957: name: 
      958: name: trak
      959: operator: ->
      960: name: sample_encryption
   961: block: 
    962: block_content: 
     963: if_stmt: 
      964: if: 
       965: condition: 
        966: expr: 
         967: name: 
          968: name: trak
          969: operator: ->
          970: name: sample_encryption
          971: operator: ->
          972: name: type
         973: operator: ==
         974: name: GF_ISOM_BOX_TYPE_SENC
       975: block: 
        976: block_content: 
         977: expr_stmt: 
          978: expr: 
           979: operator: *
           980: name: container_type
           981: operator: =
           982: name: GF_ISOM_BOX_TYPE_SENC
      983: if: 
       984: condition: 
        985: expr: 
         986: name: 
          987: name: trak
          988: operator: ->
          989: name: sample_encryption
          990: operator: ->
          991: name: type
         992: operator: ==
         993: name: GF_ISOM_BOX_TYPE_UUID
       994: block: 
        995: block_content: 
         996: expr_stmt: 
          997: expr: 
           998: operator: *
           999: name: container_type
           1000: operator: =
           1001: operator: (
           1002: operator: (
           1003: name: GF_UUIDBox
           1004: operator: *
           1005: operator: )
           1006: name: 
            1007: name: trak
            1008: operator: ->
            1009: name: sample_encryption
           1010: operator: )
           1011: operator: ->
           1012: name: internal_4cc
=====
0: comment: //setup all default as not encrypted

----------------------------------------
=====
0: if_stmt: 
 1: if: 
  2: condition: 
   3: expr: 
    4: name: sinf
    5: operator: &&
    6: name: 
     7: name: sinf
     8: operator: ->
     9: name: info
    10: operator: &&
    11: name: 
     12: name: sinf
     13: operator: ->
     14: name: info
     15: operator: ->
     16: name: tenc
  17: block: 
   18: block_content: 
    19: if_stmt: 
     20: if: 
      21: condition: 
       22: expr: 
        23: name: default_IsEncrypted
      24: block: 
       25: block_content: 
        26: expr_stmt: 
         27: expr: 
          28: operator: *
          29: name: default_IsEncrypted
          30: operator: =
          31: name: 
           32: name: sinf
           33: operator: ->
           34: name: info
           35: operator: ->
           36: name: tenc
           37: operator: ->
           38: name: isProtected
    39: if_stmt: 
     40: if: 
      41: condition: 
       42: expr: 
        43: name: crypt_byte_block
      44: block: 
       45: block_content: 
        46: expr_stmt: 
         47: expr: 
          48: operator: *
          49: name: crypt_byte_block
          50: operator: =
          51: name: 
           52: name: sinf
           53: operator: ->
           54: name: info
           55: operator: ->
           56: name: tenc
           57: operator: ->
           58: name: crypt_byte_block
    59: if_stmt: 
     60: if: 
      61: condition: 
       62: expr: 
        63: name: skip_byte_block
      64: block: 
       65: block_content: 
        66: expr_stmt: 
         67: expr: 
          68: operator: *
          69: name: skip_byte_block
          70: operator: =
          71: name: 
           72: name: sinf
           73: operator: ->
           74: name: info
           75: operator: ->
           76: name: tenc
           77: operator: ->
           78: name: skip_byte_block
    79: if_stmt: 
     80: if: 
      81: condition: 
       82: expr: 
        83: name: key_info
      84: block: 
       85: block_content: 
        86: expr_stmt: 
         87: expr: 
          88: operator: *
          89: name: key_info
          90: operator: =
          91: name: 
           92: name: sinf
           93: operator: ->
           94: name: info
           95: operator: ->
           96: name: tenc
           97: operator: ->
           98: name: key_info
    99: if_stmt: 
     100: if: 
      101: condition: 
       102: expr: 
        103: name: key_info_size
      104: block: 
       105: block_content: 
        106: expr_stmt: 
         107: expr: 
          108: operator: *
          109: name: key_info_size
          110: operator: =
          111: literal: 20
        112: if_stmt: 
         113: if: 
          114: condition: 
           115: expr: 
            116: operator: !
            117: name: 
             118: name: sinf
             119: operator: ->
             120: name: info
             121: operator: ->
             122: name: tenc
             123: operator: ->
             124: name: key_info
             125: index: 
              126: expr: 
               127: literal: 3
          128: block: 
           129: block_content: 
            130: expr_stmt: 
             131: expr: 
              132: operator: *
              133: name: key_info_size
              134: operator: +=
              135: literal: 1
              136: operator: +
              137: name: 
               138: name: sinf
               139: operator: ->
               140: name: info
               141: operator: ->
               142: name: tenc
               143: operator: ->
               144: name: key_info
               145: index: 
                146: expr: 
                 147: literal: 20
    148: comment: //set default value, overwritten below
    149: if_stmt: 
     150: if: 
      151: condition: 
       152: expr: 
        153: name: container_type
      154: block: 
       155: block_content: 
        156: expr_stmt: 
         157: expr: 
          158: operator: *
          159: name: container_type
          160: operator: =
          161: name: GF_ISOM_BOX_TYPE_SENC
 162: if: 
  163: condition: 
   164: expr: 
    165: name: sinf
    166: operator: &&
    167: name: 
     168: name: sinf
     169: operator: ->
     170: name: info
    171: operator: &&
    172: name: 
     173: name: sinf
     174: operator: ->
     175: name: info
     176: operator: ->
     177: name: piff_tenc
  178: block: 
   179: block_content: 
    180: if_stmt: 
     181: if: 
      182: condition: 
       183: expr: 
        184: name: default_IsEncrypted
      185: block: 
       186: block_content: 
        187: expr_stmt: 
         188: expr: 
          189: operator: *
          190: name: default_IsEncrypted
          191: operator: =
          192: name: GF_TRUE
    193: if_stmt: 
     194: if: 
      195: condition: 
       196: expr: 
        197: name: key_info
      198: block: 
       199: block_content: 
        200: expr_stmt: 
         201: expr: 
          202: operator: *
          203: name: key_info
          204: operator: =
          205: name: 
           206: name: sinf
           207: operator: ->
           208: name: info
           209: operator: ->
           210: name: piff_tenc
           211: operator: ->
           212: name: key_info
    213: if_stmt: 
     214: if: 
      215: condition: 
       216: expr: 
        217: name: key_info_size
      218: block: 
       219: block_content: 
        220: expr_stmt: 
         221: expr: 
          222: operator: *
          223: name: key_info_size
          224: operator: =
          225: literal: 19
    226: comment: //set default value, overwritten below
    227: if_stmt: 
     228: if: 
      229: condition: 
       230: expr: 
        231: name: container_type
      232: block: 
       233: block_content: 
        234: expr_stmt: 
         235: expr: 
          236: operator: *
          237: name: container_type
          238: operator: =
          239: name: GF_ISOM_BOX_UUID_PSEC
 240: else: 
  241: block: 
   242: block_content: 
    243: decl_stmt: 
     244: decl: 
      245: type: 
       246: name: u32
      247: name: i
     248: decl: 
      249: type: 
      250: name: count
      251: init: 
       252: expr: 
        253: literal: 0
    254: decl_stmt: 
     255: decl: 
      256: type: 
       257: name: GF_CENCSampleEncryptionGroupEntry
       258: modifier: *
      259: name: seig_entry
      260: init: 
       261: expr: 
        262: name: NULL
    263: if_stmt: 
     264: if: 
      265: condition: 
       266: expr: 
        267: operator: !
        268: name: 
         269: name: trak
         270: operator: ->
         271: name: moov
         272: operator: ->
         273: name: mov
         274: operator: ->
         275: name: is_smooth
      276: block: 
       277: block_content: 
        278: expr_stmt: 
         279: expr: 
          280: name: count
          281: operator: =
          282: call: 
           283: name: gf_list_count
           284: argument_list: 
            285: argument: 
             286: expr: 
              287: name: 
               288: name: trak
               289: operator: ->
               290: name: Media
               291: operator: ->
               292: name: information
               293: operator: ->
               294: name: sampleTable
               295: operator: ->
               296: name: sampleGroupsDescription
    297: for: 
     298: control: 
      299: init: 
       300: expr: 
        301: name: i
        302: operator: =
        303: literal: 0
      304: condition: 
       305: expr: 
        306: name: i
        307: operator: <
        308: name: count
      309: incr: 
       310: expr: 
        311: name: i
        312: operator: ++
     313: block: 
      314: block_content: 
       315: decl_stmt: 
        316: decl: 
         317: type: 
          318: name: GF_SampleGroupDescriptionBox
          319: modifier: *
         320: name: sgdesc
         321: init: 
          322: expr: 
           323: operator: (
           324: name: GF_SampleGroupDescriptionBox
           325: operator: *
           326: operator: )
           327: call: 
            328: name: gf_list_get
            329: argument_list: 
             330: argument: 
              331: expr: 
               332: name: 
                333: name: trak
                334: operator: ->
                335: name: Media
                336: operator: ->
                337: name: information
                338: operator: ->
                339: name: sampleTable
                340: operator: ->
                341: name: sampleGroupsDescription
             342: argument: 
              343: expr: 
               344: name: i
       345: if_stmt: 
        346: if: 
         347: condition: 
          348: expr: 
           349: name: 
            350: name: sgdesc
            351: operator: ->
            352: name: grouping_type
           353: operator: !=
           354: name: GF_ISOM_SAMPLE_GROUP_SEIG
         355: block: 
          356: block_content: 
           357: continue: 
       358: if_stmt: 
        359: if: 
         360: condition: 
          361: expr: 
           362: name: 
            363: name: sgdesc
            364: operator: ->
            365: name: default_description_index
         366: block: 
          367: block_content: 
           368: expr_stmt: 
            369: expr: 
             370: name: seig_entry
             371: operator: =
             372: call: 
              373: name: gf_list_get
              374: argument_list: 
               375: argument: 
                376: expr: 
                 377: name: 
                  378: name: sgdesc
                  379: operator: ->
                  380: name: group_descriptions
               381: argument: 
                382: expr: 
                 383: name: 
                  384: name: sgdesc
                  385: operator: ->
                  386: name: default_description_index
                 387: operator: -
                 388: literal: 1
        389: else: 
         390: block: 
          391: block_content: 
           392: expr_stmt: 
            393: expr: 
             394: name: seig_entry
             395: operator: =
             396: call: 
              397: name: gf_list_get
              398: argument_list: 
               399: argument: 
                400: expr: 
                 401: name: 
                  402: name: sgdesc
                  403: operator: ->
                  404: name: group_descriptions
               405: argument: 
                406: expr: 
                 407: literal: 0
       408: if_stmt: 
        409: if: 
         410: condition: 
          411: expr: 
           412: operator: !
           413: name: 
            414: name: seig_entry
            415: operator: ->
            416: name: key_info
            417: index: 
             418: expr: 
              419: literal: 0
         420: block: 
          421: block_content: 
           422: expr_stmt: 
            423: expr: 
             424: name: seig_entry
             425: operator: =
             426: name: NULL
       427: break: 
    428: if_stmt: 
     429: if: 
      430: condition: 
       431: expr: 
        432: name: seig_entry
      433: block: 
       434: block_content: 
        435: if_stmt: 
         436: if: 
          437: condition: 
           438: expr: 
            439: name: default_IsEncrypted
          440: block: 
           441: block_content: 
            442: expr_stmt: 
             443: expr: 
              444: operator: *
              445: name: default_IsEncrypted
              446: operator: =
              447: name: 
               448: name: seig_entry
               449: operator: ->
               450: name: IsProtected
        451: if_stmt: 
         452: if: 
          453: condition: 
           454: expr: 
            455: name: crypt_byte_block
          456: block: 
           457: block_content: 
            458: expr_stmt: 
             459: expr: 
              460: operator: *
              461: name: crypt_byte_block
              462: operator: =
              463: name: 
               464: name: seig_entry
               465: operator: ->
               466: name: crypt_byte_block
        467: if_stmt: 
         468: if: 
          469: condition: 
           470: expr: 
            471: name: skip_byte_block
          472: block: 
           473: block_content: 
            474: expr_stmt: 
             475: expr: 
              476: operator: *
              477: name: skip_byte_block
              478: operator: =
              479: name: 
               480: name: seig_entry
               481: operator: ->
               482: name: skip_byte_block
        483: if_stmt: 
         484: if: 
          485: condition: 
           486: expr: 
            487: name: key_info
          488: block: 
           489: block_content: 
            490: expr_stmt: 
             491: expr: 
              492: operator: *
              493: name: key_info
              494: operator: =
              495: name: 
               496: name: seig_entry
               497: operator: ->
               498: name: key_info
        499: if_stmt: 
         500: if: 
          501: condition: 
           502: expr: 
            503: name: key_info_size
          504: block: 
           505: block_content: 
            506: expr_stmt: 
             507: expr: 
              508: operator: *
              509: name: key_info_size
              510: operator: =
              511: name: 
               512: name: seig_entry
               513: operator: ->
               514: name: key_info_size
        515: if_stmt: 
         516: if: 
          517: condition: 
           518: expr: 
            519: name: container_type
          520: block: 
           521: block_content: 
            522: expr_stmt: 
             523: expr: 
              524: operator: *
              525: name: container_type
              526: operator: =
              527: name: GF_ISOM_BOX_TYPE_SENC
     528: else: 
      529: block: 
       530: block_content: 
        531: if_stmt: 
         532: if: 
          533: condition: 
           534: expr: 
            535: operator: !
            536: name: 
             537: name: trak
             538: operator: ->
             539: name: moov
             540: operator: ->
             541: name: mov
             542: operator: ->
             543: name: is_smooth
          544: block: 
           545: block_content: 
            546: expr_stmt: 
             547: expr: 
              548: name: 
               549: name: trak
               550: operator: ->
               551: name: moov
               552: operator: ->
               553: name: mov
               554: operator: ->
               555: name: is_smooth
              556: operator: =
              557: name: GF_TRUE
            558: expr_stmt: 
             559: expr: 
              560: call: 
               561: name: GF_LOG
               562: argument_list: 
                563: argument: 
                 564: expr: 
                  565: name: GF_LOG_WARNING
                566: argument: 
                 567: expr: 
                  568: name: GF_LOG_CONTAINER
                569: argument: 
                 570: expr: 
                  571: operator: (
                  572: literal: "[iso file] senc box without tenc, assuming MS smooth+piff\n"
                  573: operator: )
        574: if_stmt: 
         575: if: 
          576: condition: 
           577: expr: 
            578: name: default_IsEncrypted
          579: block: 
           580: block_content: 
            581: expr_stmt: 
             582: expr: 
              583: operator: *
              584: name: default_IsEncrypted
              585: operator: =
              586: name: GF_TRUE
        587: comment: //set default value, overwritten below
        588: if_stmt: 
         589: if: 
          590: condition: 
           591: expr: 
            592: name: container_type
          593: block: 
           594: block_content: 
            595: expr_stmt: 
             596: expr: 
              597: operator: *
              598: name: container_type
              599: operator: =
              600: name: GF_ISOM_BOX_UUID_PSEC

----------------------------------------
0: if_stmt: 
 1: if: 
  2: condition: 
   3: expr: 
    4: name: sinf
    5: operator: &&
    6: name: 
     7: name: sinf
     8: operator: ->
     9: name: info
    10: operator: &&
    11: name: 
     12: name: sinf
     13: operator: ->
     14: name: info
     15: operator: ->
     16: name: tenc
  17: block: 
   18: block_content: 
    19: if_stmt: 
     20: if: 
      21: condition: 
       22: expr: 
        23: name: default_IsEncrypted
      24: block: 
       25: block_content: 
        26: expr_stmt: 
         27: expr: 
          28: operator: *
          29: name: default_IsEncrypted
          30: operator: =
          31: name: 
           32: name: sinf
           33: operator: ->
           34: name: info
           35: operator: ->
           36: name: tenc
           37: operator: ->
           38: name: isProtected
    39: if_stmt: 
     40: if: 
      41: condition: 
       42: expr: 
        43: name: crypt_byte_block
      44: block: 
       45: block_content: 
        46: expr_stmt: 
         47: expr: 
          48: operator: *
          49: name: crypt_byte_block
          50: operator: =
          51: name: 
           52: name: sinf
           53: operator: ->
           54: name: info
           55: operator: ->
           56: name: tenc
           57: operator: ->
           58: name: crypt_byte_block
    59: if_stmt: 
     60: if: 
      61: condition: 
       62: expr: 
        63: name: skip_byte_block
      64: block: 
       65: block_content: 
        66: expr_stmt: 
         67: expr: 
          68: operator: *
          69: name: skip_byte_block
          70: operator: =
          71: name: 
           72: name: sinf
           73: operator: ->
           74: name: info
           75: operator: ->
           76: name: tenc
           77: operator: ->
           78: name: skip_byte_block
    79: if_stmt: 
     80: if: 
      81: condition: 
       82: expr: 
        83: name: key_info
      84: block: 
       85: block_content: 
        86: expr_stmt: 
         87: expr: 
          88: operator: *
          89: name: key_info
          90: operator: =
          91: name: 
           92: name: sinf
           93: operator: ->
           94: name: info
           95: operator: ->
           96: name: tenc
           97: operator: ->
           98: name: key_info
    99: if_stmt: 
     100: if: 
      101: condition: 
       102: expr: 
        103: name: key_info_size
      104: block: 
       105: block_content: 
        106: expr_stmt: 
         107: expr: 
          108: operator: *
          109: name: key_info_size
          110: operator: =
          111: literal: 20
        112: if_stmt: 
         113: if: 
          114: condition: 
           115: expr: 
            116: operator: !
            117: name: 
             118: name: sinf
             119: operator: ->
             120: name: info
             121: operator: ->
             122: name: tenc
             123: operator: ->
             124: name: key_info
             125: index: 
              126: expr: 
               127: literal: 3
          128: block: 
           129: block_content: 
            130: expr_stmt: 
             131: expr: 
              132: operator: *
              133: name: key_info_size
              134: operator: +=
              135: literal: 1
              136: operator: +
              137: name: 
               138: name: sinf
               139: operator: ->
               140: name: info
               141: operator: ->
               142: name: tenc
               143: operator: ->
               144: name: key_info
               145: index: 
                146: expr: 
                 147: literal: 20
    148: comment: //set default value, overwritten below
    149: if_stmt: 
     150: if: 
      151: condition: 
       152: expr: 
        153: name: container_type
      154: block: 
       155: block_content: 
        156: expr_stmt: 
         157: expr: 
          158: operator: *
          159: name: container_type
          160: operator: =
          161: name: GF_ISOM_BOX_TYPE_SENC
 162: if: 
  163: condition: 
   164: expr: 
    165: name: sinf
    166: operator: &&
    167: name: 
     168: name: sinf
     169: operator: ->
     170: name: info
    171: operator: &&
    172: name: 
     173: name: sinf
     174: operator: ->
     175: name: info
     176: operator: ->
     177: name: piff_tenc
  178: block: 
   179: block_content: 
    180: if_stmt: 
     181: if: 
      182: condition: 
       183: expr: 
        184: name: default_IsEncrypted
      185: block: 
       186: block_content: 
        187: expr_stmt: 
         188: expr: 
          189: operator: *
          190: name: default_IsEncrypted
          191: operator: =
          192: name: GF_TRUE
    193: if_stmt: 
     194: if: 
      195: condition: 
       196: expr: 
        197: name: key_info
      198: block: 
       199: block_content: 
        200: expr_stmt: 
         201: expr: 
          202: operator: *
          203: name: key_info
          204: operator: =
          205: name: 
           206: name: sinf
           207: operator: ->
           208: name: info
           209: operator: ->
           210: name: piff_tenc
           211: operator: ->
           212: name: key_info
    213: if_stmt: 
     214: if: 
      215: condition: 
       216: expr: 
        217: name: key_info_size
      218: block: 
       219: block_content: 
        220: expr_stmt: 
         221: expr: 
          222: operator: *
          223: name: key_info_size
          224: operator: =
          225: literal: 19
    226: comment: //set default value, overwritten below
    227: if_stmt: 
     228: if: 
      229: condition: 
       230: expr: 
        231: name: container_type
      232: block: 
       233: block_content: 
        234: expr_stmt: 
         235: expr: 
          236: operator: *
          237: name: container_type
          238: operator: =
          239: name: GF_ISOM_BOX_UUID_PSEC
 240: else: 
  241: block: 
   242: block_content: 
    243: decl_stmt: 
     244: decl: 
      245: type: 
       246: name: u32
      247: name: i
     248: decl: 
      249: type: 
      250: name: count
      251: init: 
       252: expr: 
        253: literal: 0
    254: decl_stmt: 
     255: decl: 
      256: type: 
       257: name: GF_CENCSampleEncryptionGroupEntry
       258: modifier: *
      259: name: seig_entry
      260: init: 
       261: expr: 
        262: name: NULL
    263: if_stmt: 
     264: if: 
      265: condition: 
       266: expr: 
        267: operator: !
        268: name: 
         269: name: trak
         270: operator: ->
         271: name: moov
         272: operator: ->
         273: name: mov
         274: operator: ->
         275: name: is_smooth
      276: block: 
       277: block_content: 
        278: expr_stmt: 
         279: expr: 
          280: name: count
          281: operator: =
          282: call: 
           283: name: gf_list_count
           284: argument_list: 
            285: argument: 
             286: expr: 
              287: name: 
               288: name: trak
               289: operator: ->
               290: name: Media
               291: operator: ->
               292: name: information
               293: operator: ->
               294: name: sampleTable
               295: operator: ->
               296: name: sampleGroupsDescription
    297: for: 
     298: control: 
      299: init: 
       300: expr: 
        301: name: i
        302: operator: =
        303: literal: 0
      304: condition: 
       305: expr: 
        306: name: i
        307: operator: <
        308: name: count
      309: incr: 
       310: expr: 
        311: name: i
        312: operator: ++
     313: block: 
      314: block_content: 
       315: decl_stmt: 
        316: decl: 
         317: type: 
          318: name: GF_SampleGroupDescriptionBox
          319: modifier: *
         320: name: sgdesc
         321: init: 
          322: expr: 
           323: operator: (
           324: name: GF_SampleGroupDescriptionBox
           325: operator: *
           326: operator: )
           327: call: 
            328: name: gf_list_get
            329: argument_list: 
             330: argument: 
              331: expr: 
               332: name: 
                333: name: trak
                334: operator: ->
                335: name: Media
                336: operator: ->
                337: name: information
                338: operator: ->
                339: name: sampleTable
                340: operator: ->
                341: name: sampleGroupsDescription
             342: argument: 
              343: expr: 
               344: name: i
       345: if_stmt: 
        346: if: 
         347: condition: 
          348: expr: 
           349: name: 
            350: name: sgdesc
            351: operator: ->
            352: name: grouping_type
           353: operator: !=
           354: name: GF_ISOM_SAMPLE_GROUP_SEIG
         355: block: 
          356: block_content: 
           357: continue: 
       358: if_stmt: 
        359: if: 
         360: condition: 
          361: expr: 
           362: name: 
            363: name: sgdesc
            364: operator: ->
            365: name: default_description_index
         366: block: 
          367: block_content: 
           368: expr_stmt: 
            369: expr: 
             370: name: seig_entry
             371: operator: =
             372: call: 
              373: name: gf_list_get
              374: argument_list: 
               375: argument: 
                376: expr: 
                 377: name: 
                  378: name: sgdesc
                  379: operator: ->
                  380: name: group_descriptions
               381: argument: 
                382: expr: 
                 383: name: 
                  384: name: sgdesc
                  385: operator: ->
                  386: name: default_description_index
                 387: operator: -
                 388: literal: 1
        389: else: 
         390: block: 
          391: block_content: 
           392: expr_stmt: 
            393: expr: 
             394: name: seig_entry
             395: operator: =
             396: call: 
              397: name: gf_list_get
              398: argument_list: 
               399: argument: 
                400: expr: 
                 401: name: 
                  402: name: sgdesc
                  403: operator: ->
                  404: name: group_descriptions
               405: argument: 
                406: expr: 
                 407: literal: 0
       408: if_stmt: 
        409: if: 
         410: condition: 
          411: expr: 
           412: name: seig_entry
           413: operator: &&
           414: operator: !
           415: name: 
            416: name: seig_entry
            417: operator: ->
            418: name: key_info
            419: index: 
             420: expr: 
              421: literal: 0
         422: block: 
          423: block_content: 
           424: expr_stmt: 
            425: expr: 
             426: name: seig_entry
             427: operator: =
             428: name: NULL
       429: break: 
    430: if_stmt: 
     431: if: 
      432: condition: 
       433: expr: 
        434: name: seig_entry
      435: block: 
       436: block_content: 
        437: if_stmt: 
         438: if: 
          439: condition: 
           440: expr: 
            441: name: default_IsEncrypted
          442: block: 
           443: block_content: 
            444: expr_stmt: 
             445: expr: 
              446: operator: *
              447: name: default_IsEncrypted
              448: operator: =
              449: name: 
               450: name: seig_entry
               451: operator: ->
               452: name: IsProtected
        453: if_stmt: 
         454: if: 
          455: condition: 
           456: expr: 
            457: name: crypt_byte_block
          458: block: 
           459: block_content: 
            460: expr_stmt: 
             461: expr: 
              462: operator: *
              463: name: crypt_byte_block
              464: operator: =
              465: name: 
               466: name: seig_entry
               467: operator: ->
               468: name: crypt_byte_block
        469: if_stmt: 
         470: if: 
          471: condition: 
           472: expr: 
            473: name: skip_byte_block
          474: block: 
           475: block_content: 
            476: expr_stmt: 
             477: expr: 
              478: operator: *
              479: name: skip_byte_block
              480: operator: =
              481: name: 
               482: name: seig_entry
               483: operator: ->
               484: name: skip_byte_block
        485: if_stmt: 
         486: if: 
          487: condition: 
           488: expr: 
            489: name: key_info
          490: block: 
           491: block_content: 
            492: expr_stmt: 
             493: expr: 
              494: operator: *
              495: name: key_info
              496: operator: =
              497: name: 
               498: name: seig_entry
               499: operator: ->
               500: name: key_info
        501: if_stmt: 
         502: if: 
          503: condition: 
           504: expr: 
            505: name: key_info_size
          506: block: 
           507: block_content: 
            508: expr_stmt: 
             509: expr: 
              510: operator: *
              511: name: key_info_size
              512: operator: =
              513: name: 
               514: name: seig_entry
               515: operator: ->
               516: name: key_info_size
        517: if_stmt: 
         518: if: 
          519: condition: 
           520: expr: 
            521: name: container_type
          522: block: 
           523: block_content: 
            524: expr_stmt: 
             525: expr: 
              526: operator: *
              527: name: container_type
              528: operator: =
              529: name: GF_ISOM_BOX_TYPE_SENC
     530: else: 
      531: block: 
       532: block_content: 
        533: if_stmt: 
         534: if: 
          535: condition: 
           536: expr: 
            537: operator: !
            538: name: 
             539: name: trak
             540: operator: ->
             541: name: moov
             542: operator: ->
             543: name: mov
             544: operator: ->
             545: name: is_smooth
          546: block: 
           547: block_content: 
            548: expr_stmt: 
             549: expr: 
              550: name: 
               551: name: trak
               552: operator: ->
               553: name: moov
               554: operator: ->
               555: name: mov
               556: operator: ->
               557: name: is_smooth
              558: operator: =
              559: name: GF_TRUE
            560: expr_stmt: 
             561: expr: 
              562: call: 
               563: name: GF_LOG
               564: argument_list: 
                565: argument: 
                 566: expr: 
                  567: name: GF_LOG_WARNING
                568: argument: 
                 569: expr: 
                  570: name: GF_LOG_CONTAINER
                571: argument: 
                 572: expr: 
                  573: operator: (
                  574: literal: "[iso file] senc box without tenc, assuming MS smooth+piff\n"
                  575: operator: )
        576: if_stmt: 
         577: if: 
          578: condition: 
           579: expr: 
            580: name: default_IsEncrypted
          581: block: 
           582: block_content: 
            583: expr_stmt: 
             584: expr: 
              585: operator: *
              586: name: default_IsEncrypted
              587: operator: =
              588: name: GF_TRUE
        589: comment: //set default value, overwritten below
        590: if_stmt: 
         591: if: 
          592: condition: 
           593: expr: 
            594: name: container_type
          595: block: 
           596: block_content: 
            597: expr_stmt: 
             598: expr: 
              599: operator: *
              600: name: container_type
              601: operator: =
              602: name: GF_ISOM_BOX_UUID_PSEC
=====
0: else: 
 1: block: 
  2: block_content: 
   3: decl_stmt: 
    4: decl: 
     5: type: 
      6: name: u32
     7: name: i
    8: decl: 
     9: type: 
     10: name: count
     11: init: 
      12: expr: 
       13: literal: 0
   14: decl_stmt: 
    15: decl: 
     16: type: 
      17: name: GF_CENCSampleEncryptionGroupEntry
      18: modifier: *
     19: name: seig_entry
     20: init: 
      21: expr: 
       22: name: NULL
   23: if_stmt: 
    24: if: 
     25: condition: 
      26: expr: 
       27: operator: !
       28: name: 
        29: name: trak
        30: operator: ->
        31: name: moov
        32: operator: ->
        33: name: mov
        34: operator: ->
        35: name: is_smooth
     36: block: 
      37: block_content: 
       38: expr_stmt: 
        39: expr: 
         40: name: count
         41: operator: =
         42: call: 
          43: name: gf_list_count
          44: argument_list: 
           45: argument: 
            46: expr: 
             47: name: 
              48: name: trak
              49: operator: ->
              50: name: Media
              51: operator: ->
              52: name: information
              53: operator: ->
              54: name: sampleTable
              55: operator: ->
              56: name: sampleGroupsDescription
   57: for: 
    58: control: 
     59: init: 
      60: expr: 
       61: name: i
       62: operator: =
       63: literal: 0
     64: condition: 
      65: expr: 
       66: name: i
       67: operator: <
       68: name: count
     69: incr: 
      70: expr: 
       71: name: i
       72: operator: ++
    73: block: 
     74: block_content: 
      75: decl_stmt: 
       76: decl: 
        77: type: 
         78: name: GF_SampleGroupDescriptionBox
         79: modifier: *
        80: name: sgdesc
        81: init: 
         82: expr: 
          83: operator: (
          84: name: GF_SampleGroupDescriptionBox
          85: operator: *
          86: operator: )
          87: call: 
           88: name: gf_list_get
           89: argument_list: 
            90: argument: 
             91: expr: 
              92: name: 
               93: name: trak
               94: operator: ->
               95: name: Media
               96: operator: ->
               97: name: information
               98: operator: ->
               99: name: sampleTable
               100: operator: ->
               101: name: sampleGroupsDescription
            102: argument: 
             103: expr: 
              104: name: i
      105: if_stmt: 
       106: if: 
        107: condition: 
         108: expr: 
          109: name: 
           110: name: sgdesc
           111: operator: ->
           112: name: grouping_type
          113: operator: !=
          114: name: GF_ISOM_SAMPLE_GROUP_SEIG
        115: block: 
         116: block_content: 
          117: continue: 
      118: if_stmt: 
       119: if: 
        120: condition: 
         121: expr: 
          122: name: 
           123: name: sgdesc
           124: operator: ->
           125: name: default_description_index
        126: block: 
         127: block_content: 
          128: expr_stmt: 
           129: expr: 
            130: name: seig_entry
            131: operator: =
            132: call: 
             133: name: gf_list_get
             134: argument_list: 
              135: argument: 
               136: expr: 
                137: name: 
                 138: name: sgdesc
                 139: operator: ->
                 140: name: group_descriptions
              141: argument: 
               142: expr: 
                143: name: 
                 144: name: sgdesc
                 145: operator: ->
                 146: name: default_description_index
                147: operator: -
                148: literal: 1
       149: else: 
        150: block: 
         151: block_content: 
          152: expr_stmt: 
           153: expr: 
            154: name: seig_entry
            155: operator: =
            156: call: 
             157: name: gf_list_get
             158: argument_list: 
              159: argument: 
               160: expr: 
                161: name: 
                 162: name: sgdesc
                 163: operator: ->
                 164: name: group_descriptions
              165: argument: 
               166: expr: 
                167: literal: 0
      168: if_stmt: 
       169: if: 
        170: condition: 
         171: expr: 
          172: operator: !
          173: name: 
           174: name: seig_entry
           175: operator: ->
           176: name: key_info
           177: index: 
            178: expr: 
             179: literal: 0
        180: block: 
         181: block_content: 
          182: expr_stmt: 
           183: expr: 
            184: name: seig_entry
            185: operator: =
            186: name: NULL
      187: break: 
   188: if_stmt: 
    189: if: 
     190: condition: 
      191: expr: 
       192: name: seig_entry
     193: block: 
      194: block_content: 
       195: if_stmt: 
        196: if: 
         197: condition: 
          198: expr: 
           199: name: default_IsEncrypted
         200: block: 
          201: block_content: 
           202: expr_stmt: 
            203: expr: 
             204: operator: *
             205: name: default_IsEncrypted
             206: operator: =
             207: name: 
              208: name: seig_entry
              209: operator: ->
              210: name: IsProtected
       211: if_stmt: 
        212: if: 
         213: condition: 
          214: expr: 
           215: name: crypt_byte_block
         216: block: 
          217: block_content: 
           218: expr_stmt: 
            219: expr: 
             220: operator: *
             221: name: crypt_byte_block
             222: operator: =
             223: name: 
              224: name: seig_entry
              225: operator: ->
              226: name: crypt_byte_block
       227: if_stmt: 
        228: if: 
         229: condition: 
          230: expr: 
           231: name: skip_byte_block
         232: block: 
          233: block_content: 
           234: expr_stmt: 
            235: expr: 
             236: operator: *
             237: name: skip_byte_block
             238: operator: =
             239: name: 
              240: name: seig_entry
              241: operator: ->
              242: name: skip_byte_block
       243: if_stmt: 
        244: if: 
         245: condition: 
          246: expr: 
           247: name: key_info
         248: block: 
          249: block_content: 
           250: expr_stmt: 
            251: expr: 
             252: operator: *
             253: name: key_info
             254: operator: =
             255: name: 
              256: name: seig_entry
              257: operator: ->
              258: name: key_info
       259: if_stmt: 
        260: if: 
         261: condition: 
          262: expr: 
           263: name: key_info_size
         264: block: 
          265: block_content: 
           266: expr_stmt: 
            267: expr: 
             268: operator: *
             269: name: key_info_size
             270: operator: =
             271: name: 
              272: name: seig_entry
              273: operator: ->
              274: name: key_info_size
       275: if_stmt: 
        276: if: 
         277: condition: 
          278: expr: 
           279: name: container_type
         280: block: 
          281: block_content: 
           282: expr_stmt: 
            283: expr: 
             284: operator: *
             285: name: container_type
             286: operator: =
             287: name: GF_ISOM_BOX_TYPE_SENC
    288: else: 
     289: block: 
      290: block_content: 
       291: if_stmt: 
        292: if: 
         293: condition: 
          294: expr: 
           295: operator: !
           296: name: 
            297: name: trak
            298: operator: ->
            299: name: moov
            300: operator: ->
            301: name: mov
            302: operator: ->
            303: name: is_smooth
         304: block: 
          305: block_content: 
           306: expr_stmt: 
            307: expr: 
             308: name: 
              309: name: trak
              310: operator: ->
              311: name: moov
              312: operator: ->
              313: name: mov
              314: operator: ->
              315: name: is_smooth
             316: operator: =
             317: name: GF_TRUE
           318: expr_stmt: 
            319: expr: 
             320: call: 
              321: name: GF_LOG
              322: argument_list: 
               323: argument: 
                324: expr: 
                 325: name: GF_LOG_WARNING
               326: argument: 
                327: expr: 
                 328: name: GF_LOG_CONTAINER
               329: argument: 
                330: expr: 
                 331: operator: (
                 332: literal: "[iso file] senc box without tenc, assuming MS smooth+piff\n"
                 333: operator: )
       334: if_stmt: 
        335: if: 
         336: condition: 
          337: expr: 
           338: name: default_IsEncrypted
         339: block: 
          340: block_content: 
           341: expr_stmt: 
            342: expr: 
             343: operator: *
             344: name: default_IsEncrypted
             345: operator: =
             346: name: GF_TRUE
       347: comment: //set default value, overwritten below
       348: if_stmt: 
        349: if: 
         350: condition: 
          351: expr: 
           352: name: container_type
         353: block: 
          354: block_content: 
           355: expr_stmt: 
            356: expr: 
             357: operator: *
             358: name: container_type
             359: operator: =
             360: name: GF_ISOM_BOX_UUID_PSEC

----------------------------------------
0: else: 
 1: block: 
  2: block_content: 
   3: decl_stmt: 
    4: decl: 
     5: type: 
      6: name: u32
     7: name: i
    8: decl: 
     9: type: 
     10: name: count
     11: init: 
      12: expr: 
       13: literal: 0
   14: decl_stmt: 
    15: decl: 
     16: type: 
      17: name: GF_CENCSampleEncryptionGroupEntry
      18: modifier: *
     19: name: seig_entry
     20: init: 
      21: expr: 
       22: name: NULL
   23: if_stmt: 
    24: if: 
     25: condition: 
      26: expr: 
       27: operator: !
       28: name: 
        29: name: trak
        30: operator: ->
        31: name: moov
        32: operator: ->
        33: name: mov
        34: operator: ->
        35: name: is_smooth
     36: block: 
      37: block_content: 
       38: expr_stmt: 
        39: expr: 
         40: name: count
         41: operator: =
         42: call: 
          43: name: gf_list_count
          44: argument_list: 
           45: argument: 
            46: expr: 
             47: name: 
              48: name: trak
              49: operator: ->
              50: name: Media
              51: operator: ->
              52: name: information
              53: operator: ->
              54: name: sampleTable
              55: operator: ->
              56: name: sampleGroupsDescription
   57: for: 
    58: control: 
     59: init: 
      60: expr: 
       61: name: i
       62: operator: =
       63: literal: 0
     64: condition: 
      65: expr: 
       66: name: i
       67: operator: <
       68: name: count
     69: incr: 
      70: expr: 
       71: name: i
       72: operator: ++
    73: block: 
     74: block_content: 
      75: decl_stmt: 
       76: decl: 
        77: type: 
         78: name: GF_SampleGroupDescriptionBox
         79: modifier: *
        80: name: sgdesc
        81: init: 
         82: expr: 
          83: operator: (
          84: name: GF_SampleGroupDescriptionBox
          85: operator: *
          86: operator: )
          87: call: 
           88: name: gf_list_get
           89: argument_list: 
            90: argument: 
             91: expr: 
              92: name: 
               93: name: trak
               94: operator: ->
               95: name: Media
               96: operator: ->
               97: name: information
               98: operator: ->
               99: name: sampleTable
               100: operator: ->
               101: name: sampleGroupsDescription
            102: argument: 
             103: expr: 
              104: name: i
      105: if_stmt: 
       106: if: 
        107: condition: 
         108: expr: 
          109: name: 
           110: name: sgdesc
           111: operator: ->
           112: name: grouping_type
          113: operator: !=
          114: name: GF_ISOM_SAMPLE_GROUP_SEIG
        115: block: 
         116: block_content: 
          117: continue: 
      118: if_stmt: 
       119: if: 
        120: condition: 
         121: expr: 
          122: name: 
           123: name: sgdesc
           124: operator: ->
           125: name: default_description_index
        126: block: 
         127: block_content: 
          128: expr_stmt: 
           129: expr: 
            130: name: seig_entry
            131: operator: =
            132: call: 
             133: name: gf_list_get
             134: argument_list: 
              135: argument: 
               136: expr: 
                137: name: 
                 138: name: sgdesc
                 139: operator: ->
                 140: name: group_descriptions
              141: argument: 
               142: expr: 
                143: name: 
                 144: name: sgdesc
                 145: operator: ->
                 146: name: default_description_index
                147: operator: -
                148: literal: 1
       149: else: 
        150: block: 
         151: block_content: 
          152: expr_stmt: 
           153: expr: 
            154: name: seig_entry
            155: operator: =
            156: call: 
             157: name: gf_list_get
             158: argument_list: 
              159: argument: 
               160: expr: 
                161: name: 
                 162: name: sgdesc
                 163: operator: ->
                 164: name: group_descriptions
              165: argument: 
               166: expr: 
                167: literal: 0
      168: if_stmt: 
       169: if: 
        170: condition: 
         171: expr: 
          172: name: seig_entry
          173: operator: &&
          174: operator: !
          175: name: 
           176: name: seig_entry
           177: operator: ->
           178: name: key_info
           179: index: 
            180: expr: 
             181: literal: 0
        182: block: 
         183: block_content: 
          184: expr_stmt: 
           185: expr: 
            186: name: seig_entry
            187: operator: =
            188: name: NULL
      189: break: 
   190: if_stmt: 
    191: if: 
     192: condition: 
      193: expr: 
       194: name: seig_entry
     195: block: 
      196: block_content: 
       197: if_stmt: 
        198: if: 
         199: condition: 
          200: expr: 
           201: name: default_IsEncrypted
         202: block: 
          203: block_content: 
           204: expr_stmt: 
            205: expr: 
             206: operator: *
             207: name: default_IsEncrypted
             208: operator: =
             209: name: 
              210: name: seig_entry
              211: operator: ->
              212: name: IsProtected
       213: if_stmt: 
        214: if: 
         215: condition: 
          216: expr: 
           217: name: crypt_byte_block
         218: block: 
          219: block_content: 
           220: expr_stmt: 
            221: expr: 
             222: operator: *
             223: name: crypt_byte_block
             224: operator: =
             225: name: 
              226: name: seig_entry
              227: operator: ->
              228: name: crypt_byte_block
       229: if_stmt: 
        230: if: 
         231: condition: 
          232: expr: 
           233: name: skip_byte_block
         234: block: 
          235: block_content: 
           236: expr_stmt: 
            237: expr: 
             238: operator: *
             239: name: skip_byte_block
             240: operator: =
             241: name: 
              242: name: seig_entry
              243: operator: ->
              244: name: skip_byte_block
       245: if_stmt: 
        246: if: 
         247: condition: 
          248: expr: 
           249: name: key_info
         250: block: 
          251: block_content: 
           252: expr_stmt: 
            253: expr: 
             254: operator: *
             255: name: key_info
             256: operator: =
             257: name: 
              258: name: seig_entry
              259: operator: ->
              260: name: key_info
       261: if_stmt: 
        262: if: 
         263: condition: 
          264: expr: 
           265: name: key_info_size
         266: block: 
          267: block_content: 
           268: expr_stmt: 
            269: expr: 
             270: operator: *
             271: name: key_info_size
             272: operator: =
             273: name: 
              274: name: seig_entry
              275: operator: ->
              276: name: key_info_size
       277: if_stmt: 
        278: if: 
         279: condition: 
          280: expr: 
           281: name: container_type
         282: block: 
          283: block_content: 
           284: expr_stmt: 
            285: expr: 
             286: operator: *
             287: name: container_type
             288: operator: =
             289: name: GF_ISOM_BOX_TYPE_SENC
    290: else: 
     291: block: 
      292: block_content: 
       293: if_stmt: 
        294: if: 
         295: condition: 
          296: expr: 
           297: operator: !
           298: name: 
            299: name: trak
            300: operator: ->
            301: name: moov
            302: operator: ->
            303: name: mov
            304: operator: ->
            305: name: is_smooth
         306: block: 
          307: block_content: 
           308: expr_stmt: 
            309: expr: 
             310: name: 
              311: name: trak
              312: operator: ->
              313: name: moov
              314: operator: ->
              315: name: mov
              316: operator: ->
              317: name: is_smooth
             318: operator: =
             319: name: GF_TRUE
           320: expr_stmt: 
            321: expr: 
             322: call: 
              323: name: GF_LOG
              324: argument_list: 
               325: argument: 
                326: expr: 
                 327: name: GF_LOG_WARNING
               328: argument: 
                329: expr: 
                 330: name: GF_LOG_CONTAINER
               331: argument: 
                332: expr: 
                 333: operator: (
                 334: literal: "[iso file] senc box without tenc, assuming MS smooth+piff\n"
                 335: operator: )
       336: if_stmt: 
        337: if: 
         338: condition: 
          339: expr: 
           340: name: default_IsEncrypted
         341: block: 
          342: block_content: 
           343: expr_stmt: 
            344: expr: 
             345: operator: *
             346: name: default_IsEncrypted
             347: operator: =
             348: name: GF_TRUE
       349: comment: //set default value, overwritten below
       350: if_stmt: 
        351: if: 
         352: condition: 
          353: expr: 
           354: name: container_type
         355: block: 
          356: block_content: 
           357: expr_stmt: 
            358: expr: 
             359: operator: *
             360: name: container_type
             361: operator: =
             362: name: GF_ISOM_BOX_UUID_PSEC
=====
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: u32
    6: name: i
   7: decl: 
    8: type: 
    9: name: count
    10: init: 
     11: expr: 
      12: literal: 0
  13: decl_stmt: 
   14: decl: 
    15: type: 
     16: name: GF_CENCSampleEncryptionGroupEntry
     17: modifier: *
    18: name: seig_entry
    19: init: 
     20: expr: 
      21: name: NULL
  22: if_stmt: 
   23: if: 
    24: condition: 
     25: expr: 
      26: operator: !
      27: name: 
       28: name: trak
       29: operator: ->
       30: name: moov
       31: operator: ->
       32: name: mov
       33: operator: ->
       34: name: is_smooth
    35: block: 
     36: block_content: 
      37: expr_stmt: 
       38: expr: 
        39: name: count
        40: operator: =
        41: call: 
         42: name: gf_list_count
         43: argument_list: 
          44: argument: 
           45: expr: 
            46: name: 
             47: name: trak
             48: operator: ->
             49: name: Media
             50: operator: ->
             51: name: information
             52: operator: ->
             53: name: sampleTable
             54: operator: ->
             55: name: sampleGroupsDescription
  56: for: 
   57: control: 
    58: init: 
     59: expr: 
      60: name: i
      61: operator: =
      62: literal: 0
    63: condition: 
     64: expr: 
      65: name: i
      66: operator: <
      67: name: count
    68: incr: 
     69: expr: 
      70: name: i
      71: operator: ++
   72: block: 
    73: block_content: 
     74: decl_stmt: 
      75: decl: 
       76: type: 
        77: name: GF_SampleGroupDescriptionBox
        78: modifier: *
       79: name: sgdesc
       80: init: 
        81: expr: 
         82: operator: (
         83: name: GF_SampleGroupDescriptionBox
         84: operator: *
         85: operator: )
         86: call: 
          87: name: gf_list_get
          88: argument_list: 
           89: argument: 
            90: expr: 
             91: name: 
              92: name: trak
              93: operator: ->
              94: name: Media
              95: operator: ->
              96: name: information
              97: operator: ->
              98: name: sampleTable
              99: operator: ->
              100: name: sampleGroupsDescription
           101: argument: 
            102: expr: 
             103: name: i
     104: if_stmt: 
      105: if: 
       106: condition: 
        107: expr: 
         108: name: 
          109: name: sgdesc
          110: operator: ->
          111: name: grouping_type
         112: operator: !=
         113: name: GF_ISOM_SAMPLE_GROUP_SEIG
       114: block: 
        115: block_content: 
         116: continue: 
     117: if_stmt: 
      118: if: 
       119: condition: 
        120: expr: 
         121: name: 
          122: name: sgdesc
          123: operator: ->
          124: name: default_description_index
       125: block: 
        126: block_content: 
         127: expr_stmt: 
          128: expr: 
           129: name: seig_entry
           130: operator: =
           131: call: 
            132: name: gf_list_get
            133: argument_list: 
             134: argument: 
              135: expr: 
               136: name: 
                137: name: sgdesc
                138: operator: ->
                139: name: group_descriptions
             140: argument: 
              141: expr: 
               142: name: 
                143: name: sgdesc
                144: operator: ->
                145: name: default_description_index
               146: operator: -
               147: literal: 1
      148: else: 
       149: block: 
        150: block_content: 
         151: expr_stmt: 
          152: expr: 
           153: name: seig_entry
           154: operator: =
           155: call: 
            156: name: gf_list_get
            157: argument_list: 
             158: argument: 
              159: expr: 
               160: name: 
                161: name: sgdesc
                162: operator: ->
                163: name: group_descriptions
             164: argument: 
              165: expr: 
               166: literal: 0
     167: if_stmt: 
      168: if: 
       169: condition: 
        170: expr: 
         171: operator: !
         172: name: 
          173: name: seig_entry
          174: operator: ->
          175: name: key_info
          176: index: 
           177: expr: 
            178: literal: 0
       179: block: 
        180: block_content: 
         181: expr_stmt: 
          182: expr: 
           183: name: seig_entry
           184: operator: =
           185: name: NULL
     186: break: 
  187: if_stmt: 
   188: if: 
    189: condition: 
     190: expr: 
      191: name: seig_entry
    192: block: 
     193: block_content: 
      194: if_stmt: 
       195: if: 
        196: condition: 
         197: expr: 
          198: name: default_IsEncrypted
        199: block: 
         200: block_content: 
          201: expr_stmt: 
           202: expr: 
            203: operator: *
            204: name: default_IsEncrypted
            205: operator: =
            206: name: 
             207: name: seig_entry
             208: operator: ->
             209: name: IsProtected
      210: if_stmt: 
       211: if: 
        212: condition: 
         213: expr: 
          214: name: crypt_byte_block
        215: block: 
         216: block_content: 
          217: expr_stmt: 
           218: expr: 
            219: operator: *
            220: name: crypt_byte_block
            221: operator: =
            222: name: 
             223: name: seig_entry
             224: operator: ->
             225: name: crypt_byte_block
      226: if_stmt: 
       227: if: 
        228: condition: 
         229: expr: 
          230: name: skip_byte_block
        231: block: 
         232: block_content: 
          233: expr_stmt: 
           234: expr: 
            235: operator: *
            236: name: skip_byte_block
            237: operator: =
            238: name: 
             239: name: seig_entry
             240: operator: ->
             241: name: skip_byte_block
      242: if_stmt: 
       243: if: 
        244: condition: 
         245: expr: 
          246: name: key_info
        247: block: 
         248: block_content: 
          249: expr_stmt: 
           250: expr: 
            251: operator: *
            252: name: key_info
            253: operator: =
            254: name: 
             255: name: seig_entry
             256: operator: ->
             257: name: key_info
      258: if_stmt: 
       259: if: 
        260: condition: 
         261: expr: 
          262: name: key_info_size
        263: block: 
         264: block_content: 
          265: expr_stmt: 
           266: expr: 
            267: operator: *
            268: name: key_info_size
            269: operator: =
            270: name: 
             271: name: seig_entry
             272: operator: ->
             273: name: key_info_size
      274: if_stmt: 
       275: if: 
        276: condition: 
         277: expr: 
          278: name: container_type
        279: block: 
         280: block_content: 
          281: expr_stmt: 
           282: expr: 
            283: operator: *
            284: name: container_type
            285: operator: =
            286: name: GF_ISOM_BOX_TYPE_SENC
   287: else: 
    288: block: 
     289: block_content: 
      290: if_stmt: 
       291: if: 
        292: condition: 
         293: expr: 
          294: operator: !
          295: name: 
           296: name: trak
           297: operator: ->
           298: name: moov
           299: operator: ->
           300: name: mov
           301: operator: ->
           302: name: is_smooth
        303: block: 
         304: block_content: 
          305: expr_stmt: 
           306: expr: 
            307: name: 
             308: name: trak
             309: operator: ->
             310: name: moov
             311: operator: ->
             312: name: mov
             313: operator: ->
             314: name: is_smooth
            315: operator: =
            316: name: GF_TRUE
          317: expr_stmt: 
           318: expr: 
            319: call: 
             320: name: GF_LOG
             321: argument_list: 
              322: argument: 
               323: expr: 
                324: name: GF_LOG_WARNING
              325: argument: 
               326: expr: 
                327: name: GF_LOG_CONTAINER
              328: argument: 
               329: expr: 
                330: operator: (
                331: literal: "[iso file] senc box without tenc, assuming MS smooth+piff\n"
                332: operator: )
      333: if_stmt: 
       334: if: 
        335: condition: 
         336: expr: 
          337: name: default_IsEncrypted
        338: block: 
         339: block_content: 
          340: expr_stmt: 
           341: expr: 
            342: operator: *
            343: name: default_IsEncrypted
            344: operator: =
            345: name: GF_TRUE
      346: comment: //set default value, overwritten below
      347: if_stmt: 
       348: if: 
        349: condition: 
         350: expr: 
          351: name: container_type
        352: block: 
         353: block_content: 
          354: expr_stmt: 
           355: expr: 
            356: operator: *
            357: name: container_type
            358: operator: =
            359: name: GF_ISOM_BOX_UUID_PSEC

----------------------------------------
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: u32
    6: name: i
   7: decl: 
    8: type: 
    9: name: count
    10: init: 
     11: expr: 
      12: literal: 0
  13: decl_stmt: 
   14: decl: 
    15: type: 
     16: name: GF_CENCSampleEncryptionGroupEntry
     17: modifier: *
    18: name: seig_entry
    19: init: 
     20: expr: 
      21: name: NULL
  22: if_stmt: 
   23: if: 
    24: condition: 
     25: expr: 
      26: operator: !
      27: name: 
       28: name: trak
       29: operator: ->
       30: name: moov
       31: operator: ->
       32: name: mov
       33: operator: ->
       34: name: is_smooth
    35: block: 
     36: block_content: 
      37: expr_stmt: 
       38: expr: 
        39: name: count
        40: operator: =
        41: call: 
         42: name: gf_list_count
         43: argument_list: 
          44: argument: 
           45: expr: 
            46: name: 
             47: name: trak
             48: operator: ->
             49: name: Media
             50: operator: ->
             51: name: information
             52: operator: ->
             53: name: sampleTable
             54: operator: ->
             55: name: sampleGroupsDescription
  56: for: 
   57: control: 
    58: init: 
     59: expr: 
      60: name: i
      61: operator: =
      62: literal: 0
    63: condition: 
     64: expr: 
      65: name: i
      66: operator: <
      67: name: count
    68: incr: 
     69: expr: 
      70: name: i
      71: operator: ++
   72: block: 
    73: block_content: 
     74: decl_stmt: 
      75: decl: 
       76: type: 
        77: name: GF_SampleGroupDescriptionBox
        78: modifier: *
       79: name: sgdesc
       80: init: 
        81: expr: 
         82: operator: (
         83: name: GF_SampleGroupDescriptionBox
         84: operator: *
         85: operator: )
         86: call: 
          87: name: gf_list_get
          88: argument_list: 
           89: argument: 
            90: expr: 
             91: name: 
              92: name: trak
              93: operator: ->
              94: name: Media
              95: operator: ->
              96: name: information
              97: operator: ->
              98: name: sampleTable
              99: operator: ->
              100: name: sampleGroupsDescription
           101: argument: 
            102: expr: 
             103: name: i
     104: if_stmt: 
      105: if: 
       106: condition: 
        107: expr: 
         108: name: 
          109: name: sgdesc
          110: operator: ->
          111: name: grouping_type
         112: operator: !=
         113: name: GF_ISOM_SAMPLE_GROUP_SEIG
       114: block: 
        115: block_content: 
         116: continue: 
     117: if_stmt: 
      118: if: 
       119: condition: 
        120: expr: 
         121: name: 
          122: name: sgdesc
          123: operator: ->
          124: name: default_description_index
       125: block: 
        126: block_content: 
         127: expr_stmt: 
          128: expr: 
           129: name: seig_entry
           130: operator: =
           131: call: 
            132: name: gf_list_get
            133: argument_list: 
             134: argument: 
              135: expr: 
               136: name: 
                137: name: sgdesc
                138: operator: ->
                139: name: group_descriptions
             140: argument: 
              141: expr: 
               142: name: 
                143: name: sgdesc
                144: operator: ->
                145: name: default_description_index
               146: operator: -
               147: literal: 1
      148: else: 
       149: block: 
        150: block_content: 
         151: expr_stmt: 
          152: expr: 
           153: name: seig_entry
           154: operator: =
           155: call: 
            156: name: gf_list_get
            157: argument_list: 
             158: argument: 
              159: expr: 
               160: name: 
                161: name: sgdesc
                162: operator: ->
                163: name: group_descriptions
             164: argument: 
              165: expr: 
               166: literal: 0
     167: if_stmt: 
      168: if: 
       169: condition: 
        170: expr: 
         171: name: seig_entry
         172: operator: &&
         173: operator: !
         174: name: 
          175: name: seig_entry
          176: operator: ->
          177: name: key_info
          178: index: 
           179: expr: 
            180: literal: 0
       181: block: 
        182: block_content: 
         183: expr_stmt: 
          184: expr: 
           185: name: seig_entry
           186: operator: =
           187: name: NULL
     188: break: 
  189: if_stmt: 
   190: if: 
    191: condition: 
     192: expr: 
      193: name: seig_entry
    194: block: 
     195: block_content: 
      196: if_stmt: 
       197: if: 
        198: condition: 
         199: expr: 
          200: name: default_IsEncrypted
        201: block: 
         202: block_content: 
          203: expr_stmt: 
           204: expr: 
            205: operator: *
            206: name: default_IsEncrypted
            207: operator: =
            208: name: 
             209: name: seig_entry
             210: operator: ->
             211: name: IsProtected
      212: if_stmt: 
       213: if: 
        214: condition: 
         215: expr: 
          216: name: crypt_byte_block
        217: block: 
         218: block_content: 
          219: expr_stmt: 
           220: expr: 
            221: operator: *
            222: name: crypt_byte_block
            223: operator: =
            224: name: 
             225: name: seig_entry
             226: operator: ->
             227: name: crypt_byte_block
      228: if_stmt: 
       229: if: 
        230: condition: 
         231: expr: 
          232: name: skip_byte_block
        233: block: 
         234: block_content: 
          235: expr_stmt: 
           236: expr: 
            237: operator: *
            238: name: skip_byte_block
            239: operator: =
            240: name: 
             241: name: seig_entry
             242: operator: ->
             243: name: skip_byte_block
      244: if_stmt: 
       245: if: 
        246: condition: 
         247: expr: 
          248: name: key_info
        249: block: 
         250: block_content: 
          251: expr_stmt: 
           252: expr: 
            253: operator: *
            254: name: key_info
            255: operator: =
            256: name: 
             257: name: seig_entry
             258: operator: ->
             259: name: key_info
      260: if_stmt: 
       261: if: 
        262: condition: 
         263: expr: 
          264: name: key_info_size
        265: block: 
         266: block_content: 
          267: expr_stmt: 
           268: expr: 
            269: operator: *
            270: name: key_info_size
            271: operator: =
            272: name: 
             273: name: seig_entry
             274: operator: ->
             275: name: key_info_size
      276: if_stmt: 
       277: if: 
        278: condition: 
         279: expr: 
          280: name: container_type
        281: block: 
         282: block_content: 
          283: expr_stmt: 
           284: expr: 
            285: operator: *
            286: name: container_type
            287: operator: =
            288: name: GF_ISOM_BOX_TYPE_SENC
   289: else: 
    290: block: 
     291: block_content: 
      292: if_stmt: 
       293: if: 
        294: condition: 
         295: expr: 
          296: operator: !
          297: name: 
           298: name: trak
           299: operator: ->
           300: name: moov
           301: operator: ->
           302: name: mov
           303: operator: ->
           304: name: is_smooth
        305: block: 
         306: block_content: 
          307: expr_stmt: 
           308: expr: 
            309: name: 
             310: name: trak
             311: operator: ->
             312: name: moov
             313: operator: ->
             314: name: mov
             315: operator: ->
             316: name: is_smooth
            317: operator: =
            318: name: GF_TRUE
          319: expr_stmt: 
           320: expr: 
            321: call: 
             322: name: GF_LOG
             323: argument_list: 
              324: argument: 
               325: expr: 
                326: name: GF_LOG_WARNING
              327: argument: 
               328: expr: 
                329: name: GF_LOG_CONTAINER
              330: argument: 
               331: expr: 
                332: operator: (
                333: literal: "[iso file] senc box without tenc, assuming MS smooth+piff\n"
                334: operator: )
      335: if_stmt: 
       336: if: 
        337: condition: 
         338: expr: 
          339: name: default_IsEncrypted
        340: block: 
         341: block_content: 
          342: expr_stmt: 
           343: expr: 
            344: operator: *
            345: name: default_IsEncrypted
            346: operator: =
            347: name: GF_TRUE
      348: comment: //set default value, overwritten below
      349: if_stmt: 
       350: if: 
        351: condition: 
         352: expr: 
          353: name: container_type
        354: block: 
         355: block_content: 
          356: expr_stmt: 
           357: expr: 
            358: operator: *
            359: name: container_type
            360: operator: =
            361: name: GF_ISOM_BOX_UUID_PSEC
=====
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: u32
   5: name: i
  6: decl: 
   7: type: 
   8: name: count
   9: init: 
    10: expr: 
     11: literal: 0
 12: decl_stmt: 
  13: decl: 
   14: type: 
    15: name: GF_CENCSampleEncryptionGroupEntry
    16: modifier: *
   17: name: seig_entry
   18: init: 
    19: expr: 
     20: name: NULL
 21: if_stmt: 
  22: if: 
   23: condition: 
    24: expr: 
     25: operator: !
     26: name: 
      27: name: trak
      28: operator: ->
      29: name: moov
      30: operator: ->
      31: name: mov
      32: operator: ->
      33: name: is_smooth
   34: block: 
    35: block_content: 
     36: expr_stmt: 
      37: expr: 
       38: name: count
       39: operator: =
       40: call: 
        41: name: gf_list_count
        42: argument_list: 
         43: argument: 
          44: expr: 
           45: name: 
            46: name: trak
            47: operator: ->
            48: name: Media
            49: operator: ->
            50: name: information
            51: operator: ->
            52: name: sampleTable
            53: operator: ->
            54: name: sampleGroupsDescription
 55: for: 
  56: control: 
   57: init: 
    58: expr: 
     59: name: i
     60: operator: =
     61: literal: 0
   62: condition: 
    63: expr: 
     64: name: i
     65: operator: <
     66: name: count
   67: incr: 
    68: expr: 
     69: name: i
     70: operator: ++
  71: block: 
   72: block_content: 
    73: decl_stmt: 
     74: decl: 
      75: type: 
       76: name: GF_SampleGroupDescriptionBox
       77: modifier: *
      78: name: sgdesc
      79: init: 
       80: expr: 
        81: operator: (
        82: name: GF_SampleGroupDescriptionBox
        83: operator: *
        84: operator: )
        85: call: 
         86: name: gf_list_get
         87: argument_list: 
          88: argument: 
           89: expr: 
            90: name: 
             91: name: trak
             92: operator: ->
             93: name: Media
             94: operator: ->
             95: name: information
             96: operator: ->
             97: name: sampleTable
             98: operator: ->
             99: name: sampleGroupsDescription
          100: argument: 
           101: expr: 
            102: name: i
    103: if_stmt: 
     104: if: 
      105: condition: 
       106: expr: 
        107: name: 
         108: name: sgdesc
         109: operator: ->
         110: name: grouping_type
        111: operator: !=
        112: name: GF_ISOM_SAMPLE_GROUP_SEIG
      113: block: 
       114: block_content: 
        115: continue: 
    116: if_stmt: 
     117: if: 
      118: condition: 
       119: expr: 
        120: name: 
         121: name: sgdesc
         122: operator: ->
         123: name: default_description_index
      124: block: 
       125: block_content: 
        126: expr_stmt: 
         127: expr: 
          128: name: seig_entry
          129: operator: =
          130: call: 
           131: name: gf_list_get
           132: argument_list: 
            133: argument: 
             134: expr: 
              135: name: 
               136: name: sgdesc
               137: operator: ->
               138: name: group_descriptions
            139: argument: 
             140: expr: 
              141: name: 
               142: name: sgdesc
               143: operator: ->
               144: name: default_description_index
              145: operator: -
              146: literal: 1
     147: else: 
      148: block: 
       149: block_content: 
        150: expr_stmt: 
         151: expr: 
          152: name: seig_entry
          153: operator: =
          154: call: 
           155: name: gf_list_get
           156: argument_list: 
            157: argument: 
             158: expr: 
              159: name: 
               160: name: sgdesc
               161: operator: ->
               162: name: group_descriptions
            163: argument: 
             164: expr: 
              165: literal: 0
    166: if_stmt: 
     167: if: 
      168: condition: 
       169: expr: 
        170: operator: !
        171: name: 
         172: name: seig_entry
         173: operator: ->
         174: name: key_info
         175: index: 
          176: expr: 
           177: literal: 0
      178: block: 
       179: block_content: 
        180: expr_stmt: 
         181: expr: 
          182: name: seig_entry
          183: operator: =
          184: name: NULL
    185: break: 
 186: if_stmt: 
  187: if: 
   188: condition: 
    189: expr: 
     190: name: seig_entry
   191: block: 
    192: block_content: 
     193: if_stmt: 
      194: if: 
       195: condition: 
        196: expr: 
         197: name: default_IsEncrypted
       198: block: 
        199: block_content: 
         200: expr_stmt: 
          201: expr: 
           202: operator: *
           203: name: default_IsEncrypted
           204: operator: =
           205: name: 
            206: name: seig_entry
            207: operator: ->
            208: name: IsProtected
     209: if_stmt: 
      210: if: 
       211: condition: 
        212: expr: 
         213: name: crypt_byte_block
       214: block: 
        215: block_content: 
         216: expr_stmt: 
          217: expr: 
           218: operator: *
           219: name: crypt_byte_block
           220: operator: =
           221: name: 
            222: name: seig_entry
            223: operator: ->
            224: name: crypt_byte_block
     225: if_stmt: 
      226: if: 
       227: condition: 
        228: expr: 
         229: name: skip_byte_block
       230: block: 
        231: block_content: 
         232: expr_stmt: 
          233: expr: 
           234: operator: *
           235: name: skip_byte_block
           236: operator: =
           237: name: 
            238: name: seig_entry
            239: operator: ->
            240: name: skip_byte_block
     241: if_stmt: 
      242: if: 
       243: condition: 
        244: expr: 
         245: name: key_info
       246: block: 
        247: block_content: 
         248: expr_stmt: 
          249: expr: 
           250: operator: *
           251: name: key_info
           252: operator: =
           253: name: 
            254: name: seig_entry
            255: operator: ->
            256: name: key_info
     257: if_stmt: 
      258: if: 
       259: condition: 
        260: expr: 
         261: name: key_info_size
       262: block: 
        263: block_content: 
         264: expr_stmt: 
          265: expr: 
           266: operator: *
           267: name: key_info_size
           268: operator: =
           269: name: 
            270: name: seig_entry
            271: operator: ->
            272: name: key_info_size
     273: if_stmt: 
      274: if: 
       275: condition: 
        276: expr: 
         277: name: container_type
       278: block: 
        279: block_content: 
         280: expr_stmt: 
          281: expr: 
           282: operator: *
           283: name: container_type
           284: operator: =
           285: name: GF_ISOM_BOX_TYPE_SENC
  286: else: 
   287: block: 
    288: block_content: 
     289: if_stmt: 
      290: if: 
       291: condition: 
        292: expr: 
         293: operator: !
         294: name: 
          295: name: trak
          296: operator: ->
          297: name: moov
          298: operator: ->
          299: name: mov
          300: operator: ->
          301: name: is_smooth
       302: block: 
        303: block_content: 
         304: expr_stmt: 
          305: expr: 
           306: name: 
            307: name: trak
            308: operator: ->
            309: name: moov
            310: operator: ->
            311: name: mov
            312: operator: ->
            313: name: is_smooth
           314: operator: =
           315: name: GF_TRUE
         316: expr_stmt: 
          317: expr: 
           318: call: 
            319: name: GF_LOG
            320: argument_list: 
             321: argument: 
              322: expr: 
               323: name: GF_LOG_WARNING
             324: argument: 
              325: expr: 
               326: name: GF_LOG_CONTAINER
             327: argument: 
              328: expr: 
               329: operator: (
               330: literal: "[iso file] senc box without tenc, assuming MS smooth+piff\n"
               331: operator: )
     332: if_stmt: 
      333: if: 
       334: condition: 
        335: expr: 
         336: name: default_IsEncrypted
       337: block: 
        338: block_content: 
         339: expr_stmt: 
          340: expr: 
           341: operator: *
           342: name: default_IsEncrypted
           343: operator: =
           344: name: GF_TRUE
     345: comment: //set default value, overwritten below
     346: if_stmt: 
      347: if: 
       348: condition: 
        349: expr: 
         350: name: container_type
       351: block: 
        352: block_content: 
         353: expr_stmt: 
          354: expr: 
           355: operator: *
           356: name: container_type
           357: operator: =
           358: name: GF_ISOM_BOX_UUID_PSEC

----------------------------------------
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: u32
   5: name: i
  6: decl: 
   7: type: 
   8: name: count
   9: init: 
    10: expr: 
     11: literal: 0
 12: decl_stmt: 
  13: decl: 
   14: type: 
    15: name: GF_CENCSampleEncryptionGroupEntry
    16: modifier: *
   17: name: seig_entry
   18: init: 
    19: expr: 
     20: name: NULL
 21: if_stmt: 
  22: if: 
   23: condition: 
    24: expr: 
     25: operator: !
     26: name: 
      27: name: trak
      28: operator: ->
      29: name: moov
      30: operator: ->
      31: name: mov
      32: operator: ->
      33: name: is_smooth
   34: block: 
    35: block_content: 
     36: expr_stmt: 
      37: expr: 
       38: name: count
       39: operator: =
       40: call: 
        41: name: gf_list_count
        42: argument_list: 
         43: argument: 
          44: expr: 
           45: name: 
            46: name: trak
            47: operator: ->
            48: name: Media
            49: operator: ->
            50: name: information
            51: operator: ->
            52: name: sampleTable
            53: operator: ->
            54: name: sampleGroupsDescription
 55: for: 
  56: control: 
   57: init: 
    58: expr: 
     59: name: i
     60: operator: =
     61: literal: 0
   62: condition: 
    63: expr: 
     64: name: i
     65: operator: <
     66: name: count
   67: incr: 
    68: expr: 
     69: name: i
     70: operator: ++
  71: block: 
   72: block_content: 
    73: decl_stmt: 
     74: decl: 
      75: type: 
       76: name: GF_SampleGroupDescriptionBox
       77: modifier: *
      78: name: sgdesc
      79: init: 
       80: expr: 
        81: operator: (
        82: name: GF_SampleGroupDescriptionBox
        83: operator: *
        84: operator: )
        85: call: 
         86: name: gf_list_get
         87: argument_list: 
          88: argument: 
           89: expr: 
            90: name: 
             91: name: trak
             92: operator: ->
             93: name: Media
             94: operator: ->
             95: name: information
             96: operator: ->
             97: name: sampleTable
             98: operator: ->
             99: name: sampleGroupsDescription
          100: argument: 
           101: expr: 
            102: name: i
    103: if_stmt: 
     104: if: 
      105: condition: 
       106: expr: 
        107: name: 
         108: name: sgdesc
         109: operator: ->
         110: name: grouping_type
        111: operator: !=
        112: name: GF_ISOM_SAMPLE_GROUP_SEIG
      113: block: 
       114: block_content: 
        115: continue: 
    116: if_stmt: 
     117: if: 
      118: condition: 
       119: expr: 
        120: name: 
         121: name: sgdesc
         122: operator: ->
         123: name: default_description_index
      124: block: 
       125: block_content: 
        126: expr_stmt: 
         127: expr: 
          128: name: seig_entry
          129: operator: =
          130: call: 
           131: name: gf_list_get
           132: argument_list: 
            133: argument: 
             134: expr: 
              135: name: 
               136: name: sgdesc
               137: operator: ->
               138: name: group_descriptions
            139: argument: 
             140: expr: 
              141: name: 
               142: name: sgdesc
               143: operator: ->
               144: name: default_description_index
              145: operator: -
              146: literal: 1
     147: else: 
      148: block: 
       149: block_content: 
        150: expr_stmt: 
         151: expr: 
          152: name: seig_entry
          153: operator: =
          154: call: 
           155: name: gf_list_get
           156: argument_list: 
            157: argument: 
             158: expr: 
              159: name: 
               160: name: sgdesc
               161: operator: ->
               162: name: group_descriptions
            163: argument: 
             164: expr: 
              165: literal: 0
    166: if_stmt: 
     167: if: 
      168: condition: 
       169: expr: 
        170: name: seig_entry
        171: operator: &&
        172: operator: !
        173: name: 
         174: name: seig_entry
         175: operator: ->
         176: name: key_info
         177: index: 
          178: expr: 
           179: literal: 0
      180: block: 
       181: block_content: 
        182: expr_stmt: 
         183: expr: 
          184: name: seig_entry
          185: operator: =
          186: name: NULL
    187: break: 
 188: if_stmt: 
  189: if: 
   190: condition: 
    191: expr: 
     192: name: seig_entry
   193: block: 
    194: block_content: 
     195: if_stmt: 
      196: if: 
       197: condition: 
        198: expr: 
         199: name: default_IsEncrypted
       200: block: 
        201: block_content: 
         202: expr_stmt: 
          203: expr: 
           204: operator: *
           205: name: default_IsEncrypted
           206: operator: =
           207: name: 
            208: name: seig_entry
            209: operator: ->
            210: name: IsProtected
     211: if_stmt: 
      212: if: 
       213: condition: 
        214: expr: 
         215: name: crypt_byte_block
       216: block: 
        217: block_content: 
         218: expr_stmt: 
          219: expr: 
           220: operator: *
           221: name: crypt_byte_block
           222: operator: =
           223: name: 
            224: name: seig_entry
            225: operator: ->
            226: name: crypt_byte_block
     227: if_stmt: 
      228: if: 
       229: condition: 
        230: expr: 
         231: name: skip_byte_block
       232: block: 
        233: block_content: 
         234: expr_stmt: 
          235: expr: 
           236: operator: *
           237: name: skip_byte_block
           238: operator: =
           239: name: 
            240: name: seig_entry
            241: operator: ->
            242: name: skip_byte_block
     243: if_stmt: 
      244: if: 
       245: condition: 
        246: expr: 
         247: name: key_info
       248: block: 
        249: block_content: 
         250: expr_stmt: 
          251: expr: 
           252: operator: *
           253: name: key_info
           254: operator: =
           255: name: 
            256: name: seig_entry
            257: operator: ->
            258: name: key_info
     259: if_stmt: 
      260: if: 
       261: condition: 
        262: expr: 
         263: name: key_info_size
       264: block: 
        265: block_content: 
         266: expr_stmt: 
          267: expr: 
           268: operator: *
           269: name: key_info_size
           270: operator: =
           271: name: 
            272: name: seig_entry
            273: operator: ->
            274: name: key_info_size
     275: if_stmt: 
      276: if: 
       277: condition: 
        278: expr: 
         279: name: container_type
       280: block: 
        281: block_content: 
         282: expr_stmt: 
          283: expr: 
           284: operator: *
           285: name: container_type
           286: operator: =
           287: name: GF_ISOM_BOX_TYPE_SENC
  288: else: 
   289: block: 
    290: block_content: 
     291: if_stmt: 
      292: if: 
       293: condition: 
        294: expr: 
         295: operator: !
         296: name: 
          297: name: trak
          298: operator: ->
          299: name: moov
          300: operator: ->
          301: name: mov
          302: operator: ->
          303: name: is_smooth
       304: block: 
        305: block_content: 
         306: expr_stmt: 
          307: expr: 
           308: name: 
            309: name: trak
            310: operator: ->
            311: name: moov
            312: operator: ->
            313: name: mov
            314: operator: ->
            315: name: is_smooth
           316: operator: =
           317: name: GF_TRUE
         318: expr_stmt: 
          319: expr: 
           320: call: 
            321: name: GF_LOG
            322: argument_list: 
             323: argument: 
              324: expr: 
               325: name: GF_LOG_WARNING
             326: argument: 
              327: expr: 
               328: name: GF_LOG_CONTAINER
             329: argument: 
              330: expr: 
               331: operator: (
               332: literal: "[iso file] senc box without tenc, assuming MS smooth+piff\n"
               333: operator: )
     334: if_stmt: 
      335: if: 
       336: condition: 
        337: expr: 
         338: name: default_IsEncrypted
       339: block: 
        340: block_content: 
         341: expr_stmt: 
          342: expr: 
           343: operator: *
           344: name: default_IsEncrypted
           345: operator: =
           346: name: GF_TRUE
     347: comment: //set default value, overwritten below
     348: if_stmt: 
      349: if: 
       350: condition: 
        351: expr: 
         352: name: container_type
       353: block: 
        354: block_content: 
         355: expr_stmt: 
          356: expr: 
           357: operator: *
           358: name: container_type
           359: operator: =
           360: name: GF_ISOM_BOX_UUID_PSEC
=====
0: for: 
 1: control: 
  2: init: 
   3: expr: 
    4: name: i
    5: operator: =
    6: literal: 0
  7: condition: 
   8: expr: 
    9: name: i
    10: operator: <
    11: name: count
  12: incr: 
   13: expr: 
    14: name: i
    15: operator: ++
 16: block: 
  17: block_content: 
   18: decl_stmt: 
    19: decl: 
     20: type: 
      21: name: GF_SampleGroupDescriptionBox
      22: modifier: *
     23: name: sgdesc
     24: init: 
      25: expr: 
       26: operator: (
       27: name: GF_SampleGroupDescriptionBox
       28: operator: *
       29: operator: )
       30: call: 
        31: name: gf_list_get
        32: argument_list: 
         33: argument: 
          34: expr: 
           35: name: 
            36: name: trak
            37: operator: ->
            38: name: Media
            39: operator: ->
            40: name: information
            41: operator: ->
            42: name: sampleTable
            43: operator: ->
            44: name: sampleGroupsDescription
         45: argument: 
          46: expr: 
           47: name: i
   48: if_stmt: 
    49: if: 
     50: condition: 
      51: expr: 
       52: name: 
        53: name: sgdesc
        54: operator: ->
        55: name: grouping_type
       56: operator: !=
       57: name: GF_ISOM_SAMPLE_GROUP_SEIG
     58: block: 
      59: block_content: 
       60: continue: 
   61: if_stmt: 
    62: if: 
     63: condition: 
      64: expr: 
       65: name: 
        66: name: sgdesc
        67: operator: ->
        68: name: default_description_index
     69: block: 
      70: block_content: 
       71: expr_stmt: 
        72: expr: 
         73: name: seig_entry
         74: operator: =
         75: call: 
          76: name: gf_list_get
          77: argument_list: 
           78: argument: 
            79: expr: 
             80: name: 
              81: name: sgdesc
              82: operator: ->
              83: name: group_descriptions
           84: argument: 
            85: expr: 
             86: name: 
              87: name: sgdesc
              88: operator: ->
              89: name: default_description_index
             90: operator: -
             91: literal: 1
    92: else: 
     93: block: 
      94: block_content: 
       95: expr_stmt: 
        96: expr: 
         97: name: seig_entry
         98: operator: =
         99: call: 
          100: name: gf_list_get
          101: argument_list: 
           102: argument: 
            103: expr: 
             104: name: 
              105: name: sgdesc
              106: operator: ->
              107: name: group_descriptions
           108: argument: 
            109: expr: 
             110: literal: 0
   111: if_stmt: 
    112: if: 
     113: condition: 
      114: expr: 
       115: operator: !
       116: name: 
        117: name: seig_entry
        118: operator: ->
        119: name: key_info
        120: index: 
         121: expr: 
          122: literal: 0
     123: block: 
      124: block_content: 
       125: expr_stmt: 
        126: expr: 
         127: name: seig_entry
         128: operator: =
         129: name: NULL
   130: break: 

----------------------------------------
0: for: 
 1: control: 
  2: init: 
   3: expr: 
    4: name: i
    5: operator: =
    6: literal: 0
  7: condition: 
   8: expr: 
    9: name: i
    10: operator: <
    11: name: count
  12: incr: 
   13: expr: 
    14: name: i
    15: operator: ++
 16: block: 
  17: block_content: 
   18: decl_stmt: 
    19: decl: 
     20: type: 
      21: name: GF_SampleGroupDescriptionBox
      22: modifier: *
     23: name: sgdesc
     24: init: 
      25: expr: 
       26: operator: (
       27: name: GF_SampleGroupDescriptionBox
       28: operator: *
       29: operator: )
       30: call: 
        31: name: gf_list_get
        32: argument_list: 
         33: argument: 
          34: expr: 
           35: name: 
            36: name: trak
            37: operator: ->
            38: name: Media
            39: operator: ->
            40: name: information
            41: operator: ->
            42: name: sampleTable
            43: operator: ->
            44: name: sampleGroupsDescription
         45: argument: 
          46: expr: 
           47: name: i
   48: if_stmt: 
    49: if: 
     50: condition: 
      51: expr: 
       52: name: 
        53: name: sgdesc
        54: operator: ->
        55: name: grouping_type
       56: operator: !=
       57: name: GF_ISOM_SAMPLE_GROUP_SEIG
     58: block: 
      59: block_content: 
       60: continue: 
   61: if_stmt: 
    62: if: 
     63: condition: 
      64: expr: 
       65: name: 
        66: name: sgdesc
        67: operator: ->
        68: name: default_description_index
     69: block: 
      70: block_content: 
       71: expr_stmt: 
        72: expr: 
         73: name: seig_entry
         74: operator: =
         75: call: 
          76: name: gf_list_get
          77: argument_list: 
           78: argument: 
            79: expr: 
             80: name: 
              81: name: sgdesc
              82: operator: ->
              83: name: group_descriptions
           84: argument: 
            85: expr: 
             86: name: 
              87: name: sgdesc
              88: operator: ->
              89: name: default_description_index
             90: operator: -
             91: literal: 1
    92: else: 
     93: block: 
      94: block_content: 
       95: expr_stmt: 
        96: expr: 
         97: name: seig_entry
         98: operator: =
         99: call: 
          100: name: gf_list_get
          101: argument_list: 
           102: argument: 
            103: expr: 
             104: name: 
              105: name: sgdesc
              106: operator: ->
              107: name: group_descriptions
           108: argument: 
            109: expr: 
             110: literal: 0
   111: if_stmt: 
    112: if: 
     113: condition: 
      114: expr: 
       115: name: seig_entry
       116: operator: &&
       117: operator: !
       118: name: 
        119: name: seig_entry
        120: operator: ->
        121: name: key_info
        122: index: 
         123: expr: 
          124: literal: 0
     125: block: 
      126: block_content: 
       127: expr_stmt: 
        128: expr: 
         129: name: seig_entry
         130: operator: =
         131: name: NULL
   132: break: 
=====
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: GF_SampleGroupDescriptionBox
     6: modifier: *
    7: name: sgdesc
    8: init: 
     9: expr: 
      10: operator: (
      11: name: GF_SampleGroupDescriptionBox
      12: operator: *
      13: operator: )
      14: call: 
       15: name: gf_list_get
       16: argument_list: 
        17: argument: 
         18: expr: 
          19: name: 
           20: name: trak
           21: operator: ->
           22: name: Media
           23: operator: ->
           24: name: information
           25: operator: ->
           26: name: sampleTable
           27: operator: ->
           28: name: sampleGroupsDescription
        29: argument: 
         30: expr: 
          31: name: i
  32: if_stmt: 
   33: if: 
    34: condition: 
     35: expr: 
      36: name: 
       37: name: sgdesc
       38: operator: ->
       39: name: grouping_type
      40: operator: !=
      41: name: GF_ISOM_SAMPLE_GROUP_SEIG
    42: block: 
     43: block_content: 
      44: continue: 
  45: if_stmt: 
   46: if: 
    47: condition: 
     48: expr: 
      49: name: 
       50: name: sgdesc
       51: operator: ->
       52: name: default_description_index
    53: block: 
     54: block_content: 
      55: expr_stmt: 
       56: expr: 
        57: name: seig_entry
        58: operator: =
        59: call: 
         60: name: gf_list_get
         61: argument_list: 
          62: argument: 
           63: expr: 
            64: name: 
             65: name: sgdesc
             66: operator: ->
             67: name: group_descriptions
          68: argument: 
           69: expr: 
            70: name: 
             71: name: sgdesc
             72: operator: ->
             73: name: default_description_index
            74: operator: -
            75: literal: 1
   76: else: 
    77: block: 
     78: block_content: 
      79: expr_stmt: 
       80: expr: 
        81: name: seig_entry
        82: operator: =
        83: call: 
         84: name: gf_list_get
         85: argument_list: 
          86: argument: 
           87: expr: 
            88: name: 
             89: name: sgdesc
             90: operator: ->
             91: name: group_descriptions
          92: argument: 
           93: expr: 
            94: literal: 0
  95: if_stmt: 
   96: if: 
    97: condition: 
     98: expr: 
      99: operator: !
      100: name: 
       101: name: seig_entry
       102: operator: ->
       103: name: key_info
       104: index: 
        105: expr: 
         106: literal: 0
    107: block: 
     108: block_content: 
      109: expr_stmt: 
       110: expr: 
        111: name: seig_entry
        112: operator: =
        113: name: NULL
  114: break: 

----------------------------------------
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: GF_SampleGroupDescriptionBox
     6: modifier: *
    7: name: sgdesc
    8: init: 
     9: expr: 
      10: operator: (
      11: name: GF_SampleGroupDescriptionBox
      12: operator: *
      13: operator: )
      14: call: 
       15: name: gf_list_get
       16: argument_list: 
        17: argument: 
         18: expr: 
          19: name: 
           20: name: trak
           21: operator: ->
           22: name: Media
           23: operator: ->
           24: name: information
           25: operator: ->
           26: name: sampleTable
           27: operator: ->
           28: name: sampleGroupsDescription
        29: argument: 
         30: expr: 
          31: name: i
  32: if_stmt: 
   33: if: 
    34: condition: 
     35: expr: 
      36: name: 
       37: name: sgdesc
       38: operator: ->
       39: name: grouping_type
      40: operator: !=
      41: name: GF_ISOM_SAMPLE_GROUP_SEIG
    42: block: 
     43: block_content: 
      44: continue: 
  45: if_stmt: 
   46: if: 
    47: condition: 
     48: expr: 
      49: name: 
       50: name: sgdesc
       51: operator: ->
       52: name: default_description_index
    53: block: 
     54: block_content: 
      55: expr_stmt: 
       56: expr: 
        57: name: seig_entry
        58: operator: =
        59: call: 
         60: name: gf_list_get
         61: argument_list: 
          62: argument: 
           63: expr: 
            64: name: 
             65: name: sgdesc
             66: operator: ->
             67: name: group_descriptions
          68: argument: 
           69: expr: 
            70: name: 
             71: name: sgdesc
             72: operator: ->
             73: name: default_description_index
            74: operator: -
            75: literal: 1
   76: else: 
    77: block: 
     78: block_content: 
      79: expr_stmt: 
       80: expr: 
        81: name: seig_entry
        82: operator: =
        83: call: 
         84: name: gf_list_get
         85: argument_list: 
          86: argument: 
           87: expr: 
            88: name: 
             89: name: sgdesc
             90: operator: ->
             91: name: group_descriptions
          92: argument: 
           93: expr: 
            94: literal: 0
  95: if_stmt: 
   96: if: 
    97: condition: 
     98: expr: 
      99: name: seig_entry
      100: operator: &&
      101: operator: !
      102: name: 
       103: name: seig_entry
       104: operator: ->
       105: name: key_info
       106: index: 
        107: expr: 
         108: literal: 0
    109: block: 
     110: block_content: 
      111: expr_stmt: 
       112: expr: 
        113: name: seig_entry
        114: operator: =
        115: name: NULL
  116: break: 
=====
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: GF_SampleGroupDescriptionBox
    5: modifier: *
   6: name: sgdesc
   7: init: 
    8: expr: 
     9: operator: (
     10: name: GF_SampleGroupDescriptionBox
     11: operator: *
     12: operator: )
     13: call: 
      14: name: gf_list_get
      15: argument_list: 
       16: argument: 
        17: expr: 
         18: name: 
          19: name: trak
          20: operator: ->
          21: name: Media
          22: operator: ->
          23: name: information
          24: operator: ->
          25: name: sampleTable
          26: operator: ->
          27: name: sampleGroupsDescription
       28: argument: 
        29: expr: 
         30: name: i
 31: if_stmt: 
  32: if: 
   33: condition: 
    34: expr: 
     35: name: 
      36: name: sgdesc
      37: operator: ->
      38: name: grouping_type
     39: operator: !=
     40: name: GF_ISOM_SAMPLE_GROUP_SEIG
   41: block: 
    42: block_content: 
     43: continue: 
 44: if_stmt: 
  45: if: 
   46: condition: 
    47: expr: 
     48: name: 
      49: name: sgdesc
      50: operator: ->
      51: name: default_description_index
   52: block: 
    53: block_content: 
     54: expr_stmt: 
      55: expr: 
       56: name: seig_entry
       57: operator: =
       58: call: 
        59: name: gf_list_get
        60: argument_list: 
         61: argument: 
          62: expr: 
           63: name: 
            64: name: sgdesc
            65: operator: ->
            66: name: group_descriptions
         67: argument: 
          68: expr: 
           69: name: 
            70: name: sgdesc
            71: operator: ->
            72: name: default_description_index
           73: operator: -
           74: literal: 1
  75: else: 
   76: block: 
    77: block_content: 
     78: expr_stmt: 
      79: expr: 
       80: name: seig_entry
       81: operator: =
       82: call: 
        83: name: gf_list_get
        84: argument_list: 
         85: argument: 
          86: expr: 
           87: name: 
            88: name: sgdesc
            89: operator: ->
            90: name: group_descriptions
         91: argument: 
          92: expr: 
           93: literal: 0
 94: if_stmt: 
  95: if: 
   96: condition: 
    97: expr: 
     98: operator: !
     99: name: 
      100: name: seig_entry
      101: operator: ->
      102: name: key_info
      103: index: 
       104: expr: 
        105: literal: 0
   106: block: 
    107: block_content: 
     108: expr_stmt: 
      109: expr: 
       110: name: seig_entry
       111: operator: =
       112: name: NULL
 113: break: 

----------------------------------------
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: GF_SampleGroupDescriptionBox
    5: modifier: *
   6: name: sgdesc
   7: init: 
    8: expr: 
     9: operator: (
     10: name: GF_SampleGroupDescriptionBox
     11: operator: *
     12: operator: )
     13: call: 
      14: name: gf_list_get
      15: argument_list: 
       16: argument: 
        17: expr: 
         18: name: 
          19: name: trak
          20: operator: ->
          21: name: Media
          22: operator: ->
          23: name: information
          24: operator: ->
          25: name: sampleTable
          26: operator: ->
          27: name: sampleGroupsDescription
       28: argument: 
        29: expr: 
         30: name: i
 31: if_stmt: 
  32: if: 
   33: condition: 
    34: expr: 
     35: name: 
      36: name: sgdesc
      37: operator: ->
      38: name: grouping_type
     39: operator: !=
     40: name: GF_ISOM_SAMPLE_GROUP_SEIG
   41: block: 
    42: block_content: 
     43: continue: 
 44: if_stmt: 
  45: if: 
   46: condition: 
    47: expr: 
     48: name: 
      49: name: sgdesc
      50: operator: ->
      51: name: default_description_index
   52: block: 
    53: block_content: 
     54: expr_stmt: 
      55: expr: 
       56: name: seig_entry
       57: operator: =
       58: call: 
        59: name: gf_list_get
        60: argument_list: 
         61: argument: 
          62: expr: 
           63: name: 
            64: name: sgdesc
            65: operator: ->
            66: name: group_descriptions
         67: argument: 
          68: expr: 
           69: name: 
            70: name: sgdesc
            71: operator: ->
            72: name: default_description_index
           73: operator: -
           74: literal: 1
  75: else: 
   76: block: 
    77: block_content: 
     78: expr_stmt: 
      79: expr: 
       80: name: seig_entry
       81: operator: =
       82: call: 
        83: name: gf_list_get
        84: argument_list: 
         85: argument: 
          86: expr: 
           87: name: 
            88: name: sgdesc
            89: operator: ->
            90: name: group_descriptions
         91: argument: 
          92: expr: 
           93: literal: 0
 94: if_stmt: 
  95: if: 
   96: condition: 
    97: expr: 
     98: name: seig_entry
     99: operator: &&
     100: operator: !
     101: name: 
      102: name: seig_entry
      103: operator: ->
      104: name: key_info
      105: index: 
       106: expr: 
        107: literal: 0
   108: block: 
    109: block_content: 
     110: expr_stmt: 
      111: expr: 
       112: name: seig_entry
       113: operator: =
       114: name: NULL
 115: break: 
=====
0: if_stmt: 
 1: if: 
  2: condition: 
   3: expr: 
    4: operator: !
    5: name: 
     6: name: seig_entry
     7: operator: ->
     8: name: key_info
     9: index: 
      10: expr: 
       11: literal: 0
  12: block: 
   13: block_content: 
    14: expr_stmt: 
     15: expr: 
      16: name: seig_entry
      17: operator: =
      18: name: NULL

----------------------------------------
0: if_stmt: 
 1: if: 
  2: condition: 
   3: expr: 
    4: name: seig_entry
    5: operator: &&
    6: operator: !
    7: name: 
     8: name: seig_entry
     9: operator: ->
     10: name: key_info
     11: index: 
      12: expr: 
       13: literal: 0
  14: block: 
   15: block_content: 
    16: expr_stmt: 
     17: expr: 
      18: name: seig_entry
      19: operator: =
      20: name: NULL
=====
0: if: 
 1: condition: 
  2: expr: 
   3: operator: !
   4: name: 
    5: name: seig_entry
    6: operator: ->
    7: name: key_info
    8: index: 
     9: expr: 
      10: literal: 0
 11: block: 
  12: block_content: 
   13: expr_stmt: 
    14: expr: 
     15: name: seig_entry
     16: operator: =
     17: name: NULL

----------------------------------------
0: if: 
 1: condition: 
  2: expr: 
   3: name: seig_entry
   4: operator: &&
   5: operator: !
   6: name: 
    7: name: seig_entry
    8: operator: ->
    9: name: key_info
    10: index: 
     11: expr: 
      12: literal: 0
 13: block: 
  14: block_content: 
   15: expr_stmt: 
    16: expr: 
     17: name: seig_entry
     18: operator: =
     19: name: NULL
=====
0: condition: 
 1: expr: 
  2: operator: !
  3: name: 
   4: name: seig_entry
   5: operator: ->
   6: name: key_info
   7: index: 
    8: expr: 
     9: literal: 0

----------------------------------------
0: condition: 
 1: expr: 
  2: name: seig_entry
  3: operator: &&
  4: operator: !
  5: name: 
   6: name: seig_entry
   7: operator: ->
   8: name: key_info
   9: index: 
    10: expr: 
     11: literal: 0
=====
0: expr: 
 1: operator: !
 2: name: 
  3: name: seig_entry
  4: operator: ->
  5: name: key_info
  6: index: 
   7: expr: 
    8: literal: 0

----------------------------------------
0: expr: 
 1: name: seig_entry
 2: operator: &&
 3: operator: !
 4: name: 
  5: name: seig_entry
  6: operator: ->
  7: name: key_info
  8: index: 
   9: expr: 
    10: literal: 0
=====
