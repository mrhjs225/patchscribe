0: expr: 
 1: ?: !@#$holes0
 2: operator: -
 3: literal: 1
 4: ?: !@#$holes1

----------------------------------------
0: expr: 
 1: ?: !@#$holes0
 2: operator: -
 3: literal: 1
 4: ?: !@#$holes1
=====
0: unit: 
 1: function: 
  2: type: 
   3: name: s32
  4: name: hevc_parse_slice_segment
  5: parameter_list: 
   6: parameter: 
    7: decl: 
     8: type: 
      9: name: GF_BitStream
      10: modifier: *
     11: name: bs
   12: parameter: 
    13: decl: 
     14: type: 
      15: name: HEVCState
      16: modifier: *
     17: name: hevc
   18: parameter: 
    19: decl: 
     20: type: 
      21: name: HEVCSliceInfo
      22: modifier: *
     23: name: si
  24: block: 
   25: block_content: 
    26: decl_stmt: 
     27: decl: 
      28: type: 
       29: name: u32
      30: name: i
     31: decl: 
      32: type: 
      33: name: j
    34: decl_stmt: 
     35: decl: 
      36: type: 
       37: name: u32
      38: name: num_ref_idx_l0_active
      39: init: 
       40: expr: 
        41: literal: 0
     42: decl: 
      43: type: 
      44: name: num_ref_idx_l1_active
      45: init: 
       46: expr: 
        47: literal: 0
    48: decl_stmt: 
     49: decl: 
      50: type: 
       51: name: HEVC_PPS
       52: modifier: *
      53: name: pps
    54: decl_stmt: 
     55: decl: 
      56: type: 
       57: name: HEVC_SPS
       58: modifier: *
      59: name: sps
    60: decl_stmt: 
     61: decl: 
      62: type: 
       63: name: s32
      64: name: pps_id
    65: decl_stmt: 
     66: decl: 
      67: type: 
       68: name: Bool
      69: name: RapPicFlag
      70: init: 
       71: expr: 
        72: name: GF_FALSE
    73: decl_stmt: 
     74: decl: 
      75: type: 
       76: name: Bool
      77: name: IDRPicFlag
      78: init: 
       79: expr: 
        80: name: GF_FALSE
    81: expr_stmt: 
     82: expr: 
      83: name: 
       84: name: si
       85: operator: ->
       86: name: first_slice_segment_in_pic_flag
      87: operator: =
      88: call: 
       89: name: gf_bs_read_int_log
       90: argument_list: 
        91: argument: 
         92: expr: 
          93: name: bs
        94: argument: 
         95: expr: 
          96: literal: 1
        97: argument: 
         98: expr: 
          99: literal: "first_slice_segment_in_pic_flag"
    100: switch: 
     101: condition: 
      102: expr: 
       103: name: 
        104: name: si
        105: operator: ->
        106: name: nal_unit_type
     107: block: 
      108: block_content: 
       109: case: 
        110: expr: 
         111: name: GF_HEVC_NALU_SLICE_IDR_W_DLP
       112: case: 
        113: expr: 
         114: name: GF_HEVC_NALU_SLICE_IDR_N_LP
       115: expr_stmt: 
        116: expr: 
         117: name: IDRPicFlag
         118: operator: =
         119: name: GF_TRUE
       120: expr_stmt: 
        121: expr: 
         122: name: RapPicFlag
         123: operator: =
         124: name: GF_TRUE
       125: break: 
       126: case: 
        127: expr: 
         128: name: GF_HEVC_NALU_SLICE_BLA_W_LP
       129: case: 
        130: expr: 
         131: name: GF_HEVC_NALU_SLICE_BLA_W_DLP
       132: case: 
        133: expr: 
         134: name: GF_HEVC_NALU_SLICE_BLA_N_LP
       135: case: 
        136: expr: 
         137: name: GF_HEVC_NALU_SLICE_CRA
       138: expr_stmt: 
        139: expr: 
         140: name: RapPicFlag
         141: operator: =
         142: name: GF_TRUE
       143: break: 
    144: if_stmt: 
     145: if: 
      146: condition: 
       147: expr: 
        148: name: RapPicFlag
      149: block: 
       150: block_content: 
        151: expr_stmt: 
         152: expr: 
          153: call: 
           154: name: gf_bs_read_int_log
           155: argument_list: 
            156: argument: 
             157: expr: 
              158: name: bs
            159: argument: 
             160: expr: 
              161: literal: 1
            162: argument: 
             163: expr: 
              164: literal: "no_output_of_prior_pics_flag"
    165: expr_stmt: 
     166: expr: 
      167: name: pps_id
      168: operator: =
      169: call: 
       170: name: gf_bs_read_ue_log
       171: argument_list: 
        172: argument: 
         173: expr: 
          174: name: bs
        175: argument: 
         176: expr: 
          177: literal: "pps_id"
    178: if_stmt: 
     179: if: 
      180: condition: 
       181: expr: 
        182: name: pps_id
        183: operator: >=
        184: literal: 64
      185: block: 
       186: block_content: 
        187: return: 
         188: expr: 
          189: operator: -
          190: literal: 1
    191: expr_stmt: 
     192: expr: 
      193: name: pps
      194: operator: =
      195: operator: &
      196: name: 
       197: name: hevc
       198: operator: ->
       199: name: pps
       200: index: 
        201: expr: 
         202: name: pps_id
    203: expr_stmt: 
     204: expr: 
      205: name: sps
      206: operator: =
      207: operator: &
      208: name: 
       209: name: hevc
       210: operator: ->
       211: name: sps
       212: index: 
        213: expr: 
         214: name: 
          215: name: pps
          216: operator: ->
          217: name: sps_id
    218: expr_stmt: 
     219: expr: 
      220: name: 
       221: name: si
       222: operator: ->
       223: name: sps
      224: operator: =
      225: name: sps
    226: expr_stmt: 
     227: expr: 
      228: name: 
       229: name: si
       230: operator: ->
       231: name: pps
      232: operator: =
      233: name: pps
    234: if_stmt: 
     235: if: 
      236: condition: 
       237: expr: 
        238: operator: !
        239: name: 
         240: name: si
         241: operator: ->
         242: name: first_slice_segment_in_pic_flag
        243: operator: &&
        244: name: 
         245: name: pps
         246: operator: ->
         247: name: dependent_slice_segments_enabled_flag
      248: block: 
       249: block_content: 
        250: expr_stmt: 
         251: expr: 
          252: name: 
           253: name: si
           254: operator: ->
           255: name: dependent_slice_segment_flag
          256: operator: =
          257: call: 
           258: name: gf_bs_read_int_log
           259: argument_list: 
            260: argument: 
             261: expr: 
              262: name: bs
            263: argument: 
             264: expr: 
              265: literal: 1
            266: argument: 
             267: expr: 
              268: literal: "dependent_slice_segment_flag"
     269: else: 
      270: block: 
       271: block_content: 
        272: expr_stmt: 
         273: expr: 
          274: name: 
           275: name: si
           276: operator: ->
           277: name: dependent_slice_segment_flag
          278: operator: =
          279: name: GF_FALSE
    280: if_stmt: 
     281: if: 
      282: condition: 
       283: expr: 
        284: operator: !
        285: name: 
         286: name: si
         287: operator: ->
         288: name: first_slice_segment_in_pic_flag
      289: block: 
       290: block_content: 
        291: expr_stmt: 
         292: expr: 
          293: name: 
           294: name: si
           295: operator: ->
           296: name: slice_segment_address
          297: operator: =
          298: call: 
           299: name: gf_bs_read_int_log
           300: argument_list: 
            301: argument: 
             302: expr: 
              303: name: bs
            304: argument: 
             305: expr: 
              306: name: 
               307: name: sps
               308: operator: ->
               309: name: bitsSliceSegmentAddress
            310: argument: 
             311: expr: 
              312: literal: "slice_segment_address"
     313: else: 
      314: block: 
       315: block_content: 
        316: expr_stmt: 
         317: expr: 
          318: name: 
           319: name: si
           320: operator: ->
           321: name: slice_segment_address
          322: operator: =
          323: literal: 0
    324: if_stmt: 
     325: if: 
      326: condition: 
       327: expr: 
        328: operator: !
        329: name: 
         330: name: si
         331: operator: ->
         332: name: dependent_slice_segment_flag
      333: block: 
       334: block_content: 
        335: decl_stmt: 
         336: decl: 
          337: type: 
           338: name: Bool
          339: name: deblocking_filter_override_flag
          340: init: 
           341: expr: 
            342: literal: 0
        343: decl_stmt: 
         344: decl: 
          345: type: 
           346: name: Bool
          347: name: slice_temporal_mvp_enabled_flag
          348: init: 
           349: expr: 
            350: literal: 0
        351: decl_stmt: 
         352: decl: 
          353: type: 
           354: name: Bool
          355: name: slice_sao_luma_flag
          356: init: 
           357: expr: 
            358: literal: 0
        359: decl_stmt: 
         360: decl: 
          361: type: 
           362: name: Bool
          363: name: slice_sao_chroma_flag
          364: init: 
           365: expr: 
            366: literal: 0
        367: decl_stmt: 
         368: decl: 
          369: type: 
           370: name: Bool
          371: name: slice_deblocking_filter_disabled_flag
          372: init: 
           373: expr: 
            374: literal: 0
        375: comment: //"slice_reserved_undetermined_flag[]"
        376: expr_stmt: 
         377: expr: 
          378: call: 
           379: name: gf_bs_read_int_log
           380: argument_list: 
            381: argument: 
             382: expr: 
              383: name: bs
            384: argument: 
             385: expr: 
              386: name: 
               387: name: pps
               388: operator: ->
               389: name: num_extra_slice_header_bits
            390: argument: 
             391: expr: 
              392: literal: "slice_reserved_undetermined_flag"
        393: expr_stmt: 
         394: expr: 
          395: name: 
           396: name: si
           397: operator: ->
           398: name: slice_type
          399: operator: =
          400: call: 
           401: name: gf_bs_read_ue_log
           402: argument_list: 
            403: argument: 
             404: expr: 
              405: name: bs
            406: argument: 
             407: expr: 
              408: literal: "slice_type"
        409: if_stmt: 
         410: if: 
          411: condition: 
           412: expr: 
            413: name: 
             414: name: pps
             415: operator: ->
             416: name: output_flag_present_flag
          417: block: 
           418: block_content: 
            419: expr_stmt: 
             420: expr: 
              421: call: 
               422: name: gf_bs_read_int_log
               423: argument_list: 
                424: argument: 
                 425: expr: 
                  426: name: bs
                427: argument: 
                 428: expr: 
                  429: literal: 1
                430: argument: 
                 431: expr: 
                  432: literal: "pic_output_flag"
        433: if_stmt: 
         434: if: 
          435: condition: 
           436: expr: 
            437: name: 
             438: name: sps
             439: operator: ->
             440: name: separate_colour_plane_flag
            441: operator: ==
            442: literal: 1
          443: block: 
           444: block_content: 
            445: expr_stmt: 
             446: expr: 
              447: call: 
               448: name: gf_bs_read_int_log
               449: argument_list: 
                450: argument: 
                 451: expr: 
                  452: name: bs
                453: argument: 
                 454: expr: 
                  455: literal: 2
                456: argument: 
                 457: expr: 
                  458: literal: "colour_plane_id"
        459: if_stmt: 
         460: if: 
          461: condition: 
           462: expr: 
            463: name: IDRPicFlag
          464: block: 
           465: block_content: 
            466: expr_stmt: 
             467: expr: 
              468: name: 
               469: name: si
               470: operator: ->
               471: name: poc_lsb
              472: operator: =
              473: literal: 0
            474: comment: //if not asked to parse full header, abort since we know the poc
            475: if_stmt: 
             476: if: 
              477: condition: 
               478: expr: 
                479: operator: !
                480: name: 
                 481: name: hevc
                 482: operator: ->
                 483: name: full_slice_header_parse
              484: block: 
               485: block_content: 
                486: return: 
                 487: expr: 
                  488: literal: 0
         489: else: 
          490: block: 
           491: block_content: 
            492: expr_stmt: 
             493: expr: 
              494: name: 
               495: name: si
               496: operator: ->
               497: name: poc_lsb
              498: operator: =
              499: call: 
               500: name: gf_bs_read_int_log
               501: argument_list: 
                502: argument: 
                 503: expr: 
                  504: name: bs
                505: argument: 
                 506: expr: 
                  507: name: 
                   508: name: sps
                   509: operator: ->
                   510: name: log2_max_pic_order_cnt_lsb
                511: argument: 
                 512: expr: 
                  513: literal: "poc_lsb"
            514: comment: //if not asked to parse full header, abort once we have the poc
            515: if_stmt: 
             516: if: 
              517: condition: 
               518: expr: 
                519: operator: !
                520: name: 
                 521: name: hevc
                 522: operator: ->
                 523: name: full_slice_header_parse
              524: block: 
               525: block_content: 
                526: return: 
                 527: expr: 
                  528: literal: 0
            529: if_stmt: 
             530: if: 
              531: condition: 
               532: expr: 
                533: call: 
                 534: name: gf_bs_read_int_log
                 535: argument_list: 
                  536: argument: 
                   537: expr: 
                    538: name: bs
                  539: argument: 
                   540: expr: 
                    541: literal: 1
                  542: argument: 
                   543: expr: 
                    544: literal: "short_term_ref_pic_set_sps_flag"
                545: operator: ==
                546: literal: 0
              547: block: 
               548: block_content: 
                549: decl_stmt: 
                 550: decl: 
                  551: type: 
                   552: name: Bool
                  553: name: ret
                  554: init: 
                   555: expr: 
                    556: call: 
                     557: name: hevc_parse_short_term_ref_pic_set
                     558: argument_list: 
                      559: argument: 
                       560: expr: 
                        561: name: bs
                      562: argument: 
                       563: expr: 
                        564: name: sps
                      565: argument: 
                       566: expr: 
                        567: name: 
                         568: name: sps
                         569: operator: ->
                         570: name: num_short_term_ref_pic_sets
                571: if_stmt: 
                 572: if: 
                  573: condition: 
                   574: expr: 
                    575: operator: !
                    576: name: ret
                  577: block: 
                   578: block_content: 
                    579: return: 
                     580: expr: 
                      581: operator: -
                      582: literal: 1
             583: if: 
              584: condition: 
               585: expr: 
                586: name: 
                 587: name: sps
                 588: operator: ->
                 589: name: num_short_term_ref_pic_sets
                590: operator: >
                591: literal: 1
              592: block: 
               593: block_content: 
                594: decl_stmt: 
                 595: decl: 
                  596: type: 
                   597: name: u32
                  598: name: numbits
                  599: init: 
                   600: expr: 
                    601: literal: 0
                602: while: 
                 603: condition: 
                  604: expr: 
                   605: operator: (
                   606: name: u32
                   607: operator: )
                   608: operator: (
                   609: literal: 1
                   610: operator: <<
                   611: name: numbits
                   612: operator: )
                   613: operator: <
                   614: name: 
                    615: name: sps
                    616: operator: ->
                    617: name: num_short_term_ref_pic_sets
                 618: block: 
                  619: block_content: 
                   620: expr_stmt: 
                    621: expr: 
                     622: name: numbits
                     623: operator: ++
                624: if_stmt: 
                 625: if: 
                  626: condition: 
                   627: expr: 
                    628: name: numbits
                    629: operator: >
                    630: literal: 0
                  631: block: 
                   632: block_content: 
                    633: expr_stmt: 
                     634: expr: 
                      635: call: 
                       636: name: gf_bs_read_int_log
                       637: argument_list: 
                        638: argument: 
                         639: expr: 
                          640: name: bs
                        641: argument: 
                         642: expr: 
                          643: name: numbits
                        644: argument: 
                         645: expr: 
                          646: literal: "short_term_ref_pic_set_idx"
                647: comment:: 

----------------------------------------
0: unit: 
 1: function: 
  2: type: 
   3: name: s32
  4: name: hevc_parse_slice_segment
  5: parameter_list: 
   6: parameter: 
    7: decl: 
     8: type: 
      9: name: GF_BitStream
      10: modifier: *
     11: name: bs
   12: parameter: 
    13: decl: 
     14: type: 
      15: name: HEVCState
      16: modifier: *
     17: name: hevc
   18: parameter: 
    19: decl: 
     20: type: 
      21: name: HEVCSliceInfo
      22: modifier: *
     23: name: si
  24: block: 
   25: block_content: 
    26: decl_stmt: 
     27: decl: 
      28: type: 
       29: name: u32
      30: name: i
     31: decl: 
      32: type: 
      33: name: j
    34: decl_stmt: 
     35: decl: 
      36: type: 
       37: name: u32
      38: name: num_ref_idx_l0_active
      39: init: 
       40: expr: 
        41: literal: 0
     42: decl: 
      43: type: 
      44: name: num_ref_idx_l1_active
      45: init: 
       46: expr: 
        47: literal: 0
    48: decl_stmt: 
     49: decl: 
      50: type: 
       51: name: HEVC_PPS
       52: modifier: *
      53: name: pps
    54: decl_stmt: 
     55: decl: 
      56: type: 
       57: name: HEVC_SPS
       58: modifier: *
      59: name: sps
    60: decl_stmt: 
     61: decl: 
      62: type: 
       63: name: s32
      64: name: pps_id
    65: decl_stmt: 
     66: decl: 
      67: type: 
       68: name: Bool
      69: name: RapPicFlag
      70: init: 
       71: expr: 
        72: name: GF_FALSE
    73: decl_stmt: 
     74: decl: 
      75: type: 
       76: name: Bool
      77: name: IDRPicFlag
      78: init: 
       79: expr: 
        80: name: GF_FALSE
    81: expr_stmt: 
     82: expr: 
      83: name: 
       84: name: si
       85: operator: ->
       86: name: first_slice_segment_in_pic_flag
      87: operator: =
      88: call: 
       89: name: gf_bs_read_int_log
       90: argument_list: 
        91: argument: 
         92: expr: 
          93: name: bs
        94: argument: 
         95: expr: 
          96: literal: 1
        97: argument: 
         98: expr: 
          99: literal: "first_slice_segment_in_pic_flag"
    100: switch: 
     101: condition: 
      102: expr: 
       103: name: 
        104: name: si
        105: operator: ->
        106: name: nal_unit_type
     107: block: 
      108: block_content: 
       109: case: 
        110: expr: 
         111: name: GF_HEVC_NALU_SLICE_IDR_W_DLP
       112: case: 
        113: expr: 
         114: name: GF_HEVC_NALU_SLICE_IDR_N_LP
       115: expr_stmt: 
        116: expr: 
         117: name: IDRPicFlag
         118: operator: =
         119: name: GF_TRUE
       120: expr_stmt: 
        121: expr: 
         122: name: RapPicFlag
         123: operator: =
         124: name: GF_TRUE
       125: break: 
       126: case: 
        127: expr: 
         128: name: GF_HEVC_NALU_SLICE_BLA_W_LP
       129: case: 
        130: expr: 
         131: name: GF_HEVC_NALU_SLICE_BLA_W_DLP
       132: case: 
        133: expr: 
         134: name: GF_HEVC_NALU_SLICE_BLA_N_LP
       135: case: 
        136: expr: 
         137: name: GF_HEVC_NALU_SLICE_CRA
       138: expr_stmt: 
        139: expr: 
         140: name: RapPicFlag
         141: operator: =
         142: name: GF_TRUE
       143: break: 
    144: if_stmt: 
     145: if: 
      146: condition: 
       147: expr: 
        148: name: RapPicFlag
      149: block: 
       150: block_content: 
        151: expr_stmt: 
         152: expr: 
          153: call: 
           154: name: gf_bs_read_int_log
           155: argument_list: 
            156: argument: 
             157: expr: 
              158: name: bs
            159: argument: 
             160: expr: 
              161: literal: 1
            162: argument: 
             163: expr: 
              164: literal: "no_output_of_prior_pics_flag"
    165: expr_stmt: 
     166: expr: 
      167: name: pps_id
      168: operator: =
      169: call: 
       170: name: gf_bs_read_ue_log
       171: argument_list: 
        172: argument: 
         173: expr: 
          174: name: bs
        175: argument: 
         176: expr: 
          177: literal: "pps_id"
    178: if_stmt: 
     179: if: 
      180: condition: 
       181: expr: 
        182: operator: (
        183: name: pps_id
        184: operator: <
        185: literal: 0
        186: operator: )
        187: operator: ||
        188: operator: (
        189: name: pps_id
        190: operator: >=
        191: literal: 64
        192: operator: )
      193: block: 
       194: block_content: 
        195: return: 
         196: expr: 
          197: operator: -
          198: literal: 1
    199: expr_stmt: 
     200: expr: 
      201: name: pps
      202: operator: =
      203: operator: &
      204: name: 
       205: name: hevc
       206: operator: ->
       207: name: pps
       208: index: 
        209: expr: 
         210: name: pps_id
    211: expr_stmt: 
     212: expr: 
      213: name: sps
      214: operator: =
      215: operator: &
      216: name: 
       217: name: hevc
       218: operator: ->
       219: name: sps
       220: index: 
        221: expr: 
         222: name: 
          223: name: pps
          224: operator: ->
          225: name: sps_id
    226: expr_stmt: 
     227: expr: 
      228: name: 
       229: name: si
       230: operator: ->
       231: name: sps
      232: operator: =
      233: name: sps
    234: expr_stmt: 
     235: expr: 
      236: name: 
       237: name: si
       238: operator: ->
       239: name: pps
      240: operator: =
      241: name: pps
    242: if_stmt: 
     243: if: 
      244: condition: 
       245: expr: 
        246: operator: !
        247: name: 
         248: name: si
         249: operator: ->
         250: name: first_slice_segment_in_pic_flag
        251: operator: &&
        252: name: 
         253: name: pps
         254: operator: ->
         255: name: dependent_slice_segments_enabled_flag
      256: block: 
       257: block_content: 
        258: expr_stmt: 
         259: expr: 
          260: name: 
           261: name: si
           262: operator: ->
           263: name: dependent_slice_segment_flag
          264: operator: =
          265: call: 
           266: name: gf_bs_read_int_log
           267: argument_list: 
            268: argument: 
             269: expr: 
              270: name: bs
            271: argument: 
             272: expr: 
              273: literal: 1
            274: argument: 
             275: expr: 
              276: literal: "dependent_slice_segment_flag"
     277: else: 
      278: block: 
       279: block_content: 
        280: expr_stmt: 
         281: expr: 
          282: name: 
           283: name: si
           284: operator: ->
           285: name: dependent_slice_segment_flag
          286: operator: =
          287: name: GF_FALSE
    288: if_stmt: 
     289: if: 
      290: condition: 
       291: expr: 
        292: operator: !
        293: name: 
         294: name: si
         295: operator: ->
         296: name: first_slice_segment_in_pic_flag
      297: block: 
       298: block_content: 
        299: expr_stmt: 
         300: expr: 
          301: name: 
           302: name: si
           303: operator: ->
           304: name: slice_segment_address
          305: operator: =
          306: call: 
           307: name: gf_bs_read_int_log
           308: argument_list: 
            309: argument: 
             310: expr: 
              311: name: bs
            312: argument: 
             313: expr: 
              314: name: 
               315: name: sps
               316: operator: ->
               317: name: bitsSliceSegmentAddress
            318: argument: 
             319: expr: 
              320: literal: "slice_segment_address"
     321: else: 
      322: block: 
       323: block_content: 
        324: expr_stmt: 
         325: expr: 
          326: name: 
           327: name: si
           328: operator: ->
           329: name: slice_segment_address
          330: operator: =
          331: literal: 0
    332: if_stmt: 
     333: if: 
      334: condition: 
       335: expr: 
        336: operator: !
        337: name: 
         338: name: si
         339: operator: ->
         340: name: dependent_slice_segment_flag
      341: block: 
       342: block_content: 
        343: decl_stmt: 
         344: decl: 
          345: type: 
           346: name: Bool
          347: name: deblocking_filter_override_flag
          348: init: 
           349: expr: 
            350: literal: 0
        351: decl_stmt: 
         352: decl: 
          353: type: 
           354: name: Bool
          355: name: slice_temporal_mvp_enabled_flag
          356: init: 
           357: expr: 
            358: literal: 0
        359: decl_stmt: 
         360: decl: 
          361: type: 
           362: name: Bool
          363: name: slice_sao_luma_flag
          364: init: 
           365: expr: 
            366: literal: 0
        367: decl_stmt: 
         368: decl: 
          369: type: 
           370: name: Bool
          371: name: slice_sao_chroma_flag
          372: init: 
           373: expr: 
            374: literal: 0
        375: decl_stmt: 
         376: decl: 
          377: type: 
           378: name: Bool
          379: name: slice_deblocking_filter_disabled_flag
          380: init: 
           381: expr: 
            382: literal: 0
        383: comment: //"slice_reserved_undetermined_flag[]"
        384: expr_stmt: 
         385: expr: 
          386: call: 
           387: name: gf_bs_read_int_log
           388: argument_list: 
            389: argument: 
             390: expr: 
              391: name: bs
            392: argument: 
             393: expr: 
              394: name: 
               395: name: pps
               396: operator: ->
               397: name: num_extra_slice_header_bits
            398: argument: 
             399: expr: 
              400: literal: "slice_reserved_undetermined_flag"
        401: expr_stmt: 
         402: expr: 
          403: name: 
           404: name: si
           405: operator: ->
           406: name: slice_type
          407: operator: =
          408: call: 
           409: name: gf_bs_read_ue_log
           410: argument_list: 
            411: argument: 
             412: expr: 
              413: name: bs
            414: argument: 
             415: expr: 
              416: literal: "slice_type"
        417: if_stmt: 
         418: if: 
          419: condition: 
           420: expr: 
            421: name: 
             422: name: pps
             423: operator: ->
             424: name: output_flag_present_flag
          425: block: 
           426: block_content: 
            427: expr_stmt: 
             428: expr: 
              429: call: 
               430: name: gf_bs_read_int_log
               431: argument_list: 
                432: argument: 
                 433: expr: 
                  434: name: bs
                435: argument: 
                 436: expr: 
                  437: literal: 1
                438: argument: 
                 439: expr: 
                  440: literal: "pic_output_flag"
        441: if_stmt: 
         442: if: 
          443: condition: 
           444: expr: 
            445: name: 
             446: name: sps
             447: operator: ->
             448: name: separate_colour_plane_flag
            449: operator: ==
            450: literal: 1
          451: block: 
           452: block_content: 
            453: expr_stmt: 
             454: expr: 
              455: call: 
               456: name: gf_bs_read_int_log
               457: argument_list: 
                458: argument: 
                 459: expr: 
                  460: name: bs
                461: argument: 
                 462: expr: 
                  463: literal: 2
                464: argument: 
                 465: expr: 
                  466: literal: "colour_plane_id"
        467: if_stmt: 
         468: if: 
          469: condition: 
           470: expr: 
            471: name: IDRPicFlag
          472: block: 
           473: block_content: 
            474: expr_stmt: 
             475: expr: 
              476: name: 
               477: name: si
               478: operator: ->
               479: name: poc_lsb
              480: operator: =
              481: literal: 0
            482: comment: //if not asked to parse full header, abort since we know the poc
            483: if_stmt: 
             484: if: 
              485: condition: 
               486: expr: 
                487: operator: !
                488: name: 
                 489: name: hevc
                 490: operator: ->
                 491: name: full_slice_header_parse
              492: block: 
               493: block_content: 
                494: return: 
                 495: expr: 
                  496: literal: 0
         497: else: 
          498: block: 
           499: block_content: 
            500: expr_stmt: 
             501: expr: 
              502: name: 
               503: name: si
               504: operator: ->
               505: name: poc_lsb
              506: operator: =
              507: call: 
               508: name: gf_bs_read_int_log
               509: argument_list: 
                510: argument: 
                 511: expr: 
                  512: name: bs
                513: argument: 
                 514: expr: 
                  515: name: 
                   516: name: sps
                   517: operator: ->
                   518: name: log2_max_pic_order_cnt_lsb
                519: argument: 
                 520: expr: 
                  521: literal: "poc_lsb"
            522: comment: //if not asked to parse full header, abort once we have the poc
            523: if_stmt: 
             524: if: 
              525: condition: 
               526: expr: 
                527: operator: !
                528: name: 
                 529: name: hevc
                 530: operator: ->
                 531: name: full_slice_header_parse
              532: block: 
               533: block_content: 
                534: return: 
                 535: expr: 
                  536: literal: 0
            537: if_stmt: 
             538: if: 
              539: condition: 
               540: expr: 
                541: call: 
                 542: name: gf_bs_read_int_log
                 543: argument_list: 
                  544: argument: 
                   545: expr: 
                    546: name: bs
                  547: argument: 
                   548: expr: 
                    549: literal: 1
                  550: argument: 
                   551: expr: 
                    552: literal: "short_term_ref_pic_set_sps_flag"
                553: operator: ==
                554: literal: 0
              555: block: 
               556: block_content: 
                557: decl_stmt: 
                 558: decl: 
                  559: type: 
                   560: name: Bool
                  561: name: ret
                  562: init: 
                   563: expr: 
                    564: call: 
                     565: name: hevc_parse_short_term_ref_pic_set
                     566: argument_list: 
                      567: argument: 
                       568: expr: 
                        569: name: bs
                      570: argument: 
                       571: expr: 
                        572: name: sps
                      573: argument: 
                       574: expr: 
                        575: name: 
                         576: name: sps
                         577: operator: ->
                         578: name: num_short_term_ref_pic_sets
                579: if_stmt: 
                 580: if: 
                  581: condition: 
                   582: expr: 
                    583: operator: !
                    584: name: ret
                  585: block: 
                   586: block_content: 
                    587: return: 
                     588: expr: 
                      589: operator: -
                      590: literal: 1
             591: if: 
              592: condition: 
               593: expr: 
                594: name: 
                 595: name: sps
                 596: operator: ->
                 597: name: num_short_term_ref_pic_sets
                598: operator: >
                599: literal: 1
              600: block: 
               601: block_content: 
                602: decl_stmt: 
                 603: decl: 
                  604: type: 
                   605: name: u32
                  606: name: numbits
                  607: init: 
                   608: expr: 
                    609: literal: 0
                610: while: 
                 611: condition: 
                  612: expr: 
                   613: operator: (
                   614: name: u32
                   615: operator: )
                   616: operator: (
                   617: literal: 1
                   618: operator: <<
                   619: name: numbits
                   620: operator: )
                   621: operator: <
                   622: name: 
                    623: name: sps
                    624: operator: ->
                    625: name: num_short_term_ref_pic_sets
                 626: block: 
                  627: block_content: 
                   628: expr_stmt: 
                    629: expr: 
                     630: name: numbits
                     631: operator: ++
                632: if_stmt: 
                 633: if: 
                  634: condition: 
                   635: expr: 
                    636: name: numbits
                    637: operator: >
                    638: literal: 0
                  639: block: 
                   640: block_content: 
                    641: expr_stmt: 
                     642: expr: 
                      643: call: 
                       644: name: gf_bs_read_int_log
                       645: argument_list: 
                        646: argument: 
                         647: expr: 
                          648: name: bs
                        649: argument: 
                         650: expr: 
                          651: name: numbits
                        652: argument: 
                         653: expr: 
                          654: literal: "short_term_ref_pic_set_idx"
                655: comment:: 
=====
0: function: 
 1: type: 
  2: name: s32
 3: name: hevc_parse_slice_segment
 4: parameter_list: 
  5: parameter: 
   6: decl: 
    7: type: 
     8: name: GF_BitStream
     9: modifier: *
    10: name: bs
  11: parameter: 
   12: decl: 
    13: type: 
     14: name: HEVCState
     15: modifier: *
    16: name: hevc
  17: parameter: 
   18: decl: 
    19: type: 
     20: name: HEVCSliceInfo
     21: modifier: *
    22: name: si
 23: block: 
  24: block_content: 
   25: decl_stmt: 
    26: decl: 
     27: type: 
      28: name: u32
     29: name: i
    30: decl: 
     31: type: 
     32: name: j
   33: decl_stmt: 
    34: decl: 
     35: type: 
      36: name: u32
     37: name: num_ref_idx_l0_active
     38: init: 
      39: expr: 
       40: literal: 0
    41: decl: 
     42: type: 
     43: name: num_ref_idx_l1_active
     44: init: 
      45: expr: 
       46: literal: 0
   47: decl_stmt: 
    48: decl: 
     49: type: 
      50: name: HEVC_PPS
      51: modifier: *
     52: name: pps
   53: decl_stmt: 
    54: decl: 
     55: type: 
      56: name: HEVC_SPS
      57: modifier: *
     58: name: sps
   59: decl_stmt: 
    60: decl: 
     61: type: 
      62: name: s32
     63: name: pps_id
   64: decl_stmt: 
    65: decl: 
     66: type: 
      67: name: Bool
     68: name: RapPicFlag
     69: init: 
      70: expr: 
       71: name: GF_FALSE
   72: decl_stmt: 
    73: decl: 
     74: type: 
      75: name: Bool
     76: name: IDRPicFlag
     77: init: 
      78: expr: 
       79: name: GF_FALSE
   80: expr_stmt: 
    81: expr: 
     82: name: 
      83: name: si
      84: operator: ->
      85: name: first_slice_segment_in_pic_flag
     86: operator: =
     87: call: 
      88: name: gf_bs_read_int_log
      89: argument_list: 
       90: argument: 
        91: expr: 
         92: name: bs
       93: argument: 
        94: expr: 
         95: literal: 1
       96: argument: 
        97: expr: 
         98: literal: "first_slice_segment_in_pic_flag"
   99: switch: 
    100: condition: 
     101: expr: 
      102: name: 
       103: name: si
       104: operator: ->
       105: name: nal_unit_type
    106: block: 
     107: block_content: 
      108: case: 
       109: expr: 
        110: name: GF_HEVC_NALU_SLICE_IDR_W_DLP
      111: case: 
       112: expr: 
        113: name: GF_HEVC_NALU_SLICE_IDR_N_LP
      114: expr_stmt: 
       115: expr: 
        116: name: IDRPicFlag
        117: operator: =
        118: name: GF_TRUE
      119: expr_stmt: 
       120: expr: 
        121: name: RapPicFlag
        122: operator: =
        123: name: GF_TRUE
      124: break: 
      125: case: 
       126: expr: 
        127: name: GF_HEVC_NALU_SLICE_BLA_W_LP
      128: case: 
       129: expr: 
        130: name: GF_HEVC_NALU_SLICE_BLA_W_DLP
      131: case: 
       132: expr: 
        133: name: GF_HEVC_NALU_SLICE_BLA_N_LP
      134: case: 
       135: expr: 
        136: name: GF_HEVC_NALU_SLICE_CRA
      137: expr_stmt: 
       138: expr: 
        139: name: RapPicFlag
        140: operator: =
        141: name: GF_TRUE
      142: break: 
   143: if_stmt: 
    144: if: 
     145: condition: 
      146: expr: 
       147: name: RapPicFlag
     148: block: 
      149: block_content: 
       150: expr_stmt: 
        151: expr: 
         152: call: 
          153: name: gf_bs_read_int_log
          154: argument_list: 
           155: argument: 
            156: expr: 
             157: name: bs
           158: argument: 
            159: expr: 
             160: literal: 1
           161: argument: 
            162: expr: 
             163: literal: "no_output_of_prior_pics_flag"
   164: expr_stmt: 
    165: expr: 
     166: name: pps_id
     167: operator: =
     168: call: 
      169: name: gf_bs_read_ue_log
      170: argument_list: 
       171: argument: 
        172: expr: 
         173: name: bs
       174: argument: 
        175: expr: 
         176: literal: "pps_id"
   177: if_stmt: 
    178: if: 
     179: condition: 
      180: expr: 
       181: name: pps_id
       182: operator: >=
       183: literal: 64
     184: block: 
      185: block_content: 
       186: return: 
        187: expr: 
         188: operator: -
         189: literal: 1
   190: expr_stmt: 
    191: expr: 
     192: name: pps
     193: operator: =
     194: operator: &
     195: name: 
      196: name: hevc
      197: operator: ->
      198: name: pps
      199: index: 
       200: expr: 
        201: name: pps_id
   202: expr_stmt: 
    203: expr: 
     204: name: sps
     205: operator: =
     206: operator: &
     207: name: 
      208: name: hevc
      209: operator: ->
      210: name: sps
      211: index: 
       212: expr: 
        213: name: 
         214: name: pps
         215: operator: ->
         216: name: sps_id
   217: expr_stmt: 
    218: expr: 
     219: name: 
      220: name: si
      221: operator: ->
      222: name: sps
     223: operator: =
     224: name: sps
   225: expr_stmt: 
    226: expr: 
     227: name: 
      228: name: si
      229: operator: ->
      230: name: pps
     231: operator: =
     232: name: pps
   233: if_stmt: 
    234: if: 
     235: condition: 
      236: expr: 
       237: operator: !
       238: name: 
        239: name: si
        240: operator: ->
        241: name: first_slice_segment_in_pic_flag
       242: operator: &&
       243: name: 
        244: name: pps
        245: operator: ->
        246: name: dependent_slice_segments_enabled_flag
     247: block: 
      248: block_content: 
       249: expr_stmt: 
        250: expr: 
         251: name: 
          252: name: si
          253: operator: ->
          254: name: dependent_slice_segment_flag
         255: operator: =
         256: call: 
          257: name: gf_bs_read_int_log
          258: argument_list: 
           259: argument: 
            260: expr: 
             261: name: bs
           262: argument: 
            263: expr: 
             264: literal: 1
           265: argument: 
            266: expr: 
             267: literal: "dependent_slice_segment_flag"
    268: else: 
     269: block: 
      270: block_content: 
       271: expr_stmt: 
        272: expr: 
         273: name: 
          274: name: si
          275: operator: ->
          276: name: dependent_slice_segment_flag
         277: operator: =
         278: name: GF_FALSE
   279: if_stmt: 
    280: if: 
     281: condition: 
      282: expr: 
       283: operator: !
       284: name: 
        285: name: si
        286: operator: ->
        287: name: first_slice_segment_in_pic_flag
     288: block: 
      289: block_content: 
       290: expr_stmt: 
        291: expr: 
         292: name: 
          293: name: si
          294: operator: ->
          295: name: slice_segment_address
         296: operator: =
         297: call: 
          298: name: gf_bs_read_int_log
          299: argument_list: 
           300: argument: 
            301: expr: 
             302: name: bs
           303: argument: 
            304: expr: 
             305: name: 
              306: name: sps
              307: operator: ->
              308: name: bitsSliceSegmentAddress
           309: argument: 
            310: expr: 
             311: literal: "slice_segment_address"
    312: else: 
     313: block: 
      314: block_content: 
       315: expr_stmt: 
        316: expr: 
         317: name: 
          318: name: si
          319: operator: ->
          320: name: slice_segment_address
         321: operator: =
         322: literal: 0
   323: if_stmt: 
    324: if: 
     325: condition: 
      326: expr: 
       327: operator: !
       328: name: 
        329: name: si
        330: operator: ->
        331: name: dependent_slice_segment_flag
     332: block: 
      333: block_content: 
       334: decl_stmt: 
        335: decl: 
         336: type: 
          337: name: Bool
         338: name: deblocking_filter_override_flag
         339: init: 
          340: expr: 
           341: literal: 0
       342: decl_stmt: 
        343: decl: 
         344: type: 
          345: name: Bool
         346: name: slice_temporal_mvp_enabled_flag
         347: init: 
          348: expr: 
           349: literal: 0
       350: decl_stmt: 
        351: decl: 
         352: type: 
          353: name: Bool
         354: name: slice_sao_luma_flag
         355: init: 
          356: expr: 
           357: literal: 0
       358: decl_stmt: 
        359: decl: 
         360: type: 
          361: name: Bool
         362: name: slice_sao_chroma_flag
         363: init: 
          364: expr: 
           365: literal: 0
       366: decl_stmt: 
        367: decl: 
         368: type: 
          369: name: Bool
         370: name: slice_deblocking_filter_disabled_flag
         371: init: 
          372: expr: 
           373: literal: 0
       374: comment: //"slice_reserved_undetermined_flag[]"
       375: expr_stmt: 
        376: expr: 
         377: call: 
          378: name: gf_bs_read_int_log
          379: argument_list: 
           380: argument: 
            381: expr: 
             382: name: bs
           383: argument: 
            384: expr: 
             385: name: 
              386: name: pps
              387: operator: ->
              388: name: num_extra_slice_header_bits
           389: argument: 
            390: expr: 
             391: literal: "slice_reserved_undetermined_flag"
       392: expr_stmt: 
        393: expr: 
         394: name: 
          395: name: si
          396: operator: ->
          397: name: slice_type
         398: operator: =
         399: call: 
          400: name: gf_bs_read_ue_log
          401: argument_list: 
           402: argument: 
            403: expr: 
             404: name: bs
           405: argument: 
            406: expr: 
             407: literal: "slice_type"
       408: if_stmt: 
        409: if: 
         410: condition: 
          411: expr: 
           412: name: 
            413: name: pps
            414: operator: ->
            415: name: output_flag_present_flag
         416: block: 
          417: block_content: 
           418: expr_stmt: 
            419: expr: 
             420: call: 
              421: name: gf_bs_read_int_log
              422: argument_list: 
               423: argument: 
                424: expr: 
                 425: name: bs
               426: argument: 
                427: expr: 
                 428: literal: 1
               429: argument: 
                430: expr: 
                 431: literal: "pic_output_flag"
       432: if_stmt: 
        433: if: 
         434: condition: 
          435: expr: 
           436: name: 
            437: name: sps
            438: operator: ->
            439: name: separate_colour_plane_flag
           440: operator: ==
           441: literal: 1
         442: block: 
          443: block_content: 
           444: expr_stmt: 
            445: expr: 
             446: call: 
              447: name: gf_bs_read_int_log
              448: argument_list: 
               449: argument: 
                450: expr: 
                 451: name: bs
               452: argument: 
                453: expr: 
                 454: literal: 2
               455: argument: 
                456: expr: 
                 457: literal: "colour_plane_id"
       458: if_stmt: 
        459: if: 
         460: condition: 
          461: expr: 
           462: name: IDRPicFlag
         463: block: 
          464: block_content: 
           465: expr_stmt: 
            466: expr: 
             467: name: 
              468: name: si
              469: operator: ->
              470: name: poc_lsb
             471: operator: =
             472: literal: 0
           473: comment: //if not asked to parse full header, abort since we know the poc
           474: if_stmt: 
            475: if: 
             476: condition: 
              477: expr: 
               478: operator: !
               479: name: 
                480: name: hevc
                481: operator: ->
                482: name: full_slice_header_parse
             483: block: 
              484: block_content: 
               485: return: 
                486: expr: 
                 487: literal: 0
        488: else: 
         489: block: 
          490: block_content: 
           491: expr_stmt: 
            492: expr: 
             493: name: 
              494: name: si
              495: operator: ->
              496: name: poc_lsb
             497: operator: =
             498: call: 
              499: name: gf_bs_read_int_log
              500: argument_list: 
               501: argument: 
                502: expr: 
                 503: name: bs
               504: argument: 
                505: expr: 
                 506: name: 
                  507: name: sps
                  508: operator: ->
                  509: name: log2_max_pic_order_cnt_lsb
               510: argument: 
                511: expr: 
                 512: literal: "poc_lsb"
           513: comment: //if not asked to parse full header, abort once we have the poc
           514: if_stmt: 
            515: if: 
             516: condition: 
              517: expr: 
               518: operator: !
               519: name: 
                520: name: hevc
                521: operator: ->
                522: name: full_slice_header_parse
             523: block: 
              524: block_content: 
               525: return: 
                526: expr: 
                 527: literal: 0
           528: if_stmt: 
            529: if: 
             530: condition: 
              531: expr: 
               532: call: 
                533: name: gf_bs_read_int_log
                534: argument_list: 
                 535: argument: 
                  536: expr: 
                   537: name: bs
                 538: argument: 
                  539: expr: 
                   540: literal: 1
                 541: argument: 
                  542: expr: 
                   543: literal: "short_term_ref_pic_set_sps_flag"
               544: operator: ==
               545: literal: 0
             546: block: 
              547: block_content: 
               548: decl_stmt: 
                549: decl: 
                 550: type: 
                  551: name: Bool
                 552: name: ret
                 553: init: 
                  554: expr: 
                   555: call: 
                    556: name: hevc_parse_short_term_ref_pic_set
                    557: argument_list: 
                     558: argument: 
                      559: expr: 
                       560: name: bs
                     561: argument: 
                      562: expr: 
                       563: name: sps
                     564: argument: 
                      565: expr: 
                       566: name: 
                        567: name: sps
                        568: operator: ->
                        569: name: num_short_term_ref_pic_sets
               570: if_stmt: 
                571: if: 
                 572: condition: 
                  573: expr: 
                   574: operator: !
                   575: name: ret
                 576: block: 
                  577: block_content: 
                   578: return: 
                    579: expr: 
                     580: operator: -
                     581: literal: 1
            582: if: 
             583: condition: 
              584: expr: 
               585: name: 
                586: name: sps
                587: operator: ->
                588: name: num_short_term_ref_pic_sets
               589: operator: >
               590: literal: 1
             591: block: 
              592: block_content: 
               593: decl_stmt: 
                594: decl: 
                 595: type: 
                  596: name: u32
                 597: name: numbits
                 598: init: 
                  599: expr: 
                   600: literal: 0
               601: while: 
                602: condition: 
                 603: expr: 
                  604: operator: (
                  605: name: u32
                  606: operator: )
                  607: operator: (
                  608: literal: 1
                  609: operator: <<
                  610: name: numbits
                  611: operator: )
                  612: operator: <
                  613: name: 
                   614: name: sps
                   615: operator: ->
                   616: name: num_short_term_ref_pic_sets
                617: block: 
                 618: block_content: 
                  619: expr_stmt: 
                   620: expr: 
                    621: name: numbits
                    622: operator: ++
               623: if_stmt: 
                624: if: 
                 625: condition: 
                  626: expr: 
                   627: name: numbits
                   628: operator: >
                   629: literal: 0
                 630: block: 
                  631: block_content: 
                   632: expr_stmt: 
                    633: expr: 
                     634: call: 
                      635: name: gf_bs_read_int_log
                      636: argument_list: 
                       637: argument: 
                        638: expr: 
                         639: name: bs
                       640: argument: 
                        641: expr: 
                         642: name: numbits
                       643: argument: 
                        644: expr: 
                         645: literal: "short_term_ref_pic_set_idx"
               646: comment:: 

----------------------------------------
0: function: 
 1: type: 
  2: name: s32
 3: name: hevc_parse_slice_segment
 4: parameter_list: 
  5: parameter: 
   6: decl: 
    7: type: 
     8: name: GF_BitStream
     9: modifier: *
    10: name: bs
  11: parameter: 
   12: decl: 
    13: type: 
     14: name: HEVCState
     15: modifier: *
    16: name: hevc
  17: parameter: 
   18: decl: 
    19: type: 
     20: name: HEVCSliceInfo
     21: modifier: *
    22: name: si
 23: block: 
  24: block_content: 
   25: decl_stmt: 
    26: decl: 
     27: type: 
      28: name: u32
     29: name: i
    30: decl: 
     31: type: 
     32: name: j
   33: decl_stmt: 
    34: decl: 
     35: type: 
      36: name: u32
     37: name: num_ref_idx_l0_active
     38: init: 
      39: expr: 
       40: literal: 0
    41: decl: 
     42: type: 
     43: name: num_ref_idx_l1_active
     44: init: 
      45: expr: 
       46: literal: 0
   47: decl_stmt: 
    48: decl: 
     49: type: 
      50: name: HEVC_PPS
      51: modifier: *
     52: name: pps
   53: decl_stmt: 
    54: decl: 
     55: type: 
      56: name: HEVC_SPS
      57: modifier: *
     58: name: sps
   59: decl_stmt: 
    60: decl: 
     61: type: 
      62: name: s32
     63: name: pps_id
   64: decl_stmt: 
    65: decl: 
     66: type: 
      67: name: Bool
     68: name: RapPicFlag
     69: init: 
      70: expr: 
       71: name: GF_FALSE
   72: decl_stmt: 
    73: decl: 
     74: type: 
      75: name: Bool
     76: name: IDRPicFlag
     77: init: 
      78: expr: 
       79: name: GF_FALSE
   80: expr_stmt: 
    81: expr: 
     82: name: 
      83: name: si
      84: operator: ->
      85: name: first_slice_segment_in_pic_flag
     86: operator: =
     87: call: 
      88: name: gf_bs_read_int_log
      89: argument_list: 
       90: argument: 
        91: expr: 
         92: name: bs
       93: argument: 
        94: expr: 
         95: literal: 1
       96: argument: 
        97: expr: 
         98: literal: "first_slice_segment_in_pic_flag"
   99: switch: 
    100: condition: 
     101: expr: 
      102: name: 
       103: name: si
       104: operator: ->
       105: name: nal_unit_type
    106: block: 
     107: block_content: 
      108: case: 
       109: expr: 
        110: name: GF_HEVC_NALU_SLICE_IDR_W_DLP
      111: case: 
       112: expr: 
        113: name: GF_HEVC_NALU_SLICE_IDR_N_LP
      114: expr_stmt: 
       115: expr: 
        116: name: IDRPicFlag
        117: operator: =
        118: name: GF_TRUE
      119: expr_stmt: 
       120: expr: 
        121: name: RapPicFlag
        122: operator: =
        123: name: GF_TRUE
      124: break: 
      125: case: 
       126: expr: 
        127: name: GF_HEVC_NALU_SLICE_BLA_W_LP
      128: case: 
       129: expr: 
        130: name: GF_HEVC_NALU_SLICE_BLA_W_DLP
      131: case: 
       132: expr: 
        133: name: GF_HEVC_NALU_SLICE_BLA_N_LP
      134: case: 
       135: expr: 
        136: name: GF_HEVC_NALU_SLICE_CRA
      137: expr_stmt: 
       138: expr: 
        139: name: RapPicFlag
        140: operator: =
        141: name: GF_TRUE
      142: break: 
   143: if_stmt: 
    144: if: 
     145: condition: 
      146: expr: 
       147: name: RapPicFlag
     148: block: 
      149: block_content: 
       150: expr_stmt: 
        151: expr: 
         152: call: 
          153: name: gf_bs_read_int_log
          154: argument_list: 
           155: argument: 
            156: expr: 
             157: name: bs
           158: argument: 
            159: expr: 
             160: literal: 1
           161: argument: 
            162: expr: 
             163: literal: "no_output_of_prior_pics_flag"
   164: expr_stmt: 
    165: expr: 
     166: name: pps_id
     167: operator: =
     168: call: 
      169: name: gf_bs_read_ue_log
      170: argument_list: 
       171: argument: 
        172: expr: 
         173: name: bs
       174: argument: 
        175: expr: 
         176: literal: "pps_id"
   177: if_stmt: 
    178: if: 
     179: condition: 
      180: expr: 
       181: operator: (
       182: name: pps_id
       183: operator: <
       184: literal: 0
       185: operator: )
       186: operator: ||
       187: operator: (
       188: name: pps_id
       189: operator: >=
       190: literal: 64
       191: operator: )
     192: block: 
      193: block_content: 
       194: return: 
        195: expr: 
         196: operator: -
         197: literal: 1
   198: expr_stmt: 
    199: expr: 
     200: name: pps
     201: operator: =
     202: operator: &
     203: name: 
      204: name: hevc
      205: operator: ->
      206: name: pps
      207: index: 
       208: expr: 
        209: name: pps_id
   210: expr_stmt: 
    211: expr: 
     212: name: sps
     213: operator: =
     214: operator: &
     215: name: 
      216: name: hevc
      217: operator: ->
      218: name: sps
      219: index: 
       220: expr: 
        221: name: 
         222: name: pps
         223: operator: ->
         224: name: sps_id
   225: expr_stmt: 
    226: expr: 
     227: name: 
      228: name: si
      229: operator: ->
      230: name: sps
     231: operator: =
     232: name: sps
   233: expr_stmt: 
    234: expr: 
     235: name: 
      236: name: si
      237: operator: ->
      238: name: pps
     239: operator: =
     240: name: pps
   241: if_stmt: 
    242: if: 
     243: condition: 
      244: expr: 
       245: operator: !
       246: name: 
        247: name: si
        248: operator: ->
        249: name: first_slice_segment_in_pic_flag
       250: operator: &&
       251: name: 
        252: name: pps
        253: operator: ->
        254: name: dependent_slice_segments_enabled_flag
     255: block: 
      256: block_content: 
       257: expr_stmt: 
        258: expr: 
         259: name: 
          260: name: si
          261: operator: ->
          262: name: dependent_slice_segment_flag
         263: operator: =
         264: call: 
          265: name: gf_bs_read_int_log
          266: argument_list: 
           267: argument: 
            268: expr: 
             269: name: bs
           270: argument: 
            271: expr: 
             272: literal: 1
           273: argument: 
            274: expr: 
             275: literal: "dependent_slice_segment_flag"
    276: else: 
     277: block: 
      278: block_content: 
       279: expr_stmt: 
        280: expr: 
         281: name: 
          282: name: si
          283: operator: ->
          284: name: dependent_slice_segment_flag
         285: operator: =
         286: name: GF_FALSE
   287: if_stmt: 
    288: if: 
     289: condition: 
      290: expr: 
       291: operator: !
       292: name: 
        293: name: si
        294: operator: ->
        295: name: first_slice_segment_in_pic_flag
     296: block: 
      297: block_content: 
       298: expr_stmt: 
        299: expr: 
         300: name: 
          301: name: si
          302: operator: ->
          303: name: slice_segment_address
         304: operator: =
         305: call: 
          306: name: gf_bs_read_int_log
          307: argument_list: 
           308: argument: 
            309: expr: 
             310: name: bs
           311: argument: 
            312: expr: 
             313: name: 
              314: name: sps
              315: operator: ->
              316: name: bitsSliceSegmentAddress
           317: argument: 
            318: expr: 
             319: literal: "slice_segment_address"
    320: else: 
     321: block: 
      322: block_content: 
       323: expr_stmt: 
        324: expr: 
         325: name: 
          326: name: si
          327: operator: ->
          328: name: slice_segment_address
         329: operator: =
         330: literal: 0
   331: if_stmt: 
    332: if: 
     333: condition: 
      334: expr: 
       335: operator: !
       336: name: 
        337: name: si
        338: operator: ->
        339: name: dependent_slice_segment_flag
     340: block: 
      341: block_content: 
       342: decl_stmt: 
        343: decl: 
         344: type: 
          345: name: Bool
         346: name: deblocking_filter_override_flag
         347: init: 
          348: expr: 
           349: literal: 0
       350: decl_stmt: 
        351: decl: 
         352: type: 
          353: name: Bool
         354: name: slice_temporal_mvp_enabled_flag
         355: init: 
          356: expr: 
           357: literal: 0
       358: decl_stmt: 
        359: decl: 
         360: type: 
          361: name: Bool
         362: name: slice_sao_luma_flag
         363: init: 
          364: expr: 
           365: literal: 0
       366: decl_stmt: 
        367: decl: 
         368: type: 
          369: name: Bool
         370: name: slice_sao_chroma_flag
         371: init: 
          372: expr: 
           373: literal: 0
       374: decl_stmt: 
        375: decl: 
         376: type: 
          377: name: Bool
         378: name: slice_deblocking_filter_disabled_flag
         379: init: 
          380: expr: 
           381: literal: 0
       382: comment: //"slice_reserved_undetermined_flag[]"
       383: expr_stmt: 
        384: expr: 
         385: call: 
          386: name: gf_bs_read_int_log
          387: argument_list: 
           388: argument: 
            389: expr: 
             390: name: bs
           391: argument: 
            392: expr: 
             393: name: 
              394: name: pps
              395: operator: ->
              396: name: num_extra_slice_header_bits
           397: argument: 
            398: expr: 
             399: literal: "slice_reserved_undetermined_flag"
       400: expr_stmt: 
        401: expr: 
         402: name: 
          403: name: si
          404: operator: ->
          405: name: slice_type
         406: operator: =
         407: call: 
          408: name: gf_bs_read_ue_log
          409: argument_list: 
           410: argument: 
            411: expr: 
             412: name: bs
           413: argument: 
            414: expr: 
             415: literal: "slice_type"
       416: if_stmt: 
        417: if: 
         418: condition: 
          419: expr: 
           420: name: 
            421: name: pps
            422: operator: ->
            423: name: output_flag_present_flag
         424: block: 
          425: block_content: 
           426: expr_stmt: 
            427: expr: 
             428: call: 
              429: name: gf_bs_read_int_log
              430: argument_list: 
               431: argument: 
                432: expr: 
                 433: name: bs
               434: argument: 
                435: expr: 
                 436: literal: 1
               437: argument: 
                438: expr: 
                 439: literal: "pic_output_flag"
       440: if_stmt: 
        441: if: 
         442: condition: 
          443: expr: 
           444: name: 
            445: name: sps
            446: operator: ->
            447: name: separate_colour_plane_flag
           448: operator: ==
           449: literal: 1
         450: block: 
          451: block_content: 
           452: expr_stmt: 
            453: expr: 
             454: call: 
              455: name: gf_bs_read_int_log
              456: argument_list: 
               457: argument: 
                458: expr: 
                 459: name: bs
               460: argument: 
                461: expr: 
                 462: literal: 2
               463: argument: 
                464: expr: 
                 465: literal: "colour_plane_id"
       466: if_stmt: 
        467: if: 
         468: condition: 
          469: expr: 
           470: name: IDRPicFlag
         471: block: 
          472: block_content: 
           473: expr_stmt: 
            474: expr: 
             475: name: 
              476: name: si
              477: operator: ->
              478: name: poc_lsb
             479: operator: =
             480: literal: 0
           481: comment: //if not asked to parse full header, abort since we know the poc
           482: if_stmt: 
            483: if: 
             484: condition: 
              485: expr: 
               486: operator: !
               487: name: 
                488: name: hevc
                489: operator: ->
                490: name: full_slice_header_parse
             491: block: 
              492: block_content: 
               493: return: 
                494: expr: 
                 495: literal: 0
        496: else: 
         497: block: 
          498: block_content: 
           499: expr_stmt: 
            500: expr: 
             501: name: 
              502: name: si
              503: operator: ->
              504: name: poc_lsb
             505: operator: =
             506: call: 
              507: name: gf_bs_read_int_log
              508: argument_list: 
               509: argument: 
                510: expr: 
                 511: name: bs
               512: argument: 
                513: expr: 
                 514: name: 
                  515: name: sps
                  516: operator: ->
                  517: name: log2_max_pic_order_cnt_lsb
               518: argument: 
                519: expr: 
                 520: literal: "poc_lsb"
           521: comment: //if not asked to parse full header, abort once we have the poc
           522: if_stmt: 
            523: if: 
             524: condition: 
              525: expr: 
               526: operator: !
               527: name: 
                528: name: hevc
                529: operator: ->
                530: name: full_slice_header_parse
             531: block: 
              532: block_content: 
               533: return: 
                534: expr: 
                 535: literal: 0
           536: if_stmt: 
            537: if: 
             538: condition: 
              539: expr: 
               540: call: 
                541: name: gf_bs_read_int_log
                542: argument_list: 
                 543: argument: 
                  544: expr: 
                   545: name: bs
                 546: argument: 
                  547: expr: 
                   548: literal: 1
                 549: argument: 
                  550: expr: 
                   551: literal: "short_term_ref_pic_set_sps_flag"
               552: operator: ==
               553: literal: 0
             554: block: 
              555: block_content: 
               556: decl_stmt: 
                557: decl: 
                 558: type: 
                  559: name: Bool
                 560: name: ret
                 561: init: 
                  562: expr: 
                   563: call: 
                    564: name: hevc_parse_short_term_ref_pic_set
                    565: argument_list: 
                     566: argument: 
                      567: expr: 
                       568: name: bs
                     569: argument: 
                      570: expr: 
                       571: name: sps
                     572: argument: 
                      573: expr: 
                       574: name: 
                        575: name: sps
                        576: operator: ->
                        577: name: num_short_term_ref_pic_sets
               578: if_stmt: 
                579: if: 
                 580: condition: 
                  581: expr: 
                   582: operator: !
                   583: name: ret
                 584: block: 
                  585: block_content: 
                   586: return: 
                    587: expr: 
                     588: operator: -
                     589: literal: 1
            590: if: 
             591: condition: 
              592: expr: 
               593: name: 
                594: name: sps
                595: operator: ->
                596: name: num_short_term_ref_pic_sets
               597: operator: >
               598: literal: 1
             599: block: 
              600: block_content: 
               601: decl_stmt: 
                602: decl: 
                 603: type: 
                  604: name: u32
                 605: name: numbits
                 606: init: 
                  607: expr: 
                   608: literal: 0
               609: while: 
                610: condition: 
                 611: expr: 
                  612: operator: (
                  613: name: u32
                  614: operator: )
                  615: operator: (
                  616: literal: 1
                  617: operator: <<
                  618: name: numbits
                  619: operator: )
                  620: operator: <
                  621: name: 
                   622: name: sps
                   623: operator: ->
                   624: name: num_short_term_ref_pic_sets
                625: block: 
                 626: block_content: 
                  627: expr_stmt: 
                   628: expr: 
                    629: name: numbits
                    630: operator: ++
               631: if_stmt: 
                632: if: 
                 633: condition: 
                  634: expr: 
                   635: name: numbits
                   636: operator: >
                   637: literal: 0
                 638: block: 
                  639: block_content: 
                   640: expr_stmt: 
                    641: expr: 
                     642: call: 
                      643: name: gf_bs_read_int_log
                      644: argument_list: 
                       645: argument: 
                        646: expr: 
                         647: name: bs
                       648: argument: 
                        649: expr: 
                         650: name: numbits
                       651: argument: 
                        652: expr: 
                         653: literal: "short_term_ref_pic_set_idx"
               654: comment:: 
=====
0: name: hevc_parse_slice_segment

----------------------------------------
=====
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: u32
    6: name: i
   7: decl: 
    8: type: 
    9: name: j
  10: decl_stmt: 
   11: decl: 
    12: type: 
     13: name: u32
    14: name: num_ref_idx_l0_active
    15: init: 
     16: expr: 
      17: literal: 0
   18: decl: 
    19: type: 
    20: name: num_ref_idx_l1_active
    21: init: 
     22: expr: 
      23: literal: 0
  24: decl_stmt: 
   25: decl: 
    26: type: 
     27: name: HEVC_PPS
     28: modifier: *
    29: name: pps
  30: decl_stmt: 
   31: decl: 
    32: type: 
     33: name: HEVC_SPS
     34: modifier: *
    35: name: sps
  36: decl_stmt: 
   37: decl: 
    38: type: 
     39: name: s32
    40: name: pps_id
  41: decl_stmt: 
   42: decl: 
    43: type: 
     44: name: Bool
    45: name: RapPicFlag
    46: init: 
     47: expr: 
      48: name: GF_FALSE
  49: decl_stmt: 
   50: decl: 
    51: type: 
     52: name: Bool
    53: name: IDRPicFlag
    54: init: 
     55: expr: 
      56: name: GF_FALSE
  57: expr_stmt: 
   58: expr: 
    59: name: 
     60: name: si
     61: operator: ->
     62: name: first_slice_segment_in_pic_flag
    63: operator: =
    64: call: 
     65: name: gf_bs_read_int_log
     66: argument_list: 
      67: argument: 
       68: expr: 
        69: name: bs
      70: argument: 
       71: expr: 
        72: literal: 1
      73: argument: 
       74: expr: 
        75: literal: "first_slice_segment_in_pic_flag"
  76: switch: 
   77: condition: 
    78: expr: 
     79: name: 
      80: name: si
      81: operator: ->
      82: name: nal_unit_type
   83: block: 
    84: block_content: 
     85: case: 
      86: expr: 
       87: name: GF_HEVC_NALU_SLICE_IDR_W_DLP
     88: case: 
      89: expr: 
       90: name: GF_HEVC_NALU_SLICE_IDR_N_LP
     91: expr_stmt: 
      92: expr: 
       93: name: IDRPicFlag
       94: operator: =
       95: name: GF_TRUE
     96: expr_stmt: 
      97: expr: 
       98: name: RapPicFlag
       99: operator: =
       100: name: GF_TRUE
     101: break: 
     102: case: 
      103: expr: 
       104: name: GF_HEVC_NALU_SLICE_BLA_W_LP
     105: case: 
      106: expr: 
       107: name: GF_HEVC_NALU_SLICE_BLA_W_DLP
     108: case: 
      109: expr: 
       110: name: GF_HEVC_NALU_SLICE_BLA_N_LP
     111: case: 
      112: expr: 
       113: name: GF_HEVC_NALU_SLICE_CRA
     114: expr_stmt: 
      115: expr: 
       116: name: RapPicFlag
       117: operator: =
       118: name: GF_TRUE
     119: break: 
  120: if_stmt: 
   121: if: 
    122: condition: 
     123: expr: 
      124: name: RapPicFlag
    125: block: 
     126: block_content: 
      127: expr_stmt: 
       128: expr: 
        129: call: 
         130: name: gf_bs_read_int_log
         131: argument_list: 
          132: argument: 
           133: expr: 
            134: name: bs
          135: argument: 
           136: expr: 
            137: literal: 1
          138: argument: 
           139: expr: 
            140: literal: "no_output_of_prior_pics_flag"
  141: expr_stmt: 
   142: expr: 
    143: name: pps_id
    144: operator: =
    145: call: 
     146: name: gf_bs_read_ue_log
     147: argument_list: 
      148: argument: 
       149: expr: 
        150: name: bs
      151: argument: 
       152: expr: 
        153: literal: "pps_id"
  154: if_stmt: 
   155: if: 
    156: condition: 
     157: expr: 
      158: name: pps_id
      159: operator: >=
      160: literal: 64
    161: block: 
     162: block_content: 
      163: return: 
       164: expr: 
        165: operator: -
        166: literal: 1
  167: expr_stmt: 
   168: expr: 
    169: name: pps
    170: operator: =
    171: operator: &
    172: name: 
     173: name: hevc
     174: operator: ->
     175: name: pps
     176: index: 
      177: expr: 
       178: name: pps_id
  179: expr_stmt: 
   180: expr: 
    181: name: sps
    182: operator: =
    183: operator: &
    184: name: 
     185: name: hevc
     186: operator: ->
     187: name: sps
     188: index: 
      189: expr: 
       190: name: 
        191: name: pps
        192: operator: ->
        193: name: sps_id
  194: expr_stmt: 
   195: expr: 
    196: name: 
     197: name: si
     198: operator: ->
     199: name: sps
    200: operator: =
    201: name: sps
  202: expr_stmt: 
   203: expr: 
    204: name: 
     205: name: si
     206: operator: ->
     207: name: pps
    208: operator: =
    209: name: pps
  210: if_stmt: 
   211: if: 
    212: condition: 
     213: expr: 
      214: operator: !
      215: name: 
       216: name: si
       217: operator: ->
       218: name: first_slice_segment_in_pic_flag
      219: operator: &&
      220: name: 
       221: name: pps
       222: operator: ->
       223: name: dependent_slice_segments_enabled_flag
    224: block: 
     225: block_content: 
      226: expr_stmt: 
       227: expr: 
        228: name: 
         229: name: si
         230: operator: ->
         231: name: dependent_slice_segment_flag
        232: operator: =
        233: call: 
         234: name: gf_bs_read_int_log
         235: argument_list: 
          236: argument: 
           237: expr: 
            238: name: bs
          239: argument: 
           240: expr: 
            241: literal: 1
          242: argument: 
           243: expr: 
            244: literal: "dependent_slice_segment_flag"
   245: else: 
    246: block: 
     247: block_content: 
      248: expr_stmt: 
       249: expr: 
        250: name: 
         251: name: si
         252: operator: ->
         253: name: dependent_slice_segment_flag
        254: operator: =
        255: name: GF_FALSE
  256: if_stmt: 
   257: if: 
    258: condition: 
     259: expr: 
      260: operator: !
      261: name: 
       262: name: si
       263: operator: ->
       264: name: first_slice_segment_in_pic_flag
    265: block: 
     266: block_content: 
      267: expr_stmt: 
       268: expr: 
        269: name: 
         270: name: si
         271: operator: ->
         272: name: slice_segment_address
        273: operator: =
        274: call: 
         275: name: gf_bs_read_int_log
         276: argument_list: 
          277: argument: 
           278: expr: 
            279: name: bs
          280: argument: 
           281: expr: 
            282: name: 
             283: name: sps
             284: operator: ->
             285: name: bitsSliceSegmentAddress
          286: argument: 
           287: expr: 
            288: literal: "slice_segment_address"
   289: else: 
    290: block: 
     291: block_content: 
      292: expr_stmt: 
       293: expr: 
        294: name: 
         295: name: si
         296: operator: ->
         297: name: slice_segment_address
        298: operator: =
        299: literal: 0
  300: if_stmt: 
   301: if: 
    302: condition: 
     303: expr: 
      304: operator: !
      305: name: 
       306: name: si
       307: operator: ->
       308: name: dependent_slice_segment_flag
    309: block: 
     310: block_content: 
      311: decl_stmt: 
       312: decl: 
        313: type: 
         314: name: Bool
        315: name: deblocking_filter_override_flag
        316: init: 
         317: expr: 
          318: literal: 0
      319: decl_stmt: 
       320: decl: 
        321: type: 
         322: name: Bool
        323: name: slice_temporal_mvp_enabled_flag
        324: init: 
         325: expr: 
          326: literal: 0
      327: decl_stmt: 
       328: decl: 
        329: type: 
         330: name: Bool
        331: name: slice_sao_luma_flag
        332: init: 
         333: expr: 
          334: literal: 0
      335: decl_stmt: 
       336: decl: 
        337: type: 
         338: name: Bool
        339: name: slice_sao_chroma_flag
        340: init: 
         341: expr: 
          342: literal: 0
      343: decl_stmt: 
       344: decl: 
        345: type: 
         346: name: Bool
        347: name: slice_deblocking_filter_disabled_flag
        348: init: 
         349: expr: 
          350: literal: 0
      351: comment: //"slice_reserved_undetermined_flag[]"
      352: expr_stmt: 
       353: expr: 
        354: call: 
         355: name: gf_bs_read_int_log
         356: argument_list: 
          357: argument: 
           358: expr: 
            359: name: bs
          360: argument: 
           361: expr: 
            362: name: 
             363: name: pps
             364: operator: ->
             365: name: num_extra_slice_header_bits
          366: argument: 
           367: expr: 
            368: literal: "slice_reserved_undetermined_flag"
      369: expr_stmt: 
       370: expr: 
        371: name: 
         372: name: si
         373: operator: ->
         374: name: slice_type
        375: operator: =
        376: call: 
         377: name: gf_bs_read_ue_log
         378: argument_list: 
          379: argument: 
           380: expr: 
            381: name: bs
          382: argument: 
           383: expr: 
            384: literal: "slice_type"
      385: if_stmt: 
       386: if: 
        387: condition: 
         388: expr: 
          389: name: 
           390: name: pps
           391: operator: ->
           392: name: output_flag_present_flag
        393: block: 
         394: block_content: 
          395: expr_stmt: 
           396: expr: 
            397: call: 
             398: name: gf_bs_read_int_log
             399: argument_list: 
              400: argument: 
               401: expr: 
                402: name: bs
              403: argument: 
               404: expr: 
                405: literal: 1
              406: argument: 
               407: expr: 
                408: literal: "pic_output_flag"
      409: if_stmt: 
       410: if: 
        411: condition: 
         412: expr: 
          413: name: 
           414: name: sps
           415: operator: ->
           416: name: separate_colour_plane_flag
          417: operator: ==
          418: literal: 1
        419: block: 
         420: block_content: 
          421: expr_stmt: 
           422: expr: 
            423: call: 
             424: name: gf_bs_read_int_log
             425: argument_list: 
              426: argument: 
               427: expr: 
                428: name: bs
              429: argument: 
               430: expr: 
                431: literal: 2
              432: argument: 
               433: expr: 
                434: literal: "colour_plane_id"
      435: if_stmt: 
       436: if: 
        437: condition: 
         438: expr: 
          439: name: IDRPicFlag
        440: block: 
         441: block_content: 
          442: expr_stmt: 
           443: expr: 
            444: name: 
             445: name: si
             446: operator: ->
             447: name: poc_lsb
            448: operator: =
            449: literal: 0
          450: comment: //if not asked to parse full header, abort since we know the poc
          451: if_stmt: 
           452: if: 
            453: condition: 
             454: expr: 
              455: operator: !
              456: name: 
               457: name: hevc
               458: operator: ->
               459: name: full_slice_header_parse
            460: block: 
             461: block_content: 
              462: return: 
               463: expr: 
                464: literal: 0
       465: else: 
        466: block: 
         467: block_content: 
          468: expr_stmt: 
           469: expr: 
            470: name: 
             471: name: si
             472: operator: ->
             473: name: poc_lsb
            474: operator: =
            475: call: 
             476: name: gf_bs_read_int_log
             477: argument_list: 
              478: argument: 
               479: expr: 
                480: name: bs
              481: argument: 
               482: expr: 
                483: name: 
                 484: name: sps
                 485: operator: ->
                 486: name: log2_max_pic_order_cnt_lsb
              487: argument: 
               488: expr: 
                489: literal: "poc_lsb"
          490: comment: //if not asked to parse full header, abort once we have the poc
          491: if_stmt: 
           492: if: 
            493: condition: 
             494: expr: 
              495: operator: !
              496: name: 
               497: name: hevc
               498: operator: ->
               499: name: full_slice_header_parse
            500: block: 
             501: block_content: 
              502: return: 
               503: expr: 
                504: literal: 0
          505: if_stmt: 
           506: if: 
            507: condition: 
             508: expr: 
              509: call: 
               510: name: gf_bs_read_int_log
               511: argument_list: 
                512: argument: 
                 513: expr: 
                  514: name: bs
                515: argument: 
                 516: expr: 
                  517: literal: 1
                518: argument: 
                 519: expr: 
                  520: literal: "short_term_ref_pic_set_sps_flag"
              521: operator: ==
              522: literal: 0
            523: block: 
             524: block_content: 
              525: decl_stmt: 
               526: decl: 
                527: type: 
                 528: name: Bool
                529: name: ret
                530: init: 
                 531: expr: 
                  532: call: 
                   533: name: hevc_parse_short_term_ref_pic_set
                   534: argument_list: 
                    535: argument: 
                     536: expr: 
                      537: name: bs
                    538: argument: 
                     539: expr: 
                      540: name: sps
                    541: argument: 
                     542: expr: 
                      543: name: 
                       544: name: sps
                       545: operator: ->
                       546: name: num_short_term_ref_pic_sets
              547: if_stmt: 
               548: if: 
                549: condition: 
                 550: expr: 
                  551: operator: !
                  552: name: ret
                553: block: 
                 554: block_content: 
                  555: return: 
                   556: expr: 
                    557: operator: -
                    558: literal: 1
           559: if: 
            560: condition: 
             561: expr: 
              562: name: 
               563: name: sps
               564: operator: ->
               565: name: num_short_term_ref_pic_sets
              566: operator: >
              567: literal: 1
            568: block: 
             569: block_content: 
              570: decl_stmt: 
               571: decl: 
                572: type: 
                 573: name: u32
                574: name: numbits
                575: init: 
                 576: expr: 
                  577: literal: 0
              578: while: 
               579: condition: 
                580: expr: 
                 581: operator: (
                 582: name: u32
                 583: operator: )
                 584: operator: (
                 585: literal: 1
                 586: operator: <<
                 587: name: numbits
                 588: operator: )
                 589: operator: <
                 590: name: 
                  591: name: sps
                  592: operator: ->
                  593: name: num_short_term_ref_pic_sets
               594: block: 
                595: block_content: 
                 596: expr_stmt: 
                  597: expr: 
                   598: name: numbits
                   599: operator: ++
              600: if_stmt: 
               601: if: 
                602: condition: 
                 603: expr: 
                  604: name: numbits
                  605: operator: >
                  606: literal: 0
                607: block: 
                 608: block_content: 
                  609: expr_stmt: 
                   610: expr: 
                    611: call: 
                     612: name: gf_bs_read_int_log
                     613: argument_list: 
                      614: argument: 
                       615: expr: 
                        616: name: bs
                      617: argument: 
                       618: expr: 
                        619: name: numbits
                      620: argument: 
                       621: expr: 
                        622: literal: "short_term_ref_pic_set_idx"
              623: comment:: 

----------------------------------------
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: u32
    6: name: i
   7: decl: 
    8: type: 
    9: name: j
  10: decl_stmt: 
   11: decl: 
    12: type: 
     13: name: u32
    14: name: num_ref_idx_l0_active
    15: init: 
     16: expr: 
      17: literal: 0
   18: decl: 
    19: type: 
    20: name: num_ref_idx_l1_active
    21: init: 
     22: expr: 
      23: literal: 0
  24: decl_stmt: 
   25: decl: 
    26: type: 
     27: name: HEVC_PPS
     28: modifier: *
    29: name: pps
  30: decl_stmt: 
   31: decl: 
    32: type: 
     33: name: HEVC_SPS
     34: modifier: *
    35: name: sps
  36: decl_stmt: 
   37: decl: 
    38: type: 
     39: name: s32
    40: name: pps_id
  41: decl_stmt: 
   42: decl: 
    43: type: 
     44: name: Bool
    45: name: RapPicFlag
    46: init: 
     47: expr: 
      48: name: GF_FALSE
  49: decl_stmt: 
   50: decl: 
    51: type: 
     52: name: Bool
    53: name: IDRPicFlag
    54: init: 
     55: expr: 
      56: name: GF_FALSE
  57: expr_stmt: 
   58: expr: 
    59: name: 
     60: name: si
     61: operator: ->
     62: name: first_slice_segment_in_pic_flag
    63: operator: =
    64: call: 
     65: name: gf_bs_read_int_log
     66: argument_list: 
      67: argument: 
       68: expr: 
        69: name: bs
      70: argument: 
       71: expr: 
        72: literal: 1
      73: argument: 
       74: expr: 
        75: literal: "first_slice_segment_in_pic_flag"
  76: switch: 
   77: condition: 
    78: expr: 
     79: name: 
      80: name: si
      81: operator: ->
      82: name: nal_unit_type
   83: block: 
    84: block_content: 
     85: case: 
      86: expr: 
       87: name: GF_HEVC_NALU_SLICE_IDR_W_DLP
     88: case: 
      89: expr: 
       90: name: GF_HEVC_NALU_SLICE_IDR_N_LP
     91: expr_stmt: 
      92: expr: 
       93: name: IDRPicFlag
       94: operator: =
       95: name: GF_TRUE
     96: expr_stmt: 
      97: expr: 
       98: name: RapPicFlag
       99: operator: =
       100: name: GF_TRUE
     101: break: 
     102: case: 
      103: expr: 
       104: name: GF_HEVC_NALU_SLICE_BLA_W_LP
     105: case: 
      106: expr: 
       107: name: GF_HEVC_NALU_SLICE_BLA_W_DLP
     108: case: 
      109: expr: 
       110: name: GF_HEVC_NALU_SLICE_BLA_N_LP
     111: case: 
      112: expr: 
       113: name: GF_HEVC_NALU_SLICE_CRA
     114: expr_stmt: 
      115: expr: 
       116: name: RapPicFlag
       117: operator: =
       118: name: GF_TRUE
     119: break: 
  120: if_stmt: 
   121: if: 
    122: condition: 
     123: expr: 
      124: name: RapPicFlag
    125: block: 
     126: block_content: 
      127: expr_stmt: 
       128: expr: 
        129: call: 
         130: name: gf_bs_read_int_log
         131: argument_list: 
          132: argument: 
           133: expr: 
            134: name: bs
          135: argument: 
           136: expr: 
            137: literal: 1
          138: argument: 
           139: expr: 
            140: literal: "no_output_of_prior_pics_flag"
  141: expr_stmt: 
   142: expr: 
    143: name: pps_id
    144: operator: =
    145: call: 
     146: name: gf_bs_read_ue_log
     147: argument_list: 
      148: argument: 
       149: expr: 
        150: name: bs
      151: argument: 
       152: expr: 
        153: literal: "pps_id"
  154: if_stmt: 
   155: if: 
    156: condition: 
     157: expr: 
      158: operator: (
      159: name: pps_id
      160: operator: <
      161: literal: 0
      162: operator: )
      163: operator: ||
      164: operator: (
      165: name: pps_id
      166: operator: >=
      167: literal: 64
      168: operator: )
    169: block: 
     170: block_content: 
      171: return: 
       172: expr: 
        173: operator: -
        174: literal: 1
  175: expr_stmt: 
   176: expr: 
    177: name: pps
    178: operator: =
    179: operator: &
    180: name: 
     181: name: hevc
     182: operator: ->
     183: name: pps
     184: index: 
      185: expr: 
       186: name: pps_id
  187: expr_stmt: 
   188: expr: 
    189: name: sps
    190: operator: =
    191: operator: &
    192: name: 
     193: name: hevc
     194: operator: ->
     195: name: sps
     196: index: 
      197: expr: 
       198: name: 
        199: name: pps
        200: operator: ->
        201: name: sps_id
  202: expr_stmt: 
   203: expr: 
    204: name: 
     205: name: si
     206: operator: ->
     207: name: sps
    208: operator: =
    209: name: sps
  210: expr_stmt: 
   211: expr: 
    212: name: 
     213: name: si
     214: operator: ->
     215: name: pps
    216: operator: =
    217: name: pps
  218: if_stmt: 
   219: if: 
    220: condition: 
     221: expr: 
      222: operator: !
      223: name: 
       224: name: si
       225: operator: ->
       226: name: first_slice_segment_in_pic_flag
      227: operator: &&
      228: name: 
       229: name: pps
       230: operator: ->
       231: name: dependent_slice_segments_enabled_flag
    232: block: 
     233: block_content: 
      234: expr_stmt: 
       235: expr: 
        236: name: 
         237: name: si
         238: operator: ->
         239: name: dependent_slice_segment_flag
        240: operator: =
        241: call: 
         242: name: gf_bs_read_int_log
         243: argument_list: 
          244: argument: 
           245: expr: 
            246: name: bs
          247: argument: 
           248: expr: 
            249: literal: 1
          250: argument: 
           251: expr: 
            252: literal: "dependent_slice_segment_flag"
   253: else: 
    254: block: 
     255: block_content: 
      256: expr_stmt: 
       257: expr: 
        258: name: 
         259: name: si
         260: operator: ->
         261: name: dependent_slice_segment_flag
        262: operator: =
        263: name: GF_FALSE
  264: if_stmt: 
   265: if: 
    266: condition: 
     267: expr: 
      268: operator: !
      269: name: 
       270: name: si
       271: operator: ->
       272: name: first_slice_segment_in_pic_flag
    273: block: 
     274: block_content: 
      275: expr_stmt: 
       276: expr: 
        277: name: 
         278: name: si
         279: operator: ->
         280: name: slice_segment_address
        281: operator: =
        282: call: 
         283: name: gf_bs_read_int_log
         284: argument_list: 
          285: argument: 
           286: expr: 
            287: name: bs
          288: argument: 
           289: expr: 
            290: name: 
             291: name: sps
             292: operator: ->
             293: name: bitsSliceSegmentAddress
          294: argument: 
           295: expr: 
            296: literal: "slice_segment_address"
   297: else: 
    298: block: 
     299: block_content: 
      300: expr_stmt: 
       301: expr: 
        302: name: 
         303: name: si
         304: operator: ->
         305: name: slice_segment_address
        306: operator: =
        307: literal: 0
  308: if_stmt: 
   309: if: 
    310: condition: 
     311: expr: 
      312: operator: !
      313: name: 
       314: name: si
       315: operator: ->
       316: name: dependent_slice_segment_flag
    317: block: 
     318: block_content: 
      319: decl_stmt: 
       320: decl: 
        321: type: 
         322: name: Bool
        323: name: deblocking_filter_override_flag
        324: init: 
         325: expr: 
          326: literal: 0
      327: decl_stmt: 
       328: decl: 
        329: type: 
         330: name: Bool
        331: name: slice_temporal_mvp_enabled_flag
        332: init: 
         333: expr: 
          334: literal: 0
      335: decl_stmt: 
       336: decl: 
        337: type: 
         338: name: Bool
        339: name: slice_sao_luma_flag
        340: init: 
         341: expr: 
          342: literal: 0
      343: decl_stmt: 
       344: decl: 
        345: type: 
         346: name: Bool
        347: name: slice_sao_chroma_flag
        348: init: 
         349: expr: 
          350: literal: 0
      351: decl_stmt: 
       352: decl: 
        353: type: 
         354: name: Bool
        355: name: slice_deblocking_filter_disabled_flag
        356: init: 
         357: expr: 
          358: literal: 0
      359: comment: //"slice_reserved_undetermined_flag[]"
      360: expr_stmt: 
       361: expr: 
        362: call: 
         363: name: gf_bs_read_int_log
         364: argument_list: 
          365: argument: 
           366: expr: 
            367: name: bs
          368: argument: 
           369: expr: 
            370: name: 
             371: name: pps
             372: operator: ->
             373: name: num_extra_slice_header_bits
          374: argument: 
           375: expr: 
            376: literal: "slice_reserved_undetermined_flag"
      377: expr_stmt: 
       378: expr: 
        379: name: 
         380: name: si
         381: operator: ->
         382: name: slice_type
        383: operator: =
        384: call: 
         385: name: gf_bs_read_ue_log
         386: argument_list: 
          387: argument: 
           388: expr: 
            389: name: bs
          390: argument: 
           391: expr: 
            392: literal: "slice_type"
      393: if_stmt: 
       394: if: 
        395: condition: 
         396: expr: 
          397: name: 
           398: name: pps
           399: operator: ->
           400: name: output_flag_present_flag
        401: block: 
         402: block_content: 
          403: expr_stmt: 
           404: expr: 
            405: call: 
             406: name: gf_bs_read_int_log
             407: argument_list: 
              408: argument: 
               409: expr: 
                410: name: bs
              411: argument: 
               412: expr: 
                413: literal: 1
              414: argument: 
               415: expr: 
                416: literal: "pic_output_flag"
      417: if_stmt: 
       418: if: 
        419: condition: 
         420: expr: 
          421: name: 
           422: name: sps
           423: operator: ->
           424: name: separate_colour_plane_flag
          425: operator: ==
          426: literal: 1
        427: block: 
         428: block_content: 
          429: expr_stmt: 
           430: expr: 
            431: call: 
             432: name: gf_bs_read_int_log
             433: argument_list: 
              434: argument: 
               435: expr: 
                436: name: bs
              437: argument: 
               438: expr: 
                439: literal: 2
              440: argument: 
               441: expr: 
                442: literal: "colour_plane_id"
      443: if_stmt: 
       444: if: 
        445: condition: 
         446: expr: 
          447: name: IDRPicFlag
        448: block: 
         449: block_content: 
          450: expr_stmt: 
           451: expr: 
            452: name: 
             453: name: si
             454: operator: ->
             455: name: poc_lsb
            456: operator: =
            457: literal: 0
          458: comment: //if not asked to parse full header, abort since we know the poc
          459: if_stmt: 
           460: if: 
            461: condition: 
             462: expr: 
              463: operator: !
              464: name: 
               465: name: hevc
               466: operator: ->
               467: name: full_slice_header_parse
            468: block: 
             469: block_content: 
              470: return: 
               471: expr: 
                472: literal: 0
       473: else: 
        474: block: 
         475: block_content: 
          476: expr_stmt: 
           477: expr: 
            478: name: 
             479: name: si
             480: operator: ->
             481: name: poc_lsb
            482: operator: =
            483: call: 
             484: name: gf_bs_read_int_log
             485: argument_list: 
              486: argument: 
               487: expr: 
                488: name: bs
              489: argument: 
               490: expr: 
                491: name: 
                 492: name: sps
                 493: operator: ->
                 494: name: log2_max_pic_order_cnt_lsb
              495: argument: 
               496: expr: 
                497: literal: "poc_lsb"
          498: comment: //if not asked to parse full header, abort once we have the poc
          499: if_stmt: 
           500: if: 
            501: condition: 
             502: expr: 
              503: operator: !
              504: name: 
               505: name: hevc
               506: operator: ->
               507: name: full_slice_header_parse
            508: block: 
             509: block_content: 
              510: return: 
               511: expr: 
                512: literal: 0
          513: if_stmt: 
           514: if: 
            515: condition: 
             516: expr: 
              517: call: 
               518: name: gf_bs_read_int_log
               519: argument_list: 
                520: argument: 
                 521: expr: 
                  522: name: bs
                523: argument: 
                 524: expr: 
                  525: literal: 1
                526: argument: 
                 527: expr: 
                  528: literal: "short_term_ref_pic_set_sps_flag"
              529: operator: ==
              530: literal: 0
            531: block: 
             532: block_content: 
              533: decl_stmt: 
               534: decl: 
                535: type: 
                 536: name: Bool
                537: name: ret
                538: init: 
                 539: expr: 
                  540: call: 
                   541: name: hevc_parse_short_term_ref_pic_set
                   542: argument_list: 
                    543: argument: 
                     544: expr: 
                      545: name: bs
                    546: argument: 
                     547: expr: 
                      548: name: sps
                    549: argument: 
                     550: expr: 
                      551: name: 
                       552: name: sps
                       553: operator: ->
                       554: name: num_short_term_ref_pic_sets
              555: if_stmt: 
               556: if: 
                557: condition: 
                 558: expr: 
                  559: operator: !
                  560: name: ret
                561: block: 
                 562: block_content: 
                  563: return: 
                   564: expr: 
                    565: operator: -
                    566: literal: 1
           567: if: 
            568: condition: 
             569: expr: 
              570: name: 
               571: name: sps
               572: operator: ->
               573: name: num_short_term_ref_pic_sets
              574: operator: >
              575: literal: 1
            576: block: 
             577: block_content: 
              578: decl_stmt: 
               579: decl: 
                580: type: 
                 581: name: u32
                582: name: numbits
                583: init: 
                 584: expr: 
                  585: literal: 0
              586: while: 
               587: condition: 
                588: expr: 
                 589: operator: (
                 590: name: u32
                 591: operator: )
                 592: operator: (
                 593: literal: 1
                 594: operator: <<
                 595: name: numbits
                 596: operator: )
                 597: operator: <
                 598: name: 
                  599: name: sps
                  600: operator: ->
                  601: name: num_short_term_ref_pic_sets
               602: block: 
                603: block_content: 
                 604: expr_stmt: 
                  605: expr: 
                   606: name: numbits
                   607: operator: ++
              608: if_stmt: 
               609: if: 
                610: condition: 
                 611: expr: 
                  612: name: numbits
                  613: operator: >
                  614: literal: 0
                615: block: 
                 616: block_content: 
                  617: expr_stmt: 
                   618: expr: 
                    619: call: 
                     620: name: gf_bs_read_int_log
                     621: argument_list: 
                      622: argument: 
                       623: expr: 
                        624: name: bs
                      625: argument: 
                       626: expr: 
                        627: name: numbits
                      628: argument: 
                       629: expr: 
                        630: literal: "short_term_ref_pic_set_idx"
              631: comment:: 
=====
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: u32
   5: name: i
  6: decl: 
   7: type: 
   8: name: j
 9: decl_stmt: 
  10: decl: 
   11: type: 
    12: name: u32
   13: name: num_ref_idx_l0_active
   14: init: 
    15: expr: 
     16: literal: 0
  17: decl: 
   18: type: 
   19: name: num_ref_idx_l1_active
   20: init: 
    21: expr: 
     22: literal: 0
 23: decl_stmt: 
  24: decl: 
   25: type: 
    26: name: HEVC_PPS
    27: modifier: *
   28: name: pps
 29: decl_stmt: 
  30: decl: 
   31: type: 
    32: name: HEVC_SPS
    33: modifier: *
   34: name: sps
 35: decl_stmt: 
  36: decl: 
   37: type: 
    38: name: s32
   39: name: pps_id
 40: decl_stmt: 
  41: decl: 
   42: type: 
    43: name: Bool
   44: name: RapPicFlag
   45: init: 
    46: expr: 
     47: name: GF_FALSE
 48: decl_stmt: 
  49: decl: 
   50: type: 
    51: name: Bool
   52: name: IDRPicFlag
   53: init: 
    54: expr: 
     55: name: GF_FALSE
 56: expr_stmt: 
  57: expr: 
   58: name: 
    59: name: si
    60: operator: ->
    61: name: first_slice_segment_in_pic_flag
   62: operator: =
   63: call: 
    64: name: gf_bs_read_int_log
    65: argument_list: 
     66: argument: 
      67: expr: 
       68: name: bs
     69: argument: 
      70: expr: 
       71: literal: 1
     72: argument: 
      73: expr: 
       74: literal: "first_slice_segment_in_pic_flag"
 75: switch: 
  76: condition: 
   77: expr: 
    78: name: 
     79: name: si
     80: operator: ->
     81: name: nal_unit_type
  82: block: 
   83: block_content: 
    84: case: 
     85: expr: 
      86: name: GF_HEVC_NALU_SLICE_IDR_W_DLP
    87: case: 
     88: expr: 
      89: name: GF_HEVC_NALU_SLICE_IDR_N_LP
    90: expr_stmt: 
     91: expr: 
      92: name: IDRPicFlag
      93: operator: =
      94: name: GF_TRUE
    95: expr_stmt: 
     96: expr: 
      97: name: RapPicFlag
      98: operator: =
      99: name: GF_TRUE
    100: break: 
    101: case: 
     102: expr: 
      103: name: GF_HEVC_NALU_SLICE_BLA_W_LP
    104: case: 
     105: expr: 
      106: name: GF_HEVC_NALU_SLICE_BLA_W_DLP
    107: case: 
     108: expr: 
      109: name: GF_HEVC_NALU_SLICE_BLA_N_LP
    110: case: 
     111: expr: 
      112: name: GF_HEVC_NALU_SLICE_CRA
    113: expr_stmt: 
     114: expr: 
      115: name: RapPicFlag
      116: operator: =
      117: name: GF_TRUE
    118: break: 
 119: if_stmt: 
  120: if: 
   121: condition: 
    122: expr: 
     123: name: RapPicFlag
   124: block: 
    125: block_content: 
     126: expr_stmt: 
      127: expr: 
       128: call: 
        129: name: gf_bs_read_int_log
        130: argument_list: 
         131: argument: 
          132: expr: 
           133: name: bs
         134: argument: 
          135: expr: 
           136: literal: 1
         137: argument: 
          138: expr: 
           139: literal: "no_output_of_prior_pics_flag"
 140: expr_stmt: 
  141: expr: 
   142: name: pps_id
   143: operator: =
   144: call: 
    145: name: gf_bs_read_ue_log
    146: argument_list: 
     147: argument: 
      148: expr: 
       149: name: bs
     150: argument: 
      151: expr: 
       152: literal: "pps_id"
 153: if_stmt: 
  154: if: 
   155: condition: 
    156: expr: 
     157: name: pps_id
     158: operator: >=
     159: literal: 64
   160: block: 
    161: block_content: 
     162: return: 
      163: expr: 
       164: operator: -
       165: literal: 1
 166: expr_stmt: 
  167: expr: 
   168: name: pps
   169: operator: =
   170: operator: &
   171: name: 
    172: name: hevc
    173: operator: ->
    174: name: pps
    175: index: 
     176: expr: 
      177: name: pps_id
 178: expr_stmt: 
  179: expr: 
   180: name: sps
   181: operator: =
   182: operator: &
   183: name: 
    184: name: hevc
    185: operator: ->
    186: name: sps
    187: index: 
     188: expr: 
      189: name: 
       190: name: pps
       191: operator: ->
       192: name: sps_id
 193: expr_stmt: 
  194: expr: 
   195: name: 
    196: name: si
    197: operator: ->
    198: name: sps
   199: operator: =
   200: name: sps
 201: expr_stmt: 
  202: expr: 
   203: name: 
    204: name: si
    205: operator: ->
    206: name: pps
   207: operator: =
   208: name: pps
 209: if_stmt: 
  210: if: 
   211: condition: 
    212: expr: 
     213: operator: !
     214: name: 
      215: name: si
      216: operator: ->
      217: name: first_slice_segment_in_pic_flag
     218: operator: &&
     219: name: 
      220: name: pps
      221: operator: ->
      222: name: dependent_slice_segments_enabled_flag
   223: block: 
    224: block_content: 
     225: expr_stmt: 
      226: expr: 
       227: name: 
        228: name: si
        229: operator: ->
        230: name: dependent_slice_segment_flag
       231: operator: =
       232: call: 
        233: name: gf_bs_read_int_log
        234: argument_list: 
         235: argument: 
          236: expr: 
           237: name: bs
         238: argument: 
          239: expr: 
           240: literal: 1
         241: argument: 
          242: expr: 
           243: literal: "dependent_slice_segment_flag"
  244: else: 
   245: block: 
    246: block_content: 
     247: expr_stmt: 
      248: expr: 
       249: name: 
        250: name: si
        251: operator: ->
        252: name: dependent_slice_segment_flag
       253: operator: =
       254: name: GF_FALSE
 255: if_stmt: 
  256: if: 
   257: condition: 
    258: expr: 
     259: operator: !
     260: name: 
      261: name: si
      262: operator: ->
      263: name: first_slice_segment_in_pic_flag
   264: block: 
    265: block_content: 
     266: expr_stmt: 
      267: expr: 
       268: name: 
        269: name: si
        270: operator: ->
        271: name: slice_segment_address
       272: operator: =
       273: call: 
        274: name: gf_bs_read_int_log
        275: argument_list: 
         276: argument: 
          277: expr: 
           278: name: bs
         279: argument: 
          280: expr: 
           281: name: 
            282: name: sps
            283: operator: ->
            284: name: bitsSliceSegmentAddress
         285: argument: 
          286: expr: 
           287: literal: "slice_segment_address"
  288: else: 
   289: block: 
    290: block_content: 
     291: expr_stmt: 
      292: expr: 
       293: name: 
        294: name: si
        295: operator: ->
        296: name: slice_segment_address
       297: operator: =
       298: literal: 0
 299: if_stmt: 
  300: if: 
   301: condition: 
    302: expr: 
     303: operator: !
     304: name: 
      305: name: si
      306: operator: ->
      307: name: dependent_slice_segment_flag
   308: block: 
    309: block_content: 
     310: decl_stmt: 
      311: decl: 
       312: type: 
        313: name: Bool
       314: name: deblocking_filter_override_flag
       315: init: 
        316: expr: 
         317: literal: 0
     318: decl_stmt: 
      319: decl: 
       320: type: 
        321: name: Bool
       322: name: slice_temporal_mvp_enabled_flag
       323: init: 
        324: expr: 
         325: literal: 0
     326: decl_stmt: 
      327: decl: 
       328: type: 
        329: name: Bool
       330: name: slice_sao_luma_flag
       331: init: 
        332: expr: 
         333: literal: 0
     334: decl_stmt: 
      335: decl: 
       336: type: 
        337: name: Bool
       338: name: slice_sao_chroma_flag
       339: init: 
        340: expr: 
         341: literal: 0
     342: decl_stmt: 
      343: decl: 
       344: type: 
        345: name: Bool
       346: name: slice_deblocking_filter_disabled_flag
       347: init: 
        348: expr: 
         349: literal: 0
     350: comment: //"slice_reserved_undetermined_flag[]"
     351: expr_stmt: 
      352: expr: 
       353: call: 
        354: name: gf_bs_read_int_log
        355: argument_list: 
         356: argument: 
          357: expr: 
           358: name: bs
         359: argument: 
          360: expr: 
           361: name: 
            362: name: pps
            363: operator: ->
            364: name: num_extra_slice_header_bits
         365: argument: 
          366: expr: 
           367: literal: "slice_reserved_undetermined_flag"
     368: expr_stmt: 
      369: expr: 
       370: name: 
        371: name: si
        372: operator: ->
        373: name: slice_type
       374: operator: =
       375: call: 
        376: name: gf_bs_read_ue_log
        377: argument_list: 
         378: argument: 
          379: expr: 
           380: name: bs
         381: argument: 
          382: expr: 
           383: literal: "slice_type"
     384: if_stmt: 
      385: if: 
       386: condition: 
        387: expr: 
         388: name: 
          389: name: pps
          390: operator: ->
          391: name: output_flag_present_flag
       392: block: 
        393: block_content: 
         394: expr_stmt: 
          395: expr: 
           396: call: 
            397: name: gf_bs_read_int_log
            398: argument_list: 
             399: argument: 
              400: expr: 
               401: name: bs
             402: argument: 
              403: expr: 
               404: literal: 1
             405: argument: 
              406: expr: 
               407: literal: "pic_output_flag"
     408: if_stmt: 
      409: if: 
       410: condition: 
        411: expr: 
         412: name: 
          413: name: sps
          414: operator: ->
          415: name: separate_colour_plane_flag
         416: operator: ==
         417: literal: 1
       418: block: 
        419: block_content: 
         420: expr_stmt: 
          421: expr: 
           422: call: 
            423: name: gf_bs_read_int_log
            424: argument_list: 
             425: argument: 
              426: expr: 
               427: name: bs
             428: argument: 
              429: expr: 
               430: literal: 2
             431: argument: 
              432: expr: 
               433: literal: "colour_plane_id"
     434: if_stmt: 
      435: if: 
       436: condition: 
        437: expr: 
         438: name: IDRPicFlag
       439: block: 
        440: block_content: 
         441: expr_stmt: 
          442: expr: 
           443: name: 
            444: name: si
            445: operator: ->
            446: name: poc_lsb
           447: operator: =
           448: literal: 0
         449: comment: //if not asked to parse full header, abort since we know the poc
         450: if_stmt: 
          451: if: 
           452: condition: 
            453: expr: 
             454: operator: !
             455: name: 
              456: name: hevc
              457: operator: ->
              458: name: full_slice_header_parse
           459: block: 
            460: block_content: 
             461: return: 
              462: expr: 
               463: literal: 0
      464: else: 
       465: block: 
        466: block_content: 
         467: expr_stmt: 
          468: expr: 
           469: name: 
            470: name: si
            471: operator: ->
            472: name: poc_lsb
           473: operator: =
           474: call: 
            475: name: gf_bs_read_int_log
            476: argument_list: 
             477: argument: 
              478: expr: 
               479: name: bs
             480: argument: 
              481: expr: 
               482: name: 
                483: name: sps
                484: operator: ->
                485: name: log2_max_pic_order_cnt_lsb
             486: argument: 
              487: expr: 
               488: literal: "poc_lsb"
         489: comment: //if not asked to parse full header, abort once we have the poc
         490: if_stmt: 
          491: if: 
           492: condition: 
            493: expr: 
             494: operator: !
             495: name: 
              496: name: hevc
              497: operator: ->
              498: name: full_slice_header_parse
           499: block: 
            500: block_content: 
             501: return: 
              502: expr: 
               503: literal: 0
         504: if_stmt: 
          505: if: 
           506: condition: 
            507: expr: 
             508: call: 
              509: name: gf_bs_read_int_log
              510: argument_list: 
               511: argument: 
                512: expr: 
                 513: name: bs
               514: argument: 
                515: expr: 
                 516: literal: 1
               517: argument: 
                518: expr: 
                 519: literal: "short_term_ref_pic_set_sps_flag"
             520: operator: ==
             521: literal: 0
           522: block: 
            523: block_content: 
             524: decl_stmt: 
              525: decl: 
               526: type: 
                527: name: Bool
               528: name: ret
               529: init: 
                530: expr: 
                 531: call: 
                  532: name: hevc_parse_short_term_ref_pic_set
                  533: argument_list: 
                   534: argument: 
                    535: expr: 
                     536: name: bs
                   537: argument: 
                    538: expr: 
                     539: name: sps
                   540: argument: 
                    541: expr: 
                     542: name: 
                      543: name: sps
                      544: operator: ->
                      545: name: num_short_term_ref_pic_sets
             546: if_stmt: 
              547: if: 
               548: condition: 
                549: expr: 
                 550: operator: !
                 551: name: ret
               552: block: 
                553: block_content: 
                 554: return: 
                  555: expr: 
                   556: operator: -
                   557: literal: 1
          558: if: 
           559: condition: 
            560: expr: 
             561: name: 
              562: name: sps
              563: operator: ->
              564: name: num_short_term_ref_pic_sets
             565: operator: >
             566: literal: 1
           567: block: 
            568: block_content: 
             569: decl_stmt: 
              570: decl: 
               571: type: 
                572: name: u32
               573: name: numbits
               574: init: 
                575: expr: 
                 576: literal: 0
             577: while: 
              578: condition: 
               579: expr: 
                580: operator: (
                581: name: u32
                582: operator: )
                583: operator: (
                584: literal: 1
                585: operator: <<
                586: name: numbits
                587: operator: )
                588: operator: <
                589: name: 
                 590: name: sps
                 591: operator: ->
                 592: name: num_short_term_ref_pic_sets
              593: block: 
               594: block_content: 
                595: expr_stmt: 
                 596: expr: 
                  597: name: numbits
                  598: operator: ++
             599: if_stmt: 
              600: if: 
               601: condition: 
                602: expr: 
                 603: name: numbits
                 604: operator: >
                 605: literal: 0
               606: block: 
                607: block_content: 
                 608: expr_stmt: 
                  609: expr: 
                   610: call: 
                    611: name: gf_bs_read_int_log
                    612: argument_list: 
                     613: argument: 
                      614: expr: 
                       615: name: bs
                     616: argument: 
                      617: expr: 
                       618: name: numbits
                     619: argument: 
                      620: expr: 
                       621: literal: "short_term_ref_pic_set_idx"
             622: comment:: 

----------------------------------------
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: u32
   5: name: i
  6: decl: 
   7: type: 
   8: name: j
 9: decl_stmt: 
  10: decl: 
   11: type: 
    12: name: u32
   13: name: num_ref_idx_l0_active
   14: init: 
    15: expr: 
     16: literal: 0
  17: decl: 
   18: type: 
   19: name: num_ref_idx_l1_active
   20: init: 
    21: expr: 
     22: literal: 0
 23: decl_stmt: 
  24: decl: 
   25: type: 
    26: name: HEVC_PPS
    27: modifier: *
   28: name: pps
 29: decl_stmt: 
  30: decl: 
   31: type: 
    32: name: HEVC_SPS
    33: modifier: *
   34: name: sps
 35: decl_stmt: 
  36: decl: 
   37: type: 
    38: name: s32
   39: name: pps_id
 40: decl_stmt: 
  41: decl: 
   42: type: 
    43: name: Bool
   44: name: RapPicFlag
   45: init: 
    46: expr: 
     47: name: GF_FALSE
 48: decl_stmt: 
  49: decl: 
   50: type: 
    51: name: Bool
   52: name: IDRPicFlag
   53: init: 
    54: expr: 
     55: name: GF_FALSE
 56: expr_stmt: 
  57: expr: 
   58: name: 
    59: name: si
    60: operator: ->
    61: name: first_slice_segment_in_pic_flag
   62: operator: =
   63: call: 
    64: name: gf_bs_read_int_log
    65: argument_list: 
     66: argument: 
      67: expr: 
       68: name: bs
     69: argument: 
      70: expr: 
       71: literal: 1
     72: argument: 
      73: expr: 
       74: literal: "first_slice_segment_in_pic_flag"
 75: switch: 
  76: condition: 
   77: expr: 
    78: name: 
     79: name: si
     80: operator: ->
     81: name: nal_unit_type
  82: block: 
   83: block_content: 
    84: case: 
     85: expr: 
      86: name: GF_HEVC_NALU_SLICE_IDR_W_DLP
    87: case: 
     88: expr: 
      89: name: GF_HEVC_NALU_SLICE_IDR_N_LP
    90: expr_stmt: 
     91: expr: 
      92: name: IDRPicFlag
      93: operator: =
      94: name: GF_TRUE
    95: expr_stmt: 
     96: expr: 
      97: name: RapPicFlag
      98: operator: =
      99: name: GF_TRUE
    100: break: 
    101: case: 
     102: expr: 
      103: name: GF_HEVC_NALU_SLICE_BLA_W_LP
    104: case: 
     105: expr: 
      106: name: GF_HEVC_NALU_SLICE_BLA_W_DLP
    107: case: 
     108: expr: 
      109: name: GF_HEVC_NALU_SLICE_BLA_N_LP
    110: case: 
     111: expr: 
      112: name: GF_HEVC_NALU_SLICE_CRA
    113: expr_stmt: 
     114: expr: 
      115: name: RapPicFlag
      116: operator: =
      117: name: GF_TRUE
    118: break: 
 119: if_stmt: 
  120: if: 
   121: condition: 
    122: expr: 
     123: name: RapPicFlag
   124: block: 
    125: block_content: 
     126: expr_stmt: 
      127: expr: 
       128: call: 
        129: name: gf_bs_read_int_log
        130: argument_list: 
         131: argument: 
          132: expr: 
           133: name: bs
         134: argument: 
          135: expr: 
           136: literal: 1
         137: argument: 
          138: expr: 
           139: literal: "no_output_of_prior_pics_flag"
 140: expr_stmt: 
  141: expr: 
   142: name: pps_id
   143: operator: =
   144: call: 
    145: name: gf_bs_read_ue_log
    146: argument_list: 
     147: argument: 
      148: expr: 
       149: name: bs
     150: argument: 
      151: expr: 
       152: literal: "pps_id"
 153: if_stmt: 
  154: if: 
   155: condition: 
    156: expr: 
     157: operator: (
     158: name: pps_id
     159: operator: <
     160: literal: 0
     161: operator: )
     162: operator: ||
     163: operator: (
     164: name: pps_id
     165: operator: >=
     166: literal: 64
     167: operator: )
   168: block: 
    169: block_content: 
     170: return: 
      171: expr: 
       172: operator: -
       173: literal: 1
 174: expr_stmt: 
  175: expr: 
   176: name: pps
   177: operator: =
   178: operator: &
   179: name: 
    180: name: hevc
    181: operator: ->
    182: name: pps
    183: index: 
     184: expr: 
      185: name: pps_id
 186: expr_stmt: 
  187: expr: 
   188: name: sps
   189: operator: =
   190: operator: &
   191: name: 
    192: name: hevc
    193: operator: ->
    194: name: sps
    195: index: 
     196: expr: 
      197: name: 
       198: name: pps
       199: operator: ->
       200: name: sps_id
 201: expr_stmt: 
  202: expr: 
   203: name: 
    204: name: si
    205: operator: ->
    206: name: sps
   207: operator: =
   208: name: sps
 209: expr_stmt: 
  210: expr: 
   211: name: 
    212: name: si
    213: operator: ->
    214: name: pps
   215: operator: =
   216: name: pps
 217: if_stmt: 
  218: if: 
   219: condition: 
    220: expr: 
     221: operator: !
     222: name: 
      223: name: si
      224: operator: ->
      225: name: first_slice_segment_in_pic_flag
     226: operator: &&
     227: name: 
      228: name: pps
      229: operator: ->
      230: name: dependent_slice_segments_enabled_flag
   231: block: 
    232: block_content: 
     233: expr_stmt: 
      234: expr: 
       235: name: 
        236: name: si
        237: operator: ->
        238: name: dependent_slice_segment_flag
       239: operator: =
       240: call: 
        241: name: gf_bs_read_int_log
        242: argument_list: 
         243: argument: 
          244: expr: 
           245: name: bs
         246: argument: 
          247: expr: 
           248: literal: 1
         249: argument: 
          250: expr: 
           251: literal: "dependent_slice_segment_flag"
  252: else: 
   253: block: 
    254: block_content: 
     255: expr_stmt: 
      256: expr: 
       257: name: 
        258: name: si
        259: operator: ->
        260: name: dependent_slice_segment_flag
       261: operator: =
       262: name: GF_FALSE
 263: if_stmt: 
  264: if: 
   265: condition: 
    266: expr: 
     267: operator: !
     268: name: 
      269: name: si
      270: operator: ->
      271: name: first_slice_segment_in_pic_flag
   272: block: 
    273: block_content: 
     274: expr_stmt: 
      275: expr: 
       276: name: 
        277: name: si
        278: operator: ->
        279: name: slice_segment_address
       280: operator: =
       281: call: 
        282: name: gf_bs_read_int_log
        283: argument_list: 
         284: argument: 
          285: expr: 
           286: name: bs
         287: argument: 
          288: expr: 
           289: name: 
            290: name: sps
            291: operator: ->
            292: name: bitsSliceSegmentAddress
         293: argument: 
          294: expr: 
           295: literal: "slice_segment_address"
  296: else: 
   297: block: 
    298: block_content: 
     299: expr_stmt: 
      300: expr: 
       301: name: 
        302: name: si
        303: operator: ->
        304: name: slice_segment_address
       305: operator: =
       306: literal: 0
 307: if_stmt: 
  308: if: 
   309: condition: 
    310: expr: 
     311: operator: !
     312: name: 
      313: name: si
      314: operator: ->
      315: name: dependent_slice_segment_flag
   316: block: 
    317: block_content: 
     318: decl_stmt: 
      319: decl: 
       320: type: 
        321: name: Bool
       322: name: deblocking_filter_override_flag
       323: init: 
        324: expr: 
         325: literal: 0
     326: decl_stmt: 
      327: decl: 
       328: type: 
        329: name: Bool
       330: name: slice_temporal_mvp_enabled_flag
       331: init: 
        332: expr: 
         333: literal: 0
     334: decl_stmt: 
      335: decl: 
       336: type: 
        337: name: Bool
       338: name: slice_sao_luma_flag
       339: init: 
        340: expr: 
         341: literal: 0
     342: decl_stmt: 
      343: decl: 
       344: type: 
        345: name: Bool
       346: name: slice_sao_chroma_flag
       347: init: 
        348: expr: 
         349: literal: 0
     350: decl_stmt: 
      351: decl: 
       352: type: 
        353: name: Bool
       354: name: slice_deblocking_filter_disabled_flag
       355: init: 
        356: expr: 
         357: literal: 0
     358: comment: //"slice_reserved_undetermined_flag[]"
     359: expr_stmt: 
      360: expr: 
       361: call: 
        362: name: gf_bs_read_int_log
        363: argument_list: 
         364: argument: 
          365: expr: 
           366: name: bs
         367: argument: 
          368: expr: 
           369: name: 
            370: name: pps
            371: operator: ->
            372: name: num_extra_slice_header_bits
         373: argument: 
          374: expr: 
           375: literal: "slice_reserved_undetermined_flag"
     376: expr_stmt: 
      377: expr: 
       378: name: 
        379: name: si
        380: operator: ->
        381: name: slice_type
       382: operator: =
       383: call: 
        384: name: gf_bs_read_ue_log
        385: argument_list: 
         386: argument: 
          387: expr: 
           388: name: bs
         389: argument: 
          390: expr: 
           391: literal: "slice_type"
     392: if_stmt: 
      393: if: 
       394: condition: 
        395: expr: 
         396: name: 
          397: name: pps
          398: operator: ->
          399: name: output_flag_present_flag
       400: block: 
        401: block_content: 
         402: expr_stmt: 
          403: expr: 
           404: call: 
            405: name: gf_bs_read_int_log
            406: argument_list: 
             407: argument: 
              408: expr: 
               409: name: bs
             410: argument: 
              411: expr: 
               412: literal: 1
             413: argument: 
              414: expr: 
               415: literal: "pic_output_flag"
     416: if_stmt: 
      417: if: 
       418: condition: 
        419: expr: 
         420: name: 
          421: name: sps
          422: operator: ->
          423: name: separate_colour_plane_flag
         424: operator: ==
         425: literal: 1
       426: block: 
        427: block_content: 
         428: expr_stmt: 
          429: expr: 
           430: call: 
            431: name: gf_bs_read_int_log
            432: argument_list: 
             433: argument: 
              434: expr: 
               435: name: bs
             436: argument: 
              437: expr: 
               438: literal: 2
             439: argument: 
              440: expr: 
               441: literal: "colour_plane_id"
     442: if_stmt: 
      443: if: 
       444: condition: 
        445: expr: 
         446: name: IDRPicFlag
       447: block: 
        448: block_content: 
         449: expr_stmt: 
          450: expr: 
           451: name: 
            452: name: si
            453: operator: ->
            454: name: poc_lsb
           455: operator: =
           456: literal: 0
         457: comment: //if not asked to parse full header, abort since we know the poc
         458: if_stmt: 
          459: if: 
           460: condition: 
            461: expr: 
             462: operator: !
             463: name: 
              464: name: hevc
              465: operator: ->
              466: name: full_slice_header_parse
           467: block: 
            468: block_content: 
             469: return: 
              470: expr: 
               471: literal: 0
      472: else: 
       473: block: 
        474: block_content: 
         475: expr_stmt: 
          476: expr: 
           477: name: 
            478: name: si
            479: operator: ->
            480: name: poc_lsb
           481: operator: =
           482: call: 
            483: name: gf_bs_read_int_log
            484: argument_list: 
             485: argument: 
              486: expr: 
               487: name: bs
             488: argument: 
              489: expr: 
               490: name: 
                491: name: sps
                492: operator: ->
                493: name: log2_max_pic_order_cnt_lsb
             494: argument: 
              495: expr: 
               496: literal: "poc_lsb"
         497: comment: //if not asked to parse full header, abort once we have the poc
         498: if_stmt: 
          499: if: 
           500: condition: 
            501: expr: 
             502: operator: !
             503: name: 
              504: name: hevc
              505: operator: ->
              506: name: full_slice_header_parse
           507: block: 
            508: block_content: 
             509: return: 
              510: expr: 
               511: literal: 0
         512: if_stmt: 
          513: if: 
           514: condition: 
            515: expr: 
             516: call: 
              517: name: gf_bs_read_int_log
              518: argument_list: 
               519: argument: 
                520: expr: 
                 521: name: bs
               522: argument: 
                523: expr: 
                 524: literal: 1
               525: argument: 
                526: expr: 
                 527: literal: "short_term_ref_pic_set_sps_flag"
             528: operator: ==
             529: literal: 0
           530: block: 
            531: block_content: 
             532: decl_stmt: 
              533: decl: 
               534: type: 
                535: name: Bool
               536: name: ret
               537: init: 
                538: expr: 
                 539: call: 
                  540: name: hevc_parse_short_term_ref_pic_set
                  541: argument_list: 
                   542: argument: 
                    543: expr: 
                     544: name: bs
                   545: argument: 
                    546: expr: 
                     547: name: sps
                   548: argument: 
                    549: expr: 
                     550: name: 
                      551: name: sps
                      552: operator: ->
                      553: name: num_short_term_ref_pic_sets
             554: if_stmt: 
              555: if: 
               556: condition: 
                557: expr: 
                 558: operator: !
                 559: name: ret
               560: block: 
                561: block_content: 
                 562: return: 
                  563: expr: 
                   564: operator: -
                   565: literal: 1
          566: if: 
           567: condition: 
            568: expr: 
             569: name: 
              570: name: sps
              571: operator: ->
              572: name: num_short_term_ref_pic_sets
             573: operator: >
             574: literal: 1
           575: block: 
            576: block_content: 
             577: decl_stmt: 
              578: decl: 
               579: type: 
                580: name: u32
               581: name: numbits
               582: init: 
                583: expr: 
                 584: literal: 0
             585: while: 
              586: condition: 
               587: expr: 
                588: operator: (
                589: name: u32
                590: operator: )
                591: operator: (
                592: literal: 1
                593: operator: <<
                594: name: numbits
                595: operator: )
                596: operator: <
                597: name: 
                 598: name: sps
                 599: operator: ->
                 600: name: num_short_term_ref_pic_sets
              601: block: 
               602: block_content: 
                603: expr_stmt: 
                 604: expr: 
                  605: name: numbits
                  606: operator: ++
             607: if_stmt: 
              608: if: 
               609: condition: 
                610: expr: 
                 611: name: numbits
                 612: operator: >
                 613: literal: 0
               614: block: 
                615: block_content: 
                 616: expr_stmt: 
                  617: expr: 
                   618: call: 
                    619: name: gf_bs_read_int_log
                    620: argument_list: 
                     621: argument: 
                      622: expr: 
                       623: name: bs
                     624: argument: 
                      625: expr: 
                       626: name: numbits
                     627: argument: 
                      628: expr: 
                       629: literal: "short_term_ref_pic_set_idx"
             630: comment:: 
=====
0: condition: 
 1: expr: 
  2: name: pps_id
  3: operator: >=
  4: literal: 64

----------------------------------------
=====
