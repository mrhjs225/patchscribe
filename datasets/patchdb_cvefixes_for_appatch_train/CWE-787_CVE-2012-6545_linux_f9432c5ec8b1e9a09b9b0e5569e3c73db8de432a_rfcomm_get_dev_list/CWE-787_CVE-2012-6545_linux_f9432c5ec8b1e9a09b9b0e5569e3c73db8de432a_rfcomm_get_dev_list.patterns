0: unit: 
 1: function: 
  2: type: 
   3: specifier: static
   4: name: int
  5: name: rfcomm_get_dev_list
  6: parameter_list: 
   7: parameter: 
    8: decl: 
     9: type: 
      10: name: void
      11: name: __user
      12: modifier: *
     13: name: arg
  14: block: 
   15: block_content: 
    16: decl_stmt: 
     17: decl: 
      18: type: 
       19: name: 
        20: name: struct
        21: name: rfcomm_dev
       22: modifier: *
      23: name: dev
    24: decl_stmt: 
     25: decl: 
      26: type: 
       27: name: 
        28: name: struct
        29: name: rfcomm_dev_list_req
       30: modifier: *
      31: name: dl
    32: decl_stmt: 
     33: decl: 
      34: type: 
       35: name: 
        36: name: struct
        37: name: rfcomm_dev_info
       38: modifier: *
      39: name: di
    40: decl_stmt: 
     41: decl: 
      42: type: 
       43: name: int
      44: name: n
      45: init: 
       46: expr: 
        47: literal: 0
     48: decl: 
      49: type: 
      50: name: size
     51: decl: 
      52: type: 
      53: name: err
    54: decl_stmt: 
     55: decl: 
      56: type: 
       57: name: u16
      58: name: dev_num
    59: expr_stmt: 
     60: expr: 
      61: call: 
       62: name: BT_DBG
       63: argument_list: 
        64: argument: 
         65: expr: 
          66: literal: ""
    67: if_stmt: 
     68: if: 
      69: condition: 
       70: expr: 
        71: call: 
         72: name: get_user
         73: argument_list: 
          74: argument: 
           75: expr: 
            76: name: dev_num
          77: argument: 
           78: expr: 
            79: operator: (
            80: name: u16
            81: name: __user
            82: operator: *
            83: operator: )
            84: name: arg
      85: block: 
       86: block_content: 
        87: return: 
         88: expr: 
          89: operator: -
          90: name: EFAULT
    91: if_stmt: 
     92: if: 
      93: condition: 
       94: expr: 
        95: operator: !
        96: name: dev_num
        97: operator: ||
        98: name: dev_num
        99: operator: >
        100: operator: (
        101: name: PAGE_SIZE
        102: operator: *
        103: literal: 4
        104: operator: )
        105: operator: /
        106: sizeof: 
         107: argument_list: 
          108: argument: 
           109: expr: 
            110: operator: *
            111: name: di
      112: block: 
       113: block_content: 
        114: return: 
         115: expr: 
          116: operator: -
          117: name: EINVAL
    118: expr_stmt: 
     119: expr: 
      120: name: size
      121: operator: =
      122: sizeof: 
       123: argument_list: 
        124: argument: 
         125: expr: 
          126: operator: *
          127: name: dl
      128: operator: +
      129: name: dev_num
      130: operator: *
      131: sizeof: 
       132: argument_list: 
        133: argument: 
         134: expr: 
          135: operator: *
          136: name: di
    137: expr_stmt: 
     138: expr: 
      139: name: dl
      140: operator: =
      141: call: 
       142: name: kmalloc
       143: argument_list: 
        144: argument: 
         145: expr: 
          146: name: size
        147: argument: 
         148: expr: 
          149: name: GFP_KERNEL
    150: if_stmt: 
     151: if: 
      152: condition: 
       153: expr: 
        154: operator: !
        155: name: dl
      156: block: 
       157: block_content: 
        158: return: 
         159: expr: 
          160: operator: -
          161: name: ENOMEM
    162: expr_stmt: 
     163: expr: 
      164: name: di
      165: operator: =
      166: name: 
       167: name: dl
       168: operator: ->
       169: name: dev_info
    170: expr_stmt: 
     171: expr: 
      172: call: 
       173: name: spin_lock
       174: argument_list: 
        175: argument: 
         176: expr: 
          177: operator: &
          178: name: rfcomm_dev_lock
    179: macro: 
     180: name: list_for_each_entry
     181: argument_list: 
      182: argument: 
      183: argument: 
      184: argument: 
    185: block: 
     186: block_content: 
      187: if_stmt: 
       188: if: 
        189: condition: 
         190: expr: 
          191: call: 
           192: name: test_bit
           193: argument_list: 
            194: argument: 
             195: expr: 
              196: name: RFCOMM_TTY_RELEASED
            197: argument: 
             198: expr: 
              199: operator: &
              200: name: 
               201: name: dev
               202: operator: ->
               203: name: flags
        204: block: 
         205: block_content: 
          206: continue: 
      207: expr_stmt: 
       208: expr: 
        209: operator: (
        210: name: di
        211: operator: +
        212: name: n
        213: operator: )
        214: operator: ->
        215: name: id
        216: operator: =
        217: name: 
         218: name: dev
         219: operator: ->
         220: name: id
      221: expr_stmt: 
       222: expr: 
        223: operator: (
        224: name: di
        225: operator: +
        226: name: n
        227: operator: )
        228: operator: ->
        229: name: flags
        230: operator: =
        231: name: 
         232: name: dev
         233: operator: ->
         234: name: flags
      235: expr_stmt: 
       236: expr: 
        237: operator: (
        238: name: di
        239: operator: +
        240: name: n
        241: operator: )
        242: operator: ->
        243: name: state
        244: operator: =
        245: name: 
         246: name: dev
         247: operator: ->
         248: name: dlc
         249: operator: ->
         250: name: state
      251: expr_stmt: 
       252: expr: 
        253: operator: (
        254: name: di
        255: operator: +
        256: name: n
        257: operator: )
        258: operator: ->
        259: name: channel
        260: operator: =
        261: name: 
         262: name: dev
         263: operator: ->
         264: name: channel
      265: expr_stmt: 
       266: expr: 
        267: call: 
         268: name: bacpy
         269: argument_list: 
          270: argument: 
           271: expr: 
            272: operator: &
            273: operator: (
            274: name: di
            275: operator: +
            276: name: n
            277: operator: )
            278: operator: ->
            279: name: src
          280: argument: 
           281: expr: 
            282: operator: &
            283: name: 
             284: name: dev
             285: operator: ->
             286: name: src
      287: expr_stmt: 
       288: expr: 
        289: call: 
         290: name: bacpy
         291: argument_list: 
          292: argument: 
           293: expr: 
            294: operator: &
            295: operator: (
            296: name: di
            297: operator: +
            298: name: n
            299: operator: )
            300: operator: ->
            301: name: dst
          302: argument: 
           303: expr: 
            304: operator: &
            305: name: 
             306: name: dev
             307: operator: ->
             308: name: dst
      309: if_stmt: 
       310: if: 
        311: condition: 
         312: expr: 
          313: operator: ++
          314: name: n
          315: operator: >=
          316: name: dev_num
        317: block: 
         318: block_content: 
          319: break: 
    320: expr_stmt: 
     321: expr: 
      322: call: 
       323: name: spin_unlock
       324: argument_list: 
        325: argument: 
         326: expr: 
          327: operator: &
          328: name: rfcomm_dev_lock
    329: expr_stmt: 
     330: expr: 
      331: name: 
       332: name: dl
       333: operator: ->
       334: name: dev_num
      335: operator: =
      336: name: n
    337: expr_stmt: 
     338: expr: 
      339: name: size
      340: operator: =
      341: sizeof: 
       342: argument_list: 
        343: argument: 
         344: expr: 
          345: operator: *
          346: name: dl
      347: operator: +
      348: name: n
      349: operator: *
      350: sizeof: 
       351: argument_list: 
        352: argument: 
         353: expr: 
          354: operator: *
          355: name: di
    356: expr_stmt: 
     357: expr: 
      358: name: err
      359: operator: =
      360: call: 
       361: name: copy_to_user
       362: argument_list: 
        363: argument: 
         364: expr: 
          365: name: arg
        366: argument: 
         367: expr: 
          368: name: dl
        369: argument: 
         370: expr: 
          371: name: size
    372: expr_stmt: 
     373: expr: 
      374: call: 
       375: name: kfree
       376: argument_list: 
        377: argument: 
         378: expr: 
          379: name: dl
    380: return: 
     381: expr: 
      382: ternary: 
       383: condition: 
        384: expr: 
         385: name: err
       386: then: 
        387: expr: 
         388: operator: -
         389: name: EFAULT
       390: else: 
        391: expr: 
         392: literal: 0

----------------------------------------
0: unit: 
 1: function: 
  2: type: 
   3: specifier: static
   4: name: int
  5: name: rfcomm_get_dev_list
  6: parameter_list: 
   7: parameter: 
    8: decl: 
     9: type: 
      10: name: void
      11: name: __user
      12: modifier: *
     13: name: arg
  14: block: 
   15: block_content: 
    16: decl_stmt: 
     17: decl: 
      18: type: 
       19: name: 
        20: name: struct
        21: name: rfcomm_dev
       22: modifier: *
      23: name: dev
    24: decl_stmt: 
     25: decl: 
      26: type: 
       27: name: 
        28: name: struct
        29: name: rfcomm_dev_list_req
       30: modifier: *
      31: name: dl
    32: decl_stmt: 
     33: decl: 
      34: type: 
       35: name: 
        36: name: struct
        37: name: rfcomm_dev_info
       38: modifier: *
      39: name: di
    40: decl_stmt: 
     41: decl: 
      42: type: 
       43: name: int
      44: name: n
      45: init: 
       46: expr: 
        47: literal: 0
     48: decl: 
      49: type: 
      50: name: size
     51: decl: 
      52: type: 
      53: name: err
    54: decl_stmt: 
     55: decl: 
      56: type: 
       57: name: u16
      58: name: dev_num
    59: expr_stmt: 
     60: expr: 
      61: call: 
       62: name: BT_DBG
       63: argument_list: 
        64: argument: 
         65: expr: 
          66: literal: ""
    67: if_stmt: 
     68: if: 
      69: condition: 
       70: expr: 
        71: call: 
         72: name: get_user
         73: argument_list: 
          74: argument: 
           75: expr: 
            76: name: dev_num
          77: argument: 
           78: expr: 
            79: operator: (
            80: name: u16
            81: name: __user
            82: operator: *
            83: operator: )
            84: name: arg
      85: block: 
       86: block_content: 
        87: return: 
         88: expr: 
          89: operator: -
          90: name: EFAULT
    91: if_stmt: 
     92: if: 
      93: condition: 
       94: expr: 
        95: operator: !
        96: name: dev_num
        97: operator: ||
        98: name: dev_num
        99: operator: >
        100: operator: (
        101: name: PAGE_SIZE
        102: operator: *
        103: literal: 4
        104: operator: )
        105: operator: /
        106: sizeof: 
         107: argument_list: 
          108: argument: 
           109: expr: 
            110: operator: *
            111: name: di
      112: block: 
       113: block_content: 
        114: return: 
         115: expr: 
          116: operator: -
          117: name: EINVAL
    118: expr_stmt: 
     119: expr: 
      120: name: size
      121: operator: =
      122: sizeof: 
       123: argument_list: 
        124: argument: 
         125: expr: 
          126: operator: *
          127: name: dl
      128: operator: +
      129: name: dev_num
      130: operator: *
      131: sizeof: 
       132: argument_list: 
        133: argument: 
         134: expr: 
          135: operator: *
          136: name: di
    137: expr_stmt: 
     138: expr: 
      139: name: dl
      140: operator: =
      141: call: 
       142: name: kzalloc
       143: argument_list: 
        144: argument: 
         145: expr: 
          146: name: size
        147: argument: 
         148: expr: 
          149: name: GFP_KERNEL
    150: if_stmt: 
     151: if: 
      152: condition: 
       153: expr: 
        154: operator: !
        155: name: dl
      156: block: 
       157: block_content: 
        158: return: 
         159: expr: 
          160: operator: -
          161: name: ENOMEM
    162: expr_stmt: 
     163: expr: 
      164: name: di
      165: operator: =
      166: name: 
       167: name: dl
       168: operator: ->
       169: name: dev_info
    170: expr_stmt: 
     171: expr: 
      172: call: 
       173: name: spin_lock
       174: argument_list: 
        175: argument: 
         176: expr: 
          177: operator: &
          178: name: rfcomm_dev_lock
    179: macro: 
     180: name: list_for_each_entry
     181: argument_list: 
      182: argument: 
      183: argument: 
      184: argument: 
    185: block: 
     186: block_content: 
      187: if_stmt: 
       188: if: 
        189: condition: 
         190: expr: 
          191: call: 
           192: name: test_bit
           193: argument_list: 
            194: argument: 
             195: expr: 
              196: name: RFCOMM_TTY_RELEASED
            197: argument: 
             198: expr: 
              199: operator: &
              200: name: 
               201: name: dev
               202: operator: ->
               203: name: flags
        204: block: 
         205: block_content: 
          206: continue: 
      207: expr_stmt: 
       208: expr: 
        209: operator: (
        210: name: di
        211: operator: +
        212: name: n
        213: operator: )
        214: operator: ->
        215: name: id
        216: operator: =
        217: name: 
         218: name: dev
         219: operator: ->
         220: name: id
      221: expr_stmt: 
       222: expr: 
        223: operator: (
        224: name: di
        225: operator: +
        226: name: n
        227: operator: )
        228: operator: ->
        229: name: flags
        230: operator: =
        231: name: 
         232: name: dev
         233: operator: ->
         234: name: flags
      235: expr_stmt: 
       236: expr: 
        237: operator: (
        238: name: di
        239: operator: +
        240: name: n
        241: operator: )
        242: operator: ->
        243: name: state
        244: operator: =
        245: name: 
         246: name: dev
         247: operator: ->
         248: name: dlc
         249: operator: ->
         250: name: state
      251: expr_stmt: 
       252: expr: 
        253: operator: (
        254: name: di
        255: operator: +
        256: name: n
        257: operator: )
        258: operator: ->
        259: name: channel
        260: operator: =
        261: name: 
         262: name: dev
         263: operator: ->
         264: name: channel
      265: expr_stmt: 
       266: expr: 
        267: call: 
         268: name: bacpy
         269: argument_list: 
          270: argument: 
           271: expr: 
            272: operator: &
            273: operator: (
            274: name: di
            275: operator: +
            276: name: n
            277: operator: )
            278: operator: ->
            279: name: src
          280: argument: 
           281: expr: 
            282: operator: &
            283: name: 
             284: name: dev
             285: operator: ->
             286: name: src
      287: expr_stmt: 
       288: expr: 
        289: call: 
         290: name: bacpy
         291: argument_list: 
          292: argument: 
           293: expr: 
            294: operator: &
            295: operator: (
            296: name: di
            297: operator: +
            298: name: n
            299: operator: )
            300: operator: ->
            301: name: dst
          302: argument: 
           303: expr: 
            304: operator: &
            305: name: 
             306: name: dev
             307: operator: ->
             308: name: dst
      309: if_stmt: 
       310: if: 
        311: condition: 
         312: expr: 
          313: operator: ++
          314: name: n
          315: operator: >=
          316: name: dev_num
        317: block: 
         318: block_content: 
          319: break: 
    320: expr_stmt: 
     321: expr: 
      322: call: 
       323: name: spin_unlock
       324: argument_list: 
        325: argument: 
         326: expr: 
          327: operator: &
          328: name: rfcomm_dev_lock
    329: expr_stmt: 
     330: expr: 
      331: name: 
       332: name: dl
       333: operator: ->
       334: name: dev_num
      335: operator: =
      336: name: n
    337: expr_stmt: 
     338: expr: 
      339: name: size
      340: operator: =
      341: sizeof: 
       342: argument_list: 
        343: argument: 
         344: expr: 
          345: operator: *
          346: name: dl
      347: operator: +
      348: name: n
      349: operator: *
      350: sizeof: 
       351: argument_list: 
        352: argument: 
         353: expr: 
          354: operator: *
          355: name: di
    356: expr_stmt: 
     357: expr: 
      358: name: err
      359: operator: =
      360: call: 
       361: name: copy_to_user
       362: argument_list: 
        363: argument: 
         364: expr: 
          365: name: arg
        366: argument: 
         367: expr: 
          368: name: dl
        369: argument: 
         370: expr: 
          371: name: size
    372: expr_stmt: 
     373: expr: 
      374: call: 
       375: name: kfree
       376: argument_list: 
        377: argument: 
         378: expr: 
          379: name: dl
    380: return: 
     381: expr: 
      382: ternary: 
       383: condition: 
        384: expr: 
         385: name: err
       386: then: 
        387: expr: 
         388: operator: -
         389: name: EFAULT
       390: else: 
        391: expr: 
         392: literal: 0
=====
0: function: 
 1: type: 
  2: specifier: static
  3: name: int
 4: name: rfcomm_get_dev_list
 5: parameter_list: 
  6: parameter: 
   7: decl: 
    8: type: 
     9: name: void
     10: name: __user
     11: modifier: *
    12: name: arg
 13: block: 
  14: block_content: 
   15: decl_stmt: 
    16: decl: 
     17: type: 
      18: name: 
       19: name: struct
       20: name: rfcomm_dev
      21: modifier: *
     22: name: dev
   23: decl_stmt: 
    24: decl: 
     25: type: 
      26: name: 
       27: name: struct
       28: name: rfcomm_dev_list_req
      29: modifier: *
     30: name: dl
   31: decl_stmt: 
    32: decl: 
     33: type: 
      34: name: 
       35: name: struct
       36: name: rfcomm_dev_info
      37: modifier: *
     38: name: di
   39: decl_stmt: 
    40: decl: 
     41: type: 
      42: name: int
     43: name: n
     44: init: 
      45: expr: 
       46: literal: 0
    47: decl: 
     48: type: 
     49: name: size
    50: decl: 
     51: type: 
     52: name: err
   53: decl_stmt: 
    54: decl: 
     55: type: 
      56: name: u16
     57: name: dev_num
   58: expr_stmt: 
    59: expr: 
     60: call: 
      61: name: BT_DBG
      62: argument_list: 
       63: argument: 
        64: expr: 
         65: literal: ""
   66: if_stmt: 
    67: if: 
     68: condition: 
      69: expr: 
       70: call: 
        71: name: get_user
        72: argument_list: 
         73: argument: 
          74: expr: 
           75: name: dev_num
         76: argument: 
          77: expr: 
           78: operator: (
           79: name: u16
           80: name: __user
           81: operator: *
           82: operator: )
           83: name: arg
     84: block: 
      85: block_content: 
       86: return: 
        87: expr: 
         88: operator: -
         89: name: EFAULT
   90: if_stmt: 
    91: if: 
     92: condition: 
      93: expr: 
       94: operator: !
       95: name: dev_num
       96: operator: ||
       97: name: dev_num
       98: operator: >
       99: operator: (
       100: name: PAGE_SIZE
       101: operator: *
       102: literal: 4
       103: operator: )
       104: operator: /
       105: sizeof: 
        106: argument_list: 
         107: argument: 
          108: expr: 
           109: operator: *
           110: name: di
     111: block: 
      112: block_content: 
       113: return: 
        114: expr: 
         115: operator: -
         116: name: EINVAL
   117: expr_stmt: 
    118: expr: 
     119: name: size
     120: operator: =
     121: sizeof: 
      122: argument_list: 
       123: argument: 
        124: expr: 
         125: operator: *
         126: name: dl
     127: operator: +
     128: name: dev_num
     129: operator: *
     130: sizeof: 
      131: argument_list: 
       132: argument: 
        133: expr: 
         134: operator: *
         135: name: di
   136: expr_stmt: 
    137: expr: 
     138: name: dl
     139: operator: =
     140: call: 
      141: name: kmalloc
      142: argument_list: 
       143: argument: 
        144: expr: 
         145: name: size
       146: argument: 
        147: expr: 
         148: name: GFP_KERNEL
   149: if_stmt: 
    150: if: 
     151: condition: 
      152: expr: 
       153: operator: !
       154: name: dl
     155: block: 
      156: block_content: 
       157: return: 
        158: expr: 
         159: operator: -
         160: name: ENOMEM
   161: expr_stmt: 
    162: expr: 
     163: name: di
     164: operator: =
     165: name: 
      166: name: dl
      167: operator: ->
      168: name: dev_info
   169: expr_stmt: 
    170: expr: 
     171: call: 
      172: name: spin_lock
      173: argument_list: 
       174: argument: 
        175: expr: 
         176: operator: &
         177: name: rfcomm_dev_lock
   178: macro: 
    179: name: list_for_each_entry
    180: argument_list: 
     181: argument: 
     182: argument: 
     183: argument: 
   184: block: 
    185: block_content: 
     186: if_stmt: 
      187: if: 
       188: condition: 
        189: expr: 
         190: call: 
          191: name: test_bit
          192: argument_list: 
           193: argument: 
            194: expr: 
             195: name: RFCOMM_TTY_RELEASED
           196: argument: 
            197: expr: 
             198: operator: &
             199: name: 
              200: name: dev
              201: operator: ->
              202: name: flags
       203: block: 
        204: block_content: 
         205: continue: 
     206: expr_stmt: 
      207: expr: 
       208: operator: (
       209: name: di
       210: operator: +
       211: name: n
       212: operator: )
       213: operator: ->
       214: name: id
       215: operator: =
       216: name: 
        217: name: dev
        218: operator: ->
        219: name: id
     220: expr_stmt: 
      221: expr: 
       222: operator: (
       223: name: di
       224: operator: +
       225: name: n
       226: operator: )
       227: operator: ->
       228: name: flags
       229: operator: =
       230: name: 
        231: name: dev
        232: operator: ->
        233: name: flags
     234: expr_stmt: 
      235: expr: 
       236: operator: (
       237: name: di
       238: operator: +
       239: name: n
       240: operator: )
       241: operator: ->
       242: name: state
       243: operator: =
       244: name: 
        245: name: dev
        246: operator: ->
        247: name: dlc
        248: operator: ->
        249: name: state
     250: expr_stmt: 
      251: expr: 
       252: operator: (
       253: name: di
       254: operator: +
       255: name: n
       256: operator: )
       257: operator: ->
       258: name: channel
       259: operator: =
       260: name: 
        261: name: dev
        262: operator: ->
        263: name: channel
     264: expr_stmt: 
      265: expr: 
       266: call: 
        267: name: bacpy
        268: argument_list: 
         269: argument: 
          270: expr: 
           271: operator: &
           272: operator: (
           273: name: di
           274: operator: +
           275: name: n
           276: operator: )
           277: operator: ->
           278: name: src
         279: argument: 
          280: expr: 
           281: operator: &
           282: name: 
            283: name: dev
            284: operator: ->
            285: name: src
     286: expr_stmt: 
      287: expr: 
       288: call: 
        289: name: bacpy
        290: argument_list: 
         291: argument: 
          292: expr: 
           293: operator: &
           294: operator: (
           295: name: di
           296: operator: +
           297: name: n
           298: operator: )
           299: operator: ->
           300: name: dst
         301: argument: 
          302: expr: 
           303: operator: &
           304: name: 
            305: name: dev
            306: operator: ->
            307: name: dst
     308: if_stmt: 
      309: if: 
       310: condition: 
        311: expr: 
         312: operator: ++
         313: name: n
         314: operator: >=
         315: name: dev_num
       316: block: 
        317: block_content: 
         318: break: 
   319: expr_stmt: 
    320: expr: 
     321: call: 
      322: name: spin_unlock
      323: argument_list: 
       324: argument: 
        325: expr: 
         326: operator: &
         327: name: rfcomm_dev_lock
   328: expr_stmt: 
    329: expr: 
     330: name: 
      331: name: dl
      332: operator: ->
      333: name: dev_num
     334: operator: =
     335: name: n
   336: expr_stmt: 
    337: expr: 
     338: name: size
     339: operator: =
     340: sizeof: 
      341: argument_list: 
       342: argument: 
        343: expr: 
         344: operator: *
         345: name: dl
     346: operator: +
     347: name: n
     348: operator: *
     349: sizeof: 
      350: argument_list: 
       351: argument: 
        352: expr: 
         353: operator: *
         354: name: di
   355: expr_stmt: 
    356: expr: 
     357: name: err
     358: operator: =
     359: call: 
      360: name: copy_to_user
      361: argument_list: 
       362: argument: 
        363: expr: 
         364: name: arg
       365: argument: 
        366: expr: 
         367: name: dl
       368: argument: 
        369: expr: 
         370: name: size
   371: expr_stmt: 
    372: expr: 
     373: call: 
      374: name: kfree
      375: argument_list: 
       376: argument: 
        377: expr: 
         378: name: dl
   379: return: 
    380: expr: 
     381: ternary: 
      382: condition: 
       383: expr: 
        384: name: err
      385: then: 
       386: expr: 
        387: operator: -
        388: name: EFAULT
      389: else: 
       390: expr: 
        391: literal: 0

----------------------------------------
0: function: 
 1: type: 
  2: specifier: static
  3: name: int
 4: name: rfcomm_get_dev_list
 5: parameter_list: 
  6: parameter: 
   7: decl: 
    8: type: 
     9: name: void
     10: name: __user
     11: modifier: *
    12: name: arg
 13: block: 
  14: block_content: 
   15: decl_stmt: 
    16: decl: 
     17: type: 
      18: name: 
       19: name: struct
       20: name: rfcomm_dev
      21: modifier: *
     22: name: dev
   23: decl_stmt: 
    24: decl: 
     25: type: 
      26: name: 
       27: name: struct
       28: name: rfcomm_dev_list_req
      29: modifier: *
     30: name: dl
   31: decl_stmt: 
    32: decl: 
     33: type: 
      34: name: 
       35: name: struct
       36: name: rfcomm_dev_info
      37: modifier: *
     38: name: di
   39: decl_stmt: 
    40: decl: 
     41: type: 
      42: name: int
     43: name: n
     44: init: 
      45: expr: 
       46: literal: 0
    47: decl: 
     48: type: 
     49: name: size
    50: decl: 
     51: type: 
     52: name: err
   53: decl_stmt: 
    54: decl: 
     55: type: 
      56: name: u16
     57: name: dev_num
   58: expr_stmt: 
    59: expr: 
     60: call: 
      61: name: BT_DBG
      62: argument_list: 
       63: argument: 
        64: expr: 
         65: literal: ""
   66: if_stmt: 
    67: if: 
     68: condition: 
      69: expr: 
       70: call: 
        71: name: get_user
        72: argument_list: 
         73: argument: 
          74: expr: 
           75: name: dev_num
         76: argument: 
          77: expr: 
           78: operator: (
           79: name: u16
           80: name: __user
           81: operator: *
           82: operator: )
           83: name: arg
     84: block: 
      85: block_content: 
       86: return: 
        87: expr: 
         88: operator: -
         89: name: EFAULT
   90: if_stmt: 
    91: if: 
     92: condition: 
      93: expr: 
       94: operator: !
       95: name: dev_num
       96: operator: ||
       97: name: dev_num
       98: operator: >
       99: operator: (
       100: name: PAGE_SIZE
       101: operator: *
       102: literal: 4
       103: operator: )
       104: operator: /
       105: sizeof: 
        106: argument_list: 
         107: argument: 
          108: expr: 
           109: operator: *
           110: name: di
     111: block: 
      112: block_content: 
       113: return: 
        114: expr: 
         115: operator: -
         116: name: EINVAL
   117: expr_stmt: 
    118: expr: 
     119: name: size
     120: operator: =
     121: sizeof: 
      122: argument_list: 
       123: argument: 
        124: expr: 
         125: operator: *
         126: name: dl
     127: operator: +
     128: name: dev_num
     129: operator: *
     130: sizeof: 
      131: argument_list: 
       132: argument: 
        133: expr: 
         134: operator: *
         135: name: di
   136: expr_stmt: 
    137: expr: 
     138: name: dl
     139: operator: =
     140: call: 
      141: name: kzalloc
      142: argument_list: 
       143: argument: 
        144: expr: 
         145: name: size
       146: argument: 
        147: expr: 
         148: name: GFP_KERNEL
   149: if_stmt: 
    150: if: 
     151: condition: 
      152: expr: 
       153: operator: !
       154: name: dl
     155: block: 
      156: block_content: 
       157: return: 
        158: expr: 
         159: operator: -
         160: name: ENOMEM
   161: expr_stmt: 
    162: expr: 
     163: name: di
     164: operator: =
     165: name: 
      166: name: dl
      167: operator: ->
      168: name: dev_info
   169: expr_stmt: 
    170: expr: 
     171: call: 
      172: name: spin_lock
      173: argument_list: 
       174: argument: 
        175: expr: 
         176: operator: &
         177: name: rfcomm_dev_lock
   178: macro: 
    179: name: list_for_each_entry
    180: argument_list: 
     181: argument: 
     182: argument: 
     183: argument: 
   184: block: 
    185: block_content: 
     186: if_stmt: 
      187: if: 
       188: condition: 
        189: expr: 
         190: call: 
          191: name: test_bit
          192: argument_list: 
           193: argument: 
            194: expr: 
             195: name: RFCOMM_TTY_RELEASED
           196: argument: 
            197: expr: 
             198: operator: &
             199: name: 
              200: name: dev
              201: operator: ->
              202: name: flags
       203: block: 
        204: block_content: 
         205: continue: 
     206: expr_stmt: 
      207: expr: 
       208: operator: (
       209: name: di
       210: operator: +
       211: name: n
       212: operator: )
       213: operator: ->
       214: name: id
       215: operator: =
       216: name: 
        217: name: dev
        218: operator: ->
        219: name: id
     220: expr_stmt: 
      221: expr: 
       222: operator: (
       223: name: di
       224: operator: +
       225: name: n
       226: operator: )
       227: operator: ->
       228: name: flags
       229: operator: =
       230: name: 
        231: name: dev
        232: operator: ->
        233: name: flags
     234: expr_stmt: 
      235: expr: 
       236: operator: (
       237: name: di
       238: operator: +
       239: name: n
       240: operator: )
       241: operator: ->
       242: name: state
       243: operator: =
       244: name: 
        245: name: dev
        246: operator: ->
        247: name: dlc
        248: operator: ->
        249: name: state
     250: expr_stmt: 
      251: expr: 
       252: operator: (
       253: name: di
       254: operator: +
       255: name: n
       256: operator: )
       257: operator: ->
       258: name: channel
       259: operator: =
       260: name: 
        261: name: dev
        262: operator: ->
        263: name: channel
     264: expr_stmt: 
      265: expr: 
       266: call: 
        267: name: bacpy
        268: argument_list: 
         269: argument: 
          270: expr: 
           271: operator: &
           272: operator: (
           273: name: di
           274: operator: +
           275: name: n
           276: operator: )
           277: operator: ->
           278: name: src
         279: argument: 
          280: expr: 
           281: operator: &
           282: name: 
            283: name: dev
            284: operator: ->
            285: name: src
     286: expr_stmt: 
      287: expr: 
       288: call: 
        289: name: bacpy
        290: argument_list: 
         291: argument: 
          292: expr: 
           293: operator: &
           294: operator: (
           295: name: di
           296: operator: +
           297: name: n
           298: operator: )
           299: operator: ->
           300: name: dst
         301: argument: 
          302: expr: 
           303: operator: &
           304: name: 
            305: name: dev
            306: operator: ->
            307: name: dst
     308: if_stmt: 
      309: if: 
       310: condition: 
        311: expr: 
         312: operator: ++
         313: name: n
         314: operator: >=
         315: name: dev_num
       316: block: 
        317: block_content: 
         318: break: 
   319: expr_stmt: 
    320: expr: 
     321: call: 
      322: name: spin_unlock
      323: argument_list: 
       324: argument: 
        325: expr: 
         326: operator: &
         327: name: rfcomm_dev_lock
   328: expr_stmt: 
    329: expr: 
     330: name: 
      331: name: dl
      332: operator: ->
      333: name: dev_num
     334: operator: =
     335: name: n
   336: expr_stmt: 
    337: expr: 
     338: name: size
     339: operator: =
     340: sizeof: 
      341: argument_list: 
       342: argument: 
        343: expr: 
         344: operator: *
         345: name: dl
     346: operator: +
     347: name: n
     348: operator: *
     349: sizeof: 
      350: argument_list: 
       351: argument: 
        352: expr: 
         353: operator: *
         354: name: di
   355: expr_stmt: 
    356: expr: 
     357: name: err
     358: operator: =
     359: call: 
      360: name: copy_to_user
      361: argument_list: 
       362: argument: 
        363: expr: 
         364: name: arg
       365: argument: 
        366: expr: 
         367: name: dl
       368: argument: 
        369: expr: 
         370: name: size
   371: expr_stmt: 
    372: expr: 
     373: call: 
      374: name: kfree
      375: argument_list: 
       376: argument: 
        377: expr: 
         378: name: dl
   379: return: 
    380: expr: 
     381: ternary: 
      382: condition: 
       383: expr: 
        384: name: err
      385: then: 
       386: expr: 
        387: operator: -
        388: name: EFAULT
      389: else: 
       390: expr: 
        391: literal: 0
=====
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: 
      6: name: struct
      7: name: rfcomm_dev
     8: modifier: *
    9: name: dev
  10: decl_stmt: 
   11: decl: 
    12: type: 
     13: name: 
      14: name: struct
      15: name: rfcomm_dev_list_req
     16: modifier: *
    17: name: dl
  18: decl_stmt: 
   19: decl: 
    20: type: 
     21: name: 
      22: name: struct
      23: name: rfcomm_dev_info
     24: modifier: *
    25: name: di
  26: decl_stmt: 
   27: decl: 
    28: type: 
     29: name: int
    30: name: n
    31: init: 
     32: expr: 
      33: literal: 0
   34: decl: 
    35: type: 
    36: name: size
   37: decl: 
    38: type: 
    39: name: err
  40: decl_stmt: 
   41: decl: 
    42: type: 
     43: name: u16
    44: name: dev_num
  45: expr_stmt: 
   46: expr: 
    47: call: 
     48: name: BT_DBG
     49: argument_list: 
      50: argument: 
       51: expr: 
        52: literal: ""
  53: if_stmt: 
   54: if: 
    55: condition: 
     56: expr: 
      57: call: 
       58: name: get_user
       59: argument_list: 
        60: argument: 
         61: expr: 
          62: name: dev_num
        63: argument: 
         64: expr: 
          65: operator: (
          66: name: u16
          67: name: __user
          68: operator: *
          69: operator: )
          70: name: arg
    71: block: 
     72: block_content: 
      73: return: 
       74: expr: 
        75: operator: -
        76: name: EFAULT
  77: if_stmt: 
   78: if: 
    79: condition: 
     80: expr: 
      81: operator: !
      82: name: dev_num
      83: operator: ||
      84: name: dev_num
      85: operator: >
      86: operator: (
      87: name: PAGE_SIZE
      88: operator: *
      89: literal: 4
      90: operator: )
      91: operator: /
      92: sizeof: 
       93: argument_list: 
        94: argument: 
         95: expr: 
          96: operator: *
          97: name: di
    98: block: 
     99: block_content: 
      100: return: 
       101: expr: 
        102: operator: -
        103: name: EINVAL
  104: expr_stmt: 
   105: expr: 
    106: name: size
    107: operator: =
    108: sizeof: 
     109: argument_list: 
      110: argument: 
       111: expr: 
        112: operator: *
        113: name: dl
    114: operator: +
    115: name: dev_num
    116: operator: *
    117: sizeof: 
     118: argument_list: 
      119: argument: 
       120: expr: 
        121: operator: *
        122: name: di
  123: expr_stmt: 
   124: expr: 
    125: name: dl
    126: operator: =
    127: call: 
     128: name: kmalloc
     129: argument_list: 
      130: argument: 
       131: expr: 
        132: name: size
      133: argument: 
       134: expr: 
        135: name: GFP_KERNEL
  136: if_stmt: 
   137: if: 
    138: condition: 
     139: expr: 
      140: operator: !
      141: name: dl
    142: block: 
     143: block_content: 
      144: return: 
       145: expr: 
        146: operator: -
        147: name: ENOMEM
  148: expr_stmt: 
   149: expr: 
    150: name: di
    151: operator: =
    152: name: 
     153: name: dl
     154: operator: ->
     155: name: dev_info
  156: expr_stmt: 
   157: expr: 
    158: call: 
     159: name: spin_lock
     160: argument_list: 
      161: argument: 
       162: expr: 
        163: operator: &
        164: name: rfcomm_dev_lock
  165: macro: 
   166: name: list_for_each_entry
   167: argument_list: 
    168: argument: 
    169: argument: 
    170: argument: 
  171: block: 
   172: block_content: 
    173: if_stmt: 
     174: if: 
      175: condition: 
       176: expr: 
        177: call: 
         178: name: test_bit
         179: argument_list: 
          180: argument: 
           181: expr: 
            182: name: RFCOMM_TTY_RELEASED
          183: argument: 
           184: expr: 
            185: operator: &
            186: name: 
             187: name: dev
             188: operator: ->
             189: name: flags
      190: block: 
       191: block_content: 
        192: continue: 
    193: expr_stmt: 
     194: expr: 
      195: operator: (
      196: name: di
      197: operator: +
      198: name: n
      199: operator: )
      200: operator: ->
      201: name: id
      202: operator: =
      203: name: 
       204: name: dev
       205: operator: ->
       206: name: id
    207: expr_stmt: 
     208: expr: 
      209: operator: (
      210: name: di
      211: operator: +
      212: name: n
      213: operator: )
      214: operator: ->
      215: name: flags
      216: operator: =
      217: name: 
       218: name: dev
       219: operator: ->
       220: name: flags
    221: expr_stmt: 
     222: expr: 
      223: operator: (
      224: name: di
      225: operator: +
      226: name: n
      227: operator: )
      228: operator: ->
      229: name: state
      230: operator: =
      231: name: 
       232: name: dev
       233: operator: ->
       234: name: dlc
       235: operator: ->
       236: name: state
    237: expr_stmt: 
     238: expr: 
      239: operator: (
      240: name: di
      241: operator: +
      242: name: n
      243: operator: )
      244: operator: ->
      245: name: channel
      246: operator: =
      247: name: 
       248: name: dev
       249: operator: ->
       250: name: channel
    251: expr_stmt: 
     252: expr: 
      253: call: 
       254: name: bacpy
       255: argument_list: 
        256: argument: 
         257: expr: 
          258: operator: &
          259: operator: (
          260: name: di
          261: operator: +
          262: name: n
          263: operator: )
          264: operator: ->
          265: name: src
        266: argument: 
         267: expr: 
          268: operator: &
          269: name: 
           270: name: dev
           271: operator: ->
           272: name: src
    273: expr_stmt: 
     274: expr: 
      275: call: 
       276: name: bacpy
       277: argument_list: 
        278: argument: 
         279: expr: 
          280: operator: &
          281: operator: (
          282: name: di
          283: operator: +
          284: name: n
          285: operator: )
          286: operator: ->
          287: name: dst
        288: argument: 
         289: expr: 
          290: operator: &
          291: name: 
           292: name: dev
           293: operator: ->
           294: name: dst
    295: if_stmt: 
     296: if: 
      297: condition: 
       298: expr: 
        299: operator: ++
        300: name: n
        301: operator: >=
        302: name: dev_num
      303: block: 
       304: block_content: 
        305: break: 
  306: expr_stmt: 
   307: expr: 
    308: call: 
     309: name: spin_unlock
     310: argument_list: 
      311: argument: 
       312: expr: 
        313: operator: &
        314: name: rfcomm_dev_lock
  315: expr_stmt: 
   316: expr: 
    317: name: 
     318: name: dl
     319: operator: ->
     320: name: dev_num
    321: operator: =
    322: name: n
  323: expr_stmt: 
   324: expr: 
    325: name: size
    326: operator: =
    327: sizeof: 
     328: argument_list: 
      329: argument: 
       330: expr: 
        331: operator: *
        332: name: dl
    333: operator: +
    334: name: n
    335: operator: *
    336: sizeof: 
     337: argument_list: 
      338: argument: 
       339: expr: 
        340: operator: *
        341: name: di
  342: expr_stmt: 
   343: expr: 
    344: name: err
    345: operator: =
    346: call: 
     347: name: copy_to_user
     348: argument_list: 
      349: argument: 
       350: expr: 
        351: name: arg
      352: argument: 
       353: expr: 
        354: name: dl
      355: argument: 
       356: expr: 
        357: name: size
  358: expr_stmt: 
   359: expr: 
    360: call: 
     361: name: kfree
     362: argument_list: 
      363: argument: 
       364: expr: 
        365: name: dl
  366: return: 
   367: expr: 
    368: ternary: 
     369: condition: 
      370: expr: 
       371: name: err
     372: then: 
      373: expr: 
       374: operator: -
       375: name: EFAULT
     376: else: 
      377: expr: 
       378: literal: 0

----------------------------------------
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: 
      6: name: struct
      7: name: rfcomm_dev
     8: modifier: *
    9: name: dev
  10: decl_stmt: 
   11: decl: 
    12: type: 
     13: name: 
      14: name: struct
      15: name: rfcomm_dev_list_req
     16: modifier: *
    17: name: dl
  18: decl_stmt: 
   19: decl: 
    20: type: 
     21: name: 
      22: name: struct
      23: name: rfcomm_dev_info
     24: modifier: *
    25: name: di
  26: decl_stmt: 
   27: decl: 
    28: type: 
     29: name: int
    30: name: n
    31: init: 
     32: expr: 
      33: literal: 0
   34: decl: 
    35: type: 
    36: name: size
   37: decl: 
    38: type: 
    39: name: err
  40: decl_stmt: 
   41: decl: 
    42: type: 
     43: name: u16
    44: name: dev_num
  45: expr_stmt: 
   46: expr: 
    47: call: 
     48: name: BT_DBG
     49: argument_list: 
      50: argument: 
       51: expr: 
        52: literal: ""
  53: if_stmt: 
   54: if: 
    55: condition: 
     56: expr: 
      57: call: 
       58: name: get_user
       59: argument_list: 
        60: argument: 
         61: expr: 
          62: name: dev_num
        63: argument: 
         64: expr: 
          65: operator: (
          66: name: u16
          67: name: __user
          68: operator: *
          69: operator: )
          70: name: arg
    71: block: 
     72: block_content: 
      73: return: 
       74: expr: 
        75: operator: -
        76: name: EFAULT
  77: if_stmt: 
   78: if: 
    79: condition: 
     80: expr: 
      81: operator: !
      82: name: dev_num
      83: operator: ||
      84: name: dev_num
      85: operator: >
      86: operator: (
      87: name: PAGE_SIZE
      88: operator: *
      89: literal: 4
      90: operator: )
      91: operator: /
      92: sizeof: 
       93: argument_list: 
        94: argument: 
         95: expr: 
          96: operator: *
          97: name: di
    98: block: 
     99: block_content: 
      100: return: 
       101: expr: 
        102: operator: -
        103: name: EINVAL
  104: expr_stmt: 
   105: expr: 
    106: name: size
    107: operator: =
    108: sizeof: 
     109: argument_list: 
      110: argument: 
       111: expr: 
        112: operator: *
        113: name: dl
    114: operator: +
    115: name: dev_num
    116: operator: *
    117: sizeof: 
     118: argument_list: 
      119: argument: 
       120: expr: 
        121: operator: *
        122: name: di
  123: expr_stmt: 
   124: expr: 
    125: name: dl
    126: operator: =
    127: call: 
     128: name: kzalloc
     129: argument_list: 
      130: argument: 
       131: expr: 
        132: name: size
      133: argument: 
       134: expr: 
        135: name: GFP_KERNEL
  136: if_stmt: 
   137: if: 
    138: condition: 
     139: expr: 
      140: operator: !
      141: name: dl
    142: block: 
     143: block_content: 
      144: return: 
       145: expr: 
        146: operator: -
        147: name: ENOMEM
  148: expr_stmt: 
   149: expr: 
    150: name: di
    151: operator: =
    152: name: 
     153: name: dl
     154: operator: ->
     155: name: dev_info
  156: expr_stmt: 
   157: expr: 
    158: call: 
     159: name: spin_lock
     160: argument_list: 
      161: argument: 
       162: expr: 
        163: operator: &
        164: name: rfcomm_dev_lock
  165: macro: 
   166: name: list_for_each_entry
   167: argument_list: 
    168: argument: 
    169: argument: 
    170: argument: 
  171: block: 
   172: block_content: 
    173: if_stmt: 
     174: if: 
      175: condition: 
       176: expr: 
        177: call: 
         178: name: test_bit
         179: argument_list: 
          180: argument: 
           181: expr: 
            182: name: RFCOMM_TTY_RELEASED
          183: argument: 
           184: expr: 
            185: operator: &
            186: name: 
             187: name: dev
             188: operator: ->
             189: name: flags
      190: block: 
       191: block_content: 
        192: continue: 
    193: expr_stmt: 
     194: expr: 
      195: operator: (
      196: name: di
      197: operator: +
      198: name: n
      199: operator: )
      200: operator: ->
      201: name: id
      202: operator: =
      203: name: 
       204: name: dev
       205: operator: ->
       206: name: id
    207: expr_stmt: 
     208: expr: 
      209: operator: (
      210: name: di
      211: operator: +
      212: name: n
      213: operator: )
      214: operator: ->
      215: name: flags
      216: operator: =
      217: name: 
       218: name: dev
       219: operator: ->
       220: name: flags
    221: expr_stmt: 
     222: expr: 
      223: operator: (
      224: name: di
      225: operator: +
      226: name: n
      227: operator: )
      228: operator: ->
      229: name: state
      230: operator: =
      231: name: 
       232: name: dev
       233: operator: ->
       234: name: dlc
       235: operator: ->
       236: name: state
    237: expr_stmt: 
     238: expr: 
      239: operator: (
      240: name: di
      241: operator: +
      242: name: n
      243: operator: )
      244: operator: ->
      245: name: channel
      246: operator: =
      247: name: 
       248: name: dev
       249: operator: ->
       250: name: channel
    251: expr_stmt: 
     252: expr: 
      253: call: 
       254: name: bacpy
       255: argument_list: 
        256: argument: 
         257: expr: 
          258: operator: &
          259: operator: (
          260: name: di
          261: operator: +
          262: name: n
          263: operator: )
          264: operator: ->
          265: name: src
        266: argument: 
         267: expr: 
          268: operator: &
          269: name: 
           270: name: dev
           271: operator: ->
           272: name: src
    273: expr_stmt: 
     274: expr: 
      275: call: 
       276: name: bacpy
       277: argument_list: 
        278: argument: 
         279: expr: 
          280: operator: &
          281: operator: (
          282: name: di
          283: operator: +
          284: name: n
          285: operator: )
          286: operator: ->
          287: name: dst
        288: argument: 
         289: expr: 
          290: operator: &
          291: name: 
           292: name: dev
           293: operator: ->
           294: name: dst
    295: if_stmt: 
     296: if: 
      297: condition: 
       298: expr: 
        299: operator: ++
        300: name: n
        301: operator: >=
        302: name: dev_num
      303: block: 
       304: block_content: 
        305: break: 
  306: expr_stmt: 
   307: expr: 
    308: call: 
     309: name: spin_unlock
     310: argument_list: 
      311: argument: 
       312: expr: 
        313: operator: &
        314: name: rfcomm_dev_lock
  315: expr_stmt: 
   316: expr: 
    317: name: 
     318: name: dl
     319: operator: ->
     320: name: dev_num
    321: operator: =
    322: name: n
  323: expr_stmt: 
   324: expr: 
    325: name: size
    326: operator: =
    327: sizeof: 
     328: argument_list: 
      329: argument: 
       330: expr: 
        331: operator: *
        332: name: dl
    333: operator: +
    334: name: n
    335: operator: *
    336: sizeof: 
     337: argument_list: 
      338: argument: 
       339: expr: 
        340: operator: *
        341: name: di
  342: expr_stmt: 
   343: expr: 
    344: name: err
    345: operator: =
    346: call: 
     347: name: copy_to_user
     348: argument_list: 
      349: argument: 
       350: expr: 
        351: name: arg
      352: argument: 
       353: expr: 
        354: name: dl
      355: argument: 
       356: expr: 
        357: name: size
  358: expr_stmt: 
   359: expr: 
    360: call: 
     361: name: kfree
     362: argument_list: 
      363: argument: 
       364: expr: 
        365: name: dl
  366: return: 
   367: expr: 
    368: ternary: 
     369: condition: 
      370: expr: 
       371: name: err
     372: then: 
      373: expr: 
       374: operator: -
       375: name: EFAULT
     376: else: 
      377: expr: 
       378: literal: 0
=====
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: 
     5: name: struct
     6: name: rfcomm_dev
    7: modifier: *
   8: name: dev
 9: decl_stmt: 
  10: decl: 
   11: type: 
    12: name: 
     13: name: struct
     14: name: rfcomm_dev_list_req
    15: modifier: *
   16: name: dl
 17: decl_stmt: 
  18: decl: 
   19: type: 
    20: name: 
     21: name: struct
     22: name: rfcomm_dev_info
    23: modifier: *
   24: name: di
 25: decl_stmt: 
  26: decl: 
   27: type: 
    28: name: int
   29: name: n
   30: init: 
    31: expr: 
     32: literal: 0
  33: decl: 
   34: type: 
   35: name: size
  36: decl: 
   37: type: 
   38: name: err
 39: decl_stmt: 
  40: decl: 
   41: type: 
    42: name: u16
   43: name: dev_num
 44: expr_stmt: 
  45: expr: 
   46: call: 
    47: name: BT_DBG
    48: argument_list: 
     49: argument: 
      50: expr: 
       51: literal: ""
 52: if_stmt: 
  53: if: 
   54: condition: 
    55: expr: 
     56: call: 
      57: name: get_user
      58: argument_list: 
       59: argument: 
        60: expr: 
         61: name: dev_num
       62: argument: 
        63: expr: 
         64: operator: (
         65: name: u16
         66: name: __user
         67: operator: *
         68: operator: )
         69: name: arg
   70: block: 
    71: block_content: 
     72: return: 
      73: expr: 
       74: operator: -
       75: name: EFAULT
 76: if_stmt: 
  77: if: 
   78: condition: 
    79: expr: 
     80: operator: !
     81: name: dev_num
     82: operator: ||
     83: name: dev_num
     84: operator: >
     85: operator: (
     86: name: PAGE_SIZE
     87: operator: *
     88: literal: 4
     89: operator: )
     90: operator: /
     91: sizeof: 
      92: argument_list: 
       93: argument: 
        94: expr: 
         95: operator: *
         96: name: di
   97: block: 
    98: block_content: 
     99: return: 
      100: expr: 
       101: operator: -
       102: name: EINVAL
 103: expr_stmt: 
  104: expr: 
   105: name: size
   106: operator: =
   107: sizeof: 
    108: argument_list: 
     109: argument: 
      110: expr: 
       111: operator: *
       112: name: dl
   113: operator: +
   114: name: dev_num
   115: operator: *
   116: sizeof: 
    117: argument_list: 
     118: argument: 
      119: expr: 
       120: operator: *
       121: name: di
 122: expr_stmt: 
  123: expr: 
   124: name: dl
   125: operator: =
   126: call: 
    127: name: kmalloc
    128: argument_list: 
     129: argument: 
      130: expr: 
       131: name: size
     132: argument: 
      133: expr: 
       134: name: GFP_KERNEL
 135: if_stmt: 
  136: if: 
   137: condition: 
    138: expr: 
     139: operator: !
     140: name: dl
   141: block: 
    142: block_content: 
     143: return: 
      144: expr: 
       145: operator: -
       146: name: ENOMEM
 147: expr_stmt: 
  148: expr: 
   149: name: di
   150: operator: =
   151: name: 
    152: name: dl
    153: operator: ->
    154: name: dev_info
 155: expr_stmt: 
  156: expr: 
   157: call: 
    158: name: spin_lock
    159: argument_list: 
     160: argument: 
      161: expr: 
       162: operator: &
       163: name: rfcomm_dev_lock
 164: macro: 
  165: name: list_for_each_entry
  166: argument_list: 
   167: argument: 
   168: argument: 
   169: argument: 
 170: block: 
  171: block_content: 
   172: if_stmt: 
    173: if: 
     174: condition: 
      175: expr: 
       176: call: 
        177: name: test_bit
        178: argument_list: 
         179: argument: 
          180: expr: 
           181: name: RFCOMM_TTY_RELEASED
         182: argument: 
          183: expr: 
           184: operator: &
           185: name: 
            186: name: dev
            187: operator: ->
            188: name: flags
     189: block: 
      190: block_content: 
       191: continue: 
   192: expr_stmt: 
    193: expr: 
     194: operator: (
     195: name: di
     196: operator: +
     197: name: n
     198: operator: )
     199: operator: ->
     200: name: id
     201: operator: =
     202: name: 
      203: name: dev
      204: operator: ->
      205: name: id
   206: expr_stmt: 
    207: expr: 
     208: operator: (
     209: name: di
     210: operator: +
     211: name: n
     212: operator: )
     213: operator: ->
     214: name: flags
     215: operator: =
     216: name: 
      217: name: dev
      218: operator: ->
      219: name: flags
   220: expr_stmt: 
    221: expr: 
     222: operator: (
     223: name: di
     224: operator: +
     225: name: n
     226: operator: )
     227: operator: ->
     228: name: state
     229: operator: =
     230: name: 
      231: name: dev
      232: operator: ->
      233: name: dlc
      234: operator: ->
      235: name: state
   236: expr_stmt: 
    237: expr: 
     238: operator: (
     239: name: di
     240: operator: +
     241: name: n
     242: operator: )
     243: operator: ->
     244: name: channel
     245: operator: =
     246: name: 
      247: name: dev
      248: operator: ->
      249: name: channel
   250: expr_stmt: 
    251: expr: 
     252: call: 
      253: name: bacpy
      254: argument_list: 
       255: argument: 
        256: expr: 
         257: operator: &
         258: operator: (
         259: name: di
         260: operator: +
         261: name: n
         262: operator: )
         263: operator: ->
         264: name: src
       265: argument: 
        266: expr: 
         267: operator: &
         268: name: 
          269: name: dev
          270: operator: ->
          271: name: src
   272: expr_stmt: 
    273: expr: 
     274: call: 
      275: name: bacpy
      276: argument_list: 
       277: argument: 
        278: expr: 
         279: operator: &
         280: operator: (
         281: name: di
         282: operator: +
         283: name: n
         284: operator: )
         285: operator: ->
         286: name: dst
       287: argument: 
        288: expr: 
         289: operator: &
         290: name: 
          291: name: dev
          292: operator: ->
          293: name: dst
   294: if_stmt: 
    295: if: 
     296: condition: 
      297: expr: 
       298: operator: ++
       299: name: n
       300: operator: >=
       301: name: dev_num
     302: block: 
      303: block_content: 
       304: break: 
 305: expr_stmt: 
  306: expr: 
   307: call: 
    308: name: spin_unlock
    309: argument_list: 
     310: argument: 
      311: expr: 
       312: operator: &
       313: name: rfcomm_dev_lock
 314: expr_stmt: 
  315: expr: 
   316: name: 
    317: name: dl
    318: operator: ->
    319: name: dev_num
   320: operator: =
   321: name: n
 322: expr_stmt: 
  323: expr: 
   324: name: size
   325: operator: =
   326: sizeof: 
    327: argument_list: 
     328: argument: 
      329: expr: 
       330: operator: *
       331: name: dl
   332: operator: +
   333: name: n
   334: operator: *
   335: sizeof: 
    336: argument_list: 
     337: argument: 
      338: expr: 
       339: operator: *
       340: name: di
 341: expr_stmt: 
  342: expr: 
   343: name: err
   344: operator: =
   345: call: 
    346: name: copy_to_user
    347: argument_list: 
     348: argument: 
      349: expr: 
       350: name: arg
     351: argument: 
      352: expr: 
       353: name: dl
     354: argument: 
      355: expr: 
       356: name: size
 357: expr_stmt: 
  358: expr: 
   359: call: 
    360: name: kfree
    361: argument_list: 
     362: argument: 
      363: expr: 
       364: name: dl
 365: return: 
  366: expr: 
   367: ternary: 
    368: condition: 
     369: expr: 
      370: name: err
    371: then: 
     372: expr: 
      373: operator: -
      374: name: EFAULT
    375: else: 
     376: expr: 
      377: literal: 0

----------------------------------------
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: 
     5: name: struct
     6: name: rfcomm_dev
    7: modifier: *
   8: name: dev
 9: decl_stmt: 
  10: decl: 
   11: type: 
    12: name: 
     13: name: struct
     14: name: rfcomm_dev_list_req
    15: modifier: *
   16: name: dl
 17: decl_stmt: 
  18: decl: 
   19: type: 
    20: name: 
     21: name: struct
     22: name: rfcomm_dev_info
    23: modifier: *
   24: name: di
 25: decl_stmt: 
  26: decl: 
   27: type: 
    28: name: int
   29: name: n
   30: init: 
    31: expr: 
     32: literal: 0
  33: decl: 
   34: type: 
   35: name: size
  36: decl: 
   37: type: 
   38: name: err
 39: decl_stmt: 
  40: decl: 
   41: type: 
    42: name: u16
   43: name: dev_num
 44: expr_stmt: 
  45: expr: 
   46: call: 
    47: name: BT_DBG
    48: argument_list: 
     49: argument: 
      50: expr: 
       51: literal: ""
 52: if_stmt: 
  53: if: 
   54: condition: 
    55: expr: 
     56: call: 
      57: name: get_user
      58: argument_list: 
       59: argument: 
        60: expr: 
         61: name: dev_num
       62: argument: 
        63: expr: 
         64: operator: (
         65: name: u16
         66: name: __user
         67: operator: *
         68: operator: )
         69: name: arg
   70: block: 
    71: block_content: 
     72: return: 
      73: expr: 
       74: operator: -
       75: name: EFAULT
 76: if_stmt: 
  77: if: 
   78: condition: 
    79: expr: 
     80: operator: !
     81: name: dev_num
     82: operator: ||
     83: name: dev_num
     84: operator: >
     85: operator: (
     86: name: PAGE_SIZE
     87: operator: *
     88: literal: 4
     89: operator: )
     90: operator: /
     91: sizeof: 
      92: argument_list: 
       93: argument: 
        94: expr: 
         95: operator: *
         96: name: di
   97: block: 
    98: block_content: 
     99: return: 
      100: expr: 
       101: operator: -
       102: name: EINVAL
 103: expr_stmt: 
  104: expr: 
   105: name: size
   106: operator: =
   107: sizeof: 
    108: argument_list: 
     109: argument: 
      110: expr: 
       111: operator: *
       112: name: dl
   113: operator: +
   114: name: dev_num
   115: operator: *
   116: sizeof: 
    117: argument_list: 
     118: argument: 
      119: expr: 
       120: operator: *
       121: name: di
 122: expr_stmt: 
  123: expr: 
   124: name: dl
   125: operator: =
   126: call: 
    127: name: kzalloc
    128: argument_list: 
     129: argument: 
      130: expr: 
       131: name: size
     132: argument: 
      133: expr: 
       134: name: GFP_KERNEL
 135: if_stmt: 
  136: if: 
   137: condition: 
    138: expr: 
     139: operator: !
     140: name: dl
   141: block: 
    142: block_content: 
     143: return: 
      144: expr: 
       145: operator: -
       146: name: ENOMEM
 147: expr_stmt: 
  148: expr: 
   149: name: di
   150: operator: =
   151: name: 
    152: name: dl
    153: operator: ->
    154: name: dev_info
 155: expr_stmt: 
  156: expr: 
   157: call: 
    158: name: spin_lock
    159: argument_list: 
     160: argument: 
      161: expr: 
       162: operator: &
       163: name: rfcomm_dev_lock
 164: macro: 
  165: name: list_for_each_entry
  166: argument_list: 
   167: argument: 
   168: argument: 
   169: argument: 
 170: block: 
  171: block_content: 
   172: if_stmt: 
    173: if: 
     174: condition: 
      175: expr: 
       176: call: 
        177: name: test_bit
        178: argument_list: 
         179: argument: 
          180: expr: 
           181: name: RFCOMM_TTY_RELEASED
         182: argument: 
          183: expr: 
           184: operator: &
           185: name: 
            186: name: dev
            187: operator: ->
            188: name: flags
     189: block: 
      190: block_content: 
       191: continue: 
   192: expr_stmt: 
    193: expr: 
     194: operator: (
     195: name: di
     196: operator: +
     197: name: n
     198: operator: )
     199: operator: ->
     200: name: id
     201: operator: =
     202: name: 
      203: name: dev
      204: operator: ->
      205: name: id
   206: expr_stmt: 
    207: expr: 
     208: operator: (
     209: name: di
     210: operator: +
     211: name: n
     212: operator: )
     213: operator: ->
     214: name: flags
     215: operator: =
     216: name: 
      217: name: dev
      218: operator: ->
      219: name: flags
   220: expr_stmt: 
    221: expr: 
     222: operator: (
     223: name: di
     224: operator: +
     225: name: n
     226: operator: )
     227: operator: ->
     228: name: state
     229: operator: =
     230: name: 
      231: name: dev
      232: operator: ->
      233: name: dlc
      234: operator: ->
      235: name: state
   236: expr_stmt: 
    237: expr: 
     238: operator: (
     239: name: di
     240: operator: +
     241: name: n
     242: operator: )
     243: operator: ->
     244: name: channel
     245: operator: =
     246: name: 
      247: name: dev
      248: operator: ->
      249: name: channel
   250: expr_stmt: 
    251: expr: 
     252: call: 
      253: name: bacpy
      254: argument_list: 
       255: argument: 
        256: expr: 
         257: operator: &
         258: operator: (
         259: name: di
         260: operator: +
         261: name: n
         262: operator: )
         263: operator: ->
         264: name: src
       265: argument: 
        266: expr: 
         267: operator: &
         268: name: 
          269: name: dev
          270: operator: ->
          271: name: src
   272: expr_stmt: 
    273: expr: 
     274: call: 
      275: name: bacpy
      276: argument_list: 
       277: argument: 
        278: expr: 
         279: operator: &
         280: operator: (
         281: name: di
         282: operator: +
         283: name: n
         284: operator: )
         285: operator: ->
         286: name: dst
       287: argument: 
        288: expr: 
         289: operator: &
         290: name: 
          291: name: dev
          292: operator: ->
          293: name: dst
   294: if_stmt: 
    295: if: 
     296: condition: 
      297: expr: 
       298: operator: ++
       299: name: n
       300: operator: >=
       301: name: dev_num
     302: block: 
      303: block_content: 
       304: break: 
 305: expr_stmt: 
  306: expr: 
   307: call: 
    308: name: spin_unlock
    309: argument_list: 
     310: argument: 
      311: expr: 
       312: operator: &
       313: name: rfcomm_dev_lock
 314: expr_stmt: 
  315: expr: 
   316: name: 
    317: name: dl
    318: operator: ->
    319: name: dev_num
   320: operator: =
   321: name: n
 322: expr_stmt: 
  323: expr: 
   324: name: size
   325: operator: =
   326: sizeof: 
    327: argument_list: 
     328: argument: 
      329: expr: 
       330: operator: *
       331: name: dl
   332: operator: +
   333: name: n
   334: operator: *
   335: sizeof: 
    336: argument_list: 
     337: argument: 
      338: expr: 
       339: operator: *
       340: name: di
 341: expr_stmt: 
  342: expr: 
   343: name: err
   344: operator: =
   345: call: 
    346: name: copy_to_user
    347: argument_list: 
     348: argument: 
      349: expr: 
       350: name: arg
     351: argument: 
      352: expr: 
       353: name: dl
     354: argument: 
      355: expr: 
       356: name: size
 357: expr_stmt: 
  358: expr: 
   359: call: 
    360: name: kfree
    361: argument_list: 
     362: argument: 
      363: expr: 
       364: name: dl
 365: return: 
  366: expr: 
   367: ternary: 
    368: condition: 
     369: expr: 
      370: name: err
    371: then: 
     372: expr: 
      373: operator: -
      374: name: EFAULT
    375: else: 
     376: expr: 
      377: literal: 0
=====
0: expr_stmt: 
 1: expr: 
  2: name: dl
  3: operator: =
  4: call: 
   5: name: kmalloc
   6: argument_list: 
    7: argument: 
     8: expr: 
      9: name: size
    10: argument: 
     11: expr: 
      12: name: GFP_KERNEL

----------------------------------------
0: expr_stmt: 
 1: expr: 
  2: name: dl
  3: operator: =
  4: call: 
   5: name: kzalloc
   6: argument_list: 
    7: argument: 
     8: expr: 
      9: name: size
    10: argument: 
     11: expr: 
      12: name: GFP_KERNEL
=====
0: expr: 
 1: name: dl
 2: operator: =
 3: call: 
  4: name: kmalloc
  5: argument_list: 
   6: argument: 
    7: expr: 
     8: name: size
   9: argument: 
    10: expr: 
     11: name: GFP_KERNEL

----------------------------------------
0: expr: 
 1: name: dl
 2: operator: =
 3: call: 
  4: name: kzalloc
  5: argument_list: 
   6: argument: 
    7: expr: 
     8: name: size
   9: argument: 
    10: expr: 
     11: name: GFP_KERNEL
=====
0: call: 
 1: name: kmalloc
 2: argument_list: 
  3: argument: 
   4: expr: 
    5: name: size
  6: argument: 
   7: expr: 
    8: name: GFP_KERNEL

----------------------------------------
0: call: 
 1: name: kzalloc
 2: argument_list: 
  3: argument: 
   4: expr: 
    5: name: size
  6: argument: 
   7: expr: 
    8: name: GFP_KERNEL
=====
0: name: kmalloc

----------------------------------------
0: name: kzalloc
=====
