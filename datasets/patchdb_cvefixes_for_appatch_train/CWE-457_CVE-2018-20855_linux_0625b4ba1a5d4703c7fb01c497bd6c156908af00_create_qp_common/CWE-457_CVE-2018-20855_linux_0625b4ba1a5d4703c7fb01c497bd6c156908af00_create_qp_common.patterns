0: unit: 
 1: function: 
  2: type: 
   3: specifier: static
   4: name: int
  5: name: create_qp_common
  6: parameter_list: 
   7: parameter: 
    8: decl: 
     9: type: 
      10: name: 
       11: name: struct
       12: name: mlx5_ib_dev
      13: modifier: *
     14: name: dev
   15: parameter: 
    16: decl: 
     17: type: 
      18: name: 
       19: name: struct
       20: name: ib_pd
      21: modifier: *
     22: name: pd
   23: parameter: 
    24: decl: 
     25: type: 
      26: name: 
       27: name: struct
       28: name: ib_qp_init_attr
      29: modifier: *
     30: name: init_attr
   31: parameter: 
    32: decl: 
     33: type: 
      34: name: 
       35: name: struct
       36: name: ib_udata
      37: modifier: *
     38: name: udata
   39: parameter: 
    40: decl: 
     41: type: 
      42: name: 
       43: name: struct
       44: name: mlx5_ib_qp
      45: modifier: *
     46: name: qp
  47: block: 
   48: block_content: 
    49: decl_stmt: 
     50: decl: 
      51: type: 
       52: name: 
        53: name: struct
        54: name: mlx5_ib_resources
       55: modifier: *
      56: name: devr
      57: init: 
       58: expr: 
        59: operator: &
        60: name: 
         61: name: dev
         62: operator: ->
         63: name: devr
    64: decl_stmt: 
     65: decl: 
      66: type: 
       67: name: int
      68: name: inlen
      69: init: 
       70: expr: 
        71: call: 
         72: name: MLX5_ST_SZ_BYTES
         73: argument_list: 
          74: argument: 
           75: expr: 
            76: name: create_qp_in
    77: decl_stmt: 
     78: decl: 
      79: type: 
       80: name: 
        81: name: struct
        82: name: mlx5_core_dev
       83: modifier: *
      84: name: mdev
      85: init: 
       86: expr: 
        87: name: 
         88: name: dev
         89: operator: ->
         90: name: mdev
    91: decl_stmt: 
     92: decl: 
      93: type: 
       94: name: 
        95: name: struct
        96: name: mlx5_ib_create_qp_resp
      97: name: resp
    98: decl_stmt: 
     99: decl: 
      100: type: 
       101: name: 
        102: name: struct
        103: name: mlx5_ib_cq
       104: modifier: *
      105: name: send_cq
    106: decl_stmt: 
     107: decl: 
      108: type: 
       109: name: 
        110: name: struct
        111: name: mlx5_ib_cq
       112: modifier: *
      113: name: recv_cq
    114: decl_stmt: 
     115: decl: 
      116: type: 
       117: name: unsigned
       118: name: long
      119: name: flags
    120: decl_stmt: 
     121: decl: 
      122: type: 
       123: name: u32
      124: name: uidx
      125: init: 
       126: expr: 
        127: name: MLX5_IB_DEFAULT_UIDX
    128: decl_stmt: 
     129: decl: 
      130: type: 
       131: name: 
        132: name: struct
        133: name: mlx5_ib_create_qp
      134: name: ucmd
    135: decl_stmt: 
     136: decl: 
      137: type: 
       138: name: 
        139: name: struct
        140: name: mlx5_ib_qp_base
       141: modifier: *
      142: name: base
    143: decl_stmt: 
     144: decl: 
      145: type: 
       146: name: int
      147: name: mlx5_st
    148: decl_stmt: 
     149: decl: 
      150: type: 
       151: name: void
       152: modifier: *
      153: name: qpc
    154: decl_stmt: 
     155: decl: 
      156: type: 
       157: name: u32
       158: modifier: *
      159: name: in
    160: decl_stmt: 
     161: decl: 
      162: type: 
       163: name: int
      164: name: err
    165: expr_stmt: 
     166: expr: 
      167: call: 
       168: name: mutex_init
       169: argument_list: 
        170: argument: 
         171: expr: 
          172: operator: &
          173: name: 
           174: name: qp
           175: operator: ->
           176: name: mutex
    177: expr_stmt: 
     178: expr: 
      179: call: 
       180: name: spin_lock_init
       181: argument_list: 
        182: argument: 
         183: expr: 
          184: operator: &
          185: name: 
           186: name: qp
           187: operator: ->
           188: name: sq
           189: operator: .
           190: name: lock
    191: expr_stmt: 
     192: expr: 
      193: call: 
       194: name: spin_lock_init
       195: argument_list: 
        196: argument: 
         197: expr: 
          198: operator: &
          199: name: 
           200: name: qp
           201: operator: ->
           202: name: rq
           203: operator: .
           204: name: lock
    205: expr_stmt: 
     206: expr: 
      207: name: mlx5_st
      208: operator: =
      209: call: 
       210: name: to_mlx5_st
       211: argument_list: 
        212: argument: 
         213: expr: 
          214: name: 
           215: name: init_attr
           216: operator: ->
           217: name: qp_type
    218: if_stmt: 
     219: if: 
      220: condition: 
       221: expr: 
        222: name: mlx5_st
        223: operator: <
        224: literal: 0
      225: block: 
       226: block_content: 
        227: return: 
         228: expr: 
          229: operator: -
          230: name: EINVAL
    231: if_stmt: 
     232: if: 
      233: condition: 
       234: expr: 
        235: name: 
         236: name: init_attr
         237: operator: ->
         238: name: rwq_ind_tbl
      239: block: 
       240: block_content: 
        241: if_stmt: 
         242: if: 
          243: condition: 
           244: expr: 
            245: operator: !
            246: name: udata
          247: block: 
           248: block_content: 
            249: return: 
             250: expr: 
              251: operator: -
              252: name: ENOSYS
        253: expr_stmt: 
         254: expr: 
          255: name: err
          256: operator: =
          257: call: 
           258: name: create_rss_raw_qp_tir
           259: argument_list: 
            260: argument: 
             261: expr: 
              262: name: dev
            263: argument: 
             264: expr: 
              265: name: qp
            266: argument: 
             267: expr: 
              268: name: pd
            269: argument: 
             270: expr: 
              271: name: init_attr
            272: argument: 
             273: expr: 
              274: name: udata
        275: return: 
         276: expr: 
          277: name: err
    278: if_stmt: 
     279: if: 
      280: condition: 
       281: expr: 
        282: name: 
         283: name: init_attr
         284: operator: ->
         285: name: create_flags
        286: operator: &
        287: name: IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK
      288: block: 
       289: block_content: 
        290: if_stmt: 
         291: if: 
          292: condition: 
           293: expr: 
            294: operator: !
            295: call: 
             296: name: MLX5_CAP_GEN
             297: argument_list: 
              298: argument: 
               299: expr: 
                300: name: mdev
              301: argument: 
               302: expr: 
                303: name: block_lb_mc
          304: block: 
           305: block_content: 
            306: expr_stmt: 
             307: expr: 
              308: call: 
               309: name: mlx5_ib_dbg
               310: argument_list: 
                311: argument: 
                 312: expr: 
                  313: name: dev
                314: argument: 
                 315: expr: 
                  316: literal: "block multicast loopback isn't supported\n"
            317: return: 
             318: expr: 
              319: operator: -
              320: name: EINVAL
         321: else: 
          322: block: 
           323: block_content: 
            324: expr_stmt: 
             325: expr: 
              326: name: 
               327: name: qp
               328: operator: ->
               329: name: flags
              330: operator: |=
              331: name: MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK
    332: if_stmt: 
     333: if: 
      334: condition: 
       335: expr: 
        336: name: 
         337: name: init_attr
         338: operator: ->
         339: name: create_flags
        340: operator: &
        341: operator: (
        342: name: IB_QP_CREATE_CROSS_CHANNEL
        343: operator: |
        344: name: IB_QP_CREATE_MANAGED_SEND
        345: operator: |
        346: name: IB_QP_CREATE_MANAGED_RECV
        347: operator: )
      348: block: 
       349: block_content: 
        350: if_stmt: 
         351: if: 
          352: condition: 
           353: expr: 
            354: operator: !
            355: call: 
             356: name: MLX5_CAP_GEN
             357: argument_list: 
              358: argument: 
               359: expr: 
                360: name: mdev
              361: argument: 
               362: expr: 
                363: name: cd
          364: block: 
           365: block_content: 
            366: expr_stmt: 
             367: expr: 
              368: call: 
               369: name: mlx5_ib_dbg
               370: argument_list: 
                371: argument: 
                 372: expr: 
                  373: name: dev
                374: argument: 
                 375: expr: 
                  376: literal: "cross-channel isn't supported\n"
            377: return: 
             378: expr: 
              379: operator: -
              380: name: EINVAL
        381: if_stmt: 
         382: if: 
          383: condition: 
           384: expr: 
            385: name: 
             386: name: init_attr
             387: operator: ->
             388: name: create_flags
            389: operator: &
            390: name: IB_QP_CREATE_CROSS_CHANNEL
          391: block: 
           392: block_content: 
            393: expr_stmt: 
             394: expr: 
              395: name: 
               396: name: qp
               397: operator: ->
               398: name: flags
              399: operator: |=
              400: name: MLX5_IB_QP_CROSS_CHANNEL
        401: if_stmt: 
         402: if: 
          403: condition: 
           404: expr: 
            405: name: 
             406: name: init_attr
             407: operator: ->
             408: name: create_flags
            409: operator: &
            410: name: IB_QP_CREATE_MANAGED_SEND
          411: block: 
           412: block_content: 
            413: expr_stmt: 
             414: expr: 
              415: name: 
               416: name: qp
               417: operator: ->
               418: name: flags
              419: operator: |=
              420: name: MLX5_IB_QP_MANAGED_SEND
        421: if_stmt: 
         422: if: 
          423: condition: 
           424: expr: 
            425: name: 
             426: name: init_attr
             427: operator: ->
             428: name: create_flags
            429: operator: &
            430: name: IB_QP_CREATE_MANAGED_RECV
          431: block: 
           432: block_content: 
            433: expr_stmt: 
             434: expr: 
              435: name: 
               436: name: qp
               437: operator: ->
               438: name: flags
              439: operator: |=
              440: name: MLX5_IB_QP_MANAGED_RECV
    441: if_stmt: 
     442: if: 
      443: condition: 
       444: expr: 
        445: name: 
         446: name: init_attr
         447: operator: ->
         448: name: qp_type
        449: operator: ==
        450: name: IB_QPT_UD
        451: operator: &&
        452: operator: (
        453: name: 
         454: name: init_attr
         455: operator: ->
         456: name: create_flags
        457: operator: &
        458: name: IB_QP_CREATE_IPOIB_UD_LSO
        459: operator: )
      460: block: 
       461: block_content: 
        462: if_stmt: 
         463: if: 
          464: condition: 
           465: expr: 
            466: operator: !
            467: call: 
             468: name: MLX5_CAP_GEN
             469: argument_list: 
              470: argument: 
               471: expr: 
                472: name: mdev
              473: argument: 
               474: expr: 
                475: name: ipoib_basic_offloads
          476: block: 
           477: block_content: 
            478: expr_stmt: 
             479: expr: 
              480: call: 
               481: name: mlx5_ib_dbg
               482: argument_list: 
                483: argument: 
                 484: expr: 
                  485: name: dev
                486: argument: 
                 487: expr: 
                  488: literal: "ipoib UD lso qp isn't supported\n"
            489: return: 
             490: expr: 
              491: operator: -
              492: name: EOPNOTSUPP
    493: if_stmt: 
     494: if: 
      495: condition: 
       496: expr: 
        497: name: 
         498: name: init_attr
         499: operator: ->
         500: name: create_flags
        501: operator: &
        502: name: IB_QP_CREATE_SCATTER_FCS
      503: block: 
       504: block_content: 
        505: if_stmt: 
         506: if: 
          507: condition: 
           508: expr: 
            509: name: 
             510: name: init_attr
             511: operator: ->
             512: name: qp_type
            513: operator: !=
            514: name: IB_QPT_RAW_PACKET
          515: block: 
           516: block_content: 
            517: expr_stmt: 
             518: expr: 
              519: call: 
               520: name: mlx5_ib_dbg
               521: argument_list: 
                522: argument: 
                 523: expr: 
                  524: name: dev
                525: argument: 
                 526: expr: 
                  527: literal: "Scatter FCS is supported only for Raw Packet QPs"
            528: return: 
             529: expr: 
              530: operator: -
              531: name: EOPNOTSUPP
        532: if_stmt: 
         533: if: 
          534: condition: 
           535: expr: 
            536: operator: !
            537: call: 
             538: name: MLX5_CAP_GEN
             539: argument_list: 
              540: argument: 
               541: expr: 
                542: name: 
                 543: name: dev
                 544: operator: ->
                 545: name: mdev
              546: argument: 
               547: expr: 
                548: name: eth_net_offloads
            549: operator: ||
            550: operator: !
            551: call: 
             552: name: MLX5_CAP_ETH
             553: argument_list: 
              554: argument: 
               555: expr: 
                556: name: 
                 557: name: dev
                 558: operator: ->
                 559: name: mdev
              560: argument: 
               561: expr: 
                562: name: scatter_fcs
          563: block: 
           564: block_content: 
            565: expr_stmt: 
             566: expr: 
              567: call: 
               568: name: mlx5_ib_dbg
               569: argument_list: 
                570: argument: 
                 571: expr: 
                  572: name: dev
                573: argument: 
                 574: expr: 
                  575: literal: "Scatter FCS isn't supported\n"
            576: return: 
             577: expr: 
              578: operator: -
              579: name: EOPNOTSUPP
        580: expr_stmt: 
         581: expr: 
          582: name: 
           583: name: qp
           584: operator: ->
           585: name: flags
          586: operator: |=
          587: name: MLX5_IB_QP_CAP_SCATTER_FCS
    588: if_stmt: 
     589: if: 
      590: condition: 
       591: expr: 
        592: name: 
         593: name: init_attr
         594: operator: ->
         595: name: sq_sig_type
        596: operator: ==
        597: name: IB_SIGNAL_ALL_WR
      598: block: 
       599: block_content: 
        600: expr_stmt: 
         601: expr: 
          602: name: 
           603: name: qp
           604: operator: ->
           605: name: sq_signal_bits
          606: operator: =
          607: name: MLX5_WQE_CTRL_CQ_UPDATE
    608: if_stmt: 
     609: if: 
      610: condition: 
       611: expr: 
        612: name: 
         613: name: init_attr
         614: operator: ->
         615: name: create_flags
        616: operator: &
        617: name: IB_QP_CREATE_CVLAN_STRIPPING
      618: block: 
       619: block_content: 
        620: if_stmt: 
         621: if: 
          622: condition: 
           623: expr: 
            624: operator: !
            625: operator: (
            626: call: 
             627: name: MLX5_CAP_GEN
             628: argument_list: 
              629: argument: 
               630: expr: 
                631: name: 
                 632: name: dev
                 633: operator: ->
                 634: name: mdev
              635: argument: 
               636: expr: 
                637: name: eth_net_offloads
            638: operator: &&
            639: call: 
             640: name: MLX5_CAP_ETH
             641: argument_list: 
              642: argument: 
               643: expr: 
                644: name: 
                 645: name: dev
                 646: operator: ->
                 647: name: mdev
              648: argument: 
               649: expr: 
                650: name: vlan_cap
            651: operator: )
            652: operator: ||
            653: operator: (
            654: name: 
             655: name: init_attr
             656: operator: ->
             657: name: qp_type
            658: operator: !=
            659: name: IB_QPT_RAW_PACKET
            660: operator: )
          661: block: 
           662: block_content: 
            663: return: 
             664: expr: 
              665: operator: -
              666: name: EOPNOTSUPP
        667: expr_stmt: 
         668: expr: 
          669: name: 
           670: name: qp
           671: operator: ->
           672: name: flags
          673: operator: |=
          674: name: MLX5_IB_QP_CVLAN_STRIPPING
    675: if_stmt: 
     676: if: 
      677: condition: 
       678: expr: 
        679: name: pd
        680: operator: &&
        681: name: 
         682: name: pd
         683: operator: ->
         684: name: uobject
      685: block: 
       686: block_content: 
        687: if_stmt: 
         688: if: 
          689: condition: 
           690: expr: 
            691: call: 
             692: name: ib_copy_from_udata
             693: argument_list: 
              694: argument: 
               695: expr: 
                696: operator: &
                697: name: ucmd
              698: argument: 
               699: expr: 
                700: name: udata
              701: argument: 
               702: expr: 
                703: sizeof: 
                 704: argument_list: 
                  705: argument: 
                   706: expr: 
                    707: name: ucmd
          708: block: 
           709: block_content: 
            710: expr_stmt: 
             711: expr: 
              712: call: 
               713: name: mlx5_ib_dbg
               714: argument_list: 
                715: argument: 
                 716: expr: 
                  717: name: dev
                718: argument: 
                 719: expr: 
                  720: literal: "copy failed\n"
            721: return: 
             722: expr: 
              723: operator: -
              724: name: EFAULT
        725: expr_stmt: 
         726: expr: 
          727: name: err
          728: operator: =
          729: call: 
           730: name: get_qp_user_index
           731: argument_list: 
            732: argument: 
             733: expr: 
              734: call: 
               735: name: to_mucontext
               736: argument_list: 
                737: argument: 
                 738: expr: 
                  739: name: 
                   740: name: pd
                   741: operator: ->
                   742: name: uobject
                   743: operator: ->
                   744: name: context
            745: argument: 
             746: expr: 
              747: operator: &
              748: name: ucmd
            749: argument: 
             750: expr: 
              751: name: 
               752: name: udata
               753: operator: ->
               754: name: inlen
            755: argument: 
             756: expr: 
              757: operator: &
              758: name: uidx
        759: if_stmt: 
         760: if: 
          761: condition: 
           762: expr: 
            763: name: err
          764: block: 
           765: block_content: 
            766: return: 
             767: expr: 
              768: name: err
        769: expr_stmt: 
         770: expr: 
          771: name: 
           772: name: qp
           773: operator: ->
           774: name: wq_sig
          775: operator: =
          776: operator: !
          777: operator: !
          778: operator: (
          779: name: 
           780: name: ucmd
           781: operator: .
           782: name: flags
          783: operator: &
          784: name: MLX5_QP_FLAG_SIGNATURE
          785: operator: )
        786: expr_stmt: 
         787: expr: 
          788: name: 
           789: name: qp
           790: operator: ->
           791: name: scat_cqe
          792: operator: =
          793: operator: !
          794: operator: !
          795: operator: (
          796: name: 
           797: name: ucmd
           798: operator: .
           799: name: flags
          800: operator: &
          801: name: MLX5_QP_FLAG_SCATTER_CQE
          802: operator: )
        803: if_stmt: 
         804: if: 
          805: condition: 
           806: expr: 
            807: name: 
             808: name: ucmd
             809: operator: .
             810: name: flags
            811: operator: &
            812: name: MLX5_QP_FLAG_TUNNEL_OFFLOADS
          813: block: 
           814: block_content: 
            815: if_stmt: 
             816: if: 
              817: condition: 
               818: expr: 
                819: name: 
                 820: name: init_attr
                 821: operator: ->
                 822: name: qp_type
                823: operator: !=
                824: name: IB_QPT_RAW_PACKET
                825: operator: ||
                826: operator: !
                827: call: 
                 828: name: tunnel_offload_supported
                 829: argument_list: 
                  830: argument: 
                   831: expr: 
                    832: name: mdev
              833: block: 
               834: block_content: 
                835: expr_stmt: 
                 836: expr: 
                  837: call: 
                   838: name: mlx5_ib_dbg
                   839: argument_list: 
                    840: argument: 
                     841: expr: 
                      842: name: dev
                    843: argument: 
                     844: expr: 
                      845: literal: "Tunnel offload isn't supported\n"
                846: return: 
                 847: expr: 
                  848: operator: -
                  849: name: EOPNOTSUPP
            850: expr_stmt: 
             851: expr: 
              852: name: 
               853: name: qp
               854: operator: ->
               855: name: tunnel_offload_en
              856: operator: =
              857: literal: true
        858: if_stmt: 
         859: if: 
          860: condition: 
           861: expr: 
            862: name: 
             863: name: init_attr
             864: operator: ->
             865: name: create_flags
            866: operator: &
            867: name: IB_QP_CREATE_SOURCE_QPN
          868: block: 
           869: block_content: 
            870: if_stmt: 
             871: if: 
              872: condition: 
               873: expr: 
                874: name: 
                 875: name: init_attr
                 876: operator: ->
                 877: name: qp_type
                878: operator: !=
                879: name: IB_QPT_UD
                880: operator: ||
                881: operator: (
                882: call: 
                 883: name: MLX5_CAP_GEN
                 884: argument_list: 
                  885: argument: 
                   886: expr: 
                    887: name: 
                     888: name: dev
                     889: operator: ->
                     890: name: mdev
                  891: argument: 
                   892: expr: 
                    893: name: port_type
                894: operator: !=
                895: name: MLX5_CAP_PORT_TYPE_IB
                896: operator: )
                897: operator: ||
                898: operator: !
                899: call: 
                 900: name: mlx5_get_flow_namespace
                 901: argument_list: 
                  902: argument: 
                   903: expr: 
                    904: name: 
                     905: name: dev
                     906: operator: ->
                     907: name: mdev
                  908: argument: 
                   909: expr: 
                    910: name: MLX5_FLOW_NAMESPACE_BYPASS
              911: block: 
               912: block_content: 
                913: expr_stmt: 
                 914: expr: 
                  915: call: 
                   916: name: mlx5_ib_dbg
                   917: argument_list: 
                    918: argument: 
                     919: expr: 
                      920: name: dev
                    921: argument: 
                     922: expr: 
                      923: literal: "Source QP option isn't supported\n"
                924: return: 
                 925: expr: 
                  926: operator: -
                  927: name: EOPNOTSUPP
            928: expr_stmt: 
             929: expr: 
              930: name: 
               931: name: qp
               932: operator: ->
               933: name: flags
              934: operator: |=
              935: name: MLX5_IB_QP_UNDERLAY
            936: expr_stmt: 
             937: expr: 
              938: name: 
               939: name: qp
               940: operator: ->
               941: name: underlay_qpn
              942: operator: =
              943: name: 
               944: name: init_attr
               945: operator: ->
               946: name: source_qpn
     947: else: 
      948: block: 
       949: block_content: 
        950: expr_stmt: 
         951: expr: 
          952: name: 
           953: name: qp
           954: operator: ->
           955: name: wq_sig
          956: operator: =
          957: operator: !
          958: operator: !
          959: name: wq_signature
    960: expr_stmt: 
     961: expr: 
      962: name: base
      963: operator: =
      964: ternary: 
       965: condition: 
        966: expr: 
         967: operator: (
         968: name: 
          969: name: init_attr
          970: operator: ->
          971: name: qp_type
         972: operator: ==
         973: name: IB_QPT_RAW_PACKET
         974: operator: ||
         975: name: 
          976: name: qp
          977: operator: ->
          978: name: flags
         979: operator: &
         980: name: MLX5_IB_QP_UNDERLAY
         981: operator: )
       982: then: 
        983: expr: 
         984: operator: &
         985: name: 
          986: name: qp
          987: operator: ->
          988: name: raw_packet_qp
          989: operator: .
          990: name: rq
          991: operator: .
          992: name: base
       993: else: 
        994: expr: 
         995: operator: &
         996: name: 
          997: name: qp
          998: operator: ->
          999: name: trans_qp
          1000: operator: .
          1001: name: base
    1002: expr_stmt: 
     1003: expr: 
      1004: name: 
       1005: name: qp
       1006: operator: ->
       1007: name: has_rq
      1008: operator: =
      1009: call: 
       1010: name: qp_has_rq
       1011: argument_list: 
        1012: argument: 
         1013: expr: 
          1014: name: init_attr
    1015: expr_stmt: 
     1016: expr: 
      1017: name: err
      1018: operator: =
      1019: call: 
       1020: name: set_rq_size
       1021: argument_list: 
        1022: argument: 
         1023: expr: 
          1024: name: dev
        1025: argument: 
         1026: expr: 
          1027: operator: &
          1028: name: 
           1029: name: init_attr
           1030: operator: ->
           1031: name: cap
        1032: argument: 
         1033: expr: 
          1034: name: 
           1035: name: qp
           1036: operator: ->
           1037: name: has_rq
        1038: argument: 
         1039: expr: 
          1040: name: qp
        1041: argument: 
         1042: expr: 
          1043: ternary: 
           1044: condition: 
            1045: expr: 
             1046: operator: (
             1047: name: pd
             1048: operator: &&
             1049: name: 
              1050: name: pd
              1051: operator: ->
              1052: name: uobject
             1053: operator: )
           1054: then: 
            1055: expr: 
             1056: operator: &
             1057: name: ucmd
           1058: else: 
            1059: expr: 
             1060: name: NULL
    1061: if_stmt: 
     1062: if: 
      1063: condition: 
       1064: expr: 
        1065: name: err
      1066: block: 
       1067: block_content: 
        1068: expr_stmt: 
         1069: expr: 
          1070: call: 
           1071: name: mlx5_ib_dbg
           1072: argument_list: 
            1073: argument: 
             1074: expr: 
              1075: name: dev
            1076: argument: 
             1077: expr: 
              1078: literal: "err %d\n"
            1079: argument: 
             1080: expr: 
              1081: name: err
        1082: return: 
         1083: expr: 
          1084: name: err
    1085: if_stmt: 
     1086: if: 
      1087: condition: 
       1088: expr: 
        1089: name: pd
      1090: block: 
       1091: block_content: 
        1092: if_stmt: 
         1093: if: 
          1094: condition: 
           1095: expr: 
            1096: name: 
             1097: name: pd
             1098: operator: ->
             1099: name: uobject
          1100: block: 
           1101: block_content: 
            1102: decl_stmt: 
             1103: decl: 
              1104: type: 
               1105: name: __u32
              1106: name: max_wqes
              1107: init: 
               1108: expr: 
                1109: literal: 1
                1110: operator: <<
                1111: call: 
                 1112: name: MLX5_CAP_GEN
                 1113: argument_list: 
                  1114: argument: 
                   1115: expr: 
                    1116: name: mdev
                  1117: argument: 
                   1118: expr: 
                    1119: name: log_max_qp_sz
            1120: expr_stmt: 
             1121: expr: 
              1122: call: 
               1123: name: mlx5_ib_dbg
               1124: argument_list: 
                1125: argument: 
                 1126: expr: 
                  1127: name: dev
                1128: argument: 
                 1129: expr: 
                  1130: literal: "requested sq_wqe_count (%d)\n"
                1131: argument: 
                 1132: expr: 
                  1133: name: 
                   1134: name: ucmd
                   1135: operator: .
                   1136: name: sq_wqe_count
            1137: if_stmt: 
             1138: if: 
              1139: condition: 
               1140: expr: 
                1141: name: 
                 1142: name: ucmd
                 1143: operator: .
                 1144: name: rq_wqe_shift
                1145: operator: !=
                1146: name: 
                 1147: name: qp
                 1148: operator: ->
                 1149: name: rq
                 1150: operator: .
                 1151: name: wqe_shift
                1152: operator: ||
                1153: name: 
                 1154: name: ucmd
                 1155: operator: .
                 1156: name: rq_wqe_count
                1157: operator: !=
                1158: name: 
                 1159: name: qp
                 1160: operator: ->
                 1161: name: rq
                 1162: operator: .
                 1163: name: wqe_cnt
              1164: block: 
               1165: block_content: 
                1166: expr_stmt: 
                 1167: expr: 
                  1168: call: 
                   1169: name: mlx5_ib_dbg
                   1170: argument_list: 
                    1171: argument: 
                     1172: expr: 
                      1173: name: dev
                    1174: argument: 
                     1175: expr: 
                      1176: literal: "invalid rq params\n"
                1177: return: 
                 1178: expr: 
                  1179: operator: -
                  1180: name: EINVAL
            1181: if_stmt: 
             1182: if: 
              1183: condition: 
               1184: expr: 
                1185: name: 
                 1186: name: ucmd
                 1187: operator: .
                 1188: name: sq_wqe_count
                1189: operator: >
                1190: name: max_wqes
              1191: block: 
               1192: block_content: 
                1193: expr_stmt: 
                 1194: expr: 
                  1195: call: 
                   1196: name: mlx5_ib_dbg
                   1197: argument_list: 
                    1198: argument: 
                     1199: expr: 
                      1200: name: dev
                    1201: argument: 
                     1202: expr: 
                      1203: literal: "requested sq_wqe_count (%d)>max allowed (%d)\n"
                    1204: argument: 
                     1205: expr: 
                      1206: name: 
                       1207: name: ucmd
                       1208: operator: .
                       1209: name: sq_wqe_count
                    1210: argument: 
                     1211: expr: 
                      1212: name: max_wqes
                1213: return: 
                 1214: expr: 
                  1215: operator: -
                  1216: name: EINVAL
            1217: if_stmt: 
             1218: if: 
              1219: condition: 
               1220: expr: 
                1221: name: 
                 1222: name: init_attr
                 1223: operator: ->
                 1224: name: create_flags
                1225: operator: &
                1226: call: 
                 1227: name: mlx5_ib_create_qp_sqpn_qp1
                 1228: argument_list: 
              1229: block: 
               1230: block_content: 
                1231: expr_stmt: 
                 1232: expr: 
                  1233: call: 
                   1234: name: mlx5_ib_dbg
                   1235: argument_list: 
                    1236: argument: 
                     1237: expr: 
                      1238: name: dev
                    1239: argument: 
                     1240: expr: 
                      1241: literal: "user-space is not allowed to create UD QPs spoofing as QP1\n"
                1242: return: 
                 1243: expr: 
                  1244: operator: -
                  1245: name: EINVAL
            1246: expr_stmt: 
             1247: expr: 
              1248: name: err
              1249: operator: =
              1250: call: 
               1251: name: create_user_qp
               1252: argument_list: 
                1253: argument: 
                 1254: expr: 
                  1255: name: dev
                1256: argument: 
                 1257: expr: 
                  1258: name: pd
                1259: argument: 
                 1260: expr: 
                  1261: name: qp
                1262: argument: 
                 1263: expr: 
                  1264: name: udata
                1265: argument: 
                 1266: expr: 
                  1267: name: init_attr
                1268: argument: 
                 1269: expr: 
                  1270: operator: &
                  1271: name: in
                1272: argument: 
                 1273: expr: 
                  1274: operator: &
                  1275: name: resp
                1276: argument: 
                 1277: expr: 
                  1278: operator: &
                  1279: name: inlen
                1280: argument: 
                 1281: expr: 
                  1282: name: base
            1283: if_stmt: 
             1284: if: 
              1285: condition: 
               1286: expr: 
                1287: name: err
              1288: block: 
               1289: block_content: 
                1290: expr_stmt: 
                 1291: expr: 
                  1292: call: 
                   1293: name: mlx5_ib_dbg
                   1294: argument_list: 
                    1295: argument: 
                     1296: expr: 
                      1297: name: dev
                    1298: argument: 
                     1299: expr: 
                      1300: literal: "err %d\n"
                    1301: argument: 
                     1302: expr: 
                      1303: name: err
         1304: else: 
          1305: block: 
           1306: block_content: 
            1307: expr_stmt: 
             1308: expr: 
              1309: name: err
              1310: operator: =
              1311: call: 
               1312: name: create_kernel_qp
               1313: argument_list: 
                1314: argument: 
                 1315: expr: 
                  1316: name: dev
                1317: argument: 
                 1318: expr: 
                  1319: name: init_attr
                1320: argument: 
                 1321: expr: 
                  1322: name: qp
                1323: argument: 
                 1324: expr: 
                  1325: operator: &
                  1326: name: in
                1327: argument: 
                 1328: expr: 
                  1329: operator: &
                  1330: name: inlen
                1331: argument: 
                 1332: expr: 
                  1333: name: base
            1334: if_stmt: 
             1335: if: 
              1336: condition: 
               1337: expr: 
                1338: name: err
              1339: block: 
               1340: block_content: 
                1341: expr_stmt: 
                 1342: expr: 
                  1343: call: 
                   1344: name: mlx5_ib_dbg
                   1345: argument_list: 
                    1346: argument: 
                     1347: expr: 
                      1348: name: dev
                    1349: argument: 
                     1350: expr: 
                      1351: literal: "err %d\n"
                    1352: argument: 
                     1353: expr: 
                      1354: name: err
        1355: if_stmt: 
         1356: if: 
          1357: condition: 
           1358: expr: 
            1359: name: err
          1360: block: 
           1361: block_content: 
            1362: return: 
             1363: expr: 
              1364: name: err
     1365: else: 
      1366: block: 
       1367: block_content: 
        1368: expr_stmt: 
         1369: expr: 
          1370: name: in
          1371: operator: =
          1372: call: 
           1373: name: kvzalloc
           1374: argument_list: 
            1375: argument: 
             1376: expr: 
              1377: name: inlen
            1378: argument: 
             1379: expr: 
              1380: name: GFP_KERNEL
        1381: if_stmt: 
         1382: if: 
          1383: condition: 
           1384: expr: 
            1385: operator: !
            1386: name: in
          1387: block: 
           1388: block_content: 
            1389: return: 
             1390: expr: 
              1391: operator: -
              1392: name: ENOMEM
        1393: expr_stmt: 
         1394: expr: 
          1395: name: 
           1396: name: qp
           1397: operator: ->
           1398: name: create_type
          1399: operator: =
          1400: name: MLX5_QP_EMPTY
    1401: if_stmt: 
     1402: if: 
      1403: condition: 
       1404: expr: 
        1405: call: 
         1406: name: is_sqp
         1407: argument_list: 
          1408: argument: 
           1409: expr: 
            1410: name: 
             1411: name: init_attr
             1412: operator: ->
             1413: name: qp_type
      1414: block: 
       1415: block_content: 
        1416: expr_stmt: 
         1417: expr: 
          1418: name: 
           1419: name: qp
           1420: operator: ->
           1421: name: port
          1422: operator: =
          1423: name: 
           1424: name: init_attr
           1425: operator: ->
           1426: name: port_num
    1427: expr_stmt: 
     1428: expr: 
      1429: name: qpc
      1430: operator: =
      1431: call: 
       1432: name: MLX5_ADDR_OF
       1433: argument_list: 
        1434: argument: 
         1435: expr: 
          1436: name: create_qp_in
        1437: argument: 
         1438: expr: 
          1439: name: in
        1440: argument: 
         1441: expr: 
          1442: name: qpc
    1443: expr_stmt: 
     1444: expr: 
      1445: call: 
       1446: name: MLX5_SET
       1447: argument_list: 
        1448: argument: 
         1449: expr: 
          1450: name: qpc
        1451: argument: 
         1452: expr: 
          1453: name: qpc
        1454: argument: 
         1455: expr: 
          1456: name: st
        1457: argument: 
         1458: expr: 
          1459: name: mlx5_st
    1460: expr_stmt: 
     1461: expr: 
      1462: call: 
       1463: name: MLX5_SET
       1464: argument_list: 
        1465: argument: 
         1466: expr: 
          1467: name: qpc
        1468: argument: 
         1469: expr: 
          1470: name: qpc
        1471: argument: 
         1472: expr: 
          1473: name: pm_state
        1474: argument: 
         1475: expr: 
          1476: name: MLX5_QP_PM_MIGRATED
    1477: if_stmt: 
     1478: if: 
      1479: condition: 
       1480: expr: 
        1481: name: 
         1482: name: init_attr
         1483: operator: ->
         1484: name: qp_type
        1485: operator: !=
        1486: name: MLX5_IB_QPT_REG_UMR
      1487: block: 
       1488: block_content: 
        1489: expr_stmt: 
         1490: expr: 
          1491: call: 
           1492: name: MLX5_SET
           1493: argument_list: 
            1494: argument: 
             1495: expr: 
              1496: name: qpc
            1497: argument: 
             1498: expr: 
              1499: name: qpc
            1500: argument: 
             1501: expr: 
              1502: name: pd
            1503: argument: 
             1504: expr: 
              1505: call: 
               1506: name: to_mpd
               1507: argument_list: 
                1508: argument: 
                 1509: expr: 
                  1510: ternary: 
                   1511: condition: 
                    1512: expr: 
                     1513: name: pd
                   1514: then: 
                    1515: expr: 
                     1516: name: pd
                   1517: else: 
                    1518: expr: 
                     1519: name: 
                      1520: name: devr
                      1521: operator: ->
                      1522: name: p0
              1523: operator: ->
              1524: name: pdn
     1525: else: 
      1526: block: 
       1527: block_content: 
        1528: expr_stmt: 
         1529: expr: 
          1530: call: 
           1531: name: MLX5_SET
           1532: argument_list: 
            1533: argument: 
             1534: expr: 
              1535: name: qpc
            1536: argument: 
             1537: expr: 
              1538: name: qpc
            1539: argument: 
             1540: expr: 
              1541: name: latency_sensitive
            1542: argument: 
             1543: expr: 
              1544: literal: 1
    1545: if_stmt: 
     1546: if: 
      1547: condition: 
       1548: expr: 
        1549: name: 
         1550: name: qp
         1551: operator: ->
         1552: name: wq_sig
      1553: block: 
       1554: block_content: 
        1555: expr_stmt: 
         1556: expr: 
          1557: call: 
           1558: name: MLX5_SET
           1559: argument_list: 
            1560: argument: 
             1561: expr: 
              1562: name: qpc
            1563: argument: 
             1564: expr: 
              1565: name: qpc
            1566: argument: 
             1567: expr: 
              1568: name: wq_signature
            1569: argument: 
             1570: expr: 
              1571: literal: 1
    1572: if_stmt: 
     1573: if: 
      1574: condition: 
       1575: expr: 
        1576: name: 
         1577: name: qp
         1578: operator: ->
         1579: name: flags
        1580: operator: &
        1581: name: MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK
      1582: block: 
       1583: block_content: 
        1584: expr_stmt: 
         1585: expr: 
          1586: call: 
           1587: name: MLX5_SET
           1588: argument_list: 
            1589: argument: 
             1590: expr: 
              1591: name: qpc
            1592: argument: 
             1593: expr: 
              1594: name: qpc
            1595: argument: 
             1596: expr: 
              1597: name: block_lb_mc
            1598: argument: 
             1599: expr: 
              1600: literal: 1
    1601: if_stmt: 
     1602: if: 
      1603: condition: 
       1604: expr: 
        1605: name: 
         1606: name: qp
         1607: operator: ->
         1608: name: flags
        1609: operator: &
        1610: name: MLX5_IB_QP_CROSS_CHANNEL
      1611: block: 
       1612: block_content: 
        1613: expr_stmt: 
         1614: expr: 
          1615: call: 
           1616: name: MLX5_SET
           1617: argument_list: 
            1618: argument: 
             1619: expr: 
              1620: name: qpc
            1621: argument: 
             1622: expr: 
              1623: name: qpc
            1624: argument: 
             1625: expr: 
              1626: name: cd_master
            1627: argument: 
             1628: expr: 
              1629: literal: 1
    1630: if_stmt: 
     1631: if: 
      1632: condition: 
       1633: expr: 
        1634: name: 
         1635: name: qp
         1636: operator: ->
         1637: name: flags
        1638: operator: &
        1639: name: MLX5_IB_QP_MANAGED_SEND
      1640: block: 
       1641: block_content: 
        1642: expr_stmt: 
         1643: expr: 
          1644: call: 
           1645: name: MLX5_SET
           1646: argument_list: 
            1647: argument: 
             1648: expr: 
              1649: name: qpc
            1650: argument: 
             1651: expr: 
              1652: name: qpc
            1653: argument: 
             1654: expr: 
              1655: name: cd_slave_send
            1656: argument: 
             1657: expr: 
              1658: literal: 1
    1659: if_stmt: 
     1660: if: 
      1661: condition: 
       1662: expr: 
        1663: name: 
         1664: name: qp
         1665: operator: ->
         1666: name: flags
        1667: operator: &
        1668: name: MLX5_IB_QP_MANAGED_RECV
      1669: block: 
       1670: block_content: 
        1671: expr_stmt: 
         1672: expr: 
          1673: call: 
           1674: name: MLX5_SET
           1675: argument_list: 
            1676: argument: 
             1677: expr: 
              1678: name: qpc
            1679: argument: 
             1680: expr: 
              1681: name: qpc
            1682: argument: 
             1683: expr: 
              1684: name: cd_slave_receive
            1685: argument: 
             1686: expr: 
              1687: literal: 1
    1688: if_stmt: 
     1689: if: 
      1690: condition: 
       1691: expr: 
        1692: name: 
         1693: name: qp
         1694: operator: ->
         1695: name: scat_cqe
        1696: operator: &&
        1697: call: 
         1698: name: is_connected
         1699: argument_list: 
          1700: argument: 
           1701: expr: 
            1702: name: 
             1703: name: init_attr
             1704: operator: ->
             1705: name: qp_type
      1706: block: 
       1707: block_content: 
        1708: decl_stmt: 
         1709: decl: 
          1710: type: 
           1711: name: int
          1712: name: rcqe_sz
        1713: decl_stmt: 
         1714: decl: 
          1715: type: 
           1716: name: int
          1717: name: scqe_sz
        1718: expr_stmt: 
         1719: expr: 
          1720: name: rcqe_sz
          1721: operator: =
          1722: call: 
           1723: name: mlx5_ib_get_cqe_size
           1724: argument_list: 
            1725: argument: 
             1726: expr: 
              1727: name: dev
            1728: argument: 
             1729: expr: 
              1730: name: 
               1731: name: init_attr
               1732: operator: ->
               1733: name: recv_cq
        1734: expr_stmt: 
         1735: expr: 
          1736: name: scqe_sz
          1737: operator: =
          1738: call: 
           1739: name: mlx5_ib_get_cqe_size
           1740: argument_list: 
            1741: argument: 
             1742: expr: 
              1743: name: dev
            1744: argument: 
             1745: expr: 
              1746: name: 
               1747: name: init_attr
               1748: operator: ->
               1749: name: send_cq
        1750: if_stmt: 
         1751: if: 
          1752: condition: 
           1753: expr: 
            1754: name: rcqe_sz
            1755: operator: ==
            1756: literal: 128
          1757: block: 
           1758: block_content: 
            1759: expr_stmt: 
             1760: expr: 
              1761: call: 
               1762: name: MLX5_SET
               1763: argument_list: 
                1764: argument: 
                 1765: expr: 
                  1766: name: qpc
                1767: argument: 
                 1768: expr: 
                  1769: name: qpc
                1770: argument: 
                 1771: expr: 
                  1772: name: cs_res
                1773: argument: 
                 1774: expr: 
                  1775: name: MLX5_RES_SCAT_DATA64_CQE
         1776: else: 
          1777: block: 
           1778: block_content: 
            1779: expr_stmt: 
             1780: expr: 
              1781: call: 
               1782: name: MLX5_SET
               1783: argument_list: 
                1784: argument: 
                 1785: expr: 
                  1786: name: qpc
                1787: argument: 
                 1788: expr: 
                  1789: name: qpc
                1790: argument: 
                 1791: expr: 
                  1792: name: cs_res
                1793: argument: 
                 1794: expr: 
                  1795: name: MLX5_RES_SCAT_DATA32_CQE
        1796: if_stmt: 
         1797: if: 
          1798: condition: 
           1799: expr: 
            1800: name: 
             1801: name: init_attr
             1802: operator: ->
             1803: name: sq_sig_type
            1804: operator: ==
            1805: name: IB_SIGNAL_ALL_WR
          1806: block: 
           1807: block_content: 
            1808: if_stmt: 
             1809: if: 
              1810: condition: 
               1811: expr: 
                1812: name: scqe_sz
                1813: operator: ==
                1814: literal: 128
              1815: block: 
               1816: block_content: 
                1817: expr_stmt: 
                 1818: expr: 
                  1819: call: 
                   1820: name: MLX5_SET
                   1821: argument_list: 
                    1822: argument: 
                     1823: expr: 
                      1824: name: qpc
                    1825: argument: 
                     1826: expr: 
                      1827: name: qpc
                    1828: argument: 
                     1829: expr: 
                      1830: name: cs_req
                    1831: argument: 
                     1832: expr: 
                      1833: name: MLX5_REQ_SCAT_DATA64_CQE
             1834: else: 
              1835: block: 
               1836: block_content: 
                1837: expr_stmt: 
                 1838: expr: 
                  1839: call: 
                   1840: name: MLX5_SET
                   1841: argument_list: 
                    1842: argument: 
                     1843: expr: 
                      1844: name: qpc
                    1845: argument: 
                     1846: expr: 
                      1847: name: qpc
                    1848: argument: 
                     1849: expr: 
                      1850: name: cs_req
                    1851: argument: 
                     1852: expr: 
                      1853: name: MLX5_REQ_SCAT_DATA32_CQE
    1854: if_stmt: 
     1855: if: 
      1856: condition: 
       1857: expr: 
        1858: name: 
         1859: name: qp
         1860: operator: ->
         1861: name: rq
         1862: operator: .
         1863: name: wqe_cnt
      1864: block: 
       1865: block_content: 
        1866: expr_stmt: 
         1867: expr: 
          1868: call: 
           1869: name: MLX5_SET
           1870: argument_list: 
            1871: argument: 
             1872: expr: 
              1873: name: qpc
            1874: argument: 
             1875: expr: 
              1876: name: qpc
            1877: argument: 
             1878: expr: 
              1879: name: log_rq_stride
            1880: argument: 
             1881: expr: 
              1882: name: 
               1883: name: qp
               1884: operator: ->
               1885: name: rq
               1886: operator: .
               1887: name: wqe_shift
              1888: operator: -
              1889: literal: 4
        1890: expr_stmt: 
         1891: expr: 
          1892: call: 
           1893: name: MLX5_SET
           1894: argument_list: 
            1895: argument: 
             1896: expr: 
              1897: name: qpc
            1898: argument: 
             1899: expr: 
              1900: name: qpc
            1901: argument: 
             1902: expr: 
              1903: name: log_rq_size
            1904: argument: 
             1905: expr: 
              1906: call: 
               1907: name: ilog2
               1908: argument_list: 
                1909: argument: 
                 1910: expr: 
                  1911: name: 
                   1912: name: qp
                   1913: operator: ->
                   1914: name: rq
                   1915: operator: .
                   1916: name: wqe_cnt
    1917: expr_stmt: 
     1918: expr: 
      1919: call: 
       1920: name: MLX5_SET
       1921: argument_list: 
        1922: argument: 
         1923: expr: 
          1924: name: qpc
        1925: argument: 
         1926: expr: 
          1927: name: qpc
        1928: argument: 
         1929: expr: 
          1930: name: rq_type
        1931: argument: 
         1932: expr: 
          1933: call: 
           1934: name: get_rx_type
           1935: argument_list: 
            1936: argument: 
             1937: expr: 
              1938: name: qp
            1939: argument: 
             1940: expr: 
              1941: name: init_attr
    1942: if_stmt: 
     1943: if: 
      1944: condition: 
       1945: expr: 
        1946: name: 
         1947: name: qp
         1948: operator: ->
         1949: name: sq
         1950: operator: .
         1951: name: wqe_cnt
      1952: block: 
       1953: block_content: 
        1954: expr_stmt: 
         1955: expr: 
          1956: call: 
           1957: name: MLX5_SET
           1958: argument_list: 
            1959: argument: 
             1960: expr: 
              1961: name: qpc
            1962: argument: 
             1963: expr: 
              1964: name: qpc
            1965: argument: 
             1966: expr: 
              1967: name: log_sq_size
            1968: argument: 
             1969: expr: 
              1970: call: 
               1971: name: ilog2
               1972: argument_list: 
                1973: argument: 
                 1974: expr: 
                  1975: name: 
                   1976: name: qp
                   1977: operator: ->
                   1978: name: sq
                   1979: operator: .
                   1980: name: wqe_cnt
     1981: else: 
      1982: block: 
       1983: block_content: 
        1984: expr_stmt: 
         1985: expr: 
          1986: call: 
           1987: name: MLX5_SET
           1988: argument_list: 
            1989: argument: 
             1990: expr: 
              1991: name: qpc
            1992: argument: 
             1993: expr: 
              1994: name: qpc
            1995: argument: 
             1996: expr: 
              1997: name: no_sq
            1998: argument: 
             1999: expr: 
              2000: literal: 1
        2001: if_stmt: 
         2002: if: 
          2003: condition: 
           2004: expr: 
            2005: name: 
             2006: name: init_attr
             2007: operator: ->
             2008: name: srq
            2009: operator: &&
            2010: name: 
             2011: name: init_attr
             2012: operator: ->
             2013: name: srq
             2014: operator: ->
             2015: name: srq_type
            2016: operator: ==
            2017: name: IB_SRQT_TM
          2018: block: 
           2019: block_content: 
            2020: expr_stmt: 
             2021: expr: 
              2022: call: 
               2023: name: MLX5_SET
               2024: argument_list: 
                2025: argument: 
                 2026: expr: 
                  2027: name: qpc
                2028: argument: 
                 2029: expr: 
                  2030: name: qpc
                2031: argument: 
                 2032: expr: 
                  2033: name: offload_type
                2034: argument: 
                 2035: expr: 
                  2036: name: MLX5_QPC_OFFLOAD_TYPE_RNDV
    2037: comment: /* Set default resources */
    2038: switch: 
     2039: condition: 
      2040: expr: 
       2041: name: 
        2042: name: init_attr
        2043: operator: ->
        2044: name: qp_type
     2045: block: 
      2046: block_content: 
       2047: case: 
        2048: expr: 
         2049: name: IB_QPT_XRC_TGT
       2050: expr_stmt: 
        2051: expr: 
         2052: call: 
          2053: name: MLX5_SET
          2054: argument_list: 
           2055: argument: 
            2056: expr: 
             2057: name: qpc
           2058: argument: 
            2059: expr: 
             2060: name: qpc
           2061: argument: 
            2062: expr: 
             2063: name: cqn_rcv
           2064: argument: 
            2065: expr: 
             2066: call: 
              2067: name: to_mcq
              2068: argument_list: 
               2069: argument: 
                2070: expr: 
                 2071: name: 
                  2072: name: devr
                  2073: operator: ->
                  2074: name: c0
             2075: operator: ->
             2076: name: 
              2077: name: mcq
              2078: operator: .
              2079: name: cqn
       2080: expr_stmt: 
        2081: expr: 
         2082: call: 
          2083: name: MLX5_SET
          2084: argument_list: 
           2085: argument: 
            2086: expr: 
             2087: name: qpc
           2088: argument: 
            2089: expr: 
             2090: name: qpc
           2091: argument: 
            2092: expr: 
             2093: name: cqn_snd
           2094: argument: 
            2095: expr: 
             2096: call: 
              2097: name: to_mcq
              2098: argument_list: 
               2099: argument: 
                2100: expr: 
                 2101: name: 
                  2102: name: devr
                  2103: operator: ->
                  2104: name: c0
             2105: operator: ->
             2106: name: 
              2107: name: mcq
              2108: operator: .
              2109: name: cqn
       2110: expr_stmt: 
        2111: expr: 
         2112: call: 
          2113: name: MLX5_SET
          2114: argument_list: 
           2115: argument: 
            2116: expr: 
             2117: name: qpc
           2118: argument: 
            2119: expr: 
             2120: name: qpc
           2121: argument: 
            2122: expr: 
             2123: name: srqn_rmpn_xrqn
           2124: argument: 
            2125: expr: 
             2126: call: 
              2127: name: to_msrq
              2128: argument_list: 
               2129: argument: 
                2130: expr: 
                 2131: name: 
                  2132: name: devr
                  2133: operator: ->
                  2134: name: s0
             2135: operator: ->
             2136: name: 
              2137: name: msrq
              2138: operator: .
              2139: name: srqn
       2140: expr_stmt: 
        2141: expr: 
         2142: call: 
          2143: name: MLX5_SET
          2144: argument_list: 
           2145: argument: 
            2146: expr: 
             2147: name: qpc
           2148: argument: 
            2149: expr: 
             2150: name: qpc
           2151: argument: 
            2152: expr: 
             2153: name: xrcd
           2154: argument: 
            2155: expr: 
             2156: call: 
              2157: name: to_mxrcd
              2158: argument_list: 
               2159: argument: 
                2160: expr: 
                 2161: name: 
                  2162: name: init_attr
                  2163: operator: ->
                  2164: name: xrcd
             2165: operator: ->
             2166: name: xrcdn
       2167: break: 
       2168: case: 
        2169: expr: 
         2170: name: IB_QPT_XRC_INI
       2171: expr_stmt: 
        2172: expr: 
         2173: call: 
          2174: name: MLX5_SET
          2175: argument_list: 
           2176: argument: 
            2177: expr: 
             2178: name: qpc
           2179: argument: 
            2180: expr: 
             2181: name: qpc
           2182: argument: 
            2183: expr: 
             2184: name: cqn_rcv
           2185: argument: 
            2186: expr: 
             2187: call: 
              2188: name: to_mcq
              2189: argument_list: 
               2190: argument: 
                2191: expr: 
                 2192: name: 
                  2193: name: devr
                  2194: operator: ->
                  2195: name: c0
             2196: operator: ->
             2197: name: 
              2198: name: mcq
              2199: operator: .
              2200: name: cqn
       2201: expr_stmt: 
        2202: expr: 
         2203: call: 
          2204: name: MLX5_SET
          2205: argument_list: 
           2206: argument: 
            2207: expr: 
             2208: name: qpc
           2209: argument: 
            2210: expr: 
             2211: name: qpc
           2212: argument: 
            2213: expr: 
             2214: name: xrcd
           2215: argument: 
            2216: expr: 
             2217: call: 
              2218: name: to_mxrcd
              2219: argument_list: 
               2220: argument: 
                2221: expr: 
                 2222: name: 
                  2223: name: devr
                  2224: operator: ->
                  2225: name: x1
             2226: operator: ->
             2227: name: xrcdn
       2228: expr_stmt: 
        2229: expr: 
         2230: call: 
          2231: name: MLX5_SET
          2232: argument_list: 
           2233: argument: 
            2234: expr: 
             2235: name: qpc
           2236: argument: 
            2237: expr: 
             2238: name: qpc
           2239: argument: 
            2240: expr: 
             2241: name: srqn_rmpn_xrqn
           2242: argument: 
            2243: expr: 
             2244: call: 
              2245: name: to_msrq
              2246: argument_list: 
               2247: argument: 
                2248: expr: 
                 2249: name: 
                  2250: name: devr
                  2251: operator: ->
                  2252: name: s0
             2253: operator: ->
             2254: name: 
              2255: name: msrq
              2256: operator: .
              2257: name: srqn
       2258: break: 
       2259: default: 
       2260: if_stmt: 
        2261: if: 
         2262: condition: 
          2263: expr: 
           2264: name: 
            2265: name: init_attr
            2266: operator: ->
            2267: name: srq
         2268: block: 
          2269: block_content: 
           2270: expr_stmt: 
            2271: expr: 
             2272: call: 
              2273: name: MLX5_SET
              2274: argument_list: 
               2275: argument: 
                2276: expr: 
                 2277: name: qpc
               2278: argument: 
                2279: expr: 
                 2280: name: qpc
               2281: argument: 
                2282: expr: 
                 2283: name: xrcd
               2284: argument: 
                2285: expr: 
                 2286: call: 
                  2287: name: to_mxrcd
                  2288: argument_list: 
                   2289: argument: 
                    2290: expr: 
                     2291: name: 
                      2292: name: devr
                      2293: operator: ->
                      2294: name: x0
                 2295: operator: ->
                 2296: name: xrcdn
           2297: expr_stmt: 
            2298: expr: 
             2299: call: 
              2300: name: MLX5_SET
              2301: argument_list: 
               2302: argument: 
                2303: expr: 
                 2304: name: qpc
               2305: argument: 
                2306: expr: 
                 2307: name: qpc
               2308: argument: 
                2309: expr: 
                 2310: name: srqn_rmpn_xrqn
               2311: argument: 
                2312: expr: 
                 2313: call: 
                  2314: name: to_msrq
                  2315: argument_list: 
                   2316: argument: 
                    2317: expr: 
                     2318: name: 
                      2319: name: init_attr
                      2320: operator: ->
                      2321: name: srq
                 2322: operator: ->
                 2323: name: 
                  2324: name: msrq
                  2325: operator: .
                  2326: name: srqn
        2327: else: 
         2328: block: 
          2329: block_content: 
           2330: expr_stmt: 
            2331: expr: 
             2332: call: 
              2333: name: MLX5_SET
              2334: argument_list: 
               2335: argument: 
                2336: expr: 
                 2337: name: qpc
               2338: argument: 
                2339: expr: 
                 2340: name: qpc
               2341: argument: 
                2342: expr: 
                 2343: name: xrcd
               2344: argument: 
                2345: expr: 
                 2346: call: 
                  2347: name: to_mxrcd
                  2348: argument_list: 
                   2349: argument: 
                    2350: expr: 
                     2351: name: 
                      2352: name: devr
                      2353: operator: ->
                      2354: name: x1
                 2355: operator: ->
                 2356: name: xrcdn
           2357: expr_stmt: 
            2358: expr: 
             2359: call: 
              2360: name: MLX5_SET
              2361: argument_list: 
               2362: argument: 
                2363: expr: 
                 2364: name: qpc
               2365: argument: 
                2366: expr: 
                 2367: name: qpc
               2368: argument: 
                2369: expr: 
                 2370: name: srqn_rmpn_xrqn
               2371: argument: 
                2372: expr: 
                 2373: call: 
                  2374: name: to_msrq
                  2375: argument_list: 
                   2376: argument: 
                    2377: expr: 
                     2378: name: 
                      2379: name: devr
                      2380: operator: ->
                      2381: name: s1
                 2382: operator: ->
                 2383: name: 
                  2384: name: msrq
                  2385: operator: .
                  2386: name: srqn
    2387: if_stmt: 
     2388: if: 
      2389: condition: 
       2390: expr: 
        2391: name: 
         2392: name: init_attr
         2393: operator: ->
         2394: name: send_cq
      2395: block: 
       2396: block_content: 
        2397: expr_stmt: 
         2398: expr: 
          2399: call: 
           2400: name: MLX5_SET
           2401: argument_list: 
            2402: argument: 
             2403: expr: 
              2404: name: qpc
            2405: argument: 
             2406: expr: 
              2407: name: qpc
            2408: argument: 
             2409: expr: 
              2410: name: cqn_snd
            2411: argument: 
             2412: expr: 
              2413: call: 
               2414: name: to_mcq
               2415: argument_list: 
                2416: argument: 
                 2417: expr: 
                  2418: name: 
                   2419: name: init_attr
                   2420: operator: ->
                   2421: name: send_cq
              2422: operator: ->
              2423: name: 
               2424: name: mcq
               2425: operator: .
               2426: name: cqn
    2427: if_stmt: 
     2428: if: 
      2429: condition: 
       2430: expr: 
        2431: name: 
         2432: name: init_attr
         2433: operator: ->
         2434: name: recv_cq
      2435: block: 
       2436: block_content: 
        2437: expr_stmt: 
         2438: expr: 
          2439: call: 
           2440: name: MLX5_SET
           2441: argument_list: 
            2442: argument: 
             2443: expr: 
              2444: name: qpc
            2445: argument: 
             2446: expr: 
              2447: name: qpc
            2448: argument: 
             2449: expr: 
              2450: name: cqn_rcv
            2451: argument: 
             2452: expr: 
              2453: call: 
               2454: name: to_mcq
               2455: argument_list: 
                2456: argument: 
                 2457: expr: 
                  2458: name: 
                   2459: name: init_attr
                   2460: operator: ->
                   2461: name: recv_cq
              2462: operator: ->
              2463: name: 
               2464: name: mcq
               2465: operator: .
               2466: name: cqn
    2467: expr_stmt: 
     2468: expr: 
      2469: call: 
       2470: name: MLX5_SET64
       2471: argument_list: 
        2472: argument: 
         2473: expr: 
          2474: name: qpc
        2475: argument: 
         2476: expr: 
          2477: name: qpc
        2478: argument: 
         2479: expr: 
          2480: name: dbr_addr
        2481: argument: 
         2482: expr: 
          2483: name: 
           2484: name: qp
           2485: operator: ->
           2486: name: db
           2487: operator: .
           2488: name: dma
    2489: comment: /* 0xffffff means we ask to work with cqe version 0 */
    2490: if_stmt: 
     2491: if: 
      2492: condition: 
       2493: expr: 
        2494: call: 
         2495: name: MLX5_CAP_GEN
         2496: argument_list: 
          2497: argument: 
           2498: expr: 
            2499: name: mdev
          2500: argument: 
           2501: expr: 
            2502: name: cqe_version
        2503: operator: ==
        2504: name: MLX5_CQE_VERSION_V1
      2505: block: 
       2506: block_content: 
        2507: expr_stmt: 
         2508: expr: 
          2509: call: 
           2510: name: MLX5_SET
           2511: argument_list: 
            2512: argument: 
             2513: expr: 
              2514: name: qpc
            2515: argument: 
             2516: expr: 
              2517: name: qpc
            2518: argument: 
             2519: expr: 
              2520: name: user_index
            2521: argument: 
             2522: expr: 
              2523: name: uidx
    2524: comment: /* we use IB_QP_CREATE_IPOIB_UD_LSO to indicates ipoib qp */
    2525: if_stmt: 
     2526: if: 
      2527: condition: 
       2528: expr: 
        2529: name: 
         2530: name: init_attr
         2531: operator: ->
         2532: name: qp_type
        2533: operator: ==
        2534: name: IB_QPT_UD
        2535: operator: &&
        2536: operator: (
        2537: name: 
         2538: name: init_attr
         2539: operator: ->
         2540: name: create_flags
        2541: operator: &
        2542: name: IB_QP_CREATE_IPOIB_UD_LSO
        2543: operator: )
      2544: block: 
       2545: block_content: 
        2546: expr_stmt: 
         2547: expr: 
          2548: call: 
           2549: name: MLX5_SET
           2550: argument_list: 
            2551: argument: 
             2552: expr: 
              2553: name: qpc
            2554: argument: 
             2555: expr: 
              2556: name: qpc
            2557: argument: 
             2558: expr: 
              2559: name: ulp_stateless_offload_mode
            2560: argument: 
             2561: expr: 
              2562: literal: 1
        2563: expr_stmt: 
         2564: expr: 
          2565: name: 
           2566: name: qp
           2567: operator: ->
           2568: name: flags
          2569: operator: |=
          2570: name: MLX5_IB_QP_LSO
    2571: if_stmt: 
     2572: if: 
      2573: condition: 
       2574: expr: 
        2575: name: 
         2576: name: init_attr
         2577: operator: ->
         2578: name: create_flags
        2579: operator: &
        2580: name: IB_QP_CREATE_PCI_WRITE_END_PADDING
      2581: block: 
       2582: block_content: 
        2583: if_stmt: 
         2584: if: 
          2585: condition: 
           2586: expr: 
            2587: operator: !
            2588: call: 
             2589: name: MLX5_CAP_GEN
             2590: argument_list: 
              2591: argument: 
               2592: expr: 
                2593: name: 
                 2594: name: dev
                 2595: operator: ->
                 2596: name: mdev
              2597: argument: 
               2598: expr: 
                2599: name: end_pad
          2600: block: 
           2601: block_content: 
            2602: expr_stmt: 
             2603: expr: 
              2604: call: 
               2605: name: mlx5_ib_dbg
               2606: argument_list: 
                2607: argument: 
                 2608: expr: 
                  2609: name: dev
                2610: argument: 
                 2611: expr: 
                  2612: literal: "scatter end padding is not supported\n"
            2613: expr_stmt: 
             2614: expr: 
              2615: name: err
              2616: operator: =
              2617: operator: -
              2618: name: EOPNOTSUPP
            2619: goto: 
             2620: name: err
         2621: if: 
          2622: condition: 
           2623: expr: 
            2624: name: 
             2625: name: init_attr
             2626: operator: ->
             2627: name: qp_type
            2628: operator: !=
            2629: name: IB_QPT_RAW_PACKET
          2630: block: 
           2631: block_content: 
            2632: expr_stmt: 
             2633: expr: 
              2634: call: 
               2635: name: MLX5_SET
               2636: argument_list: 
                2637: argument: 
                 2638: expr: 
                  2639: name: qpc
                2640: argument: 
                 2641: expr: 
                  2642: name: qpc
                2643: argument: 
                 2644: expr: 
                  2645: name: end_padding_mode
                2646: argument: 
                 2647: expr: 
                  2648: name: MLX5_WQ_END_PAD_MODE_ALIGN
         2649: else: 
          2650: block: 
           2651: block_content: 
            2652: expr_stmt: 
             2653: expr: 
              2654: name: 
               2655: name: qp
               2656: operator: ->
               2657: name: flags
              2658: operator: |=
              2659: name: MLX5_IB_QP_PCI_WRITE_END_PADDING
    2660: if_stmt: 
     2661: if: 
      2662: condition: 
       2663: expr: 
        2664: name: inlen
        2665: operator: <
        2666: literal: 0
      2667: block: 
       2668: block_content: 
        2669: expr_stmt: 
         2670: expr: 
          2671: name: err
          2672: operator: =
          2673: operator: -
          2674: name: EINVAL
        2675: goto: 
         2676: name: err
    2677: if_stmt: 
     2678: if: 
      2679: condition: 
       2680: expr: 
        2681: name: 
         2682: name: init_attr
         2683: operator: ->
         2684: name: qp_type
        2685: operator: ==
        2686: name: IB_QPT_RAW_PACKET
        2687: operator: ||
        2688: name: 
         2689: name: qp
         2690: operator: ->
         2691: name: flags
        2692: operator: &
        2693: name: MLX5_IB_QP_UNDERLAY
      2694: block: 
       2695: block_content: 
        2696: expr_stmt: 
         2697: expr: 
          2698: name: 
           2699: name: qp
           2700: operator: ->
           2701: name: raw_packet_qp
           2702: operator: .
           2703: name: sq
           2704: operator: .
           2705: name: ubuffer
           2706: operator: .
           2707: name: buf_addr
          2708: operator: =
          2709: name: 
           2710: name: ucmd
           2711: operator: .
           2712: name: sq_buf_addr
        2713: expr_stmt: 
         2714: expr: 
          2715: call: 
           2716: name: raw_packet_qp_copy_info
           2717: argument_list: 
            2718: argument: 
             2719: expr: 
              2720: name: qp
            2721: argument: 
             2722: expr: 
              2723: operator: &
              2724: name: 
               2725: name: qp
               2726: operator: ->
               2727: name: raw_packet_qp
        2728: expr_stmt: 
         2729: expr: 
          2730: name: err
          2731: operator: =
          2732: call: 
           2733: name: create_raw_packet_qp
           2734: argument_list: 
            2735: argument: 
             2736: expr: 
              2737: name: dev
            2738: argument: 
             2739: expr: 
              2740: name: qp
            2741: argument: 
             2742: expr: 
              2743: name: in
            2744: argument: 
             2745: expr: 
              2746: name: inlen
            2747: argument: 
             2748: expr: 
              2749: name: pd
     2750: else: 
      2751: block: 
       2752: block_content: 
        2753: expr_stmt: 
         2754: expr: 
          2755: name: err
          2756: operator: =
          2757: call: 
           2758: name: mlx5_core_create_qp
           2759: argument_list: 
            2760: argument: 
             2761: expr: 
              2762: name: 
               2763: name: dev
               2764: operator: ->
               2765: name: mdev
            2766: argument: 
             2767: expr: 
              2768: operator: &
              2769: name: 
               2770: name: base
               2771: operator: ->
               2772: name: mqp
            2773: argument: 
             2774: expr: 
              2775: name: in
            2776: argument: 
             2777: expr: 
              2778: name: inlen
    2779: if_stmt: 
     2780: if: 
      2781: condition: 
       2782: expr: 
        2783: name: err
      2784: block: 
       2785: block_content: 
        2786: expr_stmt: 
         2787: expr: 
          2788: call: 
           2789: name: mlx5_ib_dbg
           2790: argument_list: 
            2791: argument: 
             2792: expr: 
              2793: name: dev
            2794: argument: 
             2795: expr: 
              2796: literal: "create qp failed\n"
        2797: goto: 
         2798: name: err_create
    2799: expr_stmt: 
     2800: expr: 
      2801: call: 
       2802: name: kvfree
       2803: argument_list: 
        2804: argument: 
         2805: expr: 
          2806: name: in
    2807: expr_stmt: 
     2808: expr: 
      2809: name: 
       2810: name: base
       2811: operator: ->
       2812: name: container_mibqp
      2813: operator: =
      2814: name: qp
    2815: expr_stmt: 
     2816: expr: 
      2817: name: 
       2818: name: base
       2819: operator: ->
       2820: name: mqp
       2821: operator: .
       2822: name: event
      2823: operator: =
      2824: name: mlx5_ib_qp_event
    2825: expr_stmt: 
     2826: expr: 
      2827: call: 
       2828: name: get_cqs
       2829: argument_list: 
        2830: argument: 
         2831: expr: 
          2832: name: 
           2833: name: init_attr
           2834: operator: ->
           2835: name: qp_type
        2836: argument: 
         2837: expr: 
          2838: name: 
           2839: name: init_attr
           2840: operator: ->
           2841: name: send_cq
        2842: argument: 
         2843: expr: 
          2844: name: 
           2845: name: init_attr
           2846: operator: ->
           2847: name: recv_cq
        2848: argument: 
         2849: expr: 
          2850: operator: &
          2851: name: send_cq
        2852: argument: 
         2853: expr: 
          2854: operator: &
          2855: name: recv_cq
    2856: expr_stmt: 
     2857: expr: 
      2858: call: 
       2859: name: spin_lock_irqsave
       2860: argument_list: 
        2861: argument: 
         2862: expr: 
          2863: operator: &
          2864: name: 
           2865: name: dev
           2866: operator: ->
           2867: name: reset_flow_resource_lock
        2868: argument: 
         2869: expr: 
          2870: name: flags
    2871: expr_stmt: 
     2872: expr: 
      2873: call: 
       2874: name: mlx5_ib_lock_cqs
       2875: argument_list: 
        2876: argument: 
         2877: expr: 
          2878: name: send_cq
        2879: argument: 
         2880: expr: 
          2881: name: recv_cq
    2882: comment: /* Maintain device to QPs access, needed for further handling via

----------------------------------------
0: unit: 
 1: function: 
  2: type: 
   3: specifier: static
   4: name: int
  5: name: create_qp_common
  6: parameter_list: 
   7: parameter: 
    8: decl: 
     9: type: 
      10: name: 
       11: name: struct
       12: name: mlx5_ib_dev
      13: modifier: *
     14: name: dev
   15: parameter: 
    16: decl: 
     17: type: 
      18: name: 
       19: name: struct
       20: name: ib_pd
      21: modifier: *
     22: name: pd
   23: parameter: 
    24: decl: 
     25: type: 
      26: name: 
       27: name: struct
       28: name: ib_qp_init_attr
      29: modifier: *
     30: name: init_attr
   31: parameter: 
    32: decl: 
     33: type: 
      34: name: 
       35: name: struct
       36: name: ib_udata
      37: modifier: *
     38: name: udata
   39: parameter: 
    40: decl: 
     41: type: 
      42: name: 
       43: name: struct
       44: name: mlx5_ib_qp
      45: modifier: *
     46: name: qp
  47: block: 
   48: block_content: 
    49: decl_stmt: 
     50: decl: 
      51: type: 
       52: name: 
        53: name: struct
        54: name: mlx5_ib_resources
       55: modifier: *
      56: name: devr
      57: init: 
       58: expr: 
        59: operator: &
        60: name: 
         61: name: dev
         62: operator: ->
         63: name: devr
    64: decl_stmt: 
     65: decl: 
      66: type: 
       67: name: int
      68: name: inlen
      69: init: 
       70: expr: 
        71: call: 
         72: name: MLX5_ST_SZ_BYTES
         73: argument_list: 
          74: argument: 
           75: expr: 
            76: name: create_qp_in
    77: decl_stmt: 
     78: decl: 
      79: type: 
       80: name: 
        81: name: struct
        82: name: mlx5_core_dev
       83: modifier: *
      84: name: mdev
      85: init: 
       86: expr: 
        87: name: 
         88: name: dev
         89: operator: ->
         90: name: mdev
    91: decl_stmt: 
     92: decl: 
      93: type: 
       94: name: 
        95: name: struct
        96: name: mlx5_ib_create_qp_resp
      97: name: resp
      98: init: 
       99: expr: 
        100: block: 
    101: decl_stmt: 
     102: decl: 
      103: type: 
       104: name: 
        105: name: struct
        106: name: mlx5_ib_cq
       107: modifier: *
      108: name: send_cq
    109: decl_stmt: 
     110: decl: 
      111: type: 
       112: name: 
        113: name: struct
        114: name: mlx5_ib_cq
       115: modifier: *
      116: name: recv_cq
    117: decl_stmt: 
     118: decl: 
      119: type: 
       120: name: unsigned
       121: name: long
      122: name: flags
    123: decl_stmt: 
     124: decl: 
      125: type: 
       126: name: u32
      127: name: uidx
      128: init: 
       129: expr: 
        130: name: MLX5_IB_DEFAULT_UIDX
    131: decl_stmt: 
     132: decl: 
      133: type: 
       134: name: 
        135: name: struct
        136: name: mlx5_ib_create_qp
      137: name: ucmd
    138: decl_stmt: 
     139: decl: 
      140: type: 
       141: name: 
        142: name: struct
        143: name: mlx5_ib_qp_base
       144: modifier: *
      145: name: base
    146: decl_stmt: 
     147: decl: 
      148: type: 
       149: name: int
      150: name: mlx5_st
    151: decl_stmt: 
     152: decl: 
      153: type: 
       154: name: void
       155: modifier: *
      156: name: qpc
    157: decl_stmt: 
     158: decl: 
      159: type: 
       160: name: u32
       161: modifier: *
      162: name: in
    163: decl_stmt: 
     164: decl: 
      165: type: 
       166: name: int
      167: name: err
    168: expr_stmt: 
     169: expr: 
      170: call: 
       171: name: mutex_init
       172: argument_list: 
        173: argument: 
         174: expr: 
          175: operator: &
          176: name: 
           177: name: qp
           178: operator: ->
           179: name: mutex
    180: expr_stmt: 
     181: expr: 
      182: call: 
       183: name: spin_lock_init
       184: argument_list: 
        185: argument: 
         186: expr: 
          187: operator: &
          188: name: 
           189: name: qp
           190: operator: ->
           191: name: sq
           192: operator: .
           193: name: lock
    194: expr_stmt: 
     195: expr: 
      196: call: 
       197: name: spin_lock_init
       198: argument_list: 
        199: argument: 
         200: expr: 
          201: operator: &
          202: name: 
           203: name: qp
           204: operator: ->
           205: name: rq
           206: operator: .
           207: name: lock
    208: expr_stmt: 
     209: expr: 
      210: name: mlx5_st
      211: operator: =
      212: call: 
       213: name: to_mlx5_st
       214: argument_list: 
        215: argument: 
         216: expr: 
          217: name: 
           218: name: init_attr
           219: operator: ->
           220: name: qp_type
    221: if_stmt: 
     222: if: 
      223: condition: 
       224: expr: 
        225: name: mlx5_st
        226: operator: <
        227: literal: 0
      228: block: 
       229: block_content: 
        230: return: 
         231: expr: 
          232: operator: -
          233: name: EINVAL
    234: if_stmt: 
     235: if: 
      236: condition: 
       237: expr: 
        238: name: 
         239: name: init_attr
         240: operator: ->
         241: name: rwq_ind_tbl
      242: block: 
       243: block_content: 
        244: if_stmt: 
         245: if: 
          246: condition: 
           247: expr: 
            248: operator: !
            249: name: udata
          250: block: 
           251: block_content: 
            252: return: 
             253: expr: 
              254: operator: -
              255: name: ENOSYS
        256: expr_stmt: 
         257: expr: 
          258: name: err
          259: operator: =
          260: call: 
           261: name: create_rss_raw_qp_tir
           262: argument_list: 
            263: argument: 
             264: expr: 
              265: name: dev
            266: argument: 
             267: expr: 
              268: name: qp
            269: argument: 
             270: expr: 
              271: name: pd
            272: argument: 
             273: expr: 
              274: name: init_attr
            275: argument: 
             276: expr: 
              277: name: udata
        278: return: 
         279: expr: 
          280: name: err
    281: if_stmt: 
     282: if: 
      283: condition: 
       284: expr: 
        285: name: 
         286: name: init_attr
         287: operator: ->
         288: name: create_flags
        289: operator: &
        290: name: IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK
      291: block: 
       292: block_content: 
        293: if_stmt: 
         294: if: 
          295: condition: 
           296: expr: 
            297: operator: !
            298: call: 
             299: name: MLX5_CAP_GEN
             300: argument_list: 
              301: argument: 
               302: expr: 
                303: name: mdev
              304: argument: 
               305: expr: 
                306: name: block_lb_mc
          307: block: 
           308: block_content: 
            309: expr_stmt: 
             310: expr: 
              311: call: 
               312: name: mlx5_ib_dbg
               313: argument_list: 
                314: argument: 
                 315: expr: 
                  316: name: dev
                317: argument: 
                 318: expr: 
                  319: literal: "block multicast loopback isn't supported\n"
            320: return: 
             321: expr: 
              322: operator: -
              323: name: EINVAL
         324: else: 
          325: block: 
           326: block_content: 
            327: expr_stmt: 
             328: expr: 
              329: name: 
               330: name: qp
               331: operator: ->
               332: name: flags
              333: operator: |=
              334: name: MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK
    335: if_stmt: 
     336: if: 
      337: condition: 
       338: expr: 
        339: name: 
         340: name: init_attr
         341: operator: ->
         342: name: create_flags
        343: operator: &
        344: operator: (
        345: name: IB_QP_CREATE_CROSS_CHANNEL
        346: operator: |
        347: name: IB_QP_CREATE_MANAGED_SEND
        348: operator: |
        349: name: IB_QP_CREATE_MANAGED_RECV
        350: operator: )
      351: block: 
       352: block_content: 
        353: if_stmt: 
         354: if: 
          355: condition: 
           356: expr: 
            357: operator: !
            358: call: 
             359: name: MLX5_CAP_GEN
             360: argument_list: 
              361: argument: 
               362: expr: 
                363: name: mdev
              364: argument: 
               365: expr: 
                366: name: cd
          367: block: 
           368: block_content: 
            369: expr_stmt: 
             370: expr: 
              371: call: 
               372: name: mlx5_ib_dbg
               373: argument_list: 
                374: argument: 
                 375: expr: 
                  376: name: dev
                377: argument: 
                 378: expr: 
                  379: literal: "cross-channel isn't supported\n"
            380: return: 
             381: expr: 
              382: operator: -
              383: name: EINVAL
        384: if_stmt: 
         385: if: 
          386: condition: 
           387: expr: 
            388: name: 
             389: name: init_attr
             390: operator: ->
             391: name: create_flags
            392: operator: &
            393: name: IB_QP_CREATE_CROSS_CHANNEL
          394: block: 
           395: block_content: 
            396: expr_stmt: 
             397: expr: 
              398: name: 
               399: name: qp
               400: operator: ->
               401: name: flags
              402: operator: |=
              403: name: MLX5_IB_QP_CROSS_CHANNEL
        404: if_stmt: 
         405: if: 
          406: condition: 
           407: expr: 
            408: name: 
             409: name: init_attr
             410: operator: ->
             411: name: create_flags
            412: operator: &
            413: name: IB_QP_CREATE_MANAGED_SEND
          414: block: 
           415: block_content: 
            416: expr_stmt: 
             417: expr: 
              418: name: 
               419: name: qp
               420: operator: ->
               421: name: flags
              422: operator: |=
              423: name: MLX5_IB_QP_MANAGED_SEND
        424: if_stmt: 
         425: if: 
          426: condition: 
           427: expr: 
            428: name: 
             429: name: init_attr
             430: operator: ->
             431: name: create_flags
            432: operator: &
            433: name: IB_QP_CREATE_MANAGED_RECV
          434: block: 
           435: block_content: 
            436: expr_stmt: 
             437: expr: 
              438: name: 
               439: name: qp
               440: operator: ->
               441: name: flags
              442: operator: |=
              443: name: MLX5_IB_QP_MANAGED_RECV
    444: if_stmt: 
     445: if: 
      446: condition: 
       447: expr: 
        448: name: 
         449: name: init_attr
         450: operator: ->
         451: name: qp_type
        452: operator: ==
        453: name: IB_QPT_UD
        454: operator: &&
        455: operator: (
        456: name: 
         457: name: init_attr
         458: operator: ->
         459: name: create_flags
        460: operator: &
        461: name: IB_QP_CREATE_IPOIB_UD_LSO
        462: operator: )
      463: block: 
       464: block_content: 
        465: if_stmt: 
         466: if: 
          467: condition: 
           468: expr: 
            469: operator: !
            470: call: 
             471: name: MLX5_CAP_GEN
             472: argument_list: 
              473: argument: 
               474: expr: 
                475: name: mdev
              476: argument: 
               477: expr: 
                478: name: ipoib_basic_offloads
          479: block: 
           480: block_content: 
            481: expr_stmt: 
             482: expr: 
              483: call: 
               484: name: mlx5_ib_dbg
               485: argument_list: 
                486: argument: 
                 487: expr: 
                  488: name: dev
                489: argument: 
                 490: expr: 
                  491: literal: "ipoib UD lso qp isn't supported\n"
            492: return: 
             493: expr: 
              494: operator: -
              495: name: EOPNOTSUPP
    496: if_stmt: 
     497: if: 
      498: condition: 
       499: expr: 
        500: name: 
         501: name: init_attr
         502: operator: ->
         503: name: create_flags
        504: operator: &
        505: name: IB_QP_CREATE_SCATTER_FCS
      506: block: 
       507: block_content: 
        508: if_stmt: 
         509: if: 
          510: condition: 
           511: expr: 
            512: name: 
             513: name: init_attr
             514: operator: ->
             515: name: qp_type
            516: operator: !=
            517: name: IB_QPT_RAW_PACKET
          518: block: 
           519: block_content: 
            520: expr_stmt: 
             521: expr: 
              522: call: 
               523: name: mlx5_ib_dbg
               524: argument_list: 
                525: argument: 
                 526: expr: 
                  527: name: dev
                528: argument: 
                 529: expr: 
                  530: literal: "Scatter FCS is supported only for Raw Packet QPs"
            531: return: 
             532: expr: 
              533: operator: -
              534: name: EOPNOTSUPP
        535: if_stmt: 
         536: if: 
          537: condition: 
           538: expr: 
            539: operator: !
            540: call: 
             541: name: MLX5_CAP_GEN
             542: argument_list: 
              543: argument: 
               544: expr: 
                545: name: 
                 546: name: dev
                 547: operator: ->
                 548: name: mdev
              549: argument: 
               550: expr: 
                551: name: eth_net_offloads
            552: operator: ||
            553: operator: !
            554: call: 
             555: name: MLX5_CAP_ETH
             556: argument_list: 
              557: argument: 
               558: expr: 
                559: name: 
                 560: name: dev
                 561: operator: ->
                 562: name: mdev
              563: argument: 
               564: expr: 
                565: name: scatter_fcs
          566: block: 
           567: block_content: 
            568: expr_stmt: 
             569: expr: 
              570: call: 
               571: name: mlx5_ib_dbg
               572: argument_list: 
                573: argument: 
                 574: expr: 
                  575: name: dev
                576: argument: 
                 577: expr: 
                  578: literal: "Scatter FCS isn't supported\n"
            579: return: 
             580: expr: 
              581: operator: -
              582: name: EOPNOTSUPP
        583: expr_stmt: 
         584: expr: 
          585: name: 
           586: name: qp
           587: operator: ->
           588: name: flags
          589: operator: |=
          590: name: MLX5_IB_QP_CAP_SCATTER_FCS
    591: if_stmt: 
     592: if: 
      593: condition: 
       594: expr: 
        595: name: 
         596: name: init_attr
         597: operator: ->
         598: name: sq_sig_type
        599: operator: ==
        600: name: IB_SIGNAL_ALL_WR
      601: block: 
       602: block_content: 
        603: expr_stmt: 
         604: expr: 
          605: name: 
           606: name: qp
           607: operator: ->
           608: name: sq_signal_bits
          609: operator: =
          610: name: MLX5_WQE_CTRL_CQ_UPDATE
    611: if_stmt: 
     612: if: 
      613: condition: 
       614: expr: 
        615: name: 
         616: name: init_attr
         617: operator: ->
         618: name: create_flags
        619: operator: &
        620: name: IB_QP_CREATE_CVLAN_STRIPPING
      621: block: 
       622: block_content: 
        623: if_stmt: 
         624: if: 
          625: condition: 
           626: expr: 
            627: operator: !
            628: operator: (
            629: call: 
             630: name: MLX5_CAP_GEN
             631: argument_list: 
              632: argument: 
               633: expr: 
                634: name: 
                 635: name: dev
                 636: operator: ->
                 637: name: mdev
              638: argument: 
               639: expr: 
                640: name: eth_net_offloads
            641: operator: &&
            642: call: 
             643: name: MLX5_CAP_ETH
             644: argument_list: 
              645: argument: 
               646: expr: 
                647: name: 
                 648: name: dev
                 649: operator: ->
                 650: name: mdev
              651: argument: 
               652: expr: 
                653: name: vlan_cap
            654: operator: )
            655: operator: ||
            656: operator: (
            657: name: 
             658: name: init_attr
             659: operator: ->
             660: name: qp_type
            661: operator: !=
            662: name: IB_QPT_RAW_PACKET
            663: operator: )
          664: block: 
           665: block_content: 
            666: return: 
             667: expr: 
              668: operator: -
              669: name: EOPNOTSUPP
        670: expr_stmt: 
         671: expr: 
          672: name: 
           673: name: qp
           674: operator: ->
           675: name: flags
          676: operator: |=
          677: name: MLX5_IB_QP_CVLAN_STRIPPING
    678: if_stmt: 
     679: if: 
      680: condition: 
       681: expr: 
        682: name: pd
        683: operator: &&
        684: name: 
         685: name: pd
         686: operator: ->
         687: name: uobject
      688: block: 
       689: block_content: 
        690: if_stmt: 
         691: if: 
          692: condition: 
           693: expr: 
            694: call: 
             695: name: ib_copy_from_udata
             696: argument_list: 
              697: argument: 
               698: expr: 
                699: operator: &
                700: name: ucmd
              701: argument: 
               702: expr: 
                703: name: udata
              704: argument: 
               705: expr: 
                706: sizeof: 
                 707: argument_list: 
                  708: argument: 
                   709: expr: 
                    710: name: ucmd
          711: block: 
           712: block_content: 
            713: expr_stmt: 
             714: expr: 
              715: call: 
               716: name: mlx5_ib_dbg
               717: argument_list: 
                718: argument: 
                 719: expr: 
                  720: name: dev
                721: argument: 
                 722: expr: 
                  723: literal: "copy failed\n"
            724: return: 
             725: expr: 
              726: operator: -
              727: name: EFAULT
        728: expr_stmt: 
         729: expr: 
          730: name: err
          731: operator: =
          732: call: 
           733: name: get_qp_user_index
           734: argument_list: 
            735: argument: 
             736: expr: 
              737: call: 
               738: name: to_mucontext
               739: argument_list: 
                740: argument: 
                 741: expr: 
                  742: name: 
                   743: name: pd
                   744: operator: ->
                   745: name: uobject
                   746: operator: ->
                   747: name: context
            748: argument: 
             749: expr: 
              750: operator: &
              751: name: ucmd
            752: argument: 
             753: expr: 
              754: name: 
               755: name: udata
               756: operator: ->
               757: name: inlen
            758: argument: 
             759: expr: 
              760: operator: &
              761: name: uidx
        762: if_stmt: 
         763: if: 
          764: condition: 
           765: expr: 
            766: name: err
          767: block: 
           768: block_content: 
            769: return: 
             770: expr: 
              771: name: err
        772: expr_stmt: 
         773: expr: 
          774: name: 
           775: name: qp
           776: operator: ->
           777: name: wq_sig
          778: operator: =
          779: operator: !
          780: operator: !
          781: operator: (
          782: name: 
           783: name: ucmd
           784: operator: .
           785: name: flags
          786: operator: &
          787: name: MLX5_QP_FLAG_SIGNATURE
          788: operator: )
        789: expr_stmt: 
         790: expr: 
          791: name: 
           792: name: qp
           793: operator: ->
           794: name: scat_cqe
          795: operator: =
          796: operator: !
          797: operator: !
          798: operator: (
          799: name: 
           800: name: ucmd
           801: operator: .
           802: name: flags
          803: operator: &
          804: name: MLX5_QP_FLAG_SCATTER_CQE
          805: operator: )
        806: if_stmt: 
         807: if: 
          808: condition: 
           809: expr: 
            810: name: 
             811: name: ucmd
             812: operator: .
             813: name: flags
            814: operator: &
            815: name: MLX5_QP_FLAG_TUNNEL_OFFLOADS
          816: block: 
           817: block_content: 
            818: if_stmt: 
             819: if: 
              820: condition: 
               821: expr: 
                822: name: 
                 823: name: init_attr
                 824: operator: ->
                 825: name: qp_type
                826: operator: !=
                827: name: IB_QPT_RAW_PACKET
                828: operator: ||
                829: operator: !
                830: call: 
                 831: name: tunnel_offload_supported
                 832: argument_list: 
                  833: argument: 
                   834: expr: 
                    835: name: mdev
              836: block: 
               837: block_content: 
                838: expr_stmt: 
                 839: expr: 
                  840: call: 
                   841: name: mlx5_ib_dbg
                   842: argument_list: 
                    843: argument: 
                     844: expr: 
                      845: name: dev
                    846: argument: 
                     847: expr: 
                      848: literal: "Tunnel offload isn't supported\n"
                849: return: 
                 850: expr: 
                  851: operator: -
                  852: name: EOPNOTSUPP
            853: expr_stmt: 
             854: expr: 
              855: name: 
               856: name: qp
               857: operator: ->
               858: name: tunnel_offload_en
              859: operator: =
              860: literal: true
        861: if_stmt: 
         862: if: 
          863: condition: 
           864: expr: 
            865: name: 
             866: name: init_attr
             867: operator: ->
             868: name: create_flags
            869: operator: &
            870: name: IB_QP_CREATE_SOURCE_QPN
          871: block: 
           872: block_content: 
            873: if_stmt: 
             874: if: 
              875: condition: 
               876: expr: 
                877: name: 
                 878: name: init_attr
                 879: operator: ->
                 880: name: qp_type
                881: operator: !=
                882: name: IB_QPT_UD
                883: operator: ||
                884: operator: (
                885: call: 
                 886: name: MLX5_CAP_GEN
                 887: argument_list: 
                  888: argument: 
                   889: expr: 
                    890: name: 
                     891: name: dev
                     892: operator: ->
                     893: name: mdev
                  894: argument: 
                   895: expr: 
                    896: name: port_type
                897: operator: !=
                898: name: MLX5_CAP_PORT_TYPE_IB
                899: operator: )
                900: operator: ||
                901: operator: !
                902: call: 
                 903: name: mlx5_get_flow_namespace
                 904: argument_list: 
                  905: argument: 
                   906: expr: 
                    907: name: 
                     908: name: dev
                     909: operator: ->
                     910: name: mdev
                  911: argument: 
                   912: expr: 
                    913: name: MLX5_FLOW_NAMESPACE_BYPASS
              914: block: 
               915: block_content: 
                916: expr_stmt: 
                 917: expr: 
                  918: call: 
                   919: name: mlx5_ib_dbg
                   920: argument_list: 
                    921: argument: 
                     922: expr: 
                      923: name: dev
                    924: argument: 
                     925: expr: 
                      926: literal: "Source QP option isn't supported\n"
                927: return: 
                 928: expr: 
                  929: operator: -
                  930: name: EOPNOTSUPP
            931: expr_stmt: 
             932: expr: 
              933: name: 
               934: name: qp
               935: operator: ->
               936: name: flags
              937: operator: |=
              938: name: MLX5_IB_QP_UNDERLAY
            939: expr_stmt: 
             940: expr: 
              941: name: 
               942: name: qp
               943: operator: ->
               944: name: underlay_qpn
              945: operator: =
              946: name: 
               947: name: init_attr
               948: operator: ->
               949: name: source_qpn
     950: else: 
      951: block: 
       952: block_content: 
        953: expr_stmt: 
         954: expr: 
          955: name: 
           956: name: qp
           957: operator: ->
           958: name: wq_sig
          959: operator: =
          960: operator: !
          961: operator: !
          962: name: wq_signature
    963: expr_stmt: 
     964: expr: 
      965: name: base
      966: operator: =
      967: ternary: 
       968: condition: 
        969: expr: 
         970: operator: (
         971: name: 
          972: name: init_attr
          973: operator: ->
          974: name: qp_type
         975: operator: ==
         976: name: IB_QPT_RAW_PACKET
         977: operator: ||
         978: name: 
          979: name: qp
          980: operator: ->
          981: name: flags
         982: operator: &
         983: name: MLX5_IB_QP_UNDERLAY
         984: operator: )
       985: then: 
        986: expr: 
         987: operator: &
         988: name: 
          989: name: qp
          990: operator: ->
          991: name: raw_packet_qp
          992: operator: .
          993: name: rq
          994: operator: .
          995: name: base
       996: else: 
        997: expr: 
         998: operator: &
         999: name: 
          1000: name: qp
          1001: operator: ->
          1002: name: trans_qp
          1003: operator: .
          1004: name: base
    1005: expr_stmt: 
     1006: expr: 
      1007: name: 
       1008: name: qp
       1009: operator: ->
       1010: name: has_rq
      1011: operator: =
      1012: call: 
       1013: name: qp_has_rq
       1014: argument_list: 
        1015: argument: 
         1016: expr: 
          1017: name: init_attr
    1018: expr_stmt: 
     1019: expr: 
      1020: name: err
      1021: operator: =
      1022: call: 
       1023: name: set_rq_size
       1024: argument_list: 
        1025: argument: 
         1026: expr: 
          1027: name: dev
        1028: argument: 
         1029: expr: 
          1030: operator: &
          1031: name: 
           1032: name: init_attr
           1033: operator: ->
           1034: name: cap
        1035: argument: 
         1036: expr: 
          1037: name: 
           1038: name: qp
           1039: operator: ->
           1040: name: has_rq
        1041: argument: 
         1042: expr: 
          1043: name: qp
        1044: argument: 
         1045: expr: 
          1046: ternary: 
           1047: condition: 
            1048: expr: 
             1049: operator: (
             1050: name: pd
             1051: operator: &&
             1052: name: 
              1053: name: pd
              1054: operator: ->
              1055: name: uobject
             1056: operator: )
           1057: then: 
            1058: expr: 
             1059: operator: &
             1060: name: ucmd
           1061: else: 
            1062: expr: 
             1063: name: NULL
    1064: if_stmt: 
     1065: if: 
      1066: condition: 
       1067: expr: 
        1068: name: err
      1069: block: 
       1070: block_content: 
        1071: expr_stmt: 
         1072: expr: 
          1073: call: 
           1074: name: mlx5_ib_dbg
           1075: argument_list: 
            1076: argument: 
             1077: expr: 
              1078: name: dev
            1079: argument: 
             1080: expr: 
              1081: literal: "err %d\n"
            1082: argument: 
             1083: expr: 
              1084: name: err
        1085: return: 
         1086: expr: 
          1087: name: err
    1088: if_stmt: 
     1089: if: 
      1090: condition: 
       1091: expr: 
        1092: name: pd
      1093: block: 
       1094: block_content: 
        1095: if_stmt: 
         1096: if: 
          1097: condition: 
           1098: expr: 
            1099: name: 
             1100: name: pd
             1101: operator: ->
             1102: name: uobject
          1103: block: 
           1104: block_content: 
            1105: decl_stmt: 
             1106: decl: 
              1107: type: 
               1108: name: __u32
              1109: name: max_wqes
              1110: init: 
               1111: expr: 
                1112: literal: 1
                1113: operator: <<
                1114: call: 
                 1115: name: MLX5_CAP_GEN
                 1116: argument_list: 
                  1117: argument: 
                   1118: expr: 
                    1119: name: mdev
                  1120: argument: 
                   1121: expr: 
                    1122: name: log_max_qp_sz
            1123: expr_stmt: 
             1124: expr: 
              1125: call: 
               1126: name: mlx5_ib_dbg
               1127: argument_list: 
                1128: argument: 
                 1129: expr: 
                  1130: name: dev
                1131: argument: 
                 1132: expr: 
                  1133: literal: "requested sq_wqe_count (%d)\n"
                1134: argument: 
                 1135: expr: 
                  1136: name: 
                   1137: name: ucmd
                   1138: operator: .
                   1139: name: sq_wqe_count
            1140: if_stmt: 
             1141: if: 
              1142: condition: 
               1143: expr: 
                1144: name: 
                 1145: name: ucmd
                 1146: operator: .
                 1147: name: rq_wqe_shift
                1148: operator: !=
                1149: name: 
                 1150: name: qp
                 1151: operator: ->
                 1152: name: rq
                 1153: operator: .
                 1154: name: wqe_shift
                1155: operator: ||
                1156: name: 
                 1157: name: ucmd
                 1158: operator: .
                 1159: name: rq_wqe_count
                1160: operator: !=
                1161: name: 
                 1162: name: qp
                 1163: operator: ->
                 1164: name: rq
                 1165: operator: .
                 1166: name: wqe_cnt
              1167: block: 
               1168: block_content: 
                1169: expr_stmt: 
                 1170: expr: 
                  1171: call: 
                   1172: name: mlx5_ib_dbg
                   1173: argument_list: 
                    1174: argument: 
                     1175: expr: 
                      1176: name: dev
                    1177: argument: 
                     1178: expr: 
                      1179: literal: "invalid rq params\n"
                1180: return: 
                 1181: expr: 
                  1182: operator: -
                  1183: name: EINVAL
            1184: if_stmt: 
             1185: if: 
              1186: condition: 
               1187: expr: 
                1188: name: 
                 1189: name: ucmd
                 1190: operator: .
                 1191: name: sq_wqe_count
                1192: operator: >
                1193: name: max_wqes
              1194: block: 
               1195: block_content: 
                1196: expr_stmt: 
                 1197: expr: 
                  1198: call: 
                   1199: name: mlx5_ib_dbg
                   1200: argument_list: 
                    1201: argument: 
                     1202: expr: 
                      1203: name: dev
                    1204: argument: 
                     1205: expr: 
                      1206: literal: "requested sq_wqe_count (%d)>max allowed (%d)\n"
                    1207: argument: 
                     1208: expr: 
                      1209: name: 
                       1210: name: ucmd
                       1211: operator: .
                       1212: name: sq_wqe_count
                    1213: argument: 
                     1214: expr: 
                      1215: name: max_wqes
                1216: return: 
                 1217: expr: 
                  1218: operator: -
                  1219: name: EINVAL
            1220: if_stmt: 
             1221: if: 
              1222: condition: 
               1223: expr: 
                1224: name: 
                 1225: name: init_attr
                 1226: operator: ->
                 1227: name: create_flags
                1228: operator: &
                1229: call: 
                 1230: name: mlx5_ib_create_qp_sqpn_qp1
                 1231: argument_list: 
              1232: block: 
               1233: block_content: 
                1234: expr_stmt: 
                 1235: expr: 
                  1236: call: 
                   1237: name: mlx5_ib_dbg
                   1238: argument_list: 
                    1239: argument: 
                     1240: expr: 
                      1241: name: dev
                    1242: argument: 
                     1243: expr: 
                      1244: literal: "user-space is not allowed to create UD QPs spoofing as QP1\n"
                1245: return: 
                 1246: expr: 
                  1247: operator: -
                  1248: name: EINVAL
            1249: expr_stmt: 
             1250: expr: 
              1251: name: err
              1252: operator: =
              1253: call: 
               1254: name: create_user_qp
               1255: argument_list: 
                1256: argument: 
                 1257: expr: 
                  1258: name: dev
                1259: argument: 
                 1260: expr: 
                  1261: name: pd
                1262: argument: 
                 1263: expr: 
                  1264: name: qp
                1265: argument: 
                 1266: expr: 
                  1267: name: udata
                1268: argument: 
                 1269: expr: 
                  1270: name: init_attr
                1271: argument: 
                 1272: expr: 
                  1273: operator: &
                  1274: name: in
                1275: argument: 
                 1276: expr: 
                  1277: operator: &
                  1278: name: resp
                1279: argument: 
                 1280: expr: 
                  1281: operator: &
                  1282: name: inlen
                1283: argument: 
                 1284: expr: 
                  1285: name: base
            1286: if_stmt: 
             1287: if: 
              1288: condition: 
               1289: expr: 
                1290: name: err
              1291: block: 
               1292: block_content: 
                1293: expr_stmt: 
                 1294: expr: 
                  1295: call: 
                   1296: name: mlx5_ib_dbg
                   1297: argument_list: 
                    1298: argument: 
                     1299: expr: 
                      1300: name: dev
                    1301: argument: 
                     1302: expr: 
                      1303: literal: "err %d\n"
                    1304: argument: 
                     1305: expr: 
                      1306: name: err
         1307: else: 
          1308: block: 
           1309: block_content: 
            1310: expr_stmt: 
             1311: expr: 
              1312: name: err
              1313: operator: =
              1314: call: 
               1315: name: create_kernel_qp
               1316: argument_list: 
                1317: argument: 
                 1318: expr: 
                  1319: name: dev
                1320: argument: 
                 1321: expr: 
                  1322: name: init_attr
                1323: argument: 
                 1324: expr: 
                  1325: name: qp
                1326: argument: 
                 1327: expr: 
                  1328: operator: &
                  1329: name: in
                1330: argument: 
                 1331: expr: 
                  1332: operator: &
                  1333: name: inlen
                1334: argument: 
                 1335: expr: 
                  1336: name: base
            1337: if_stmt: 
             1338: if: 
              1339: condition: 
               1340: expr: 
                1341: name: err
              1342: block: 
               1343: block_content: 
                1344: expr_stmt: 
                 1345: expr: 
                  1346: call: 
                   1347: name: mlx5_ib_dbg
                   1348: argument_list: 
                    1349: argument: 
                     1350: expr: 
                      1351: name: dev
                    1352: argument: 
                     1353: expr: 
                      1354: literal: "err %d\n"
                    1355: argument: 
                     1356: expr: 
                      1357: name: err
        1358: if_stmt: 
         1359: if: 
          1360: condition: 
           1361: expr: 
            1362: name: err
          1363: block: 
           1364: block_content: 
            1365: return: 
             1366: expr: 
              1367: name: err
     1368: else: 
      1369: block: 
       1370: block_content: 
        1371: expr_stmt: 
         1372: expr: 
          1373: name: in
          1374: operator: =
          1375: call: 
           1376: name: kvzalloc
           1377: argument_list: 
            1378: argument: 
             1379: expr: 
              1380: name: inlen
            1381: argument: 
             1382: expr: 
              1383: name: GFP_KERNEL
        1384: if_stmt: 
         1385: if: 
          1386: condition: 
           1387: expr: 
            1388: operator: !
            1389: name: in
          1390: block: 
           1391: block_content: 
            1392: return: 
             1393: expr: 
              1394: operator: -
              1395: name: ENOMEM
        1396: expr_stmt: 
         1397: expr: 
          1398: name: 
           1399: name: qp
           1400: operator: ->
           1401: name: create_type
          1402: operator: =
          1403: name: MLX5_QP_EMPTY
    1404: if_stmt: 
     1405: if: 
      1406: condition: 
       1407: expr: 
        1408: call: 
         1409: name: is_sqp
         1410: argument_list: 
          1411: argument: 
           1412: expr: 
            1413: name: 
             1414: name: init_attr
             1415: operator: ->
             1416: name: qp_type
      1417: block: 
       1418: block_content: 
        1419: expr_stmt: 
         1420: expr: 
          1421: name: 
           1422: name: qp
           1423: operator: ->
           1424: name: port
          1425: operator: =
          1426: name: 
           1427: name: init_attr
           1428: operator: ->
           1429: name: port_num
    1430: expr_stmt: 
     1431: expr: 
      1432: name: qpc
      1433: operator: =
      1434: call: 
       1435: name: MLX5_ADDR_OF
       1436: argument_list: 
        1437: argument: 
         1438: expr: 
          1439: name: create_qp_in
        1440: argument: 
         1441: expr: 
          1442: name: in
        1443: argument: 
         1444: expr: 
          1445: name: qpc
    1446: expr_stmt: 
     1447: expr: 
      1448: call: 
       1449: name: MLX5_SET
       1450: argument_list: 
        1451: argument: 
         1452: expr: 
          1453: name: qpc
        1454: argument: 
         1455: expr: 
          1456: name: qpc
        1457: argument: 
         1458: expr: 
          1459: name: st
        1460: argument: 
         1461: expr: 
          1462: name: mlx5_st
    1463: expr_stmt: 
     1464: expr: 
      1465: call: 
       1466: name: MLX5_SET
       1467: argument_list: 
        1468: argument: 
         1469: expr: 
          1470: name: qpc
        1471: argument: 
         1472: expr: 
          1473: name: qpc
        1474: argument: 
         1475: expr: 
          1476: name: pm_state
        1477: argument: 
         1478: expr: 
          1479: name: MLX5_QP_PM_MIGRATED
    1480: if_stmt: 
     1481: if: 
      1482: condition: 
       1483: expr: 
        1484: name: 
         1485: name: init_attr
         1486: operator: ->
         1487: name: qp_type
        1488: operator: !=
        1489: name: MLX5_IB_QPT_REG_UMR
      1490: block: 
       1491: block_content: 
        1492: expr_stmt: 
         1493: expr: 
          1494: call: 
           1495: name: MLX5_SET
           1496: argument_list: 
            1497: argument: 
             1498: expr: 
              1499: name: qpc
            1500: argument: 
             1501: expr: 
              1502: name: qpc
            1503: argument: 
             1504: expr: 
              1505: name: pd
            1506: argument: 
             1507: expr: 
              1508: call: 
               1509: name: to_mpd
               1510: argument_list: 
                1511: argument: 
                 1512: expr: 
                  1513: ternary: 
                   1514: condition: 
                    1515: expr: 
                     1516: name: pd
                   1517: then: 
                    1518: expr: 
                     1519: name: pd
                   1520: else: 
                    1521: expr: 
                     1522: name: 
                      1523: name: devr
                      1524: operator: ->
                      1525: name: p0
              1526: operator: ->
              1527: name: pdn
     1528: else: 
      1529: block: 
       1530: block_content: 
        1531: expr_stmt: 
         1532: expr: 
          1533: call: 
           1534: name: MLX5_SET
           1535: argument_list: 
            1536: argument: 
             1537: expr: 
              1538: name: qpc
            1539: argument: 
             1540: expr: 
              1541: name: qpc
            1542: argument: 
             1543: expr: 
              1544: name: latency_sensitive
            1545: argument: 
             1546: expr: 
              1547: literal: 1
    1548: if_stmt: 
     1549: if: 
      1550: condition: 
       1551: expr: 
        1552: name: 
         1553: name: qp
         1554: operator: ->
         1555: name: wq_sig
      1556: block: 
       1557: block_content: 
        1558: expr_stmt: 
         1559: expr: 
          1560: call: 
           1561: name: MLX5_SET
           1562: argument_list: 
            1563: argument: 
             1564: expr: 
              1565: name: qpc
            1566: argument: 
             1567: expr: 
              1568: name: qpc
            1569: argument: 
             1570: expr: 
              1571: name: wq_signature
            1572: argument: 
             1573: expr: 
              1574: literal: 1
    1575: if_stmt: 
     1576: if: 
      1577: condition: 
       1578: expr: 
        1579: name: 
         1580: name: qp
         1581: operator: ->
         1582: name: flags
        1583: operator: &
        1584: name: MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK
      1585: block: 
       1586: block_content: 
        1587: expr_stmt: 
         1588: expr: 
          1589: call: 
           1590: name: MLX5_SET
           1591: argument_list: 
            1592: argument: 
             1593: expr: 
              1594: name: qpc
            1595: argument: 
             1596: expr: 
              1597: name: qpc
            1598: argument: 
             1599: expr: 
              1600: name: block_lb_mc
            1601: argument: 
             1602: expr: 
              1603: literal: 1
    1604: if_stmt: 
     1605: if: 
      1606: condition: 
       1607: expr: 
        1608: name: 
         1609: name: qp
         1610: operator: ->
         1611: name: flags
        1612: operator: &
        1613: name: MLX5_IB_QP_CROSS_CHANNEL
      1614: block: 
       1615: block_content: 
        1616: expr_stmt: 
         1617: expr: 
          1618: call: 
           1619: name: MLX5_SET
           1620: argument_list: 
            1621: argument: 
             1622: expr: 
              1623: name: qpc
            1624: argument: 
             1625: expr: 
              1626: name: qpc
            1627: argument: 
             1628: expr: 
              1629: name: cd_master
            1630: argument: 
             1631: expr: 
              1632: literal: 1
    1633: if_stmt: 
     1634: if: 
      1635: condition: 
       1636: expr: 
        1637: name: 
         1638: name: qp
         1639: operator: ->
         1640: name: flags
        1641: operator: &
        1642: name: MLX5_IB_QP_MANAGED_SEND
      1643: block: 
       1644: block_content: 
        1645: expr_stmt: 
         1646: expr: 
          1647: call: 
           1648: name: MLX5_SET
           1649: argument_list: 
            1650: argument: 
             1651: expr: 
              1652: name: qpc
            1653: argument: 
             1654: expr: 
              1655: name: qpc
            1656: argument: 
             1657: expr: 
              1658: name: cd_slave_send
            1659: argument: 
             1660: expr: 
              1661: literal: 1
    1662: if_stmt: 
     1663: if: 
      1664: condition: 
       1665: expr: 
        1666: name: 
         1667: name: qp
         1668: operator: ->
         1669: name: flags
        1670: operator: &
        1671: name: MLX5_IB_QP_MANAGED_RECV
      1672: block: 
       1673: block_content: 
        1674: expr_stmt: 
         1675: expr: 
          1676: call: 
           1677: name: MLX5_SET
           1678: argument_list: 
            1679: argument: 
             1680: expr: 
              1681: name: qpc
            1682: argument: 
             1683: expr: 
              1684: name: qpc
            1685: argument: 
             1686: expr: 
              1687: name: cd_slave_receive
            1688: argument: 
             1689: expr: 
              1690: literal: 1
    1691: if_stmt: 
     1692: if: 
      1693: condition: 
       1694: expr: 
        1695: name: 
         1696: name: qp
         1697: operator: ->
         1698: name: scat_cqe
        1699: operator: &&
        1700: call: 
         1701: name: is_connected
         1702: argument_list: 
          1703: argument: 
           1704: expr: 
            1705: name: 
             1706: name: init_attr
             1707: operator: ->
             1708: name: qp_type
      1709: block: 
       1710: block_content: 
        1711: decl_stmt: 
         1712: decl: 
          1713: type: 
           1714: name: int
          1715: name: rcqe_sz
        1716: decl_stmt: 
         1717: decl: 
          1718: type: 
           1719: name: int
          1720: name: scqe_sz
        1721: expr_stmt: 
         1722: expr: 
          1723: name: rcqe_sz
          1724: operator: =
          1725: call: 
           1726: name: mlx5_ib_get_cqe_size
           1727: argument_list: 
            1728: argument: 
             1729: expr: 
              1730: name: dev
            1731: argument: 
             1732: expr: 
              1733: name: 
               1734: name: init_attr
               1735: operator: ->
               1736: name: recv_cq
        1737: expr_stmt: 
         1738: expr: 
          1739: name: scqe_sz
          1740: operator: =
          1741: call: 
           1742: name: mlx5_ib_get_cqe_size
           1743: argument_list: 
            1744: argument: 
             1745: expr: 
              1746: name: dev
            1747: argument: 
             1748: expr: 
              1749: name: 
               1750: name: init_attr
               1751: operator: ->
               1752: name: send_cq
        1753: if_stmt: 
         1754: if: 
          1755: condition: 
           1756: expr: 
            1757: name: rcqe_sz
            1758: operator: ==
            1759: literal: 128
          1760: block: 
           1761: block_content: 
            1762: expr_stmt: 
             1763: expr: 
              1764: call: 
               1765: name: MLX5_SET
               1766: argument_list: 
                1767: argument: 
                 1768: expr: 
                  1769: name: qpc
                1770: argument: 
                 1771: expr: 
                  1772: name: qpc
                1773: argument: 
                 1774: expr: 
                  1775: name: cs_res
                1776: argument: 
                 1777: expr: 
                  1778: name: MLX5_RES_SCAT_DATA64_CQE
         1779: else: 
          1780: block: 
           1781: block_content: 
            1782: expr_stmt: 
             1783: expr: 
              1784: call: 
               1785: name: MLX5_SET
               1786: argument_list: 
                1787: argument: 
                 1788: expr: 
                  1789: name: qpc
                1790: argument: 
                 1791: expr: 
                  1792: name: qpc
                1793: argument: 
                 1794: expr: 
                  1795: name: cs_res
                1796: argument: 
                 1797: expr: 
                  1798: name: MLX5_RES_SCAT_DATA32_CQE
        1799: if_stmt: 
         1800: if: 
          1801: condition: 
           1802: expr: 
            1803: name: 
             1804: name: init_attr
             1805: operator: ->
             1806: name: sq_sig_type
            1807: operator: ==
            1808: name: IB_SIGNAL_ALL_WR
          1809: block: 
           1810: block_content: 
            1811: if_stmt: 
             1812: if: 
              1813: condition: 
               1814: expr: 
                1815: name: scqe_sz
                1816: operator: ==
                1817: literal: 128
              1818: block: 
               1819: block_content: 
                1820: expr_stmt: 
                 1821: expr: 
                  1822: call: 
                   1823: name: MLX5_SET
                   1824: argument_list: 
                    1825: argument: 
                     1826: expr: 
                      1827: name: qpc
                    1828: argument: 
                     1829: expr: 
                      1830: name: qpc
                    1831: argument: 
                     1832: expr: 
                      1833: name: cs_req
                    1834: argument: 
                     1835: expr: 
                      1836: name: MLX5_REQ_SCAT_DATA64_CQE
             1837: else: 
              1838: block: 
               1839: block_content: 
                1840: expr_stmt: 
                 1841: expr: 
                  1842: call: 
                   1843: name: MLX5_SET
                   1844: argument_list: 
                    1845: argument: 
                     1846: expr: 
                      1847: name: qpc
                    1848: argument: 
                     1849: expr: 
                      1850: name: qpc
                    1851: argument: 
                     1852: expr: 
                      1853: name: cs_req
                    1854: argument: 
                     1855: expr: 
                      1856: name: MLX5_REQ_SCAT_DATA32_CQE
    1857: if_stmt: 
     1858: if: 
      1859: condition: 
       1860: expr: 
        1861: name: 
         1862: name: qp
         1863: operator: ->
         1864: name: rq
         1865: operator: .
         1866: name: wqe_cnt
      1867: block: 
       1868: block_content: 
        1869: expr_stmt: 
         1870: expr: 
          1871: call: 
           1872: name: MLX5_SET
           1873: argument_list: 
            1874: argument: 
             1875: expr: 
              1876: name: qpc
            1877: argument: 
             1878: expr: 
              1879: name: qpc
            1880: argument: 
             1881: expr: 
              1882: name: log_rq_stride
            1883: argument: 
             1884: expr: 
              1885: name: 
               1886: name: qp
               1887: operator: ->
               1888: name: rq
               1889: operator: .
               1890: name: wqe_shift
              1891: operator: -
              1892: literal: 4
        1893: expr_stmt: 
         1894: expr: 
          1895: call: 
           1896: name: MLX5_SET
           1897: argument_list: 
            1898: argument: 
             1899: expr: 
              1900: name: qpc
            1901: argument: 
             1902: expr: 
              1903: name: qpc
            1904: argument: 
             1905: expr: 
              1906: name: log_rq_size
            1907: argument: 
             1908: expr: 
              1909: call: 
               1910: name: ilog2
               1911: argument_list: 
                1912: argument: 
                 1913: expr: 
                  1914: name: 
                   1915: name: qp
                   1916: operator: ->
                   1917: name: rq
                   1918: operator: .
                   1919: name: wqe_cnt
    1920: expr_stmt: 
     1921: expr: 
      1922: call: 
       1923: name: MLX5_SET
       1924: argument_list: 
        1925: argument: 
         1926: expr: 
          1927: name: qpc
        1928: argument: 
         1929: expr: 
          1930: name: qpc
        1931: argument: 
         1932: expr: 
          1933: name: rq_type
        1934: argument: 
         1935: expr: 
          1936: call: 
           1937: name: get_rx_type
           1938: argument_list: 
            1939: argument: 
             1940: expr: 
              1941: name: qp
            1942: argument: 
             1943: expr: 
              1944: name: init_attr
    1945: if_stmt: 
     1946: if: 
      1947: condition: 
       1948: expr: 
        1949: name: 
         1950: name: qp
         1951: operator: ->
         1952: name: sq
         1953: operator: .
         1954: name: wqe_cnt
      1955: block: 
       1956: block_content: 
        1957: expr_stmt: 
         1958: expr: 
          1959: call: 
           1960: name: MLX5_SET
           1961: argument_list: 
            1962: argument: 
             1963: expr: 
              1964: name: qpc
            1965: argument: 
             1966: expr: 
              1967: name: qpc
            1968: argument: 
             1969: expr: 
              1970: name: log_sq_size
            1971: argument: 
             1972: expr: 
              1973: call: 
               1974: name: ilog2
               1975: argument_list: 
                1976: argument: 
                 1977: expr: 
                  1978: name: 
                   1979: name: qp
                   1980: operator: ->
                   1981: name: sq
                   1982: operator: .
                   1983: name: wqe_cnt
     1984: else: 
      1985: block: 
       1986: block_content: 
        1987: expr_stmt: 
         1988: expr: 
          1989: call: 
           1990: name: MLX5_SET
           1991: argument_list: 
            1992: argument: 
             1993: expr: 
              1994: name: qpc
            1995: argument: 
             1996: expr: 
              1997: name: qpc
            1998: argument: 
             1999: expr: 
              2000: name: no_sq
            2001: argument: 
             2002: expr: 
              2003: literal: 1
        2004: if_stmt: 
         2005: if: 
          2006: condition: 
           2007: expr: 
            2008: name: 
             2009: name: init_attr
             2010: operator: ->
             2011: name: srq
            2012: operator: &&
            2013: name: 
             2014: name: init_attr
             2015: operator: ->
             2016: name: srq
             2017: operator: ->
             2018: name: srq_type
            2019: operator: ==
            2020: name: IB_SRQT_TM
          2021: block: 
           2022: block_content: 
            2023: expr_stmt: 
             2024: expr: 
              2025: call: 
               2026: name: MLX5_SET
               2027: argument_list: 
                2028: argument: 
                 2029: expr: 
                  2030: name: qpc
                2031: argument: 
                 2032: expr: 
                  2033: name: qpc
                2034: argument: 
                 2035: expr: 
                  2036: name: offload_type
                2037: argument: 
                 2038: expr: 
                  2039: name: MLX5_QPC_OFFLOAD_TYPE_RNDV
    2040: comment: /* Set default resources */
    2041: switch: 
     2042: condition: 
      2043: expr: 
       2044: name: 
        2045: name: init_attr
        2046: operator: ->
        2047: name: qp_type
     2048: block: 
      2049: block_content: 
       2050: case: 
        2051: expr: 
         2052: name: IB_QPT_XRC_TGT
       2053: expr_stmt: 
        2054: expr: 
         2055: call: 
          2056: name: MLX5_SET
          2057: argument_list: 
           2058: argument: 
            2059: expr: 
             2060: name: qpc
           2061: argument: 
            2062: expr: 
             2063: name: qpc
           2064: argument: 
            2065: expr: 
             2066: name: cqn_rcv
           2067: argument: 
            2068: expr: 
             2069: call: 
              2070: name: to_mcq
              2071: argument_list: 
               2072: argument: 
                2073: expr: 
                 2074: name: 
                  2075: name: devr
                  2076: operator: ->
                  2077: name: c0
             2078: operator: ->
             2079: name: 
              2080: name: mcq
              2081: operator: .
              2082: name: cqn
       2083: expr_stmt: 
        2084: expr: 
         2085: call: 
          2086: name: MLX5_SET
          2087: argument_list: 
           2088: argument: 
            2089: expr: 
             2090: name: qpc
           2091: argument: 
            2092: expr: 
             2093: name: qpc
           2094: argument: 
            2095: expr: 
             2096: name: cqn_snd
           2097: argument: 
            2098: expr: 
             2099: call: 
              2100: name: to_mcq
              2101: argument_list: 
               2102: argument: 
                2103: expr: 
                 2104: name: 
                  2105: name: devr
                  2106: operator: ->
                  2107: name: c0
             2108: operator: ->
             2109: name: 
              2110: name: mcq
              2111: operator: .
              2112: name: cqn
       2113: expr_stmt: 
        2114: expr: 
         2115: call: 
          2116: name: MLX5_SET
          2117: argument_list: 
           2118: argument: 
            2119: expr: 
             2120: name: qpc
           2121: argument: 
            2122: expr: 
             2123: name: qpc
           2124: argument: 
            2125: expr: 
             2126: name: srqn_rmpn_xrqn
           2127: argument: 
            2128: expr: 
             2129: call: 
              2130: name: to_msrq
              2131: argument_list: 
               2132: argument: 
                2133: expr: 
                 2134: name: 
                  2135: name: devr
                  2136: operator: ->
                  2137: name: s0
             2138: operator: ->
             2139: name: 
              2140: name: msrq
              2141: operator: .
              2142: name: srqn
       2143: expr_stmt: 
        2144: expr: 
         2145: call: 
          2146: name: MLX5_SET
          2147: argument_list: 
           2148: argument: 
            2149: expr: 
             2150: name: qpc
           2151: argument: 
            2152: expr: 
             2153: name: qpc
           2154: argument: 
            2155: expr: 
             2156: name: xrcd
           2157: argument: 
            2158: expr: 
             2159: call: 
              2160: name: to_mxrcd
              2161: argument_list: 
               2162: argument: 
                2163: expr: 
                 2164: name: 
                  2165: name: init_attr
                  2166: operator: ->
                  2167: name: xrcd
             2168: operator: ->
             2169: name: xrcdn
       2170: break: 
       2171: case: 
        2172: expr: 
         2173: name: IB_QPT_XRC_INI
       2174: expr_stmt: 
        2175: expr: 
         2176: call: 
          2177: name: MLX5_SET
          2178: argument_list: 
           2179: argument: 
            2180: expr: 
             2181: name: qpc
           2182: argument: 
            2183: expr: 
             2184: name: qpc
           2185: argument: 
            2186: expr: 
             2187: name: cqn_rcv
           2188: argument: 
            2189: expr: 
             2190: call: 
              2191: name: to_mcq
              2192: argument_list: 
               2193: argument: 
                2194: expr: 
                 2195: name: 
                  2196: name: devr
                  2197: operator: ->
                  2198: name: c0
             2199: operator: ->
             2200: name: 
              2201: name: mcq
              2202: operator: .
              2203: name: cqn
       2204: expr_stmt: 
        2205: expr: 
         2206: call: 
          2207: name: MLX5_SET
          2208: argument_list: 
           2209: argument: 
            2210: expr: 
             2211: name: qpc
           2212: argument: 
            2213: expr: 
             2214: name: qpc
           2215: argument: 
            2216: expr: 
             2217: name: xrcd
           2218: argument: 
            2219: expr: 
             2220: call: 
              2221: name: to_mxrcd
              2222: argument_list: 
               2223: argument: 
                2224: expr: 
                 2225: name: 
                  2226: name: devr
                  2227: operator: ->
                  2228: name: x1
             2229: operator: ->
             2230: name: xrcdn
       2231: expr_stmt: 
        2232: expr: 
         2233: call: 
          2234: name: MLX5_SET
          2235: argument_list: 
           2236: argument: 
            2237: expr: 
             2238: name: qpc
           2239: argument: 
            2240: expr: 
             2241: name: qpc
           2242: argument: 
            2243: expr: 
             2244: name: srqn_rmpn_xrqn
           2245: argument: 
            2246: expr: 
             2247: call: 
              2248: name: to_msrq
              2249: argument_list: 
               2250: argument: 
                2251: expr: 
                 2252: name: 
                  2253: name: devr
                  2254: operator: ->
                  2255: name: s0
             2256: operator: ->
             2257: name: 
              2258: name: msrq
              2259: operator: .
              2260: name: srqn
       2261: break: 
       2262: default: 
       2263: if_stmt: 
        2264: if: 
         2265: condition: 
          2266: expr: 
           2267: name: 
            2268: name: init_attr
            2269: operator: ->
            2270: name: srq
         2271: block: 
          2272: block_content: 
           2273: expr_stmt: 
            2274: expr: 
             2275: call: 
              2276: name: MLX5_SET
              2277: argument_list: 
               2278: argument: 
                2279: expr: 
                 2280: name: qpc
               2281: argument: 
                2282: expr: 
                 2283: name: qpc
               2284: argument: 
                2285: expr: 
                 2286: name: xrcd
               2287: argument: 
                2288: expr: 
                 2289: call: 
                  2290: name: to_mxrcd
                  2291: argument_list: 
                   2292: argument: 
                    2293: expr: 
                     2294: name: 
                      2295: name: devr
                      2296: operator: ->
                      2297: name: x0
                 2298: operator: ->
                 2299: name: xrcdn
           2300: expr_stmt: 
            2301: expr: 
             2302: call: 
              2303: name: MLX5_SET
              2304: argument_list: 
               2305: argument: 
                2306: expr: 
                 2307: name: qpc
               2308: argument: 
                2309: expr: 
                 2310: name: qpc
               2311: argument: 
                2312: expr: 
                 2313: name: srqn_rmpn_xrqn
               2314: argument: 
                2315: expr: 
                 2316: call: 
                  2317: name: to_msrq
                  2318: argument_list: 
                   2319: argument: 
                    2320: expr: 
                     2321: name: 
                      2322: name: init_attr
                      2323: operator: ->
                      2324: name: srq
                 2325: operator: ->
                 2326: name: 
                  2327: name: msrq
                  2328: operator: .
                  2329: name: srqn
        2330: else: 
         2331: block: 
          2332: block_content: 
           2333: expr_stmt: 
            2334: expr: 
             2335: call: 
              2336: name: MLX5_SET
              2337: argument_list: 
               2338: argument: 
                2339: expr: 
                 2340: name: qpc
               2341: argument: 
                2342: expr: 
                 2343: name: qpc
               2344: argument: 
                2345: expr: 
                 2346: name: xrcd
               2347: argument: 
                2348: expr: 
                 2349: call: 
                  2350: name: to_mxrcd
                  2351: argument_list: 
                   2352: argument: 
                    2353: expr: 
                     2354: name: 
                      2355: name: devr
                      2356: operator: ->
                      2357: name: x1
                 2358: operator: ->
                 2359: name: xrcdn
           2360: expr_stmt: 
            2361: expr: 
             2362: call: 
              2363: name: MLX5_SET
              2364: argument_list: 
               2365: argument: 
                2366: expr: 
                 2367: name: qpc
               2368: argument: 
                2369: expr: 
                 2370: name: qpc
               2371: argument: 
                2372: expr: 
                 2373: name: srqn_rmpn_xrqn
               2374: argument: 
                2375: expr: 
                 2376: call: 
                  2377: name: to_msrq
                  2378: argument_list: 
                   2379: argument: 
                    2380: expr: 
                     2381: name: 
                      2382: name: devr
                      2383: operator: ->
                      2384: name: s1
                 2385: operator: ->
                 2386: name: 
                  2387: name: msrq
                  2388: operator: .
                  2389: name: srqn
    2390: if_stmt: 
     2391: if: 
      2392: condition: 
       2393: expr: 
        2394: name: 
         2395: name: init_attr
         2396: operator: ->
         2397: name: send_cq
      2398: block: 
       2399: block_content: 
        2400: expr_stmt: 
         2401: expr: 
          2402: call: 
           2403: name: MLX5_SET
           2404: argument_list: 
            2405: argument: 
             2406: expr: 
              2407: name: qpc
            2408: argument: 
             2409: expr: 
              2410: name: qpc
            2411: argument: 
             2412: expr: 
              2413: name: cqn_snd
            2414: argument: 
             2415: expr: 
              2416: call: 
               2417: name: to_mcq
               2418: argument_list: 
                2419: argument: 
                 2420: expr: 
                  2421: name: 
                   2422: name: init_attr
                   2423: operator: ->
                   2424: name: send_cq
              2425: operator: ->
              2426: name: 
               2427: name: mcq
               2428: operator: .
               2429: name: cqn
    2430: if_stmt: 
     2431: if: 
      2432: condition: 
       2433: expr: 
        2434: name: 
         2435: name: init_attr
         2436: operator: ->
         2437: name: recv_cq
      2438: block: 
       2439: block_content: 
        2440: expr_stmt: 
         2441: expr: 
          2442: call: 
           2443: name: MLX5_SET
           2444: argument_list: 
            2445: argument: 
             2446: expr: 
              2447: name: qpc
            2448: argument: 
             2449: expr: 
              2450: name: qpc
            2451: argument: 
             2452: expr: 
              2453: name: cqn_rcv
            2454: argument: 
             2455: expr: 
              2456: call: 
               2457: name: to_mcq
               2458: argument_list: 
                2459: argument: 
                 2460: expr: 
                  2461: name: 
                   2462: name: init_attr
                   2463: operator: ->
                   2464: name: recv_cq
              2465: operator: ->
              2466: name: 
               2467: name: mcq
               2468: operator: .
               2469: name: cqn
    2470: expr_stmt: 
     2471: expr: 
      2472: call: 
       2473: name: MLX5_SET64
       2474: argument_list: 
        2475: argument: 
         2476: expr: 
          2477: name: qpc
        2478: argument: 
         2479: expr: 
          2480: name: qpc
        2481: argument: 
         2482: expr: 
          2483: name: dbr_addr
        2484: argument: 
         2485: expr: 
          2486: name: 
           2487: name: qp
           2488: operator: ->
           2489: name: db
           2490: operator: .
           2491: name: dma
    2492: comment: /* 0xffffff means we ask to work with cqe version 0 */
    2493: if_stmt: 
     2494: if: 
      2495: condition: 
       2496: expr: 
        2497: call: 
         2498: name: MLX5_CAP_GEN
         2499: argument_list: 
          2500: argument: 
           2501: expr: 
            2502: name: mdev
          2503: argument: 
           2504: expr: 
            2505: name: cqe_version
        2506: operator: ==
        2507: name: MLX5_CQE_VERSION_V1
      2508: block: 
       2509: block_content: 
        2510: expr_stmt: 
         2511: expr: 
          2512: call: 
           2513: name: MLX5_SET
           2514: argument_list: 
            2515: argument: 
             2516: expr: 
              2517: name: qpc
            2518: argument: 
             2519: expr: 
              2520: name: qpc
            2521: argument: 
             2522: expr: 
              2523: name: user_index
            2524: argument: 
             2525: expr: 
              2526: name: uidx
    2527: comment: /* we use IB_QP_CREATE_IPOIB_UD_LSO to indicates ipoib qp */
    2528: if_stmt: 
     2529: if: 
      2530: condition: 
       2531: expr: 
        2532: name: 
         2533: name: init_attr
         2534: operator: ->
         2535: name: qp_type
        2536: operator: ==
        2537: name: IB_QPT_UD
        2538: operator: &&
        2539: operator: (
        2540: name: 
         2541: name: init_attr
         2542: operator: ->
         2543: name: create_flags
        2544: operator: &
        2545: name: IB_QP_CREATE_IPOIB_UD_LSO
        2546: operator: )
      2547: block: 
       2548: block_content: 
        2549: expr_stmt: 
         2550: expr: 
          2551: call: 
           2552: name: MLX5_SET
           2553: argument_list: 
            2554: argument: 
             2555: expr: 
              2556: name: qpc
            2557: argument: 
             2558: expr: 
              2559: name: qpc
            2560: argument: 
             2561: expr: 
              2562: name: ulp_stateless_offload_mode
            2563: argument: 
             2564: expr: 
              2565: literal: 1
        2566: expr_stmt: 
         2567: expr: 
          2568: name: 
           2569: name: qp
           2570: operator: ->
           2571: name: flags
          2572: operator: |=
          2573: name: MLX5_IB_QP_LSO
    2574: if_stmt: 
     2575: if: 
      2576: condition: 
       2577: expr: 
        2578: name: 
         2579: name: init_attr
         2580: operator: ->
         2581: name: create_flags
        2582: operator: &
        2583: name: IB_QP_CREATE_PCI_WRITE_END_PADDING
      2584: block: 
       2585: block_content: 
        2586: if_stmt: 
         2587: if: 
          2588: condition: 
           2589: expr: 
            2590: operator: !
            2591: call: 
             2592: name: MLX5_CAP_GEN
             2593: argument_list: 
              2594: argument: 
               2595: expr: 
                2596: name: 
                 2597: name: dev
                 2598: operator: ->
                 2599: name: mdev
              2600: argument: 
               2601: expr: 
                2602: name: end_pad
          2603: block: 
           2604: block_content: 
            2605: expr_stmt: 
             2606: expr: 
              2607: call: 
               2608: name: mlx5_ib_dbg
               2609: argument_list: 
                2610: argument: 
                 2611: expr: 
                  2612: name: dev
                2613: argument: 
                 2614: expr: 
                  2615: literal: "scatter end padding is not supported\n"
            2616: expr_stmt: 
             2617: expr: 
              2618: name: err
              2619: operator: =
              2620: operator: -
              2621: name: EOPNOTSUPP
            2622: goto: 
             2623: name: err
         2624: if: 
          2625: condition: 
           2626: expr: 
            2627: name: 
             2628: name: init_attr
             2629: operator: ->
             2630: name: qp_type
            2631: operator: !=
            2632: name: IB_QPT_RAW_PACKET
          2633: block: 
           2634: block_content: 
            2635: expr_stmt: 
             2636: expr: 
              2637: call: 
               2638: name: MLX5_SET
               2639: argument_list: 
                2640: argument: 
                 2641: expr: 
                  2642: name: qpc
                2643: argument: 
                 2644: expr: 
                  2645: name: qpc
                2646: argument: 
                 2647: expr: 
                  2648: name: end_padding_mode
                2649: argument: 
                 2650: expr: 
                  2651: name: MLX5_WQ_END_PAD_MODE_ALIGN
         2652: else: 
          2653: block: 
           2654: block_content: 
            2655: expr_stmt: 
             2656: expr: 
              2657: name: 
               2658: name: qp
               2659: operator: ->
               2660: name: flags
              2661: operator: |=
              2662: name: MLX5_IB_QP_PCI_WRITE_END_PADDING
    2663: if_stmt: 
     2664: if: 
      2665: condition: 
       2666: expr: 
        2667: name: inlen
        2668: operator: <
        2669: literal: 0
      2670: block: 
       2671: block_content: 
        2672: expr_stmt: 
         2673: expr: 
          2674: name: err
          2675: operator: =
          2676: operator: -
          2677: name: EINVAL
        2678: goto: 
         2679: name: err
    2680: if_stmt: 
     2681: if: 
      2682: condition: 
       2683: expr: 
        2684: name: 
         2685: name: init_attr
         2686: operator: ->
         2687: name: qp_type
        2688: operator: ==
        2689: name: IB_QPT_RAW_PACKET
        2690: operator: ||
        2691: name: 
         2692: name: qp
         2693: operator: ->
         2694: name: flags
        2695: operator: &
        2696: name: MLX5_IB_QP_UNDERLAY
      2697: block: 
       2698: block_content: 
        2699: expr_stmt: 
         2700: expr: 
          2701: name: 
           2702: name: qp
           2703: operator: ->
           2704: name: raw_packet_qp
           2705: operator: .
           2706: name: sq
           2707: operator: .
           2708: name: ubuffer
           2709: operator: .
           2710: name: buf_addr
          2711: operator: =
          2712: name: 
           2713: name: ucmd
           2714: operator: .
           2715: name: sq_buf_addr
        2716: expr_stmt: 
         2717: expr: 
          2718: call: 
           2719: name: raw_packet_qp_copy_info
           2720: argument_list: 
            2721: argument: 
             2722: expr: 
              2723: name: qp
            2724: argument: 
             2725: expr: 
              2726: operator: &
              2727: name: 
               2728: name: qp
               2729: operator: ->
               2730: name: raw_packet_qp
        2731: expr_stmt: 
         2732: expr: 
          2733: name: err
          2734: operator: =
          2735: call: 
           2736: name: create_raw_packet_qp
           2737: argument_list: 
            2738: argument: 
             2739: expr: 
              2740: name: dev
            2741: argument: 
             2742: expr: 
              2743: name: qp
            2744: argument: 
             2745: expr: 
              2746: name: in
            2747: argument: 
             2748: expr: 
              2749: name: inlen
            2750: argument: 
             2751: expr: 
              2752: name: pd
     2753: else: 
      2754: block: 
       2755: block_content: 
        2756: expr_stmt: 
         2757: expr: 
          2758: name: err
          2759: operator: =
          2760: call: 
           2761: name: mlx5_core_create_qp
           2762: argument_list: 
            2763: argument: 
             2764: expr: 
              2765: name: 
               2766: name: dev
               2767: operator: ->
               2768: name: mdev
            2769: argument: 
             2770: expr: 
              2771: operator: &
              2772: name: 
               2773: name: base
               2774: operator: ->
               2775: name: mqp
            2776: argument: 
             2777: expr: 
              2778: name: in
            2779: argument: 
             2780: expr: 
              2781: name: inlen
    2782: if_stmt: 
     2783: if: 
      2784: condition: 
       2785: expr: 
        2786: name: err
      2787: block: 
       2788: block_content: 
        2789: expr_stmt: 
         2790: expr: 
          2791: call: 
           2792: name: mlx5_ib_dbg
           2793: argument_list: 
            2794: argument: 
             2795: expr: 
              2796: name: dev
            2797: argument: 
             2798: expr: 
              2799: literal: "create qp failed\n"
        2800: goto: 
         2801: name: err_create
    2802: expr_stmt: 
     2803: expr: 
      2804: call: 
       2805: name: kvfree
       2806: argument_list: 
        2807: argument: 
         2808: expr: 
          2809: name: in
    2810: expr_stmt: 
     2811: expr: 
      2812: name: 
       2813: name: base
       2814: operator: ->
       2815: name: container_mibqp
      2816: operator: =
      2817: name: qp
    2818: expr_stmt: 
     2819: expr: 
      2820: name: 
       2821: name: base
       2822: operator: ->
       2823: name: mqp
       2824: operator: .
       2825: name: event
      2826: operator: =
      2827: name: mlx5_ib_qp_event
    2828: expr_stmt: 
     2829: expr: 
      2830: call: 
       2831: name: get_cqs
       2832: argument_list: 
        2833: argument: 
         2834: expr: 
          2835: name: 
           2836: name: init_attr
           2837: operator: ->
           2838: name: qp_type
        2839: argument: 
         2840: expr: 
          2841: name: 
           2842: name: init_attr
           2843: operator: ->
           2844: name: send_cq
        2845: argument: 
         2846: expr: 
          2847: name: 
           2848: name: init_attr
           2849: operator: ->
           2850: name: recv_cq
        2851: argument: 
         2852: expr: 
          2853: operator: &
          2854: name: send_cq
        2855: argument: 
         2856: expr: 
          2857: operator: &
          2858: name: recv_cq
    2859: expr_stmt: 
     2860: expr: 
      2861: call: 
       2862: name: spin_lock_irqsave
       2863: argument_list: 
        2864: argument: 
         2865: expr: 
          2866: operator: &
          2867: name: 
           2868: name: dev
           2869: operator: ->
           2870: name: reset_flow_resource_lock
        2871: argument: 
         2872: expr: 
          2873: name: flags
    2874: expr_stmt: 
     2875: expr: 
      2876: call: 
       2877: name: mlx5_ib_lock_cqs
       2878: argument_list: 
        2879: argument: 
         2880: expr: 
          2881: name: send_cq
        2882: argument: 
         2883: expr: 
          2884: name: recv_cq
    2885: comment: /* Maintain device to QPs access, needed for further handling via
=====
0: function: 
 1: type: 
  2: specifier: static
  3: name: int
 4: name: create_qp_common
 5: parameter_list: 
  6: parameter: 
   7: decl: 
    8: type: 
     9: name: 
      10: name: struct
      11: name: mlx5_ib_dev
     12: modifier: *
    13: name: dev
  14: parameter: 
   15: decl: 
    16: type: 
     17: name: 
      18: name: struct
      19: name: ib_pd
     20: modifier: *
    21: name: pd
  22: parameter: 
   23: decl: 
    24: type: 
     25: name: 
      26: name: struct
      27: name: ib_qp_init_attr
     28: modifier: *
    29: name: init_attr
  30: parameter: 
   31: decl: 
    32: type: 
     33: name: 
      34: name: struct
      35: name: ib_udata
     36: modifier: *
    37: name: udata
  38: parameter: 
   39: decl: 
    40: type: 
     41: name: 
      42: name: struct
      43: name: mlx5_ib_qp
     44: modifier: *
    45: name: qp
 46: block: 
  47: block_content: 
   48: decl_stmt: 
    49: decl: 
     50: type: 
      51: name: 
       52: name: struct
       53: name: mlx5_ib_resources
      54: modifier: *
     55: name: devr
     56: init: 
      57: expr: 
       58: operator: &
       59: name: 
        60: name: dev
        61: operator: ->
        62: name: devr
   63: decl_stmt: 
    64: decl: 
     65: type: 
      66: name: int
     67: name: inlen
     68: init: 
      69: expr: 
       70: call: 
        71: name: MLX5_ST_SZ_BYTES
        72: argument_list: 
         73: argument: 
          74: expr: 
           75: name: create_qp_in
   76: decl_stmt: 
    77: decl: 
     78: type: 
      79: name: 
       80: name: struct
       81: name: mlx5_core_dev
      82: modifier: *
     83: name: mdev
     84: init: 
      85: expr: 
       86: name: 
        87: name: dev
        88: operator: ->
        89: name: mdev
   90: decl_stmt: 
    91: decl: 
     92: type: 
      93: name: 
       94: name: struct
       95: name: mlx5_ib_create_qp_resp
     96: name: resp
   97: decl_stmt: 
    98: decl: 
     99: type: 
      100: name: 
       101: name: struct
       102: name: mlx5_ib_cq
      103: modifier: *
     104: name: send_cq
   105: decl_stmt: 
    106: decl: 
     107: type: 
      108: name: 
       109: name: struct
       110: name: mlx5_ib_cq
      111: modifier: *
     112: name: recv_cq
   113: decl_stmt: 
    114: decl: 
     115: type: 
      116: name: unsigned
      117: name: long
     118: name: flags
   119: decl_stmt: 
    120: decl: 
     121: type: 
      122: name: u32
     123: name: uidx
     124: init: 
      125: expr: 
       126: name: MLX5_IB_DEFAULT_UIDX
   127: decl_stmt: 
    128: decl: 
     129: type: 
      130: name: 
       131: name: struct
       132: name: mlx5_ib_create_qp
     133: name: ucmd
   134: decl_stmt: 
    135: decl: 
     136: type: 
      137: name: 
       138: name: struct
       139: name: mlx5_ib_qp_base
      140: modifier: *
     141: name: base
   142: decl_stmt: 
    143: decl: 
     144: type: 
      145: name: int
     146: name: mlx5_st
   147: decl_stmt: 
    148: decl: 
     149: type: 
      150: name: void
      151: modifier: *
     152: name: qpc
   153: decl_stmt: 
    154: decl: 
     155: type: 
      156: name: u32
      157: modifier: *
     158: name: in
   159: decl_stmt: 
    160: decl: 
     161: type: 
      162: name: int
     163: name: err
   164: expr_stmt: 
    165: expr: 
     166: call: 
      167: name: mutex_init
      168: argument_list: 
       169: argument: 
        170: expr: 
         171: operator: &
         172: name: 
          173: name: qp
          174: operator: ->
          175: name: mutex
   176: expr_stmt: 
    177: expr: 
     178: call: 
      179: name: spin_lock_init
      180: argument_list: 
       181: argument: 
        182: expr: 
         183: operator: &
         184: name: 
          185: name: qp
          186: operator: ->
          187: name: sq
          188: operator: .
          189: name: lock
   190: expr_stmt: 
    191: expr: 
     192: call: 
      193: name: spin_lock_init
      194: argument_list: 
       195: argument: 
        196: expr: 
         197: operator: &
         198: name: 
          199: name: qp
          200: operator: ->
          201: name: rq
          202: operator: .
          203: name: lock
   204: expr_stmt: 
    205: expr: 
     206: name: mlx5_st
     207: operator: =
     208: call: 
      209: name: to_mlx5_st
      210: argument_list: 
       211: argument: 
        212: expr: 
         213: name: 
          214: name: init_attr
          215: operator: ->
          216: name: qp_type
   217: if_stmt: 
    218: if: 
     219: condition: 
      220: expr: 
       221: name: mlx5_st
       222: operator: <
       223: literal: 0
     224: block: 
      225: block_content: 
       226: return: 
        227: expr: 
         228: operator: -
         229: name: EINVAL
   230: if_stmt: 
    231: if: 
     232: condition: 
      233: expr: 
       234: name: 
        235: name: init_attr
        236: operator: ->
        237: name: rwq_ind_tbl
     238: block: 
      239: block_content: 
       240: if_stmt: 
        241: if: 
         242: condition: 
          243: expr: 
           244: operator: !
           245: name: udata
         246: block: 
          247: block_content: 
           248: return: 
            249: expr: 
             250: operator: -
             251: name: ENOSYS
       252: expr_stmt: 
        253: expr: 
         254: name: err
         255: operator: =
         256: call: 
          257: name: create_rss_raw_qp_tir
          258: argument_list: 
           259: argument: 
            260: expr: 
             261: name: dev
           262: argument: 
            263: expr: 
             264: name: qp
           265: argument: 
            266: expr: 
             267: name: pd
           268: argument: 
            269: expr: 
             270: name: init_attr
           271: argument: 
            272: expr: 
             273: name: udata
       274: return: 
        275: expr: 
         276: name: err
   277: if_stmt: 
    278: if: 
     279: condition: 
      280: expr: 
       281: name: 
        282: name: init_attr
        283: operator: ->
        284: name: create_flags
       285: operator: &
       286: name: IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK
     287: block: 
      288: block_content: 
       289: if_stmt: 
        290: if: 
         291: condition: 
          292: expr: 
           293: operator: !
           294: call: 
            295: name: MLX5_CAP_GEN
            296: argument_list: 
             297: argument: 
              298: expr: 
               299: name: mdev
             300: argument: 
              301: expr: 
               302: name: block_lb_mc
         303: block: 
          304: block_content: 
           305: expr_stmt: 
            306: expr: 
             307: call: 
              308: name: mlx5_ib_dbg
              309: argument_list: 
               310: argument: 
                311: expr: 
                 312: name: dev
               313: argument: 
                314: expr: 
                 315: literal: "block multicast loopback isn't supported\n"
           316: return: 
            317: expr: 
             318: operator: -
             319: name: EINVAL
        320: else: 
         321: block: 
          322: block_content: 
           323: expr_stmt: 
            324: expr: 
             325: name: 
              326: name: qp
              327: operator: ->
              328: name: flags
             329: operator: |=
             330: name: MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK
   331: if_stmt: 
    332: if: 
     333: condition: 
      334: expr: 
       335: name: 
        336: name: init_attr
        337: operator: ->
        338: name: create_flags
       339: operator: &
       340: operator: (
       341: name: IB_QP_CREATE_CROSS_CHANNEL
       342: operator: |
       343: name: IB_QP_CREATE_MANAGED_SEND
       344: operator: |
       345: name: IB_QP_CREATE_MANAGED_RECV
       346: operator: )
     347: block: 
      348: block_content: 
       349: if_stmt: 
        350: if: 
         351: condition: 
          352: expr: 
           353: operator: !
           354: call: 
            355: name: MLX5_CAP_GEN
            356: argument_list: 
             357: argument: 
              358: expr: 
               359: name: mdev
             360: argument: 
              361: expr: 
               362: name: cd
         363: block: 
          364: block_content: 
           365: expr_stmt: 
            366: expr: 
             367: call: 
              368: name: mlx5_ib_dbg
              369: argument_list: 
               370: argument: 
                371: expr: 
                 372: name: dev
               373: argument: 
                374: expr: 
                 375: literal: "cross-channel isn't supported\n"
           376: return: 
            377: expr: 
             378: operator: -
             379: name: EINVAL
       380: if_stmt: 
        381: if: 
         382: condition: 
          383: expr: 
           384: name: 
            385: name: init_attr
            386: operator: ->
            387: name: create_flags
           388: operator: &
           389: name: IB_QP_CREATE_CROSS_CHANNEL
         390: block: 
          391: block_content: 
           392: expr_stmt: 
            393: expr: 
             394: name: 
              395: name: qp
              396: operator: ->
              397: name: flags
             398: operator: |=
             399: name: MLX5_IB_QP_CROSS_CHANNEL
       400: if_stmt: 
        401: if: 
         402: condition: 
          403: expr: 
           404: name: 
            405: name: init_attr
            406: operator: ->
            407: name: create_flags
           408: operator: &
           409: name: IB_QP_CREATE_MANAGED_SEND
         410: block: 
          411: block_content: 
           412: expr_stmt: 
            413: expr: 
             414: name: 
              415: name: qp
              416: operator: ->
              417: name: flags
             418: operator: |=
             419: name: MLX5_IB_QP_MANAGED_SEND
       420: if_stmt: 
        421: if: 
         422: condition: 
          423: expr: 
           424: name: 
            425: name: init_attr
            426: operator: ->
            427: name: create_flags
           428: operator: &
           429: name: IB_QP_CREATE_MANAGED_RECV
         430: block: 
          431: block_content: 
           432: expr_stmt: 
            433: expr: 
             434: name: 
              435: name: qp
              436: operator: ->
              437: name: flags
             438: operator: |=
             439: name: MLX5_IB_QP_MANAGED_RECV
   440: if_stmt: 
    441: if: 
     442: condition: 
      443: expr: 
       444: name: 
        445: name: init_attr
        446: operator: ->
        447: name: qp_type
       448: operator: ==
       449: name: IB_QPT_UD
       450: operator: &&
       451: operator: (
       452: name: 
        453: name: init_attr
        454: operator: ->
        455: name: create_flags
       456: operator: &
       457: name: IB_QP_CREATE_IPOIB_UD_LSO
       458: operator: )
     459: block: 
      460: block_content: 
       461: if_stmt: 
        462: if: 
         463: condition: 
          464: expr: 
           465: operator: !
           466: call: 
            467: name: MLX5_CAP_GEN
            468: argument_list: 
             469: argument: 
              470: expr: 
               471: name: mdev
             472: argument: 
              473: expr: 
               474: name: ipoib_basic_offloads
         475: block: 
          476: block_content: 
           477: expr_stmt: 
            478: expr: 
             479: call: 
              480: name: mlx5_ib_dbg
              481: argument_list: 
               482: argument: 
                483: expr: 
                 484: name: dev
               485: argument: 
                486: expr: 
                 487: literal: "ipoib UD lso qp isn't supported\n"
           488: return: 
            489: expr: 
             490: operator: -
             491: name: EOPNOTSUPP
   492: if_stmt: 
    493: if: 
     494: condition: 
      495: expr: 
       496: name: 
        497: name: init_attr
        498: operator: ->
        499: name: create_flags
       500: operator: &
       501: name: IB_QP_CREATE_SCATTER_FCS
     502: block: 
      503: block_content: 
       504: if_stmt: 
        505: if: 
         506: condition: 
          507: expr: 
           508: name: 
            509: name: init_attr
            510: operator: ->
            511: name: qp_type
           512: operator: !=
           513: name: IB_QPT_RAW_PACKET
         514: block: 
          515: block_content: 
           516: expr_stmt: 
            517: expr: 
             518: call: 
              519: name: mlx5_ib_dbg
              520: argument_list: 
               521: argument: 
                522: expr: 
                 523: name: dev
               524: argument: 
                525: expr: 
                 526: literal: "Scatter FCS is supported only for Raw Packet QPs"
           527: return: 
            528: expr: 
             529: operator: -
             530: name: EOPNOTSUPP
       531: if_stmt: 
        532: if: 
         533: condition: 
          534: expr: 
           535: operator: !
           536: call: 
            537: name: MLX5_CAP_GEN
            538: argument_list: 
             539: argument: 
              540: expr: 
               541: name: 
                542: name: dev
                543: operator: ->
                544: name: mdev
             545: argument: 
              546: expr: 
               547: name: eth_net_offloads
           548: operator: ||
           549: operator: !
           550: call: 
            551: name: MLX5_CAP_ETH
            552: argument_list: 
             553: argument: 
              554: expr: 
               555: name: 
                556: name: dev
                557: operator: ->
                558: name: mdev
             559: argument: 
              560: expr: 
               561: name: scatter_fcs
         562: block: 
          563: block_content: 
           564: expr_stmt: 
            565: expr: 
             566: call: 
              567: name: mlx5_ib_dbg
              568: argument_list: 
               569: argument: 
                570: expr: 
                 571: name: dev
               572: argument: 
                573: expr: 
                 574: literal: "Scatter FCS isn't supported\n"
           575: return: 
            576: expr: 
             577: operator: -
             578: name: EOPNOTSUPP
       579: expr_stmt: 
        580: expr: 
         581: name: 
          582: name: qp
          583: operator: ->
          584: name: flags
         585: operator: |=
         586: name: MLX5_IB_QP_CAP_SCATTER_FCS
   587: if_stmt: 
    588: if: 
     589: condition: 
      590: expr: 
       591: name: 
        592: name: init_attr
        593: operator: ->
        594: name: sq_sig_type
       595: operator: ==
       596: name: IB_SIGNAL_ALL_WR
     597: block: 
      598: block_content: 
       599: expr_stmt: 
        600: expr: 
         601: name: 
          602: name: qp
          603: operator: ->
          604: name: sq_signal_bits
         605: operator: =
         606: name: MLX5_WQE_CTRL_CQ_UPDATE
   607: if_stmt: 
    608: if: 
     609: condition: 
      610: expr: 
       611: name: 
        612: name: init_attr
        613: operator: ->
        614: name: create_flags
       615: operator: &
       616: name: IB_QP_CREATE_CVLAN_STRIPPING
     617: block: 
      618: block_content: 
       619: if_stmt: 
        620: if: 
         621: condition: 
          622: expr: 
           623: operator: !
           624: operator: (
           625: call: 
            626: name: MLX5_CAP_GEN
            627: argument_list: 
             628: argument: 
              629: expr: 
               630: name: 
                631: name: dev
                632: operator: ->
                633: name: mdev
             634: argument: 
              635: expr: 
               636: name: eth_net_offloads
           637: operator: &&
           638: call: 
            639: name: MLX5_CAP_ETH
            640: argument_list: 
             641: argument: 
              642: expr: 
               643: name: 
                644: name: dev
                645: operator: ->
                646: name: mdev
             647: argument: 
              648: expr: 
               649: name: vlan_cap
           650: operator: )
           651: operator: ||
           652: operator: (
           653: name: 
            654: name: init_attr
            655: operator: ->
            656: name: qp_type
           657: operator: !=
           658: name: IB_QPT_RAW_PACKET
           659: operator: )
         660: block: 
          661: block_content: 
           662: return: 
            663: expr: 
             664: operator: -
             665: name: EOPNOTSUPP
       666: expr_stmt: 
        667: expr: 
         668: name: 
          669: name: qp
          670: operator: ->
          671: name: flags
         672: operator: |=
         673: name: MLX5_IB_QP_CVLAN_STRIPPING
   674: if_stmt: 
    675: if: 
     676: condition: 
      677: expr: 
       678: name: pd
       679: operator: &&
       680: name: 
        681: name: pd
        682: operator: ->
        683: name: uobject
     684: block: 
      685: block_content: 
       686: if_stmt: 
        687: if: 
         688: condition: 
          689: expr: 
           690: call: 
            691: name: ib_copy_from_udata
            692: argument_list: 
             693: argument: 
              694: expr: 
               695: operator: &
               696: name: ucmd
             697: argument: 
              698: expr: 
               699: name: udata
             700: argument: 
              701: expr: 
               702: sizeof: 
                703: argument_list: 
                 704: argument: 
                  705: expr: 
                   706: name: ucmd
         707: block: 
          708: block_content: 
           709: expr_stmt: 
            710: expr: 
             711: call: 
              712: name: mlx5_ib_dbg
              713: argument_list: 
               714: argument: 
                715: expr: 
                 716: name: dev
               717: argument: 
                718: expr: 
                 719: literal: "copy failed\n"
           720: return: 
            721: expr: 
             722: operator: -
             723: name: EFAULT
       724: expr_stmt: 
        725: expr: 
         726: name: err
         727: operator: =
         728: call: 
          729: name: get_qp_user_index
          730: argument_list: 
           731: argument: 
            732: expr: 
             733: call: 
              734: name: to_mucontext
              735: argument_list: 
               736: argument: 
                737: expr: 
                 738: name: 
                  739: name: pd
                  740: operator: ->
                  741: name: uobject
                  742: operator: ->
                  743: name: context
           744: argument: 
            745: expr: 
             746: operator: &
             747: name: ucmd
           748: argument: 
            749: expr: 
             750: name: 
              751: name: udata
              752: operator: ->
              753: name: inlen
           754: argument: 
            755: expr: 
             756: operator: &
             757: name: uidx
       758: if_stmt: 
        759: if: 
         760: condition: 
          761: expr: 
           762: name: err
         763: block: 
          764: block_content: 
           765: return: 
            766: expr: 
             767: name: err
       768: expr_stmt: 
        769: expr: 
         770: name: 
          771: name: qp
          772: operator: ->
          773: name: wq_sig
         774: operator: =
         775: operator: !
         776: operator: !
         777: operator: (
         778: name: 
          779: name: ucmd
          780: operator: .
          781: name: flags
         782: operator: &
         783: name: MLX5_QP_FLAG_SIGNATURE
         784: operator: )
       785: expr_stmt: 
        786: expr: 
         787: name: 
          788: name: qp
          789: operator: ->
          790: name: scat_cqe
         791: operator: =
         792: operator: !
         793: operator: !
         794: operator: (
         795: name: 
          796: name: ucmd
          797: operator: .
          798: name: flags
         799: operator: &
         800: name: MLX5_QP_FLAG_SCATTER_CQE
         801: operator: )
       802: if_stmt: 
        803: if: 
         804: condition: 
          805: expr: 
           806: name: 
            807: name: ucmd
            808: operator: .
            809: name: flags
           810: operator: &
           811: name: MLX5_QP_FLAG_TUNNEL_OFFLOADS
         812: block: 
          813: block_content: 
           814: if_stmt: 
            815: if: 
             816: condition: 
              817: expr: 
               818: name: 
                819: name: init_attr
                820: operator: ->
                821: name: qp_type
               822: operator: !=
               823: name: IB_QPT_RAW_PACKET
               824: operator: ||
               825: operator: !
               826: call: 
                827: name: tunnel_offload_supported
                828: argument_list: 
                 829: argument: 
                  830: expr: 
                   831: name: mdev
             832: block: 
              833: block_content: 
               834: expr_stmt: 
                835: expr: 
                 836: call: 
                  837: name: mlx5_ib_dbg
                  838: argument_list: 
                   839: argument: 
                    840: expr: 
                     841: name: dev
                   842: argument: 
                    843: expr: 
                     844: literal: "Tunnel offload isn't supported\n"
               845: return: 
                846: expr: 
                 847: operator: -
                 848: name: EOPNOTSUPP
           849: expr_stmt: 
            850: expr: 
             851: name: 
              852: name: qp
              853: operator: ->
              854: name: tunnel_offload_en
             855: operator: =
             856: literal: true
       857: if_stmt: 
        858: if: 
         859: condition: 
          860: expr: 
           861: name: 
            862: name: init_attr
            863: operator: ->
            864: name: create_flags
           865: operator: &
           866: name: IB_QP_CREATE_SOURCE_QPN
         867: block: 
          868: block_content: 
           869: if_stmt: 
            870: if: 
             871: condition: 
              872: expr: 
               873: name: 
                874: name: init_attr
                875: operator: ->
                876: name: qp_type
               877: operator: !=
               878: name: IB_QPT_UD
               879: operator: ||
               880: operator: (
               881: call: 
                882: name: MLX5_CAP_GEN
                883: argument_list: 
                 884: argument: 
                  885: expr: 
                   886: name: 
                    887: name: dev
                    888: operator: ->
                    889: name: mdev
                 890: argument: 
                  891: expr: 
                   892: name: port_type
               893: operator: !=
               894: name: MLX5_CAP_PORT_TYPE_IB
               895: operator: )
               896: operator: ||
               897: operator: !
               898: call: 
                899: name: mlx5_get_flow_namespace
                900: argument_list: 
                 901: argument: 
                  902: expr: 
                   903: name: 
                    904: name: dev
                    905: operator: ->
                    906: name: mdev
                 907: argument: 
                  908: expr: 
                   909: name: MLX5_FLOW_NAMESPACE_BYPASS
             910: block: 
              911: block_content: 
               912: expr_stmt: 
                913: expr: 
                 914: call: 
                  915: name: mlx5_ib_dbg
                  916: argument_list: 
                   917: argument: 
                    918: expr: 
                     919: name: dev
                   920: argument: 
                    921: expr: 
                     922: literal: "Source QP option isn't supported\n"
               923: return: 
                924: expr: 
                 925: operator: -
                 926: name: EOPNOTSUPP
           927: expr_stmt: 
            928: expr: 
             929: name: 
              930: name: qp
              931: operator: ->
              932: name: flags
             933: operator: |=
             934: name: MLX5_IB_QP_UNDERLAY
           935: expr_stmt: 
            936: expr: 
             937: name: 
              938: name: qp
              939: operator: ->
              940: name: underlay_qpn
             941: operator: =
             942: name: 
              943: name: init_attr
              944: operator: ->
              945: name: source_qpn
    946: else: 
     947: block: 
      948: block_content: 
       949: expr_stmt: 
        950: expr: 
         951: name: 
          952: name: qp
          953: operator: ->
          954: name: wq_sig
         955: operator: =
         956: operator: !
         957: operator: !
         958: name: wq_signature
   959: expr_stmt: 
    960: expr: 
     961: name: base
     962: operator: =
     963: ternary: 
      964: condition: 
       965: expr: 
        966: operator: (
        967: name: 
         968: name: init_attr
         969: operator: ->
         970: name: qp_type
        971: operator: ==
        972: name: IB_QPT_RAW_PACKET
        973: operator: ||
        974: name: 
         975: name: qp
         976: operator: ->
         977: name: flags
        978: operator: &
        979: name: MLX5_IB_QP_UNDERLAY
        980: operator: )
      981: then: 
       982: expr: 
        983: operator: &
        984: name: 
         985: name: qp
         986: operator: ->
         987: name: raw_packet_qp
         988: operator: .
         989: name: rq
         990: operator: .
         991: name: base
      992: else: 
       993: expr: 
        994: operator: &
        995: name: 
         996: name: qp
         997: operator: ->
         998: name: trans_qp
         999: operator: .
         1000: name: base
   1001: expr_stmt: 
    1002: expr: 
     1003: name: 
      1004: name: qp
      1005: operator: ->
      1006: name: has_rq
     1007: operator: =
     1008: call: 
      1009: name: qp_has_rq
      1010: argument_list: 
       1011: argument: 
        1012: expr: 
         1013: name: init_attr
   1014: expr_stmt: 
    1015: expr: 
     1016: name: err
     1017: operator: =
     1018: call: 
      1019: name: set_rq_size
      1020: argument_list: 
       1021: argument: 
        1022: expr: 
         1023: name: dev
       1024: argument: 
        1025: expr: 
         1026: operator: &
         1027: name: 
          1028: name: init_attr
          1029: operator: ->
          1030: name: cap
       1031: argument: 
        1032: expr: 
         1033: name: 
          1034: name: qp
          1035: operator: ->
          1036: name: has_rq
       1037: argument: 
        1038: expr: 
         1039: name: qp
       1040: argument: 
        1041: expr: 
         1042: ternary: 
          1043: condition: 
           1044: expr: 
            1045: operator: (
            1046: name: pd
            1047: operator: &&
            1048: name: 
             1049: name: pd
             1050: operator: ->
             1051: name: uobject
            1052: operator: )
          1053: then: 
           1054: expr: 
            1055: operator: &
            1056: name: ucmd
          1057: else: 
           1058: expr: 
            1059: name: NULL
   1060: if_stmt: 
    1061: if: 
     1062: condition: 
      1063: expr: 
       1064: name: err
     1065: block: 
      1066: block_content: 
       1067: expr_stmt: 
        1068: expr: 
         1069: call: 
          1070: name: mlx5_ib_dbg
          1071: argument_list: 
           1072: argument: 
            1073: expr: 
             1074: name: dev
           1075: argument: 
            1076: expr: 
             1077: literal: "err %d\n"
           1078: argument: 
            1079: expr: 
             1080: name: err
       1081: return: 
        1082: expr: 
         1083: name: err
   1084: if_stmt: 
    1085: if: 
     1086: condition: 
      1087: expr: 
       1088: name: pd
     1089: block: 
      1090: block_content: 
       1091: if_stmt: 
        1092: if: 
         1093: condition: 
          1094: expr: 
           1095: name: 
            1096: name: pd
            1097: operator: ->
            1098: name: uobject
         1099: block: 
          1100: block_content: 
           1101: decl_stmt: 
            1102: decl: 
             1103: type: 
              1104: name: __u32
             1105: name: max_wqes
             1106: init: 
              1107: expr: 
               1108: literal: 1
               1109: operator: <<
               1110: call: 
                1111: name: MLX5_CAP_GEN
                1112: argument_list: 
                 1113: argument: 
                  1114: expr: 
                   1115: name: mdev
                 1116: argument: 
                  1117: expr: 
                   1118: name: log_max_qp_sz
           1119: expr_stmt: 
            1120: expr: 
             1121: call: 
              1122: name: mlx5_ib_dbg
              1123: argument_list: 
               1124: argument: 
                1125: expr: 
                 1126: name: dev
               1127: argument: 
                1128: expr: 
                 1129: literal: "requested sq_wqe_count (%d)\n"
               1130: argument: 
                1131: expr: 
                 1132: name: 
                  1133: name: ucmd
                  1134: operator: .
                  1135: name: sq_wqe_count
           1136: if_stmt: 
            1137: if: 
             1138: condition: 
              1139: expr: 
               1140: name: 
                1141: name: ucmd
                1142: operator: .
                1143: name: rq_wqe_shift
               1144: operator: !=
               1145: name: 
                1146: name: qp
                1147: operator: ->
                1148: name: rq
                1149: operator: .
                1150: name: wqe_shift
               1151: operator: ||
               1152: name: 
                1153: name: ucmd
                1154: operator: .
                1155: name: rq_wqe_count
               1156: operator: !=
               1157: name: 
                1158: name: qp
                1159: operator: ->
                1160: name: rq
                1161: operator: .
                1162: name: wqe_cnt
             1163: block: 
              1164: block_content: 
               1165: expr_stmt: 
                1166: expr: 
                 1167: call: 
                  1168: name: mlx5_ib_dbg
                  1169: argument_list: 
                   1170: argument: 
                    1171: expr: 
                     1172: name: dev
                   1173: argument: 
                    1174: expr: 
                     1175: literal: "invalid rq params\n"
               1176: return: 
                1177: expr: 
                 1178: operator: -
                 1179: name: EINVAL
           1180: if_stmt: 
            1181: if: 
             1182: condition: 
              1183: expr: 
               1184: name: 
                1185: name: ucmd
                1186: operator: .
                1187: name: sq_wqe_count
               1188: operator: >
               1189: name: max_wqes
             1190: block: 
              1191: block_content: 
               1192: expr_stmt: 
                1193: expr: 
                 1194: call: 
                  1195: name: mlx5_ib_dbg
                  1196: argument_list: 
                   1197: argument: 
                    1198: expr: 
                     1199: name: dev
                   1200: argument: 
                    1201: expr: 
                     1202: literal: "requested sq_wqe_count (%d)>max allowed (%d)\n"
                   1203: argument: 
                    1204: expr: 
                     1205: name: 
                      1206: name: ucmd
                      1207: operator: .
                      1208: name: sq_wqe_count
                   1209: argument: 
                    1210: expr: 
                     1211: name: max_wqes
               1212: return: 
                1213: expr: 
                 1214: operator: -
                 1215: name: EINVAL
           1216: if_stmt: 
            1217: if: 
             1218: condition: 
              1219: expr: 
               1220: name: 
                1221: name: init_attr
                1222: operator: ->
                1223: name: create_flags
               1224: operator: &
               1225: call: 
                1226: name: mlx5_ib_create_qp_sqpn_qp1
                1227: argument_list: 
             1228: block: 
              1229: block_content: 
               1230: expr_stmt: 
                1231: expr: 
                 1232: call: 
                  1233: name: mlx5_ib_dbg
                  1234: argument_list: 
                   1235: argument: 
                    1236: expr: 
                     1237: name: dev
                   1238: argument: 
                    1239: expr: 
                     1240: literal: "user-space is not allowed to create UD QPs spoofing as QP1\n"
               1241: return: 
                1242: expr: 
                 1243: operator: -
                 1244: name: EINVAL
           1245: expr_stmt: 
            1246: expr: 
             1247: name: err
             1248: operator: =
             1249: call: 
              1250: name: create_user_qp
              1251: argument_list: 
               1252: argument: 
                1253: expr: 
                 1254: name: dev
               1255: argument: 
                1256: expr: 
                 1257: name: pd
               1258: argument: 
                1259: expr: 
                 1260: name: qp
               1261: argument: 
                1262: expr: 
                 1263: name: udata
               1264: argument: 
                1265: expr: 
                 1266: name: init_attr
               1267: argument: 
                1268: expr: 
                 1269: operator: &
                 1270: name: in
               1271: argument: 
                1272: expr: 
                 1273: operator: &
                 1274: name: resp
               1275: argument: 
                1276: expr: 
                 1277: operator: &
                 1278: name: inlen
               1279: argument: 
                1280: expr: 
                 1281: name: base
           1282: if_stmt: 
            1283: if: 
             1284: condition: 
              1285: expr: 
               1286: name: err
             1287: block: 
              1288: block_content: 
               1289: expr_stmt: 
                1290: expr: 
                 1291: call: 
                  1292: name: mlx5_ib_dbg
                  1293: argument_list: 
                   1294: argument: 
                    1295: expr: 
                     1296: name: dev
                   1297: argument: 
                    1298: expr: 
                     1299: literal: "err %d\n"
                   1300: argument: 
                    1301: expr: 
                     1302: name: err
        1303: else: 
         1304: block: 
          1305: block_content: 
           1306: expr_stmt: 
            1307: expr: 
             1308: name: err
             1309: operator: =
             1310: call: 
              1311: name: create_kernel_qp
              1312: argument_list: 
               1313: argument: 
                1314: expr: 
                 1315: name: dev
               1316: argument: 
                1317: expr: 
                 1318: name: init_attr
               1319: argument: 
                1320: expr: 
                 1321: name: qp
               1322: argument: 
                1323: expr: 
                 1324: operator: &
                 1325: name: in
               1326: argument: 
                1327: expr: 
                 1328: operator: &
                 1329: name: inlen
               1330: argument: 
                1331: expr: 
                 1332: name: base
           1333: if_stmt: 
            1334: if: 
             1335: condition: 
              1336: expr: 
               1337: name: err
             1338: block: 
              1339: block_content: 
               1340: expr_stmt: 
                1341: expr: 
                 1342: call: 
                  1343: name: mlx5_ib_dbg
                  1344: argument_list: 
                   1345: argument: 
                    1346: expr: 
                     1347: name: dev
                   1348: argument: 
                    1349: expr: 
                     1350: literal: "err %d\n"
                   1351: argument: 
                    1352: expr: 
                     1353: name: err
       1354: if_stmt: 
        1355: if: 
         1356: condition: 
          1357: expr: 
           1358: name: err
         1359: block: 
          1360: block_content: 
           1361: return: 
            1362: expr: 
             1363: name: err
    1364: else: 
     1365: block: 
      1366: block_content: 
       1367: expr_stmt: 
        1368: expr: 
         1369: name: in
         1370: operator: =
         1371: call: 
          1372: name: kvzalloc
          1373: argument_list: 
           1374: argument: 
            1375: expr: 
             1376: name: inlen
           1377: argument: 
            1378: expr: 
             1379: name: GFP_KERNEL
       1380: if_stmt: 
        1381: if: 
         1382: condition: 
          1383: expr: 
           1384: operator: !
           1385: name: in
         1386: block: 
          1387: block_content: 
           1388: return: 
            1389: expr: 
             1390: operator: -
             1391: name: ENOMEM
       1392: expr_stmt: 
        1393: expr: 
         1394: name: 
          1395: name: qp
          1396: operator: ->
          1397: name: create_type
         1398: operator: =
         1399: name: MLX5_QP_EMPTY
   1400: if_stmt: 
    1401: if: 
     1402: condition: 
      1403: expr: 
       1404: call: 
        1405: name: is_sqp
        1406: argument_list: 
         1407: argument: 
          1408: expr: 
           1409: name: 
            1410: name: init_attr
            1411: operator: ->
            1412: name: qp_type
     1413: block: 
      1414: block_content: 
       1415: expr_stmt: 
        1416: expr: 
         1417: name: 
          1418: name: qp
          1419: operator: ->
          1420: name: port
         1421: operator: =
         1422: name: 
          1423: name: init_attr
          1424: operator: ->
          1425: name: port_num
   1426: expr_stmt: 
    1427: expr: 
     1428: name: qpc
     1429: operator: =
     1430: call: 
      1431: name: MLX5_ADDR_OF
      1432: argument_list: 
       1433: argument: 
        1434: expr: 
         1435: name: create_qp_in
       1436: argument: 
        1437: expr: 
         1438: name: in
       1439: argument: 
        1440: expr: 
         1441: name: qpc
   1442: expr_stmt: 
    1443: expr: 
     1444: call: 
      1445: name: MLX5_SET
      1446: argument_list: 
       1447: argument: 
        1448: expr: 
         1449: name: qpc
       1450: argument: 
        1451: expr: 
         1452: name: qpc
       1453: argument: 
        1454: expr: 
         1455: name: st
       1456: argument: 
        1457: expr: 
         1458: name: mlx5_st
   1459: expr_stmt: 
    1460: expr: 
     1461: call: 
      1462: name: MLX5_SET
      1463: argument_list: 
       1464: argument: 
        1465: expr: 
         1466: name: qpc
       1467: argument: 
        1468: expr: 
         1469: name: qpc
       1470: argument: 
        1471: expr: 
         1472: name: pm_state
       1473: argument: 
        1474: expr: 
         1475: name: MLX5_QP_PM_MIGRATED
   1476: if_stmt: 
    1477: if: 
     1478: condition: 
      1479: expr: 
       1480: name: 
        1481: name: init_attr
        1482: operator: ->
        1483: name: qp_type
       1484: operator: !=
       1485: name: MLX5_IB_QPT_REG_UMR
     1486: block: 
      1487: block_content: 
       1488: expr_stmt: 
        1489: expr: 
         1490: call: 
          1491: name: MLX5_SET
          1492: argument_list: 
           1493: argument: 
            1494: expr: 
             1495: name: qpc
           1496: argument: 
            1497: expr: 
             1498: name: qpc
           1499: argument: 
            1500: expr: 
             1501: name: pd
           1502: argument: 
            1503: expr: 
             1504: call: 
              1505: name: to_mpd
              1506: argument_list: 
               1507: argument: 
                1508: expr: 
                 1509: ternary: 
                  1510: condition: 
                   1511: expr: 
                    1512: name: pd
                  1513: then: 
                   1514: expr: 
                    1515: name: pd
                  1516: else: 
                   1517: expr: 
                    1518: name: 
                     1519: name: devr
                     1520: operator: ->
                     1521: name: p0
             1522: operator: ->
             1523: name: pdn
    1524: else: 
     1525: block: 
      1526: block_content: 
       1527: expr_stmt: 
        1528: expr: 
         1529: call: 
          1530: name: MLX5_SET
          1531: argument_list: 
           1532: argument: 
            1533: expr: 
             1534: name: qpc
           1535: argument: 
            1536: expr: 
             1537: name: qpc
           1538: argument: 
            1539: expr: 
             1540: name: latency_sensitive
           1541: argument: 
            1542: expr: 
             1543: literal: 1
   1544: if_stmt: 
    1545: if: 
     1546: condition: 
      1547: expr: 
       1548: name: 
        1549: name: qp
        1550: operator: ->
        1551: name: wq_sig
     1552: block: 
      1553: block_content: 
       1554: expr_stmt: 
        1555: expr: 
         1556: call: 
          1557: name: MLX5_SET
          1558: argument_list: 
           1559: argument: 
            1560: expr: 
             1561: name: qpc
           1562: argument: 
            1563: expr: 
             1564: name: qpc
           1565: argument: 
            1566: expr: 
             1567: name: wq_signature
           1568: argument: 
            1569: expr: 
             1570: literal: 1
   1571: if_stmt: 
    1572: if: 
     1573: condition: 
      1574: expr: 
       1575: name: 
        1576: name: qp
        1577: operator: ->
        1578: name: flags
       1579: operator: &
       1580: name: MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK
     1581: block: 
      1582: block_content: 
       1583: expr_stmt: 
        1584: expr: 
         1585: call: 
          1586: name: MLX5_SET
          1587: argument_list: 
           1588: argument: 
            1589: expr: 
             1590: name: qpc
           1591: argument: 
            1592: expr: 
             1593: name: qpc
           1594: argument: 
            1595: expr: 
             1596: name: block_lb_mc
           1597: argument: 
            1598: expr: 
             1599: literal: 1
   1600: if_stmt: 
    1601: if: 
     1602: condition: 
      1603: expr: 
       1604: name: 
        1605: name: qp
        1606: operator: ->
        1607: name: flags
       1608: operator: &
       1609: name: MLX5_IB_QP_CROSS_CHANNEL
     1610: block: 
      1611: block_content: 
       1612: expr_stmt: 
        1613: expr: 
         1614: call: 
          1615: name: MLX5_SET
          1616: argument_list: 
           1617: argument: 
            1618: expr: 
             1619: name: qpc
           1620: argument: 
            1621: expr: 
             1622: name: qpc
           1623: argument: 
            1624: expr: 
             1625: name: cd_master
           1626: argument: 
            1627: expr: 
             1628: literal: 1
   1629: if_stmt: 
    1630: if: 
     1631: condition: 
      1632: expr: 
       1633: name: 
        1634: name: qp
        1635: operator: ->
        1636: name: flags
       1637: operator: &
       1638: name: MLX5_IB_QP_MANAGED_SEND
     1639: block: 
      1640: block_content: 
       1641: expr_stmt: 
        1642: expr: 
         1643: call: 
          1644: name: MLX5_SET
          1645: argument_list: 
           1646: argument: 
            1647: expr: 
             1648: name: qpc
           1649: argument: 
            1650: expr: 
             1651: name: qpc
           1652: argument: 
            1653: expr: 
             1654: name: cd_slave_send
           1655: argument: 
            1656: expr: 
             1657: literal: 1
   1658: if_stmt: 
    1659: if: 
     1660: condition: 
      1661: expr: 
       1662: name: 
        1663: name: qp
        1664: operator: ->
        1665: name: flags
       1666: operator: &
       1667: name: MLX5_IB_QP_MANAGED_RECV
     1668: block: 
      1669: block_content: 
       1670: expr_stmt: 
        1671: expr: 
         1672: call: 
          1673: name: MLX5_SET
          1674: argument_list: 
           1675: argument: 
            1676: expr: 
             1677: name: qpc
           1678: argument: 
            1679: expr: 
             1680: name: qpc
           1681: argument: 
            1682: expr: 
             1683: name: cd_slave_receive
           1684: argument: 
            1685: expr: 
             1686: literal: 1
   1687: if_stmt: 
    1688: if: 
     1689: condition: 
      1690: expr: 
       1691: name: 
        1692: name: qp
        1693: operator: ->
        1694: name: scat_cqe
       1695: operator: &&
       1696: call: 
        1697: name: is_connected
        1698: argument_list: 
         1699: argument: 
          1700: expr: 
           1701: name: 
            1702: name: init_attr
            1703: operator: ->
            1704: name: qp_type
     1705: block: 
      1706: block_content: 
       1707: decl_stmt: 
        1708: decl: 
         1709: type: 
          1710: name: int
         1711: name: rcqe_sz
       1712: decl_stmt: 
        1713: decl: 
         1714: type: 
          1715: name: int
         1716: name: scqe_sz
       1717: expr_stmt: 
        1718: expr: 
         1719: name: rcqe_sz
         1720: operator: =
         1721: call: 
          1722: name: mlx5_ib_get_cqe_size
          1723: argument_list: 
           1724: argument: 
            1725: expr: 
             1726: name: dev
           1727: argument: 
            1728: expr: 
             1729: name: 
              1730: name: init_attr
              1731: operator: ->
              1732: name: recv_cq
       1733: expr_stmt: 
        1734: expr: 
         1735: name: scqe_sz
         1736: operator: =
         1737: call: 
          1738: name: mlx5_ib_get_cqe_size
          1739: argument_list: 
           1740: argument: 
            1741: expr: 
             1742: name: dev
           1743: argument: 
            1744: expr: 
             1745: name: 
              1746: name: init_attr
              1747: operator: ->
              1748: name: send_cq
       1749: if_stmt: 
        1750: if: 
         1751: condition: 
          1752: expr: 
           1753: name: rcqe_sz
           1754: operator: ==
           1755: literal: 128
         1756: block: 
          1757: block_content: 
           1758: expr_stmt: 
            1759: expr: 
             1760: call: 
              1761: name: MLX5_SET
              1762: argument_list: 
               1763: argument: 
                1764: expr: 
                 1765: name: qpc
               1766: argument: 
                1767: expr: 
                 1768: name: qpc
               1769: argument: 
                1770: expr: 
                 1771: name: cs_res
               1772: argument: 
                1773: expr: 
                 1774: name: MLX5_RES_SCAT_DATA64_CQE
        1775: else: 
         1776: block: 
          1777: block_content: 
           1778: expr_stmt: 
            1779: expr: 
             1780: call: 
              1781: name: MLX5_SET
              1782: argument_list: 
               1783: argument: 
                1784: expr: 
                 1785: name: qpc
               1786: argument: 
                1787: expr: 
                 1788: name: qpc
               1789: argument: 
                1790: expr: 
                 1791: name: cs_res
               1792: argument: 
                1793: expr: 
                 1794: name: MLX5_RES_SCAT_DATA32_CQE
       1795: if_stmt: 
        1796: if: 
         1797: condition: 
          1798: expr: 
           1799: name: 
            1800: name: init_attr
            1801: operator: ->
            1802: name: sq_sig_type
           1803: operator: ==
           1804: name: IB_SIGNAL_ALL_WR
         1805: block: 
          1806: block_content: 
           1807: if_stmt: 
            1808: if: 
             1809: condition: 
              1810: expr: 
               1811: name: scqe_sz
               1812: operator: ==
               1813: literal: 128
             1814: block: 
              1815: block_content: 
               1816: expr_stmt: 
                1817: expr: 
                 1818: call: 
                  1819: name: MLX5_SET
                  1820: argument_list: 
                   1821: argument: 
                    1822: expr: 
                     1823: name: qpc
                   1824: argument: 
                    1825: expr: 
                     1826: name: qpc
                   1827: argument: 
                    1828: expr: 
                     1829: name: cs_req
                   1830: argument: 
                    1831: expr: 
                     1832: name: MLX5_REQ_SCAT_DATA64_CQE
            1833: else: 
             1834: block: 
              1835: block_content: 
               1836: expr_stmt: 
                1837: expr: 
                 1838: call: 
                  1839: name: MLX5_SET
                  1840: argument_list: 
                   1841: argument: 
                    1842: expr: 
                     1843: name: qpc
                   1844: argument: 
                    1845: expr: 
                     1846: name: qpc
                   1847: argument: 
                    1848: expr: 
                     1849: name: cs_req
                   1850: argument: 
                    1851: expr: 
                     1852: name: MLX5_REQ_SCAT_DATA32_CQE
   1853: if_stmt: 
    1854: if: 
     1855: condition: 
      1856: expr: 
       1857: name: 
        1858: name: qp
        1859: operator: ->
        1860: name: rq
        1861: operator: .
        1862: name: wqe_cnt
     1863: block: 
      1864: block_content: 
       1865: expr_stmt: 
        1866: expr: 
         1867: call: 
          1868: name: MLX5_SET
          1869: argument_list: 
           1870: argument: 
            1871: expr: 
             1872: name: qpc
           1873: argument: 
            1874: expr: 
             1875: name: qpc
           1876: argument: 
            1877: expr: 
             1878: name: log_rq_stride
           1879: argument: 
            1880: expr: 
             1881: name: 
              1882: name: qp
              1883: operator: ->
              1884: name: rq
              1885: operator: .
              1886: name: wqe_shift
             1887: operator: -
             1888: literal: 4
       1889: expr_stmt: 
        1890: expr: 
         1891: call: 
          1892: name: MLX5_SET
          1893: argument_list: 
           1894: argument: 
            1895: expr: 
             1896: name: qpc
           1897: argument: 
            1898: expr: 
             1899: name: qpc
           1900: argument: 
            1901: expr: 
             1902: name: log_rq_size
           1903: argument: 
            1904: expr: 
             1905: call: 
              1906: name: ilog2
              1907: argument_list: 
               1908: argument: 
                1909: expr: 
                 1910: name: 
                  1911: name: qp
                  1912: operator: ->
                  1913: name: rq
                  1914: operator: .
                  1915: name: wqe_cnt
   1916: expr_stmt: 
    1917: expr: 
     1918: call: 
      1919: name: MLX5_SET
      1920: argument_list: 
       1921: argument: 
        1922: expr: 
         1923: name: qpc
       1924: argument: 
        1925: expr: 
         1926: name: qpc
       1927: argument: 
        1928: expr: 
         1929: name: rq_type
       1930: argument: 
        1931: expr: 
         1932: call: 
          1933: name: get_rx_type
          1934: argument_list: 
           1935: argument: 
            1936: expr: 
             1937: name: qp
           1938: argument: 
            1939: expr: 
             1940: name: init_attr
   1941: if_stmt: 
    1942: if: 
     1943: condition: 
      1944: expr: 
       1945: name: 
        1946: name: qp
        1947: operator: ->
        1948: name: sq
        1949: operator: .
        1950: name: wqe_cnt
     1951: block: 
      1952: block_content: 
       1953: expr_stmt: 
        1954: expr: 
         1955: call: 
          1956: name: MLX5_SET
          1957: argument_list: 
           1958: argument: 
            1959: expr: 
             1960: name: qpc
           1961: argument: 
            1962: expr: 
             1963: name: qpc
           1964: argument: 
            1965: expr: 
             1966: name: log_sq_size
           1967: argument: 
            1968: expr: 
             1969: call: 
              1970: name: ilog2
              1971: argument_list: 
               1972: argument: 
                1973: expr: 
                 1974: name: 
                  1975: name: qp
                  1976: operator: ->
                  1977: name: sq
                  1978: operator: .
                  1979: name: wqe_cnt
    1980: else: 
     1981: block: 
      1982: block_content: 
       1983: expr_stmt: 
        1984: expr: 
         1985: call: 
          1986: name: MLX5_SET
          1987: argument_list: 
           1988: argument: 
            1989: expr: 
             1990: name: qpc
           1991: argument: 
            1992: expr: 
             1993: name: qpc
           1994: argument: 
            1995: expr: 
             1996: name: no_sq
           1997: argument: 
            1998: expr: 
             1999: literal: 1
       2000: if_stmt: 
        2001: if: 
         2002: condition: 
          2003: expr: 
           2004: name: 
            2005: name: init_attr
            2006: operator: ->
            2007: name: srq
           2008: operator: &&
           2009: name: 
            2010: name: init_attr
            2011: operator: ->
            2012: name: srq
            2013: operator: ->
            2014: name: srq_type
           2015: operator: ==
           2016: name: IB_SRQT_TM
         2017: block: 
          2018: block_content: 
           2019: expr_stmt: 
            2020: expr: 
             2021: call: 
              2022: name: MLX5_SET
              2023: argument_list: 
               2024: argument: 
                2025: expr: 
                 2026: name: qpc
               2027: argument: 
                2028: expr: 
                 2029: name: qpc
               2030: argument: 
                2031: expr: 
                 2032: name: offload_type
               2033: argument: 
                2034: expr: 
                 2035: name: MLX5_QPC_OFFLOAD_TYPE_RNDV
   2036: comment: /* Set default resources */
   2037: switch: 
    2038: condition: 
     2039: expr: 
      2040: name: 
       2041: name: init_attr
       2042: operator: ->
       2043: name: qp_type
    2044: block: 
     2045: block_content: 
      2046: case: 
       2047: expr: 
        2048: name: IB_QPT_XRC_TGT
      2049: expr_stmt: 
       2050: expr: 
        2051: call: 
         2052: name: MLX5_SET
         2053: argument_list: 
          2054: argument: 
           2055: expr: 
            2056: name: qpc
          2057: argument: 
           2058: expr: 
            2059: name: qpc
          2060: argument: 
           2061: expr: 
            2062: name: cqn_rcv
          2063: argument: 
           2064: expr: 
            2065: call: 
             2066: name: to_mcq
             2067: argument_list: 
              2068: argument: 
               2069: expr: 
                2070: name: 
                 2071: name: devr
                 2072: operator: ->
                 2073: name: c0
            2074: operator: ->
            2075: name: 
             2076: name: mcq
             2077: operator: .
             2078: name: cqn
      2079: expr_stmt: 
       2080: expr: 
        2081: call: 
         2082: name: MLX5_SET
         2083: argument_list: 
          2084: argument: 
           2085: expr: 
            2086: name: qpc
          2087: argument: 
           2088: expr: 
            2089: name: qpc
          2090: argument: 
           2091: expr: 
            2092: name: cqn_snd
          2093: argument: 
           2094: expr: 
            2095: call: 
             2096: name: to_mcq
             2097: argument_list: 
              2098: argument: 
               2099: expr: 
                2100: name: 
                 2101: name: devr
                 2102: operator: ->
                 2103: name: c0
            2104: operator: ->
            2105: name: 
             2106: name: mcq
             2107: operator: .
             2108: name: cqn
      2109: expr_stmt: 
       2110: expr: 
        2111: call: 
         2112: name: MLX5_SET
         2113: argument_list: 
          2114: argument: 
           2115: expr: 
            2116: name: qpc
          2117: argument: 
           2118: expr: 
            2119: name: qpc
          2120: argument: 
           2121: expr: 
            2122: name: srqn_rmpn_xrqn
          2123: argument: 
           2124: expr: 
            2125: call: 
             2126: name: to_msrq
             2127: argument_list: 
              2128: argument: 
               2129: expr: 
                2130: name: 
                 2131: name: devr
                 2132: operator: ->
                 2133: name: s0
            2134: operator: ->
            2135: name: 
             2136: name: msrq
             2137: operator: .
             2138: name: srqn
      2139: expr_stmt: 
       2140: expr: 
        2141: call: 
         2142: name: MLX5_SET
         2143: argument_list: 
          2144: argument: 
           2145: expr: 
            2146: name: qpc
          2147: argument: 
           2148: expr: 
            2149: name: qpc
          2150: argument: 
           2151: expr: 
            2152: name: xrcd
          2153: argument: 
           2154: expr: 
            2155: call: 
             2156: name: to_mxrcd
             2157: argument_list: 
              2158: argument: 
               2159: expr: 
                2160: name: 
                 2161: name: init_attr
                 2162: operator: ->
                 2163: name: xrcd
            2164: operator: ->
            2165: name: xrcdn
      2166: break: 
      2167: case: 
       2168: expr: 
        2169: name: IB_QPT_XRC_INI
      2170: expr_stmt: 
       2171: expr: 
        2172: call: 
         2173: name: MLX5_SET
         2174: argument_list: 
          2175: argument: 
           2176: expr: 
            2177: name: qpc
          2178: argument: 
           2179: expr: 
            2180: name: qpc
          2181: argument: 
           2182: expr: 
            2183: name: cqn_rcv
          2184: argument: 
           2185: expr: 
            2186: call: 
             2187: name: to_mcq
             2188: argument_list: 
              2189: argument: 
               2190: expr: 
                2191: name: 
                 2192: name: devr
                 2193: operator: ->
                 2194: name: c0
            2195: operator: ->
            2196: name: 
             2197: name: mcq
             2198: operator: .
             2199: name: cqn
      2200: expr_stmt: 
       2201: expr: 
        2202: call: 
         2203: name: MLX5_SET
         2204: argument_list: 
          2205: argument: 
           2206: expr: 
            2207: name: qpc
          2208: argument: 
           2209: expr: 
            2210: name: qpc
          2211: argument: 
           2212: expr: 
            2213: name: xrcd
          2214: argument: 
           2215: expr: 
            2216: call: 
             2217: name: to_mxrcd
             2218: argument_list: 
              2219: argument: 
               2220: expr: 
                2221: name: 
                 2222: name: devr
                 2223: operator: ->
                 2224: name: x1
            2225: operator: ->
            2226: name: xrcdn
      2227: expr_stmt: 
       2228: expr: 
        2229: call: 
         2230: name: MLX5_SET
         2231: argument_list: 
          2232: argument: 
           2233: expr: 
            2234: name: qpc
          2235: argument: 
           2236: expr: 
            2237: name: qpc
          2238: argument: 
           2239: expr: 
            2240: name: srqn_rmpn_xrqn
          2241: argument: 
           2242: expr: 
            2243: call: 
             2244: name: to_msrq
             2245: argument_list: 
              2246: argument: 
               2247: expr: 
                2248: name: 
                 2249: name: devr
                 2250: operator: ->
                 2251: name: s0
            2252: operator: ->
            2253: name: 
             2254: name: msrq
             2255: operator: .
             2256: name: srqn
      2257: break: 
      2258: default: 
      2259: if_stmt: 
       2260: if: 
        2261: condition: 
         2262: expr: 
          2263: name: 
           2264: name: init_attr
           2265: operator: ->
           2266: name: srq
        2267: block: 
         2268: block_content: 
          2269: expr_stmt: 
           2270: expr: 
            2271: call: 
             2272: name: MLX5_SET
             2273: argument_list: 
              2274: argument: 
               2275: expr: 
                2276: name: qpc
              2277: argument: 
               2278: expr: 
                2279: name: qpc
              2280: argument: 
               2281: expr: 
                2282: name: xrcd
              2283: argument: 
               2284: expr: 
                2285: call: 
                 2286: name: to_mxrcd
                 2287: argument_list: 
                  2288: argument: 
                   2289: expr: 
                    2290: name: 
                     2291: name: devr
                     2292: operator: ->
                     2293: name: x0
                2294: operator: ->
                2295: name: xrcdn
          2296: expr_stmt: 
           2297: expr: 
            2298: call: 
             2299: name: MLX5_SET
             2300: argument_list: 
              2301: argument: 
               2302: expr: 
                2303: name: qpc
              2304: argument: 
               2305: expr: 
                2306: name: qpc
              2307: argument: 
               2308: expr: 
                2309: name: srqn_rmpn_xrqn
              2310: argument: 
               2311: expr: 
                2312: call: 
                 2313: name: to_msrq
                 2314: argument_list: 
                  2315: argument: 
                   2316: expr: 
                    2317: name: 
                     2318: name: init_attr
                     2319: operator: ->
                     2320: name: srq
                2321: operator: ->
                2322: name: 
                 2323: name: msrq
                 2324: operator: .
                 2325: name: srqn
       2326: else: 
        2327: block: 
         2328: block_content: 
          2329: expr_stmt: 
           2330: expr: 
            2331: call: 
             2332: name: MLX5_SET
             2333: argument_list: 
              2334: argument: 
               2335: expr: 
                2336: name: qpc
              2337: argument: 
               2338: expr: 
                2339: name: qpc
              2340: argument: 
               2341: expr: 
                2342: name: xrcd
              2343: argument: 
               2344: expr: 
                2345: call: 
                 2346: name: to_mxrcd
                 2347: argument_list: 
                  2348: argument: 
                   2349: expr: 
                    2350: name: 
                     2351: name: devr
                     2352: operator: ->
                     2353: name: x1
                2354: operator: ->
                2355: name: xrcdn
          2356: expr_stmt: 
           2357: expr: 
            2358: call: 
             2359: name: MLX5_SET
             2360: argument_list: 
              2361: argument: 
               2362: expr: 
                2363: name: qpc
              2364: argument: 
               2365: expr: 
                2366: name: qpc
              2367: argument: 
               2368: expr: 
                2369: name: srqn_rmpn_xrqn
              2370: argument: 
               2371: expr: 
                2372: call: 
                 2373: name: to_msrq
                 2374: argument_list: 
                  2375: argument: 
                   2376: expr: 
                    2377: name: 
                     2378: name: devr
                     2379: operator: ->
                     2380: name: s1
                2381: operator: ->
                2382: name: 
                 2383: name: msrq
                 2384: operator: .
                 2385: name: srqn
   2386: if_stmt: 
    2387: if: 
     2388: condition: 
      2389: expr: 
       2390: name: 
        2391: name: init_attr
        2392: operator: ->
        2393: name: send_cq
     2394: block: 
      2395: block_content: 
       2396: expr_stmt: 
        2397: expr: 
         2398: call: 
          2399: name: MLX5_SET
          2400: argument_list: 
           2401: argument: 
            2402: expr: 
             2403: name: qpc
           2404: argument: 
            2405: expr: 
             2406: name: qpc
           2407: argument: 
            2408: expr: 
             2409: name: cqn_snd
           2410: argument: 
            2411: expr: 
             2412: call: 
              2413: name: to_mcq
              2414: argument_list: 
               2415: argument: 
                2416: expr: 
                 2417: name: 
                  2418: name: init_attr
                  2419: operator: ->
                  2420: name: send_cq
             2421: operator: ->
             2422: name: 
              2423: name: mcq
              2424: operator: .
              2425: name: cqn
   2426: if_stmt: 
    2427: if: 
     2428: condition: 
      2429: expr: 
       2430: name: 
        2431: name: init_attr
        2432: operator: ->
        2433: name: recv_cq
     2434: block: 
      2435: block_content: 
       2436: expr_stmt: 
        2437: expr: 
         2438: call: 
          2439: name: MLX5_SET
          2440: argument_list: 
           2441: argument: 
            2442: expr: 
             2443: name: qpc
           2444: argument: 
            2445: expr: 
             2446: name: qpc
           2447: argument: 
            2448: expr: 
             2449: name: cqn_rcv
           2450: argument: 
            2451: expr: 
             2452: call: 
              2453: name: to_mcq
              2454: argument_list: 
               2455: argument: 
                2456: expr: 
                 2457: name: 
                  2458: name: init_attr
                  2459: operator: ->
                  2460: name: recv_cq
             2461: operator: ->
             2462: name: 
              2463: name: mcq
              2464: operator: .
              2465: name: cqn
   2466: expr_stmt: 
    2467: expr: 
     2468: call: 
      2469: name: MLX5_SET64
      2470: argument_list: 
       2471: argument: 
        2472: expr: 
         2473: name: qpc
       2474: argument: 
        2475: expr: 
         2476: name: qpc
       2477: argument: 
        2478: expr: 
         2479: name: dbr_addr
       2480: argument: 
        2481: expr: 
         2482: name: 
          2483: name: qp
          2484: operator: ->
          2485: name: db
          2486: operator: .
          2487: name: dma
   2488: comment: /* 0xffffff means we ask to work with cqe version 0 */
   2489: if_stmt: 
    2490: if: 
     2491: condition: 
      2492: expr: 
       2493: call: 
        2494: name: MLX5_CAP_GEN
        2495: argument_list: 
         2496: argument: 
          2497: expr: 
           2498: name: mdev
         2499: argument: 
          2500: expr: 
           2501: name: cqe_version
       2502: operator: ==
       2503: name: MLX5_CQE_VERSION_V1
     2504: block: 
      2505: block_content: 
       2506: expr_stmt: 
        2507: expr: 
         2508: call: 
          2509: name: MLX5_SET
          2510: argument_list: 
           2511: argument: 
            2512: expr: 
             2513: name: qpc
           2514: argument: 
            2515: expr: 
             2516: name: qpc
           2517: argument: 
            2518: expr: 
             2519: name: user_index
           2520: argument: 
            2521: expr: 
             2522: name: uidx
   2523: comment: /* we use IB_QP_CREATE_IPOIB_UD_LSO to indicates ipoib qp */
   2524: if_stmt: 
    2525: if: 
     2526: condition: 
      2527: expr: 
       2528: name: 
        2529: name: init_attr
        2530: operator: ->
        2531: name: qp_type
       2532: operator: ==
       2533: name: IB_QPT_UD
       2534: operator: &&
       2535: operator: (
       2536: name: 
        2537: name: init_attr
        2538: operator: ->
        2539: name: create_flags
       2540: operator: &
       2541: name: IB_QP_CREATE_IPOIB_UD_LSO
       2542: operator: )
     2543: block: 
      2544: block_content: 
       2545: expr_stmt: 
        2546: expr: 
         2547: call: 
          2548: name: MLX5_SET
          2549: argument_list: 
           2550: argument: 
            2551: expr: 
             2552: name: qpc
           2553: argument: 
            2554: expr: 
             2555: name: qpc
           2556: argument: 
            2557: expr: 
             2558: name: ulp_stateless_offload_mode
           2559: argument: 
            2560: expr: 
             2561: literal: 1
       2562: expr_stmt: 
        2563: expr: 
         2564: name: 
          2565: name: qp
          2566: operator: ->
          2567: name: flags
         2568: operator: |=
         2569: name: MLX5_IB_QP_LSO
   2570: if_stmt: 
    2571: if: 
     2572: condition: 
      2573: expr: 
       2574: name: 
        2575: name: init_attr
        2576: operator: ->
        2577: name: create_flags
       2578: operator: &
       2579: name: IB_QP_CREATE_PCI_WRITE_END_PADDING
     2580: block: 
      2581: block_content: 
       2582: if_stmt: 
        2583: if: 
         2584: condition: 
          2585: expr: 
           2586: operator: !
           2587: call: 
            2588: name: MLX5_CAP_GEN
            2589: argument_list: 
             2590: argument: 
              2591: expr: 
               2592: name: 
                2593: name: dev
                2594: operator: ->
                2595: name: mdev
             2596: argument: 
              2597: expr: 
               2598: name: end_pad
         2599: block: 
          2600: block_content: 
           2601: expr_stmt: 
            2602: expr: 
             2603: call: 
              2604: name: mlx5_ib_dbg
              2605: argument_list: 
               2606: argument: 
                2607: expr: 
                 2608: name: dev
               2609: argument: 
                2610: expr: 
                 2611: literal: "scatter end padding is not supported\n"
           2612: expr_stmt: 
            2613: expr: 
             2614: name: err
             2615: operator: =
             2616: operator: -
             2617: name: EOPNOTSUPP
           2618: goto: 
            2619: name: err
        2620: if: 
         2621: condition: 
          2622: expr: 
           2623: name: 
            2624: name: init_attr
            2625: operator: ->
            2626: name: qp_type
           2627: operator: !=
           2628: name: IB_QPT_RAW_PACKET
         2629: block: 
          2630: block_content: 
           2631: expr_stmt: 
            2632: expr: 
             2633: call: 
              2634: name: MLX5_SET
              2635: argument_list: 
               2636: argument: 
                2637: expr: 
                 2638: name: qpc
               2639: argument: 
                2640: expr: 
                 2641: name: qpc
               2642: argument: 
                2643: expr: 
                 2644: name: end_padding_mode
               2645: argument: 
                2646: expr: 
                 2647: name: MLX5_WQ_END_PAD_MODE_ALIGN
        2648: else: 
         2649: block: 
          2650: block_content: 
           2651: expr_stmt: 
            2652: expr: 
             2653: name: 
              2654: name: qp
              2655: operator: ->
              2656: name: flags
             2657: operator: |=
             2658: name: MLX5_IB_QP_PCI_WRITE_END_PADDING
   2659: if_stmt: 
    2660: if: 
     2661: condition: 
      2662: expr: 
       2663: name: inlen
       2664: operator: <
       2665: literal: 0
     2666: block: 
      2667: block_content: 
       2668: expr_stmt: 
        2669: expr: 
         2670: name: err
         2671: operator: =
         2672: operator: -
         2673: name: EINVAL
       2674: goto: 
        2675: name: err
   2676: if_stmt: 
    2677: if: 
     2678: condition: 
      2679: expr: 
       2680: name: 
        2681: name: init_attr
        2682: operator: ->
        2683: name: qp_type
       2684: operator: ==
       2685: name: IB_QPT_RAW_PACKET
       2686: operator: ||
       2687: name: 
        2688: name: qp
        2689: operator: ->
        2690: name: flags
       2691: operator: &
       2692: name: MLX5_IB_QP_UNDERLAY
     2693: block: 
      2694: block_content: 
       2695: expr_stmt: 
        2696: expr: 
         2697: name: 
          2698: name: qp
          2699: operator: ->
          2700: name: raw_packet_qp
          2701: operator: .
          2702: name: sq
          2703: operator: .
          2704: name: ubuffer
          2705: operator: .
          2706: name: buf_addr
         2707: operator: =
         2708: name: 
          2709: name: ucmd
          2710: operator: .
          2711: name: sq_buf_addr
       2712: expr_stmt: 
        2713: expr: 
         2714: call: 
          2715: name: raw_packet_qp_copy_info
          2716: argument_list: 
           2717: argument: 
            2718: expr: 
             2719: name: qp
           2720: argument: 
            2721: expr: 
             2722: operator: &
             2723: name: 
              2724: name: qp
              2725: operator: ->
              2726: name: raw_packet_qp
       2727: expr_stmt: 
        2728: expr: 
         2729: name: err
         2730: operator: =
         2731: call: 
          2732: name: create_raw_packet_qp
          2733: argument_list: 
           2734: argument: 
            2735: expr: 
             2736: name: dev
           2737: argument: 
            2738: expr: 
             2739: name: qp
           2740: argument: 
            2741: expr: 
             2742: name: in
           2743: argument: 
            2744: expr: 
             2745: name: inlen
           2746: argument: 
            2747: expr: 
             2748: name: pd
    2749: else: 
     2750: block: 
      2751: block_content: 
       2752: expr_stmt: 
        2753: expr: 
         2754: name: err
         2755: operator: =
         2756: call: 
          2757: name: mlx5_core_create_qp
          2758: argument_list: 
           2759: argument: 
            2760: expr: 
             2761: name: 
              2762: name: dev
              2763: operator: ->
              2764: name: mdev
           2765: argument: 
            2766: expr: 
             2767: operator: &
             2768: name: 
              2769: name: base
              2770: operator: ->
              2771: name: mqp
           2772: argument: 
            2773: expr: 
             2774: name: in
           2775: argument: 
            2776: expr: 
             2777: name: inlen
   2778: if_stmt: 
    2779: if: 
     2780: condition: 
      2781: expr: 
       2782: name: err
     2783: block: 
      2784: block_content: 
       2785: expr_stmt: 
        2786: expr: 
         2787: call: 
          2788: name: mlx5_ib_dbg
          2789: argument_list: 
           2790: argument: 
            2791: expr: 
             2792: name: dev
           2793: argument: 
            2794: expr: 
             2795: literal: "create qp failed\n"
       2796: goto: 
        2797: name: err_create
   2798: expr_stmt: 
    2799: expr: 
     2800: call: 
      2801: name: kvfree
      2802: argument_list: 
       2803: argument: 
        2804: expr: 
         2805: name: in
   2806: expr_stmt: 
    2807: expr: 
     2808: name: 
      2809: name: base
      2810: operator: ->
      2811: name: container_mibqp
     2812: operator: =
     2813: name: qp
   2814: expr_stmt: 
    2815: expr: 
     2816: name: 
      2817: name: base
      2818: operator: ->
      2819: name: mqp
      2820: operator: .
      2821: name: event
     2822: operator: =
     2823: name: mlx5_ib_qp_event
   2824: expr_stmt: 
    2825: expr: 
     2826: call: 
      2827: name: get_cqs
      2828: argument_list: 
       2829: argument: 
        2830: expr: 
         2831: name: 
          2832: name: init_attr
          2833: operator: ->
          2834: name: qp_type
       2835: argument: 
        2836: expr: 
         2837: name: 
          2838: name: init_attr
          2839: operator: ->
          2840: name: send_cq
       2841: argument: 
        2842: expr: 
         2843: name: 
          2844: name: init_attr
          2845: operator: ->
          2846: name: recv_cq
       2847: argument: 
        2848: expr: 
         2849: operator: &
         2850: name: send_cq
       2851: argument: 
        2852: expr: 
         2853: operator: &
         2854: name: recv_cq
   2855: expr_stmt: 
    2856: expr: 
     2857: call: 
      2858: name: spin_lock_irqsave
      2859: argument_list: 
       2860: argument: 
        2861: expr: 
         2862: operator: &
         2863: name: 
          2864: name: dev
          2865: operator: ->
          2866: name: reset_flow_resource_lock
       2867: argument: 
        2868: expr: 
         2869: name: flags
   2870: expr_stmt: 
    2871: expr: 
     2872: call: 
      2873: name: mlx5_ib_lock_cqs
      2874: argument_list: 
       2875: argument: 
        2876: expr: 
         2877: name: send_cq
       2878: argument: 
        2879: expr: 
         2880: name: recv_cq
   2881: comment: /* Maintain device to QPs access, needed for further handling via

----------------------------------------
0: function: 
 1: type: 
  2: specifier: static
  3: name: int
 4: name: create_qp_common
 5: parameter_list: 
  6: parameter: 
   7: decl: 
    8: type: 
     9: name: 
      10: name: struct
      11: name: mlx5_ib_dev
     12: modifier: *
    13: name: dev
  14: parameter: 
   15: decl: 
    16: type: 
     17: name: 
      18: name: struct
      19: name: ib_pd
     20: modifier: *
    21: name: pd
  22: parameter: 
   23: decl: 
    24: type: 
     25: name: 
      26: name: struct
      27: name: ib_qp_init_attr
     28: modifier: *
    29: name: init_attr
  30: parameter: 
   31: decl: 
    32: type: 
     33: name: 
      34: name: struct
      35: name: ib_udata
     36: modifier: *
    37: name: udata
  38: parameter: 
   39: decl: 
    40: type: 
     41: name: 
      42: name: struct
      43: name: mlx5_ib_qp
     44: modifier: *
    45: name: qp
 46: block: 
  47: block_content: 
   48: decl_stmt: 
    49: decl: 
     50: type: 
      51: name: 
       52: name: struct
       53: name: mlx5_ib_resources
      54: modifier: *
     55: name: devr
     56: init: 
      57: expr: 
       58: operator: &
       59: name: 
        60: name: dev
        61: operator: ->
        62: name: devr
   63: decl_stmt: 
    64: decl: 
     65: type: 
      66: name: int
     67: name: inlen
     68: init: 
      69: expr: 
       70: call: 
        71: name: MLX5_ST_SZ_BYTES
        72: argument_list: 
         73: argument: 
          74: expr: 
           75: name: create_qp_in
   76: decl_stmt: 
    77: decl: 
     78: type: 
      79: name: 
       80: name: struct
       81: name: mlx5_core_dev
      82: modifier: *
     83: name: mdev
     84: init: 
      85: expr: 
       86: name: 
        87: name: dev
        88: operator: ->
        89: name: mdev
   90: decl_stmt: 
    91: decl: 
     92: type: 
      93: name: 
       94: name: struct
       95: name: mlx5_ib_create_qp_resp
     96: name: resp
     97: init: 
      98: expr: 
       99: block: 
   100: decl_stmt: 
    101: decl: 
     102: type: 
      103: name: 
       104: name: struct
       105: name: mlx5_ib_cq
      106: modifier: *
     107: name: send_cq
   108: decl_stmt: 
    109: decl: 
     110: type: 
      111: name: 
       112: name: struct
       113: name: mlx5_ib_cq
      114: modifier: *
     115: name: recv_cq
   116: decl_stmt: 
    117: decl: 
     118: type: 
      119: name: unsigned
      120: name: long
     121: name: flags
   122: decl_stmt: 
    123: decl: 
     124: type: 
      125: name: u32
     126: name: uidx
     127: init: 
      128: expr: 
       129: name: MLX5_IB_DEFAULT_UIDX
   130: decl_stmt: 
    131: decl: 
     132: type: 
      133: name: 
       134: name: struct
       135: name: mlx5_ib_create_qp
     136: name: ucmd
   137: decl_stmt: 
    138: decl: 
     139: type: 
      140: name: 
       141: name: struct
       142: name: mlx5_ib_qp_base
      143: modifier: *
     144: name: base
   145: decl_stmt: 
    146: decl: 
     147: type: 
      148: name: int
     149: name: mlx5_st
   150: decl_stmt: 
    151: decl: 
     152: type: 
      153: name: void
      154: modifier: *
     155: name: qpc
   156: decl_stmt: 
    157: decl: 
     158: type: 
      159: name: u32
      160: modifier: *
     161: name: in
   162: decl_stmt: 
    163: decl: 
     164: type: 
      165: name: int
     166: name: err
   167: expr_stmt: 
    168: expr: 
     169: call: 
      170: name: mutex_init
      171: argument_list: 
       172: argument: 
        173: expr: 
         174: operator: &
         175: name: 
          176: name: qp
          177: operator: ->
          178: name: mutex
   179: expr_stmt: 
    180: expr: 
     181: call: 
      182: name: spin_lock_init
      183: argument_list: 
       184: argument: 
        185: expr: 
         186: operator: &
         187: name: 
          188: name: qp
          189: operator: ->
          190: name: sq
          191: operator: .
          192: name: lock
   193: expr_stmt: 
    194: expr: 
     195: call: 
      196: name: spin_lock_init
      197: argument_list: 
       198: argument: 
        199: expr: 
         200: operator: &
         201: name: 
          202: name: qp
          203: operator: ->
          204: name: rq
          205: operator: .
          206: name: lock
   207: expr_stmt: 
    208: expr: 
     209: name: mlx5_st
     210: operator: =
     211: call: 
      212: name: to_mlx5_st
      213: argument_list: 
       214: argument: 
        215: expr: 
         216: name: 
          217: name: init_attr
          218: operator: ->
          219: name: qp_type
   220: if_stmt: 
    221: if: 
     222: condition: 
      223: expr: 
       224: name: mlx5_st
       225: operator: <
       226: literal: 0
     227: block: 
      228: block_content: 
       229: return: 
        230: expr: 
         231: operator: -
         232: name: EINVAL
   233: if_stmt: 
    234: if: 
     235: condition: 
      236: expr: 
       237: name: 
        238: name: init_attr
        239: operator: ->
        240: name: rwq_ind_tbl
     241: block: 
      242: block_content: 
       243: if_stmt: 
        244: if: 
         245: condition: 
          246: expr: 
           247: operator: !
           248: name: udata
         249: block: 
          250: block_content: 
           251: return: 
            252: expr: 
             253: operator: -
             254: name: ENOSYS
       255: expr_stmt: 
        256: expr: 
         257: name: err
         258: operator: =
         259: call: 
          260: name: create_rss_raw_qp_tir
          261: argument_list: 
           262: argument: 
            263: expr: 
             264: name: dev
           265: argument: 
            266: expr: 
             267: name: qp
           268: argument: 
            269: expr: 
             270: name: pd
           271: argument: 
            272: expr: 
             273: name: init_attr
           274: argument: 
            275: expr: 
             276: name: udata
       277: return: 
        278: expr: 
         279: name: err
   280: if_stmt: 
    281: if: 
     282: condition: 
      283: expr: 
       284: name: 
        285: name: init_attr
        286: operator: ->
        287: name: create_flags
       288: operator: &
       289: name: IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK
     290: block: 
      291: block_content: 
       292: if_stmt: 
        293: if: 
         294: condition: 
          295: expr: 
           296: operator: !
           297: call: 
            298: name: MLX5_CAP_GEN
            299: argument_list: 
             300: argument: 
              301: expr: 
               302: name: mdev
             303: argument: 
              304: expr: 
               305: name: block_lb_mc
         306: block: 
          307: block_content: 
           308: expr_stmt: 
            309: expr: 
             310: call: 
              311: name: mlx5_ib_dbg
              312: argument_list: 
               313: argument: 
                314: expr: 
                 315: name: dev
               316: argument: 
                317: expr: 
                 318: literal: "block multicast loopback isn't supported\n"
           319: return: 
            320: expr: 
             321: operator: -
             322: name: EINVAL
        323: else: 
         324: block: 
          325: block_content: 
           326: expr_stmt: 
            327: expr: 
             328: name: 
              329: name: qp
              330: operator: ->
              331: name: flags
             332: operator: |=
             333: name: MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK
   334: if_stmt: 
    335: if: 
     336: condition: 
      337: expr: 
       338: name: 
        339: name: init_attr
        340: operator: ->
        341: name: create_flags
       342: operator: &
       343: operator: (
       344: name: IB_QP_CREATE_CROSS_CHANNEL
       345: operator: |
       346: name: IB_QP_CREATE_MANAGED_SEND
       347: operator: |
       348: name: IB_QP_CREATE_MANAGED_RECV
       349: operator: )
     350: block: 
      351: block_content: 
       352: if_stmt: 
        353: if: 
         354: condition: 
          355: expr: 
           356: operator: !
           357: call: 
            358: name: MLX5_CAP_GEN
            359: argument_list: 
             360: argument: 
              361: expr: 
               362: name: mdev
             363: argument: 
              364: expr: 
               365: name: cd
         366: block: 
          367: block_content: 
           368: expr_stmt: 
            369: expr: 
             370: call: 
              371: name: mlx5_ib_dbg
              372: argument_list: 
               373: argument: 
                374: expr: 
                 375: name: dev
               376: argument: 
                377: expr: 
                 378: literal: "cross-channel isn't supported\n"
           379: return: 
            380: expr: 
             381: operator: -
             382: name: EINVAL
       383: if_stmt: 
        384: if: 
         385: condition: 
          386: expr: 
           387: name: 
            388: name: init_attr
            389: operator: ->
            390: name: create_flags
           391: operator: &
           392: name: IB_QP_CREATE_CROSS_CHANNEL
         393: block: 
          394: block_content: 
           395: expr_stmt: 
            396: expr: 
             397: name: 
              398: name: qp
              399: operator: ->
              400: name: flags
             401: operator: |=
             402: name: MLX5_IB_QP_CROSS_CHANNEL
       403: if_stmt: 
        404: if: 
         405: condition: 
          406: expr: 
           407: name: 
            408: name: init_attr
            409: operator: ->
            410: name: create_flags
           411: operator: &
           412: name: IB_QP_CREATE_MANAGED_SEND
         413: block: 
          414: block_content: 
           415: expr_stmt: 
            416: expr: 
             417: name: 
              418: name: qp
              419: operator: ->
              420: name: flags
             421: operator: |=
             422: name: MLX5_IB_QP_MANAGED_SEND
       423: if_stmt: 
        424: if: 
         425: condition: 
          426: expr: 
           427: name: 
            428: name: init_attr
            429: operator: ->
            430: name: create_flags
           431: operator: &
           432: name: IB_QP_CREATE_MANAGED_RECV
         433: block: 
          434: block_content: 
           435: expr_stmt: 
            436: expr: 
             437: name: 
              438: name: qp
              439: operator: ->
              440: name: flags
             441: operator: |=
             442: name: MLX5_IB_QP_MANAGED_RECV
   443: if_stmt: 
    444: if: 
     445: condition: 
      446: expr: 
       447: name: 
        448: name: init_attr
        449: operator: ->
        450: name: qp_type
       451: operator: ==
       452: name: IB_QPT_UD
       453: operator: &&
       454: operator: (
       455: name: 
        456: name: init_attr
        457: operator: ->
        458: name: create_flags
       459: operator: &
       460: name: IB_QP_CREATE_IPOIB_UD_LSO
       461: operator: )
     462: block: 
      463: block_content: 
       464: if_stmt: 
        465: if: 
         466: condition: 
          467: expr: 
           468: operator: !
           469: call: 
            470: name: MLX5_CAP_GEN
            471: argument_list: 
             472: argument: 
              473: expr: 
               474: name: mdev
             475: argument: 
              476: expr: 
               477: name: ipoib_basic_offloads
         478: block: 
          479: block_content: 
           480: expr_stmt: 
            481: expr: 
             482: call: 
              483: name: mlx5_ib_dbg
              484: argument_list: 
               485: argument: 
                486: expr: 
                 487: name: dev
               488: argument: 
                489: expr: 
                 490: literal: "ipoib UD lso qp isn't supported\n"
           491: return: 
            492: expr: 
             493: operator: -
             494: name: EOPNOTSUPP
   495: if_stmt: 
    496: if: 
     497: condition: 
      498: expr: 
       499: name: 
        500: name: init_attr
        501: operator: ->
        502: name: create_flags
       503: operator: &
       504: name: IB_QP_CREATE_SCATTER_FCS
     505: block: 
      506: block_content: 
       507: if_stmt: 
        508: if: 
         509: condition: 
          510: expr: 
           511: name: 
            512: name: init_attr
            513: operator: ->
            514: name: qp_type
           515: operator: !=
           516: name: IB_QPT_RAW_PACKET
         517: block: 
          518: block_content: 
           519: expr_stmt: 
            520: expr: 
             521: call: 
              522: name: mlx5_ib_dbg
              523: argument_list: 
               524: argument: 
                525: expr: 
                 526: name: dev
               527: argument: 
                528: expr: 
                 529: literal: "Scatter FCS is supported only for Raw Packet QPs"
           530: return: 
            531: expr: 
             532: operator: -
             533: name: EOPNOTSUPP
       534: if_stmt: 
        535: if: 
         536: condition: 
          537: expr: 
           538: operator: !
           539: call: 
            540: name: MLX5_CAP_GEN
            541: argument_list: 
             542: argument: 
              543: expr: 
               544: name: 
                545: name: dev
                546: operator: ->
                547: name: mdev
             548: argument: 
              549: expr: 
               550: name: eth_net_offloads
           551: operator: ||
           552: operator: !
           553: call: 
            554: name: MLX5_CAP_ETH
            555: argument_list: 
             556: argument: 
              557: expr: 
               558: name: 
                559: name: dev
                560: operator: ->
                561: name: mdev
             562: argument: 
              563: expr: 
               564: name: scatter_fcs
         565: block: 
          566: block_content: 
           567: expr_stmt: 
            568: expr: 
             569: call: 
              570: name: mlx5_ib_dbg
              571: argument_list: 
               572: argument: 
                573: expr: 
                 574: name: dev
               575: argument: 
                576: expr: 
                 577: literal: "Scatter FCS isn't supported\n"
           578: return: 
            579: expr: 
             580: operator: -
             581: name: EOPNOTSUPP
       582: expr_stmt: 
        583: expr: 
         584: name: 
          585: name: qp
          586: operator: ->
          587: name: flags
         588: operator: |=
         589: name: MLX5_IB_QP_CAP_SCATTER_FCS
   590: if_stmt: 
    591: if: 
     592: condition: 
      593: expr: 
       594: name: 
        595: name: init_attr
        596: operator: ->
        597: name: sq_sig_type
       598: operator: ==
       599: name: IB_SIGNAL_ALL_WR
     600: block: 
      601: block_content: 
       602: expr_stmt: 
        603: expr: 
         604: name: 
          605: name: qp
          606: operator: ->
          607: name: sq_signal_bits
         608: operator: =
         609: name: MLX5_WQE_CTRL_CQ_UPDATE
   610: if_stmt: 
    611: if: 
     612: condition: 
      613: expr: 
       614: name: 
        615: name: init_attr
        616: operator: ->
        617: name: create_flags
       618: operator: &
       619: name: IB_QP_CREATE_CVLAN_STRIPPING
     620: block: 
      621: block_content: 
       622: if_stmt: 
        623: if: 
         624: condition: 
          625: expr: 
           626: operator: !
           627: operator: (
           628: call: 
            629: name: MLX5_CAP_GEN
            630: argument_list: 
             631: argument: 
              632: expr: 
               633: name: 
                634: name: dev
                635: operator: ->
                636: name: mdev
             637: argument: 
              638: expr: 
               639: name: eth_net_offloads
           640: operator: &&
           641: call: 
            642: name: MLX5_CAP_ETH
            643: argument_list: 
             644: argument: 
              645: expr: 
               646: name: 
                647: name: dev
                648: operator: ->
                649: name: mdev
             650: argument: 
              651: expr: 
               652: name: vlan_cap
           653: operator: )
           654: operator: ||
           655: operator: (
           656: name: 
            657: name: init_attr
            658: operator: ->
            659: name: qp_type
           660: operator: !=
           661: name: IB_QPT_RAW_PACKET
           662: operator: )
         663: block: 
          664: block_content: 
           665: return: 
            666: expr: 
             667: operator: -
             668: name: EOPNOTSUPP
       669: expr_stmt: 
        670: expr: 
         671: name: 
          672: name: qp
          673: operator: ->
          674: name: flags
         675: operator: |=
         676: name: MLX5_IB_QP_CVLAN_STRIPPING
   677: if_stmt: 
    678: if: 
     679: condition: 
      680: expr: 
       681: name: pd
       682: operator: &&
       683: name: 
        684: name: pd
        685: operator: ->
        686: name: uobject
     687: block: 
      688: block_content: 
       689: if_stmt: 
        690: if: 
         691: condition: 
          692: expr: 
           693: call: 
            694: name: ib_copy_from_udata
            695: argument_list: 
             696: argument: 
              697: expr: 
               698: operator: &
               699: name: ucmd
             700: argument: 
              701: expr: 
               702: name: udata
             703: argument: 
              704: expr: 
               705: sizeof: 
                706: argument_list: 
                 707: argument: 
                  708: expr: 
                   709: name: ucmd
         710: block: 
          711: block_content: 
           712: expr_stmt: 
            713: expr: 
             714: call: 
              715: name: mlx5_ib_dbg
              716: argument_list: 
               717: argument: 
                718: expr: 
                 719: name: dev
               720: argument: 
                721: expr: 
                 722: literal: "copy failed\n"
           723: return: 
            724: expr: 
             725: operator: -
             726: name: EFAULT
       727: expr_stmt: 
        728: expr: 
         729: name: err
         730: operator: =
         731: call: 
          732: name: get_qp_user_index
          733: argument_list: 
           734: argument: 
            735: expr: 
             736: call: 
              737: name: to_mucontext
              738: argument_list: 
               739: argument: 
                740: expr: 
                 741: name: 
                  742: name: pd
                  743: operator: ->
                  744: name: uobject
                  745: operator: ->
                  746: name: context
           747: argument: 
            748: expr: 
             749: operator: &
             750: name: ucmd
           751: argument: 
            752: expr: 
             753: name: 
              754: name: udata
              755: operator: ->
              756: name: inlen
           757: argument: 
            758: expr: 
             759: operator: &
             760: name: uidx
       761: if_stmt: 
        762: if: 
         763: condition: 
          764: expr: 
           765: name: err
         766: block: 
          767: block_content: 
           768: return: 
            769: expr: 
             770: name: err
       771: expr_stmt: 
        772: expr: 
         773: name: 
          774: name: qp
          775: operator: ->
          776: name: wq_sig
         777: operator: =
         778: operator: !
         779: operator: !
         780: operator: (
         781: name: 
          782: name: ucmd
          783: operator: .
          784: name: flags
         785: operator: &
         786: name: MLX5_QP_FLAG_SIGNATURE
         787: operator: )
       788: expr_stmt: 
        789: expr: 
         790: name: 
          791: name: qp
          792: operator: ->
          793: name: scat_cqe
         794: operator: =
         795: operator: !
         796: operator: !
         797: operator: (
         798: name: 
          799: name: ucmd
          800: operator: .
          801: name: flags
         802: operator: &
         803: name: MLX5_QP_FLAG_SCATTER_CQE
         804: operator: )
       805: if_stmt: 
        806: if: 
         807: condition: 
          808: expr: 
           809: name: 
            810: name: ucmd
            811: operator: .
            812: name: flags
           813: operator: &
           814: name: MLX5_QP_FLAG_TUNNEL_OFFLOADS
         815: block: 
          816: block_content: 
           817: if_stmt: 
            818: if: 
             819: condition: 
              820: expr: 
               821: name: 
                822: name: init_attr
                823: operator: ->
                824: name: qp_type
               825: operator: !=
               826: name: IB_QPT_RAW_PACKET
               827: operator: ||
               828: operator: !
               829: call: 
                830: name: tunnel_offload_supported
                831: argument_list: 
                 832: argument: 
                  833: expr: 
                   834: name: mdev
             835: block: 
              836: block_content: 
               837: expr_stmt: 
                838: expr: 
                 839: call: 
                  840: name: mlx5_ib_dbg
                  841: argument_list: 
                   842: argument: 
                    843: expr: 
                     844: name: dev
                   845: argument: 
                    846: expr: 
                     847: literal: "Tunnel offload isn't supported\n"
               848: return: 
                849: expr: 
                 850: operator: -
                 851: name: EOPNOTSUPP
           852: expr_stmt: 
            853: expr: 
             854: name: 
              855: name: qp
              856: operator: ->
              857: name: tunnel_offload_en
             858: operator: =
             859: literal: true
       860: if_stmt: 
        861: if: 
         862: condition: 
          863: expr: 
           864: name: 
            865: name: init_attr
            866: operator: ->
            867: name: create_flags
           868: operator: &
           869: name: IB_QP_CREATE_SOURCE_QPN
         870: block: 
          871: block_content: 
           872: if_stmt: 
            873: if: 
             874: condition: 
              875: expr: 
               876: name: 
                877: name: init_attr
                878: operator: ->
                879: name: qp_type
               880: operator: !=
               881: name: IB_QPT_UD
               882: operator: ||
               883: operator: (
               884: call: 
                885: name: MLX5_CAP_GEN
                886: argument_list: 
                 887: argument: 
                  888: expr: 
                   889: name: 
                    890: name: dev
                    891: operator: ->
                    892: name: mdev
                 893: argument: 
                  894: expr: 
                   895: name: port_type
               896: operator: !=
               897: name: MLX5_CAP_PORT_TYPE_IB
               898: operator: )
               899: operator: ||
               900: operator: !
               901: call: 
                902: name: mlx5_get_flow_namespace
                903: argument_list: 
                 904: argument: 
                  905: expr: 
                   906: name: 
                    907: name: dev
                    908: operator: ->
                    909: name: mdev
                 910: argument: 
                  911: expr: 
                   912: name: MLX5_FLOW_NAMESPACE_BYPASS
             913: block: 
              914: block_content: 
               915: expr_stmt: 
                916: expr: 
                 917: call: 
                  918: name: mlx5_ib_dbg
                  919: argument_list: 
                   920: argument: 
                    921: expr: 
                     922: name: dev
                   923: argument: 
                    924: expr: 
                     925: literal: "Source QP option isn't supported\n"
               926: return: 
                927: expr: 
                 928: operator: -
                 929: name: EOPNOTSUPP
           930: expr_stmt: 
            931: expr: 
             932: name: 
              933: name: qp
              934: operator: ->
              935: name: flags
             936: operator: |=
             937: name: MLX5_IB_QP_UNDERLAY
           938: expr_stmt: 
            939: expr: 
             940: name: 
              941: name: qp
              942: operator: ->
              943: name: underlay_qpn
             944: operator: =
             945: name: 
              946: name: init_attr
              947: operator: ->
              948: name: source_qpn
    949: else: 
     950: block: 
      951: block_content: 
       952: expr_stmt: 
        953: expr: 
         954: name: 
          955: name: qp
          956: operator: ->
          957: name: wq_sig
         958: operator: =
         959: operator: !
         960: operator: !
         961: name: wq_signature
   962: expr_stmt: 
    963: expr: 
     964: name: base
     965: operator: =
     966: ternary: 
      967: condition: 
       968: expr: 
        969: operator: (
        970: name: 
         971: name: init_attr
         972: operator: ->
         973: name: qp_type
        974: operator: ==
        975: name: IB_QPT_RAW_PACKET
        976: operator: ||
        977: name: 
         978: name: qp
         979: operator: ->
         980: name: flags
        981: operator: &
        982: name: MLX5_IB_QP_UNDERLAY
        983: operator: )
      984: then: 
       985: expr: 
        986: operator: &
        987: name: 
         988: name: qp
         989: operator: ->
         990: name: raw_packet_qp
         991: operator: .
         992: name: rq
         993: operator: .
         994: name: base
      995: else: 
       996: expr: 
        997: operator: &
        998: name: 
         999: name: qp
         1000: operator: ->
         1001: name: trans_qp
         1002: operator: .
         1003: name: base
   1004: expr_stmt: 
    1005: expr: 
     1006: name: 
      1007: name: qp
      1008: operator: ->
      1009: name: has_rq
     1010: operator: =
     1011: call: 
      1012: name: qp_has_rq
      1013: argument_list: 
       1014: argument: 
        1015: expr: 
         1016: name: init_attr
   1017: expr_stmt: 
    1018: expr: 
     1019: name: err
     1020: operator: =
     1021: call: 
      1022: name: set_rq_size
      1023: argument_list: 
       1024: argument: 
        1025: expr: 
         1026: name: dev
       1027: argument: 
        1028: expr: 
         1029: operator: &
         1030: name: 
          1031: name: init_attr
          1032: operator: ->
          1033: name: cap
       1034: argument: 
        1035: expr: 
         1036: name: 
          1037: name: qp
          1038: operator: ->
          1039: name: has_rq
       1040: argument: 
        1041: expr: 
         1042: name: qp
       1043: argument: 
        1044: expr: 
         1045: ternary: 
          1046: condition: 
           1047: expr: 
            1048: operator: (
            1049: name: pd
            1050: operator: &&
            1051: name: 
             1052: name: pd
             1053: operator: ->
             1054: name: uobject
            1055: operator: )
          1056: then: 
           1057: expr: 
            1058: operator: &
            1059: name: ucmd
          1060: else: 
           1061: expr: 
            1062: name: NULL
   1063: if_stmt: 
    1064: if: 
     1065: condition: 
      1066: expr: 
       1067: name: err
     1068: block: 
      1069: block_content: 
       1070: expr_stmt: 
        1071: expr: 
         1072: call: 
          1073: name: mlx5_ib_dbg
          1074: argument_list: 
           1075: argument: 
            1076: expr: 
             1077: name: dev
           1078: argument: 
            1079: expr: 
             1080: literal: "err %d\n"
           1081: argument: 
            1082: expr: 
             1083: name: err
       1084: return: 
        1085: expr: 
         1086: name: err
   1087: if_stmt: 
    1088: if: 
     1089: condition: 
      1090: expr: 
       1091: name: pd
     1092: block: 
      1093: block_content: 
       1094: if_stmt: 
        1095: if: 
         1096: condition: 
          1097: expr: 
           1098: name: 
            1099: name: pd
            1100: operator: ->
            1101: name: uobject
         1102: block: 
          1103: block_content: 
           1104: decl_stmt: 
            1105: decl: 
             1106: type: 
              1107: name: __u32
             1108: name: max_wqes
             1109: init: 
              1110: expr: 
               1111: literal: 1
               1112: operator: <<
               1113: call: 
                1114: name: MLX5_CAP_GEN
                1115: argument_list: 
                 1116: argument: 
                  1117: expr: 
                   1118: name: mdev
                 1119: argument: 
                  1120: expr: 
                   1121: name: log_max_qp_sz
           1122: expr_stmt: 
            1123: expr: 
             1124: call: 
              1125: name: mlx5_ib_dbg
              1126: argument_list: 
               1127: argument: 
                1128: expr: 
                 1129: name: dev
               1130: argument: 
                1131: expr: 
                 1132: literal: "requested sq_wqe_count (%d)\n"
               1133: argument: 
                1134: expr: 
                 1135: name: 
                  1136: name: ucmd
                  1137: operator: .
                  1138: name: sq_wqe_count
           1139: if_stmt: 
            1140: if: 
             1141: condition: 
              1142: expr: 
               1143: name: 
                1144: name: ucmd
                1145: operator: .
                1146: name: rq_wqe_shift
               1147: operator: !=
               1148: name: 
                1149: name: qp
                1150: operator: ->
                1151: name: rq
                1152: operator: .
                1153: name: wqe_shift
               1154: operator: ||
               1155: name: 
                1156: name: ucmd
                1157: operator: .
                1158: name: rq_wqe_count
               1159: operator: !=
               1160: name: 
                1161: name: qp
                1162: operator: ->
                1163: name: rq
                1164: operator: .
                1165: name: wqe_cnt
             1166: block: 
              1167: block_content: 
               1168: expr_stmt: 
                1169: expr: 
                 1170: call: 
                  1171: name: mlx5_ib_dbg
                  1172: argument_list: 
                   1173: argument: 
                    1174: expr: 
                     1175: name: dev
                   1176: argument: 
                    1177: expr: 
                     1178: literal: "invalid rq params\n"
               1179: return: 
                1180: expr: 
                 1181: operator: -
                 1182: name: EINVAL
           1183: if_stmt: 
            1184: if: 
             1185: condition: 
              1186: expr: 
               1187: name: 
                1188: name: ucmd
                1189: operator: .
                1190: name: sq_wqe_count
               1191: operator: >
               1192: name: max_wqes
             1193: block: 
              1194: block_content: 
               1195: expr_stmt: 
                1196: expr: 
                 1197: call: 
                  1198: name: mlx5_ib_dbg
                  1199: argument_list: 
                   1200: argument: 
                    1201: expr: 
                     1202: name: dev
                   1203: argument: 
                    1204: expr: 
                     1205: literal: "requested sq_wqe_count (%d)>max allowed (%d)\n"
                   1206: argument: 
                    1207: expr: 
                     1208: name: 
                      1209: name: ucmd
                      1210: operator: .
                      1211: name: sq_wqe_count
                   1212: argument: 
                    1213: expr: 
                     1214: name: max_wqes
               1215: return: 
                1216: expr: 
                 1217: operator: -
                 1218: name: EINVAL
           1219: if_stmt: 
            1220: if: 
             1221: condition: 
              1222: expr: 
               1223: name: 
                1224: name: init_attr
                1225: operator: ->
                1226: name: create_flags
               1227: operator: &
               1228: call: 
                1229: name: mlx5_ib_create_qp_sqpn_qp1
                1230: argument_list: 
             1231: block: 
              1232: block_content: 
               1233: expr_stmt: 
                1234: expr: 
                 1235: call: 
                  1236: name: mlx5_ib_dbg
                  1237: argument_list: 
                   1238: argument: 
                    1239: expr: 
                     1240: name: dev
                   1241: argument: 
                    1242: expr: 
                     1243: literal: "user-space is not allowed to create UD QPs spoofing as QP1\n"
               1244: return: 
                1245: expr: 
                 1246: operator: -
                 1247: name: EINVAL
           1248: expr_stmt: 
            1249: expr: 
             1250: name: err
             1251: operator: =
             1252: call: 
              1253: name: create_user_qp
              1254: argument_list: 
               1255: argument: 
                1256: expr: 
                 1257: name: dev
               1258: argument: 
                1259: expr: 
                 1260: name: pd
               1261: argument: 
                1262: expr: 
                 1263: name: qp
               1264: argument: 
                1265: expr: 
                 1266: name: udata
               1267: argument: 
                1268: expr: 
                 1269: name: init_attr
               1270: argument: 
                1271: expr: 
                 1272: operator: &
                 1273: name: in
               1274: argument: 
                1275: expr: 
                 1276: operator: &
                 1277: name: resp
               1278: argument: 
                1279: expr: 
                 1280: operator: &
                 1281: name: inlen
               1282: argument: 
                1283: expr: 
                 1284: name: base
           1285: if_stmt: 
            1286: if: 
             1287: condition: 
              1288: expr: 
               1289: name: err
             1290: block: 
              1291: block_content: 
               1292: expr_stmt: 
                1293: expr: 
                 1294: call: 
                  1295: name: mlx5_ib_dbg
                  1296: argument_list: 
                   1297: argument: 
                    1298: expr: 
                     1299: name: dev
                   1300: argument: 
                    1301: expr: 
                     1302: literal: "err %d\n"
                   1303: argument: 
                    1304: expr: 
                     1305: name: err
        1306: else: 
         1307: block: 
          1308: block_content: 
           1309: expr_stmt: 
            1310: expr: 
             1311: name: err
             1312: operator: =
             1313: call: 
              1314: name: create_kernel_qp
              1315: argument_list: 
               1316: argument: 
                1317: expr: 
                 1318: name: dev
               1319: argument: 
                1320: expr: 
                 1321: name: init_attr
               1322: argument: 
                1323: expr: 
                 1324: name: qp
               1325: argument: 
                1326: expr: 
                 1327: operator: &
                 1328: name: in
               1329: argument: 
                1330: expr: 
                 1331: operator: &
                 1332: name: inlen
               1333: argument: 
                1334: expr: 
                 1335: name: base
           1336: if_stmt: 
            1337: if: 
             1338: condition: 
              1339: expr: 
               1340: name: err
             1341: block: 
              1342: block_content: 
               1343: expr_stmt: 
                1344: expr: 
                 1345: call: 
                  1346: name: mlx5_ib_dbg
                  1347: argument_list: 
                   1348: argument: 
                    1349: expr: 
                     1350: name: dev
                   1351: argument: 
                    1352: expr: 
                     1353: literal: "err %d\n"
                   1354: argument: 
                    1355: expr: 
                     1356: name: err
       1357: if_stmt: 
        1358: if: 
         1359: condition: 
          1360: expr: 
           1361: name: err
         1362: block: 
          1363: block_content: 
           1364: return: 
            1365: expr: 
             1366: name: err
    1367: else: 
     1368: block: 
      1369: block_content: 
       1370: expr_stmt: 
        1371: expr: 
         1372: name: in
         1373: operator: =
         1374: call: 
          1375: name: kvzalloc
          1376: argument_list: 
           1377: argument: 
            1378: expr: 
             1379: name: inlen
           1380: argument: 
            1381: expr: 
             1382: name: GFP_KERNEL
       1383: if_stmt: 
        1384: if: 
         1385: condition: 
          1386: expr: 
           1387: operator: !
           1388: name: in
         1389: block: 
          1390: block_content: 
           1391: return: 
            1392: expr: 
             1393: operator: -
             1394: name: ENOMEM
       1395: expr_stmt: 
        1396: expr: 
         1397: name: 
          1398: name: qp
          1399: operator: ->
          1400: name: create_type
         1401: operator: =
         1402: name: MLX5_QP_EMPTY
   1403: if_stmt: 
    1404: if: 
     1405: condition: 
      1406: expr: 
       1407: call: 
        1408: name: is_sqp
        1409: argument_list: 
         1410: argument: 
          1411: expr: 
           1412: name: 
            1413: name: init_attr
            1414: operator: ->
            1415: name: qp_type
     1416: block: 
      1417: block_content: 
       1418: expr_stmt: 
        1419: expr: 
         1420: name: 
          1421: name: qp
          1422: operator: ->
          1423: name: port
         1424: operator: =
         1425: name: 
          1426: name: init_attr
          1427: operator: ->
          1428: name: port_num
   1429: expr_stmt: 
    1430: expr: 
     1431: name: qpc
     1432: operator: =
     1433: call: 
      1434: name: MLX5_ADDR_OF
      1435: argument_list: 
       1436: argument: 
        1437: expr: 
         1438: name: create_qp_in
       1439: argument: 
        1440: expr: 
         1441: name: in
       1442: argument: 
        1443: expr: 
         1444: name: qpc
   1445: expr_stmt: 
    1446: expr: 
     1447: call: 
      1448: name: MLX5_SET
      1449: argument_list: 
       1450: argument: 
        1451: expr: 
         1452: name: qpc
       1453: argument: 
        1454: expr: 
         1455: name: qpc
       1456: argument: 
        1457: expr: 
         1458: name: st
       1459: argument: 
        1460: expr: 
         1461: name: mlx5_st
   1462: expr_stmt: 
    1463: expr: 
     1464: call: 
      1465: name: MLX5_SET
      1466: argument_list: 
       1467: argument: 
        1468: expr: 
         1469: name: qpc
       1470: argument: 
        1471: expr: 
         1472: name: qpc
       1473: argument: 
        1474: expr: 
         1475: name: pm_state
       1476: argument: 
        1477: expr: 
         1478: name: MLX5_QP_PM_MIGRATED
   1479: if_stmt: 
    1480: if: 
     1481: condition: 
      1482: expr: 
       1483: name: 
        1484: name: init_attr
        1485: operator: ->
        1486: name: qp_type
       1487: operator: !=
       1488: name: MLX5_IB_QPT_REG_UMR
     1489: block: 
      1490: block_content: 
       1491: expr_stmt: 
        1492: expr: 
         1493: call: 
          1494: name: MLX5_SET
          1495: argument_list: 
           1496: argument: 
            1497: expr: 
             1498: name: qpc
           1499: argument: 
            1500: expr: 
             1501: name: qpc
           1502: argument: 
            1503: expr: 
             1504: name: pd
           1505: argument: 
            1506: expr: 
             1507: call: 
              1508: name: to_mpd
              1509: argument_list: 
               1510: argument: 
                1511: expr: 
                 1512: ternary: 
                  1513: condition: 
                   1514: expr: 
                    1515: name: pd
                  1516: then: 
                   1517: expr: 
                    1518: name: pd
                  1519: else: 
                   1520: expr: 
                    1521: name: 
                     1522: name: devr
                     1523: operator: ->
                     1524: name: p0
             1525: operator: ->
             1526: name: pdn
    1527: else: 
     1528: block: 
      1529: block_content: 
       1530: expr_stmt: 
        1531: expr: 
         1532: call: 
          1533: name: MLX5_SET
          1534: argument_list: 
           1535: argument: 
            1536: expr: 
             1537: name: qpc
           1538: argument: 
            1539: expr: 
             1540: name: qpc
           1541: argument: 
            1542: expr: 
             1543: name: latency_sensitive
           1544: argument: 
            1545: expr: 
             1546: literal: 1
   1547: if_stmt: 
    1548: if: 
     1549: condition: 
      1550: expr: 
       1551: name: 
        1552: name: qp
        1553: operator: ->
        1554: name: wq_sig
     1555: block: 
      1556: block_content: 
       1557: expr_stmt: 
        1558: expr: 
         1559: call: 
          1560: name: MLX5_SET
          1561: argument_list: 
           1562: argument: 
            1563: expr: 
             1564: name: qpc
           1565: argument: 
            1566: expr: 
             1567: name: qpc
           1568: argument: 
            1569: expr: 
             1570: name: wq_signature
           1571: argument: 
            1572: expr: 
             1573: literal: 1
   1574: if_stmt: 
    1575: if: 
     1576: condition: 
      1577: expr: 
       1578: name: 
        1579: name: qp
        1580: operator: ->
        1581: name: flags
       1582: operator: &
       1583: name: MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK
     1584: block: 
      1585: block_content: 
       1586: expr_stmt: 
        1587: expr: 
         1588: call: 
          1589: name: MLX5_SET
          1590: argument_list: 
           1591: argument: 
            1592: expr: 
             1593: name: qpc
           1594: argument: 
            1595: expr: 
             1596: name: qpc
           1597: argument: 
            1598: expr: 
             1599: name: block_lb_mc
           1600: argument: 
            1601: expr: 
             1602: literal: 1
   1603: if_stmt: 
    1604: if: 
     1605: condition: 
      1606: expr: 
       1607: name: 
        1608: name: qp
        1609: operator: ->
        1610: name: flags
       1611: operator: &
       1612: name: MLX5_IB_QP_CROSS_CHANNEL
     1613: block: 
      1614: block_content: 
       1615: expr_stmt: 
        1616: expr: 
         1617: call: 
          1618: name: MLX5_SET
          1619: argument_list: 
           1620: argument: 
            1621: expr: 
             1622: name: qpc
           1623: argument: 
            1624: expr: 
             1625: name: qpc
           1626: argument: 
            1627: expr: 
             1628: name: cd_master
           1629: argument: 
            1630: expr: 
             1631: literal: 1
   1632: if_stmt: 
    1633: if: 
     1634: condition: 
      1635: expr: 
       1636: name: 
        1637: name: qp
        1638: operator: ->
        1639: name: flags
       1640: operator: &
       1641: name: MLX5_IB_QP_MANAGED_SEND
     1642: block: 
      1643: block_content: 
       1644: expr_stmt: 
        1645: expr: 
         1646: call: 
          1647: name: MLX5_SET
          1648: argument_list: 
           1649: argument: 
            1650: expr: 
             1651: name: qpc
           1652: argument: 
            1653: expr: 
             1654: name: qpc
           1655: argument: 
            1656: expr: 
             1657: name: cd_slave_send
           1658: argument: 
            1659: expr: 
             1660: literal: 1
   1661: if_stmt: 
    1662: if: 
     1663: condition: 
      1664: expr: 
       1665: name: 
        1666: name: qp
        1667: operator: ->
        1668: name: flags
       1669: operator: &
       1670: name: MLX5_IB_QP_MANAGED_RECV
     1671: block: 
      1672: block_content: 
       1673: expr_stmt: 
        1674: expr: 
         1675: call: 
          1676: name: MLX5_SET
          1677: argument_list: 
           1678: argument: 
            1679: expr: 
             1680: name: qpc
           1681: argument: 
            1682: expr: 
             1683: name: qpc
           1684: argument: 
            1685: expr: 
             1686: name: cd_slave_receive
           1687: argument: 
            1688: expr: 
             1689: literal: 1
   1690: if_stmt: 
    1691: if: 
     1692: condition: 
      1693: expr: 
       1694: name: 
        1695: name: qp
        1696: operator: ->
        1697: name: scat_cqe
       1698: operator: &&
       1699: call: 
        1700: name: is_connected
        1701: argument_list: 
         1702: argument: 
          1703: expr: 
           1704: name: 
            1705: name: init_attr
            1706: operator: ->
            1707: name: qp_type
     1708: block: 
      1709: block_content: 
       1710: decl_stmt: 
        1711: decl: 
         1712: type: 
          1713: name: int
         1714: name: rcqe_sz
       1715: decl_stmt: 
        1716: decl: 
         1717: type: 
          1718: name: int
         1719: name: scqe_sz
       1720: expr_stmt: 
        1721: expr: 
         1722: name: rcqe_sz
         1723: operator: =
         1724: call: 
          1725: name: mlx5_ib_get_cqe_size
          1726: argument_list: 
           1727: argument: 
            1728: expr: 
             1729: name: dev
           1730: argument: 
            1731: expr: 
             1732: name: 
              1733: name: init_attr
              1734: operator: ->
              1735: name: recv_cq
       1736: expr_stmt: 
        1737: expr: 
         1738: name: scqe_sz
         1739: operator: =
         1740: call: 
          1741: name: mlx5_ib_get_cqe_size
          1742: argument_list: 
           1743: argument: 
            1744: expr: 
             1745: name: dev
           1746: argument: 
            1747: expr: 
             1748: name: 
              1749: name: init_attr
              1750: operator: ->
              1751: name: send_cq
       1752: if_stmt: 
        1753: if: 
         1754: condition: 
          1755: expr: 
           1756: name: rcqe_sz
           1757: operator: ==
           1758: literal: 128
         1759: block: 
          1760: block_content: 
           1761: expr_stmt: 
            1762: expr: 
             1763: call: 
              1764: name: MLX5_SET
              1765: argument_list: 
               1766: argument: 
                1767: expr: 
                 1768: name: qpc
               1769: argument: 
                1770: expr: 
                 1771: name: qpc
               1772: argument: 
                1773: expr: 
                 1774: name: cs_res
               1775: argument: 
                1776: expr: 
                 1777: name: MLX5_RES_SCAT_DATA64_CQE
        1778: else: 
         1779: block: 
          1780: block_content: 
           1781: expr_stmt: 
            1782: expr: 
             1783: call: 
              1784: name: MLX5_SET
              1785: argument_list: 
               1786: argument: 
                1787: expr: 
                 1788: name: qpc
               1789: argument: 
                1790: expr: 
                 1791: name: qpc
               1792: argument: 
                1793: expr: 
                 1794: name: cs_res
               1795: argument: 
                1796: expr: 
                 1797: name: MLX5_RES_SCAT_DATA32_CQE
       1798: if_stmt: 
        1799: if: 
         1800: condition: 
          1801: expr: 
           1802: name: 
            1803: name: init_attr
            1804: operator: ->
            1805: name: sq_sig_type
           1806: operator: ==
           1807: name: IB_SIGNAL_ALL_WR
         1808: block: 
          1809: block_content: 
           1810: if_stmt: 
            1811: if: 
             1812: condition: 
              1813: expr: 
               1814: name: scqe_sz
               1815: operator: ==
               1816: literal: 128
             1817: block: 
              1818: block_content: 
               1819: expr_stmt: 
                1820: expr: 
                 1821: call: 
                  1822: name: MLX5_SET
                  1823: argument_list: 
                   1824: argument: 
                    1825: expr: 
                     1826: name: qpc
                   1827: argument: 
                    1828: expr: 
                     1829: name: qpc
                   1830: argument: 
                    1831: expr: 
                     1832: name: cs_req
                   1833: argument: 
                    1834: expr: 
                     1835: name: MLX5_REQ_SCAT_DATA64_CQE
            1836: else: 
             1837: block: 
              1838: block_content: 
               1839: expr_stmt: 
                1840: expr: 
                 1841: call: 
                  1842: name: MLX5_SET
                  1843: argument_list: 
                   1844: argument: 
                    1845: expr: 
                     1846: name: qpc
                   1847: argument: 
                    1848: expr: 
                     1849: name: qpc
                   1850: argument: 
                    1851: expr: 
                     1852: name: cs_req
                   1853: argument: 
                    1854: expr: 
                     1855: name: MLX5_REQ_SCAT_DATA32_CQE
   1856: if_stmt: 
    1857: if: 
     1858: condition: 
      1859: expr: 
       1860: name: 
        1861: name: qp
        1862: operator: ->
        1863: name: rq
        1864: operator: .
        1865: name: wqe_cnt
     1866: block: 
      1867: block_content: 
       1868: expr_stmt: 
        1869: expr: 
         1870: call: 
          1871: name: MLX5_SET
          1872: argument_list: 
           1873: argument: 
            1874: expr: 
             1875: name: qpc
           1876: argument: 
            1877: expr: 
             1878: name: qpc
           1879: argument: 
            1880: expr: 
             1881: name: log_rq_stride
           1882: argument: 
            1883: expr: 
             1884: name: 
              1885: name: qp
              1886: operator: ->
              1887: name: rq
              1888: operator: .
              1889: name: wqe_shift
             1890: operator: -
             1891: literal: 4
       1892: expr_stmt: 
        1893: expr: 
         1894: call: 
          1895: name: MLX5_SET
          1896: argument_list: 
           1897: argument: 
            1898: expr: 
             1899: name: qpc
           1900: argument: 
            1901: expr: 
             1902: name: qpc
           1903: argument: 
            1904: expr: 
             1905: name: log_rq_size
           1906: argument: 
            1907: expr: 
             1908: call: 
              1909: name: ilog2
              1910: argument_list: 
               1911: argument: 
                1912: expr: 
                 1913: name: 
                  1914: name: qp
                  1915: operator: ->
                  1916: name: rq
                  1917: operator: .
                  1918: name: wqe_cnt
   1919: expr_stmt: 
    1920: expr: 
     1921: call: 
      1922: name: MLX5_SET
      1923: argument_list: 
       1924: argument: 
        1925: expr: 
         1926: name: qpc
       1927: argument: 
        1928: expr: 
         1929: name: qpc
       1930: argument: 
        1931: expr: 
         1932: name: rq_type
       1933: argument: 
        1934: expr: 
         1935: call: 
          1936: name: get_rx_type
          1937: argument_list: 
           1938: argument: 
            1939: expr: 
             1940: name: qp
           1941: argument: 
            1942: expr: 
             1943: name: init_attr
   1944: if_stmt: 
    1945: if: 
     1946: condition: 
      1947: expr: 
       1948: name: 
        1949: name: qp
        1950: operator: ->
        1951: name: sq
        1952: operator: .
        1953: name: wqe_cnt
     1954: block: 
      1955: block_content: 
       1956: expr_stmt: 
        1957: expr: 
         1958: call: 
          1959: name: MLX5_SET
          1960: argument_list: 
           1961: argument: 
            1962: expr: 
             1963: name: qpc
           1964: argument: 
            1965: expr: 
             1966: name: qpc
           1967: argument: 
            1968: expr: 
             1969: name: log_sq_size
           1970: argument: 
            1971: expr: 
             1972: call: 
              1973: name: ilog2
              1974: argument_list: 
               1975: argument: 
                1976: expr: 
                 1977: name: 
                  1978: name: qp
                  1979: operator: ->
                  1980: name: sq
                  1981: operator: .
                  1982: name: wqe_cnt
    1983: else: 
     1984: block: 
      1985: block_content: 
       1986: expr_stmt: 
        1987: expr: 
         1988: call: 
          1989: name: MLX5_SET
          1990: argument_list: 
           1991: argument: 
            1992: expr: 
             1993: name: qpc
           1994: argument: 
            1995: expr: 
             1996: name: qpc
           1997: argument: 
            1998: expr: 
             1999: name: no_sq
           2000: argument: 
            2001: expr: 
             2002: literal: 1
       2003: if_stmt: 
        2004: if: 
         2005: condition: 
          2006: expr: 
           2007: name: 
            2008: name: init_attr
            2009: operator: ->
            2010: name: srq
           2011: operator: &&
           2012: name: 
            2013: name: init_attr
            2014: operator: ->
            2015: name: srq
            2016: operator: ->
            2017: name: srq_type
           2018: operator: ==
           2019: name: IB_SRQT_TM
         2020: block: 
          2021: block_content: 
           2022: expr_stmt: 
            2023: expr: 
             2024: call: 
              2025: name: MLX5_SET
              2026: argument_list: 
               2027: argument: 
                2028: expr: 
                 2029: name: qpc
               2030: argument: 
                2031: expr: 
                 2032: name: qpc
               2033: argument: 
                2034: expr: 
                 2035: name: offload_type
               2036: argument: 
                2037: expr: 
                 2038: name: MLX5_QPC_OFFLOAD_TYPE_RNDV
   2039: comment: /* Set default resources */
   2040: switch: 
    2041: condition: 
     2042: expr: 
      2043: name: 
       2044: name: init_attr
       2045: operator: ->
       2046: name: qp_type
    2047: block: 
     2048: block_content: 
      2049: case: 
       2050: expr: 
        2051: name: IB_QPT_XRC_TGT
      2052: expr_stmt: 
       2053: expr: 
        2054: call: 
         2055: name: MLX5_SET
         2056: argument_list: 
          2057: argument: 
           2058: expr: 
            2059: name: qpc
          2060: argument: 
           2061: expr: 
            2062: name: qpc
          2063: argument: 
           2064: expr: 
            2065: name: cqn_rcv
          2066: argument: 
           2067: expr: 
            2068: call: 
             2069: name: to_mcq
             2070: argument_list: 
              2071: argument: 
               2072: expr: 
                2073: name: 
                 2074: name: devr
                 2075: operator: ->
                 2076: name: c0
            2077: operator: ->
            2078: name: 
             2079: name: mcq
             2080: operator: .
             2081: name: cqn
      2082: expr_stmt: 
       2083: expr: 
        2084: call: 
         2085: name: MLX5_SET
         2086: argument_list: 
          2087: argument: 
           2088: expr: 
            2089: name: qpc
          2090: argument: 
           2091: expr: 
            2092: name: qpc
          2093: argument: 
           2094: expr: 
            2095: name: cqn_snd
          2096: argument: 
           2097: expr: 
            2098: call: 
             2099: name: to_mcq
             2100: argument_list: 
              2101: argument: 
               2102: expr: 
                2103: name: 
                 2104: name: devr
                 2105: operator: ->
                 2106: name: c0
            2107: operator: ->
            2108: name: 
             2109: name: mcq
             2110: operator: .
             2111: name: cqn
      2112: expr_stmt: 
       2113: expr: 
        2114: call: 
         2115: name: MLX5_SET
         2116: argument_list: 
          2117: argument: 
           2118: expr: 
            2119: name: qpc
          2120: argument: 
           2121: expr: 
            2122: name: qpc
          2123: argument: 
           2124: expr: 
            2125: name: srqn_rmpn_xrqn
          2126: argument: 
           2127: expr: 
            2128: call: 
             2129: name: to_msrq
             2130: argument_list: 
              2131: argument: 
               2132: expr: 
                2133: name: 
                 2134: name: devr
                 2135: operator: ->
                 2136: name: s0
            2137: operator: ->
            2138: name: 
             2139: name: msrq
             2140: operator: .
             2141: name: srqn
      2142: expr_stmt: 
       2143: expr: 
        2144: call: 
         2145: name: MLX5_SET
         2146: argument_list: 
          2147: argument: 
           2148: expr: 
            2149: name: qpc
          2150: argument: 
           2151: expr: 
            2152: name: qpc
          2153: argument: 
           2154: expr: 
            2155: name: xrcd
          2156: argument: 
           2157: expr: 
            2158: call: 
             2159: name: to_mxrcd
             2160: argument_list: 
              2161: argument: 
               2162: expr: 
                2163: name: 
                 2164: name: init_attr
                 2165: operator: ->
                 2166: name: xrcd
            2167: operator: ->
            2168: name: xrcdn
      2169: break: 
      2170: case: 
       2171: expr: 
        2172: name: IB_QPT_XRC_INI
      2173: expr_stmt: 
       2174: expr: 
        2175: call: 
         2176: name: MLX5_SET
         2177: argument_list: 
          2178: argument: 
           2179: expr: 
            2180: name: qpc
          2181: argument: 
           2182: expr: 
            2183: name: qpc
          2184: argument: 
           2185: expr: 
            2186: name: cqn_rcv
          2187: argument: 
           2188: expr: 
            2189: call: 
             2190: name: to_mcq
             2191: argument_list: 
              2192: argument: 
               2193: expr: 
                2194: name: 
                 2195: name: devr
                 2196: operator: ->
                 2197: name: c0
            2198: operator: ->
            2199: name: 
             2200: name: mcq
             2201: operator: .
             2202: name: cqn
      2203: expr_stmt: 
       2204: expr: 
        2205: call: 
         2206: name: MLX5_SET
         2207: argument_list: 
          2208: argument: 
           2209: expr: 
            2210: name: qpc
          2211: argument: 
           2212: expr: 
            2213: name: qpc
          2214: argument: 
           2215: expr: 
            2216: name: xrcd
          2217: argument: 
           2218: expr: 
            2219: call: 
             2220: name: to_mxrcd
             2221: argument_list: 
              2222: argument: 
               2223: expr: 
                2224: name: 
                 2225: name: devr
                 2226: operator: ->
                 2227: name: x1
            2228: operator: ->
            2229: name: xrcdn
      2230: expr_stmt: 
       2231: expr: 
        2232: call: 
         2233: name: MLX5_SET
         2234: argument_list: 
          2235: argument: 
           2236: expr: 
            2237: name: qpc
          2238: argument: 
           2239: expr: 
            2240: name: qpc
          2241: argument: 
           2242: expr: 
            2243: name: srqn_rmpn_xrqn
          2244: argument: 
           2245: expr: 
            2246: call: 
             2247: name: to_msrq
             2248: argument_list: 
              2249: argument: 
               2250: expr: 
                2251: name: 
                 2252: name: devr
                 2253: operator: ->
                 2254: name: s0
            2255: operator: ->
            2256: name: 
             2257: name: msrq
             2258: operator: .
             2259: name: srqn
      2260: break: 
      2261: default: 
      2262: if_stmt: 
       2263: if: 
        2264: condition: 
         2265: expr: 
          2266: name: 
           2267: name: init_attr
           2268: operator: ->
           2269: name: srq
        2270: block: 
         2271: block_content: 
          2272: expr_stmt: 
           2273: expr: 
            2274: call: 
             2275: name: MLX5_SET
             2276: argument_list: 
              2277: argument: 
               2278: expr: 
                2279: name: qpc
              2280: argument: 
               2281: expr: 
                2282: name: qpc
              2283: argument: 
               2284: expr: 
                2285: name: xrcd
              2286: argument: 
               2287: expr: 
                2288: call: 
                 2289: name: to_mxrcd
                 2290: argument_list: 
                  2291: argument: 
                   2292: expr: 
                    2293: name: 
                     2294: name: devr
                     2295: operator: ->
                     2296: name: x0
                2297: operator: ->
                2298: name: xrcdn
          2299: expr_stmt: 
           2300: expr: 
            2301: call: 
             2302: name: MLX5_SET
             2303: argument_list: 
              2304: argument: 
               2305: expr: 
                2306: name: qpc
              2307: argument: 
               2308: expr: 
                2309: name: qpc
              2310: argument: 
               2311: expr: 
                2312: name: srqn_rmpn_xrqn
              2313: argument: 
               2314: expr: 
                2315: call: 
                 2316: name: to_msrq
                 2317: argument_list: 
                  2318: argument: 
                   2319: expr: 
                    2320: name: 
                     2321: name: init_attr
                     2322: operator: ->
                     2323: name: srq
                2324: operator: ->
                2325: name: 
                 2326: name: msrq
                 2327: operator: .
                 2328: name: srqn
       2329: else: 
        2330: block: 
         2331: block_content: 
          2332: expr_stmt: 
           2333: expr: 
            2334: call: 
             2335: name: MLX5_SET
             2336: argument_list: 
              2337: argument: 
               2338: expr: 
                2339: name: qpc
              2340: argument: 
               2341: expr: 
                2342: name: qpc
              2343: argument: 
               2344: expr: 
                2345: name: xrcd
              2346: argument: 
               2347: expr: 
                2348: call: 
                 2349: name: to_mxrcd
                 2350: argument_list: 
                  2351: argument: 
                   2352: expr: 
                    2353: name: 
                     2354: name: devr
                     2355: operator: ->
                     2356: name: x1
                2357: operator: ->
                2358: name: xrcdn
          2359: expr_stmt: 
           2360: expr: 
            2361: call: 
             2362: name: MLX5_SET
             2363: argument_list: 
              2364: argument: 
               2365: expr: 
                2366: name: qpc
              2367: argument: 
               2368: expr: 
                2369: name: qpc
              2370: argument: 
               2371: expr: 
                2372: name: srqn_rmpn_xrqn
              2373: argument: 
               2374: expr: 
                2375: call: 
                 2376: name: to_msrq
                 2377: argument_list: 
                  2378: argument: 
                   2379: expr: 
                    2380: name: 
                     2381: name: devr
                     2382: operator: ->
                     2383: name: s1
                2384: operator: ->
                2385: name: 
                 2386: name: msrq
                 2387: operator: .
                 2388: name: srqn
   2389: if_stmt: 
    2390: if: 
     2391: condition: 
      2392: expr: 
       2393: name: 
        2394: name: init_attr
        2395: operator: ->
        2396: name: send_cq
     2397: block: 
      2398: block_content: 
       2399: expr_stmt: 
        2400: expr: 
         2401: call: 
          2402: name: MLX5_SET
          2403: argument_list: 
           2404: argument: 
            2405: expr: 
             2406: name: qpc
           2407: argument: 
            2408: expr: 
             2409: name: qpc
           2410: argument: 
            2411: expr: 
             2412: name: cqn_snd
           2413: argument: 
            2414: expr: 
             2415: call: 
              2416: name: to_mcq
              2417: argument_list: 
               2418: argument: 
                2419: expr: 
                 2420: name: 
                  2421: name: init_attr
                  2422: operator: ->
                  2423: name: send_cq
             2424: operator: ->
             2425: name: 
              2426: name: mcq
              2427: operator: .
              2428: name: cqn
   2429: if_stmt: 
    2430: if: 
     2431: condition: 
      2432: expr: 
       2433: name: 
        2434: name: init_attr
        2435: operator: ->
        2436: name: recv_cq
     2437: block: 
      2438: block_content: 
       2439: expr_stmt: 
        2440: expr: 
         2441: call: 
          2442: name: MLX5_SET
          2443: argument_list: 
           2444: argument: 
            2445: expr: 
             2446: name: qpc
           2447: argument: 
            2448: expr: 
             2449: name: qpc
           2450: argument: 
            2451: expr: 
             2452: name: cqn_rcv
           2453: argument: 
            2454: expr: 
             2455: call: 
              2456: name: to_mcq
              2457: argument_list: 
               2458: argument: 
                2459: expr: 
                 2460: name: 
                  2461: name: init_attr
                  2462: operator: ->
                  2463: name: recv_cq
             2464: operator: ->
             2465: name: 
              2466: name: mcq
              2467: operator: .
              2468: name: cqn
   2469: expr_stmt: 
    2470: expr: 
     2471: call: 
      2472: name: MLX5_SET64
      2473: argument_list: 
       2474: argument: 
        2475: expr: 
         2476: name: qpc
       2477: argument: 
        2478: expr: 
         2479: name: qpc
       2480: argument: 
        2481: expr: 
         2482: name: dbr_addr
       2483: argument: 
        2484: expr: 
         2485: name: 
          2486: name: qp
          2487: operator: ->
          2488: name: db
          2489: operator: .
          2490: name: dma
   2491: comment: /* 0xffffff means we ask to work with cqe version 0 */
   2492: if_stmt: 
    2493: if: 
     2494: condition: 
      2495: expr: 
       2496: call: 
        2497: name: MLX5_CAP_GEN
        2498: argument_list: 
         2499: argument: 
          2500: expr: 
           2501: name: mdev
         2502: argument: 
          2503: expr: 
           2504: name: cqe_version
       2505: operator: ==
       2506: name: MLX5_CQE_VERSION_V1
     2507: block: 
      2508: block_content: 
       2509: expr_stmt: 
        2510: expr: 
         2511: call: 
          2512: name: MLX5_SET
          2513: argument_list: 
           2514: argument: 
            2515: expr: 
             2516: name: qpc
           2517: argument: 
            2518: expr: 
             2519: name: qpc
           2520: argument: 
            2521: expr: 
             2522: name: user_index
           2523: argument: 
            2524: expr: 
             2525: name: uidx
   2526: comment: /* we use IB_QP_CREATE_IPOIB_UD_LSO to indicates ipoib qp */
   2527: if_stmt: 
    2528: if: 
     2529: condition: 
      2530: expr: 
       2531: name: 
        2532: name: init_attr
        2533: operator: ->
        2534: name: qp_type
       2535: operator: ==
       2536: name: IB_QPT_UD
       2537: operator: &&
       2538: operator: (
       2539: name: 
        2540: name: init_attr
        2541: operator: ->
        2542: name: create_flags
       2543: operator: &
       2544: name: IB_QP_CREATE_IPOIB_UD_LSO
       2545: operator: )
     2546: block: 
      2547: block_content: 
       2548: expr_stmt: 
        2549: expr: 
         2550: call: 
          2551: name: MLX5_SET
          2552: argument_list: 
           2553: argument: 
            2554: expr: 
             2555: name: qpc
           2556: argument: 
            2557: expr: 
             2558: name: qpc
           2559: argument: 
            2560: expr: 
             2561: name: ulp_stateless_offload_mode
           2562: argument: 
            2563: expr: 
             2564: literal: 1
       2565: expr_stmt: 
        2566: expr: 
         2567: name: 
          2568: name: qp
          2569: operator: ->
          2570: name: flags
         2571: operator: |=
         2572: name: MLX5_IB_QP_LSO
   2573: if_stmt: 
    2574: if: 
     2575: condition: 
      2576: expr: 
       2577: name: 
        2578: name: init_attr
        2579: operator: ->
        2580: name: create_flags
       2581: operator: &
       2582: name: IB_QP_CREATE_PCI_WRITE_END_PADDING
     2583: block: 
      2584: block_content: 
       2585: if_stmt: 
        2586: if: 
         2587: condition: 
          2588: expr: 
           2589: operator: !
           2590: call: 
            2591: name: MLX5_CAP_GEN
            2592: argument_list: 
             2593: argument: 
              2594: expr: 
               2595: name: 
                2596: name: dev
                2597: operator: ->
                2598: name: mdev
             2599: argument: 
              2600: expr: 
               2601: name: end_pad
         2602: block: 
          2603: block_content: 
           2604: expr_stmt: 
            2605: expr: 
             2606: call: 
              2607: name: mlx5_ib_dbg
              2608: argument_list: 
               2609: argument: 
                2610: expr: 
                 2611: name: dev
               2612: argument: 
                2613: expr: 
                 2614: literal: "scatter end padding is not supported\n"
           2615: expr_stmt: 
            2616: expr: 
             2617: name: err
             2618: operator: =
             2619: operator: -
             2620: name: EOPNOTSUPP
           2621: goto: 
            2622: name: err
        2623: if: 
         2624: condition: 
          2625: expr: 
           2626: name: 
            2627: name: init_attr
            2628: operator: ->
            2629: name: qp_type
           2630: operator: !=
           2631: name: IB_QPT_RAW_PACKET
         2632: block: 
          2633: block_content: 
           2634: expr_stmt: 
            2635: expr: 
             2636: call: 
              2637: name: MLX5_SET
              2638: argument_list: 
               2639: argument: 
                2640: expr: 
                 2641: name: qpc
               2642: argument: 
                2643: expr: 
                 2644: name: qpc
               2645: argument: 
                2646: expr: 
                 2647: name: end_padding_mode
               2648: argument: 
                2649: expr: 
                 2650: name: MLX5_WQ_END_PAD_MODE_ALIGN
        2651: else: 
         2652: block: 
          2653: block_content: 
           2654: expr_stmt: 
            2655: expr: 
             2656: name: 
              2657: name: qp
              2658: operator: ->
              2659: name: flags
             2660: operator: |=
             2661: name: MLX5_IB_QP_PCI_WRITE_END_PADDING
   2662: if_stmt: 
    2663: if: 
     2664: condition: 
      2665: expr: 
       2666: name: inlen
       2667: operator: <
       2668: literal: 0
     2669: block: 
      2670: block_content: 
       2671: expr_stmt: 
        2672: expr: 
         2673: name: err
         2674: operator: =
         2675: operator: -
         2676: name: EINVAL
       2677: goto: 
        2678: name: err
   2679: if_stmt: 
    2680: if: 
     2681: condition: 
      2682: expr: 
       2683: name: 
        2684: name: init_attr
        2685: operator: ->
        2686: name: qp_type
       2687: operator: ==
       2688: name: IB_QPT_RAW_PACKET
       2689: operator: ||
       2690: name: 
        2691: name: qp
        2692: operator: ->
        2693: name: flags
       2694: operator: &
       2695: name: MLX5_IB_QP_UNDERLAY
     2696: block: 
      2697: block_content: 
       2698: expr_stmt: 
        2699: expr: 
         2700: name: 
          2701: name: qp
          2702: operator: ->
          2703: name: raw_packet_qp
          2704: operator: .
          2705: name: sq
          2706: operator: .
          2707: name: ubuffer
          2708: operator: .
          2709: name: buf_addr
         2710: operator: =
         2711: name: 
          2712: name: ucmd
          2713: operator: .
          2714: name: sq_buf_addr
       2715: expr_stmt: 
        2716: expr: 
         2717: call: 
          2718: name: raw_packet_qp_copy_info
          2719: argument_list: 
           2720: argument: 
            2721: expr: 
             2722: name: qp
           2723: argument: 
            2724: expr: 
             2725: operator: &
             2726: name: 
              2727: name: qp
              2728: operator: ->
              2729: name: raw_packet_qp
       2730: expr_stmt: 
        2731: expr: 
         2732: name: err
         2733: operator: =
         2734: call: 
          2735: name: create_raw_packet_qp
          2736: argument_list: 
           2737: argument: 
            2738: expr: 
             2739: name: dev
           2740: argument: 
            2741: expr: 
             2742: name: qp
           2743: argument: 
            2744: expr: 
             2745: name: in
           2746: argument: 
            2747: expr: 
             2748: name: inlen
           2749: argument: 
            2750: expr: 
             2751: name: pd
    2752: else: 
     2753: block: 
      2754: block_content: 
       2755: expr_stmt: 
        2756: expr: 
         2757: name: err
         2758: operator: =
         2759: call: 
          2760: name: mlx5_core_create_qp
          2761: argument_list: 
           2762: argument: 
            2763: expr: 
             2764: name: 
              2765: name: dev
              2766: operator: ->
              2767: name: mdev
           2768: argument: 
            2769: expr: 
             2770: operator: &
             2771: name: 
              2772: name: base
              2773: operator: ->
              2774: name: mqp
           2775: argument: 
            2776: expr: 
             2777: name: in
           2778: argument: 
            2779: expr: 
             2780: name: inlen
   2781: if_stmt: 
    2782: if: 
     2783: condition: 
      2784: expr: 
       2785: name: err
     2786: block: 
      2787: block_content: 
       2788: expr_stmt: 
        2789: expr: 
         2790: call: 
          2791: name: mlx5_ib_dbg
          2792: argument_list: 
           2793: argument: 
            2794: expr: 
             2795: name: dev
           2796: argument: 
            2797: expr: 
             2798: literal: "create qp failed\n"
       2799: goto: 
        2800: name: err_create
   2801: expr_stmt: 
    2802: expr: 
     2803: call: 
      2804: name: kvfree
      2805: argument_list: 
       2806: argument: 
        2807: expr: 
         2808: name: in
   2809: expr_stmt: 
    2810: expr: 
     2811: name: 
      2812: name: base
      2813: operator: ->
      2814: name: container_mibqp
     2815: operator: =
     2816: name: qp
   2817: expr_stmt: 
    2818: expr: 
     2819: name: 
      2820: name: base
      2821: operator: ->
      2822: name: mqp
      2823: operator: .
      2824: name: event
     2825: operator: =
     2826: name: mlx5_ib_qp_event
   2827: expr_stmt: 
    2828: expr: 
     2829: call: 
      2830: name: get_cqs
      2831: argument_list: 
       2832: argument: 
        2833: expr: 
         2834: name: 
          2835: name: init_attr
          2836: operator: ->
          2837: name: qp_type
       2838: argument: 
        2839: expr: 
         2840: name: 
          2841: name: init_attr
          2842: operator: ->
          2843: name: send_cq
       2844: argument: 
        2845: expr: 
         2846: name: 
          2847: name: init_attr
          2848: operator: ->
          2849: name: recv_cq
       2850: argument: 
        2851: expr: 
         2852: operator: &
         2853: name: send_cq
       2854: argument: 
        2855: expr: 
         2856: operator: &
         2857: name: recv_cq
   2858: expr_stmt: 
    2859: expr: 
     2860: call: 
      2861: name: spin_lock_irqsave
      2862: argument_list: 
       2863: argument: 
        2864: expr: 
         2865: operator: &
         2866: name: 
          2867: name: dev
          2868: operator: ->
          2869: name: reset_flow_resource_lock
       2870: argument: 
        2871: expr: 
         2872: name: flags
   2873: expr_stmt: 
    2874: expr: 
     2875: call: 
      2876: name: mlx5_ib_lock_cqs
      2877: argument_list: 
       2878: argument: 
        2879: expr: 
         2880: name: send_cq
       2881: argument: 
        2882: expr: 
         2883: name: recv_cq
   2884: comment: /* Maintain device to QPs access, needed for further handling via
=====
0: name: create_qp_common

----------------------------------------
=====
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: 
      6: name: struct
      7: name: mlx5_ib_resources
     8: modifier: *
    9: name: devr
    10: init: 
     11: expr: 
      12: operator: &
      13: name: 
       14: name: dev
       15: operator: ->
       16: name: devr
  17: decl_stmt: 
   18: decl: 
    19: type: 
     20: name: int
    21: name: inlen
    22: init: 
     23: expr: 
      24: call: 
       25: name: MLX5_ST_SZ_BYTES
       26: argument_list: 
        27: argument: 
         28: expr: 
          29: name: create_qp_in
  30: decl_stmt: 
   31: decl: 
    32: type: 
     33: name: 
      34: name: struct
      35: name: mlx5_core_dev
     36: modifier: *
    37: name: mdev
    38: init: 
     39: expr: 
      40: name: 
       41: name: dev
       42: operator: ->
       43: name: mdev
  44: decl_stmt: 
   45: decl: 
    46: type: 
     47: name: 
      48: name: struct
      49: name: mlx5_ib_create_qp_resp
    50: name: resp
  51: decl_stmt: 
   52: decl: 
    53: type: 
     54: name: 
      55: name: struct
      56: name: mlx5_ib_cq
     57: modifier: *
    58: name: send_cq
  59: decl_stmt: 
   60: decl: 
    61: type: 
     62: name: 
      63: name: struct
      64: name: mlx5_ib_cq
     65: modifier: *
    66: name: recv_cq
  67: decl_stmt: 
   68: decl: 
    69: type: 
     70: name: unsigned
     71: name: long
    72: name: flags
  73: decl_stmt: 
   74: decl: 
    75: type: 
     76: name: u32
    77: name: uidx
    78: init: 
     79: expr: 
      80: name: MLX5_IB_DEFAULT_UIDX
  81: decl_stmt: 
   82: decl: 
    83: type: 
     84: name: 
      85: name: struct
      86: name: mlx5_ib_create_qp
    87: name: ucmd
  88: decl_stmt: 
   89: decl: 
    90: type: 
     91: name: 
      92: name: struct
      93: name: mlx5_ib_qp_base
     94: modifier: *
    95: name: base
  96: decl_stmt: 
   97: decl: 
    98: type: 
     99: name: int
    100: name: mlx5_st
  101: decl_stmt: 
   102: decl: 
    103: type: 
     104: name: void
     105: modifier: *
    106: name: qpc
  107: decl_stmt: 
   108: decl: 
    109: type: 
     110: name: u32
     111: modifier: *
    112: name: in
  113: decl_stmt: 
   114: decl: 
    115: type: 
     116: name: int
    117: name: err
  118: expr_stmt: 
   119: expr: 
    120: call: 
     121: name: mutex_init
     122: argument_list: 
      123: argument: 
       124: expr: 
        125: operator: &
        126: name: 
         127: name: qp
         128: operator: ->
         129: name: mutex
  130: expr_stmt: 
   131: expr: 
    132: call: 
     133: name: spin_lock_init
     134: argument_list: 
      135: argument: 
       136: expr: 
        137: operator: &
        138: name: 
         139: name: qp
         140: operator: ->
         141: name: sq
         142: operator: .
         143: name: lock
  144: expr_stmt: 
   145: expr: 
    146: call: 
     147: name: spin_lock_init
     148: argument_list: 
      149: argument: 
       150: expr: 
        151: operator: &
        152: name: 
         153: name: qp
         154: operator: ->
         155: name: rq
         156: operator: .
         157: name: lock
  158: expr_stmt: 
   159: expr: 
    160: name: mlx5_st
    161: operator: =
    162: call: 
     163: name: to_mlx5_st
     164: argument_list: 
      165: argument: 
       166: expr: 
        167: name: 
         168: name: init_attr
         169: operator: ->
         170: name: qp_type
  171: if_stmt: 
   172: if: 
    173: condition: 
     174: expr: 
      175: name: mlx5_st
      176: operator: <
      177: literal: 0
    178: block: 
     179: block_content: 
      180: return: 
       181: expr: 
        182: operator: -
        183: name: EINVAL
  184: if_stmt: 
   185: if: 
    186: condition: 
     187: expr: 
      188: name: 
       189: name: init_attr
       190: operator: ->
       191: name: rwq_ind_tbl
    192: block: 
     193: block_content: 
      194: if_stmt: 
       195: if: 
        196: condition: 
         197: expr: 
          198: operator: !
          199: name: udata
        200: block: 
         201: block_content: 
          202: return: 
           203: expr: 
            204: operator: -
            205: name: ENOSYS
      206: expr_stmt: 
       207: expr: 
        208: name: err
        209: operator: =
        210: call: 
         211: name: create_rss_raw_qp_tir
         212: argument_list: 
          213: argument: 
           214: expr: 
            215: name: dev
          216: argument: 
           217: expr: 
            218: name: qp
          219: argument: 
           220: expr: 
            221: name: pd
          222: argument: 
           223: expr: 
            224: name: init_attr
          225: argument: 
           226: expr: 
            227: name: udata
      228: return: 
       229: expr: 
        230: name: err
  231: if_stmt: 
   232: if: 
    233: condition: 
     234: expr: 
      235: name: 
       236: name: init_attr
       237: operator: ->
       238: name: create_flags
      239: operator: &
      240: name: IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK
    241: block: 
     242: block_content: 
      243: if_stmt: 
       244: if: 
        245: condition: 
         246: expr: 
          247: operator: !
          248: call: 
           249: name: MLX5_CAP_GEN
           250: argument_list: 
            251: argument: 
             252: expr: 
              253: name: mdev
            254: argument: 
             255: expr: 
              256: name: block_lb_mc
        257: block: 
         258: block_content: 
          259: expr_stmt: 
           260: expr: 
            261: call: 
             262: name: mlx5_ib_dbg
             263: argument_list: 
              264: argument: 
               265: expr: 
                266: name: dev
              267: argument: 
               268: expr: 
                269: literal: "block multicast loopback isn't supported\n"
          270: return: 
           271: expr: 
            272: operator: -
            273: name: EINVAL
       274: else: 
        275: block: 
         276: block_content: 
          277: expr_stmt: 
           278: expr: 
            279: name: 
             280: name: qp
             281: operator: ->
             282: name: flags
            283: operator: |=
            284: name: MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK
  285: if_stmt: 
   286: if: 
    287: condition: 
     288: expr: 
      289: name: 
       290: name: init_attr
       291: operator: ->
       292: name: create_flags
      293: operator: &
      294: operator: (
      295: name: IB_QP_CREATE_CROSS_CHANNEL
      296: operator: |
      297: name: IB_QP_CREATE_MANAGED_SEND
      298: operator: |
      299: name: IB_QP_CREATE_MANAGED_RECV
      300: operator: )
    301: block: 
     302: block_content: 
      303: if_stmt: 
       304: if: 
        305: condition: 
         306: expr: 
          307: operator: !
          308: call: 
           309: name: MLX5_CAP_GEN
           310: argument_list: 
            311: argument: 
             312: expr: 
              313: name: mdev
            314: argument: 
             315: expr: 
              316: name: cd
        317: block: 
         318: block_content: 
          319: expr_stmt: 
           320: expr: 
            321: call: 
             322: name: mlx5_ib_dbg
             323: argument_list: 
              324: argument: 
               325: expr: 
                326: name: dev
              327: argument: 
               328: expr: 
                329: literal: "cross-channel isn't supported\n"
          330: return: 
           331: expr: 
            332: operator: -
            333: name: EINVAL
      334: if_stmt: 
       335: if: 
        336: condition: 
         337: expr: 
          338: name: 
           339: name: init_attr
           340: operator: ->
           341: name: create_flags
          342: operator: &
          343: name: IB_QP_CREATE_CROSS_CHANNEL
        344: block: 
         345: block_content: 
          346: expr_stmt: 
           347: expr: 
            348: name: 
             349: name: qp
             350: operator: ->
             351: name: flags
            352: operator: |=
            353: name: MLX5_IB_QP_CROSS_CHANNEL
      354: if_stmt: 
       355: if: 
        356: condition: 
         357: expr: 
          358: name: 
           359: name: init_attr
           360: operator: ->
           361: name: create_flags
          362: operator: &
          363: name: IB_QP_CREATE_MANAGED_SEND
        364: block: 
         365: block_content: 
          366: expr_stmt: 
           367: expr: 
            368: name: 
             369: name: qp
             370: operator: ->
             371: name: flags
            372: operator: |=
            373: name: MLX5_IB_QP_MANAGED_SEND
      374: if_stmt: 
       375: if: 
        376: condition: 
         377: expr: 
          378: name: 
           379: name: init_attr
           380: operator: ->
           381: name: create_flags
          382: operator: &
          383: name: IB_QP_CREATE_MANAGED_RECV
        384: block: 
         385: block_content: 
          386: expr_stmt: 
           387: expr: 
            388: name: 
             389: name: qp
             390: operator: ->
             391: name: flags
            392: operator: |=
            393: name: MLX5_IB_QP_MANAGED_RECV
  394: if_stmt: 
   395: if: 
    396: condition: 
     397: expr: 
      398: name: 
       399: name: init_attr
       400: operator: ->
       401: name: qp_type
      402: operator: ==
      403: name: IB_QPT_UD
      404: operator: &&
      405: operator: (
      406: name: 
       407: name: init_attr
       408: operator: ->
       409: name: create_flags
      410: operator: &
      411: name: IB_QP_CREATE_IPOIB_UD_LSO
      412: operator: )
    413: block: 
     414: block_content: 
      415: if_stmt: 
       416: if: 
        417: condition: 
         418: expr: 
          419: operator: !
          420: call: 
           421: name: MLX5_CAP_GEN
           422: argument_list: 
            423: argument: 
             424: expr: 
              425: name: mdev
            426: argument: 
             427: expr: 
              428: name: ipoib_basic_offloads
        429: block: 
         430: block_content: 
          431: expr_stmt: 
           432: expr: 
            433: call: 
             434: name: mlx5_ib_dbg
             435: argument_list: 
              436: argument: 
               437: expr: 
                438: name: dev
              439: argument: 
               440: expr: 
                441: literal: "ipoib UD lso qp isn't supported\n"
          442: return: 
           443: expr: 
            444: operator: -
            445: name: EOPNOTSUPP
  446: if_stmt: 
   447: if: 
    448: condition: 
     449: expr: 
      450: name: 
       451: name: init_attr
       452: operator: ->
       453: name: create_flags
      454: operator: &
      455: name: IB_QP_CREATE_SCATTER_FCS
    456: block: 
     457: block_content: 
      458: if_stmt: 
       459: if: 
        460: condition: 
         461: expr: 
          462: name: 
           463: name: init_attr
           464: operator: ->
           465: name: qp_type
          466: operator: !=
          467: name: IB_QPT_RAW_PACKET
        468: block: 
         469: block_content: 
          470: expr_stmt: 
           471: expr: 
            472: call: 
             473: name: mlx5_ib_dbg
             474: argument_list: 
              475: argument: 
               476: expr: 
                477: name: dev
              478: argument: 
               479: expr: 
                480: literal: "Scatter FCS is supported only for Raw Packet QPs"
          481: return: 
           482: expr: 
            483: operator: -
            484: name: EOPNOTSUPP
      485: if_stmt: 
       486: if: 
        487: condition: 
         488: expr: 
          489: operator: !
          490: call: 
           491: name: MLX5_CAP_GEN
           492: argument_list: 
            493: argument: 
             494: expr: 
              495: name: 
               496: name: dev
               497: operator: ->
               498: name: mdev
            499: argument: 
             500: expr: 
              501: name: eth_net_offloads
          502: operator: ||
          503: operator: !
          504: call: 
           505: name: MLX5_CAP_ETH
           506: argument_list: 
            507: argument: 
             508: expr: 
              509: name: 
               510: name: dev
               511: operator: ->
               512: name: mdev
            513: argument: 
             514: expr: 
              515: name: scatter_fcs
        516: block: 
         517: block_content: 
          518: expr_stmt: 
           519: expr: 
            520: call: 
             521: name: mlx5_ib_dbg
             522: argument_list: 
              523: argument: 
               524: expr: 
                525: name: dev
              526: argument: 
               527: expr: 
                528: literal: "Scatter FCS isn't supported\n"
          529: return: 
           530: expr: 
            531: operator: -
            532: name: EOPNOTSUPP
      533: expr_stmt: 
       534: expr: 
        535: name: 
         536: name: qp
         537: operator: ->
         538: name: flags
        539: operator: |=
        540: name: MLX5_IB_QP_CAP_SCATTER_FCS
  541: if_stmt: 
   542: if: 
    543: condition: 
     544: expr: 
      545: name: 
       546: name: init_attr
       547: operator: ->
       548: name: sq_sig_type
      549: operator: ==
      550: name: IB_SIGNAL_ALL_WR
    551: block: 
     552: block_content: 
      553: expr_stmt: 
       554: expr: 
        555: name: 
         556: name: qp
         557: operator: ->
         558: name: sq_signal_bits
        559: operator: =
        560: name: MLX5_WQE_CTRL_CQ_UPDATE
  561: if_stmt: 
   562: if: 
    563: condition: 
     564: expr: 
      565: name: 
       566: name: init_attr
       567: operator: ->
       568: name: create_flags
      569: operator: &
      570: name: IB_QP_CREATE_CVLAN_STRIPPING
    571: block: 
     572: block_content: 
      573: if_stmt: 
       574: if: 
        575: condition: 
         576: expr: 
          577: operator: !
          578: operator: (
          579: call: 
           580: name: MLX5_CAP_GEN
           581: argument_list: 
            582: argument: 
             583: expr: 
              584: name: 
               585: name: dev
               586: operator: ->
               587: name: mdev
            588: argument: 
             589: expr: 
              590: name: eth_net_offloads
          591: operator: &&
          592: call: 
           593: name: MLX5_CAP_ETH
           594: argument_list: 
            595: argument: 
             596: expr: 
              597: name: 
               598: name: dev
               599: operator: ->
               600: name: mdev
            601: argument: 
             602: expr: 
              603: name: vlan_cap
          604: operator: )
          605: operator: ||
          606: operator: (
          607: name: 
           608: name: init_attr
           609: operator: ->
           610: name: qp_type
          611: operator: !=
          612: name: IB_QPT_RAW_PACKET
          613: operator: )
        614: block: 
         615: block_content: 
          616: return: 
           617: expr: 
            618: operator: -
            619: name: EOPNOTSUPP
      620: expr_stmt: 
       621: expr: 
        622: name: 
         623: name: qp
         624: operator: ->
         625: name: flags
        626: operator: |=
        627: name: MLX5_IB_QP_CVLAN_STRIPPING
  628: if_stmt: 
   629: if: 
    630: condition: 
     631: expr: 
      632: name: pd
      633: operator: &&
      634: name: 
       635: name: pd
       636: operator: ->
       637: name: uobject
    638: block: 
     639: block_content: 
      640: if_stmt: 
       641: if: 
        642: condition: 
         643: expr: 
          644: call: 
           645: name: ib_copy_from_udata
           646: argument_list: 
            647: argument: 
             648: expr: 
              649: operator: &
              650: name: ucmd
            651: argument: 
             652: expr: 
              653: name: udata
            654: argument: 
             655: expr: 
              656: sizeof: 
               657: argument_list: 
                658: argument: 
                 659: expr: 
                  660: name: ucmd
        661: block: 
         662: block_content: 
          663: expr_stmt: 
           664: expr: 
            665: call: 
             666: name: mlx5_ib_dbg
             667: argument_list: 
              668: argument: 
               669: expr: 
                670: name: dev
              671: argument: 
               672: expr: 
                673: literal: "copy failed\n"
          674: return: 
           675: expr: 
            676: operator: -
            677: name: EFAULT
      678: expr_stmt: 
       679: expr: 
        680: name: err
        681: operator: =
        682: call: 
         683: name: get_qp_user_index
         684: argument_list: 
          685: argument: 
           686: expr: 
            687: call: 
             688: name: to_mucontext
             689: argument_list: 
              690: argument: 
               691: expr: 
                692: name: 
                 693: name: pd
                 694: operator: ->
                 695: name: uobject
                 696: operator: ->
                 697: name: context
          698: argument: 
           699: expr: 
            700: operator: &
            701: name: ucmd
          702: argument: 
           703: expr: 
            704: name: 
             705: name: udata
             706: operator: ->
             707: name: inlen
          708: argument: 
           709: expr: 
            710: operator: &
            711: name: uidx
      712: if_stmt: 
       713: if: 
        714: condition: 
         715: expr: 
          716: name: err
        717: block: 
         718: block_content: 
          719: return: 
           720: expr: 
            721: name: err
      722: expr_stmt: 
       723: expr: 
        724: name: 
         725: name: qp
         726: operator: ->
         727: name: wq_sig
        728: operator: =
        729: operator: !
        730: operator: !
        731: operator: (
        732: name: 
         733: name: ucmd
         734: operator: .
         735: name: flags
        736: operator: &
        737: name: MLX5_QP_FLAG_SIGNATURE
        738: operator: )
      739: expr_stmt: 
       740: expr: 
        741: name: 
         742: name: qp
         743: operator: ->
         744: name: scat_cqe
        745: operator: =
        746: operator: !
        747: operator: !
        748: operator: (
        749: name: 
         750: name: ucmd
         751: operator: .
         752: name: flags
        753: operator: &
        754: name: MLX5_QP_FLAG_SCATTER_CQE
        755: operator: )
      756: if_stmt: 
       757: if: 
        758: condition: 
         759: expr: 
          760: name: 
           761: name: ucmd
           762: operator: .
           763: name: flags
          764: operator: &
          765: name: MLX5_QP_FLAG_TUNNEL_OFFLOADS
        766: block: 
         767: block_content: 
          768: if_stmt: 
           769: if: 
            770: condition: 
             771: expr: 
              772: name: 
               773: name: init_attr
               774: operator: ->
               775: name: qp_type
              776: operator: !=
              777: name: IB_QPT_RAW_PACKET
              778: operator: ||
              779: operator: !
              780: call: 
               781: name: tunnel_offload_supported
               782: argument_list: 
                783: argument: 
                 784: expr: 
                  785: name: mdev
            786: block: 
             787: block_content: 
              788: expr_stmt: 
               789: expr: 
                790: call: 
                 791: name: mlx5_ib_dbg
                 792: argument_list: 
                  793: argument: 
                   794: expr: 
                    795: name: dev
                  796: argument: 
                   797: expr: 
                    798: literal: "Tunnel offload isn't supported\n"
              799: return: 
               800: expr: 
                801: operator: -
                802: name: EOPNOTSUPP
          803: expr_stmt: 
           804: expr: 
            805: name: 
             806: name: qp
             807: operator: ->
             808: name: tunnel_offload_en
            809: operator: =
            810: literal: true
      811: if_stmt: 
       812: if: 
        813: condition: 
         814: expr: 
          815: name: 
           816: name: init_attr
           817: operator: ->
           818: name: create_flags
          819: operator: &
          820: name: IB_QP_CREATE_SOURCE_QPN
        821: block: 
         822: block_content: 
          823: if_stmt: 
           824: if: 
            825: condition: 
             826: expr: 
              827: name: 
               828: name: init_attr
               829: operator: ->
               830: name: qp_type
              831: operator: !=
              832: name: IB_QPT_UD
              833: operator: ||
              834: operator: (
              835: call: 
               836: name: MLX5_CAP_GEN
               837: argument_list: 
                838: argument: 
                 839: expr: 
                  840: name: 
                   841: name: dev
                   842: operator: ->
                   843: name: mdev
                844: argument: 
                 845: expr: 
                  846: name: port_type
              847: operator: !=
              848: name: MLX5_CAP_PORT_TYPE_IB
              849: operator: )
              850: operator: ||
              851: operator: !
              852: call: 
               853: name: mlx5_get_flow_namespace
               854: argument_list: 
                855: argument: 
                 856: expr: 
                  857: name: 
                   858: name: dev
                   859: operator: ->
                   860: name: mdev
                861: argument: 
                 862: expr: 
                  863: name: MLX5_FLOW_NAMESPACE_BYPASS
            864: block: 
             865: block_content: 
              866: expr_stmt: 
               867: expr: 
                868: call: 
                 869: name: mlx5_ib_dbg
                 870: argument_list: 
                  871: argument: 
                   872: expr: 
                    873: name: dev
                  874: argument: 
                   875: expr: 
                    876: literal: "Source QP option isn't supported\n"
              877: return: 
               878: expr: 
                879: operator: -
                880: name: EOPNOTSUPP
          881: expr_stmt: 
           882: expr: 
            883: name: 
             884: name: qp
             885: operator: ->
             886: name: flags
            887: operator: |=
            888: name: MLX5_IB_QP_UNDERLAY
          889: expr_stmt: 
           890: expr: 
            891: name: 
             892: name: qp
             893: operator: ->
             894: name: underlay_qpn
            895: operator: =
            896: name: 
             897: name: init_attr
             898: operator: ->
             899: name: source_qpn
   900: else: 
    901: block: 
     902: block_content: 
      903: expr_stmt: 
       904: expr: 
        905: name: 
         906: name: qp
         907: operator: ->
         908: name: wq_sig
        909: operator: =
        910: operator: !
        911: operator: !
        912: name: wq_signature
  913: expr_stmt: 
   914: expr: 
    915: name: base
    916: operator: =
    917: ternary: 
     918: condition: 
      919: expr: 
       920: operator: (
       921: name: 
        922: name: init_attr
        923: operator: ->
        924: name: qp_type
       925: operator: ==
       926: name: IB_QPT_RAW_PACKET
       927: operator: ||
       928: name: 
        929: name: qp
        930: operator: ->
        931: name: flags
       932: operator: &
       933: name: MLX5_IB_QP_UNDERLAY
       934: operator: )
     935: then: 
      936: expr: 
       937: operator: &
       938: name: 
        939: name: qp
        940: operator: ->
        941: name: raw_packet_qp
        942: operator: .
        943: name: rq
        944: operator: .
        945: name: base
     946: else: 
      947: expr: 
       948: operator: &
       949: name: 
        950: name: qp
        951: operator: ->
        952: name: trans_qp
        953: operator: .
        954: name: base
  955: expr_stmt: 
   956: expr: 
    957: name: 
     958: name: qp
     959: operator: ->
     960: name: has_rq
    961: operator: =
    962: call: 
     963: name: qp_has_rq
     964: argument_list: 
      965: argument: 
       966: expr: 
        967: name: init_attr
  968: expr_stmt: 
   969: expr: 
    970: name: err
    971: operator: =
    972: call: 
     973: name: set_rq_size
     974: argument_list: 
      975: argument: 
       976: expr: 
        977: name: dev
      978: argument: 
       979: expr: 
        980: operator: &
        981: name: 
         982: name: init_attr
         983: operator: ->
         984: name: cap
      985: argument: 
       986: expr: 
        987: name: 
         988: name: qp
         989: operator: ->
         990: name: has_rq
      991: argument: 
       992: expr: 
        993: name: qp
      994: argument: 
       995: expr: 
        996: ternary: 
         997: condition: 
          998: expr: 
           999: operator: (
           1000: name: pd
           1001: operator: &&
           1002: name: 
            1003: name: pd
            1004: operator: ->
            1005: name: uobject
           1006: operator: )
         1007: then: 
          1008: expr: 
           1009: operator: &
           1010: name: ucmd
         1011: else: 
          1012: expr: 
           1013: name: NULL
  1014: if_stmt: 
   1015: if: 
    1016: condition: 
     1017: expr: 
      1018: name: err
    1019: block: 
     1020: block_content: 
      1021: expr_stmt: 
       1022: expr: 
        1023: call: 
         1024: name: mlx5_ib_dbg
         1025: argument_list: 
          1026: argument: 
           1027: expr: 
            1028: name: dev
          1029: argument: 
           1030: expr: 
            1031: literal: "err %d\n"
          1032: argument: 
           1033: expr: 
            1034: name: err
      1035: return: 
       1036: expr: 
        1037: name: err
  1038: if_stmt: 
   1039: if: 
    1040: condition: 
     1041: expr: 
      1042: name: pd
    1043: block: 
     1044: block_content: 
      1045: if_stmt: 
       1046: if: 
        1047: condition: 
         1048: expr: 
          1049: name: 
           1050: name: pd
           1051: operator: ->
           1052: name: uobject
        1053: block: 
         1054: block_content: 
          1055: decl_stmt: 
           1056: decl: 
            1057: type: 
             1058: name: __u32
            1059: name: max_wqes
            1060: init: 
             1061: expr: 
              1062: literal: 1
              1063: operator: <<
              1064: call: 
               1065: name: MLX5_CAP_GEN
               1066: argument_list: 
                1067: argument: 
                 1068: expr: 
                  1069: name: mdev
                1070: argument: 
                 1071: expr: 
                  1072: name: log_max_qp_sz
          1073: expr_stmt: 
           1074: expr: 
            1075: call: 
             1076: name: mlx5_ib_dbg
             1077: argument_list: 
              1078: argument: 
               1079: expr: 
                1080: name: dev
              1081: argument: 
               1082: expr: 
                1083: literal: "requested sq_wqe_count (%d)\n"
              1084: argument: 
               1085: expr: 
                1086: name: 
                 1087: name: ucmd
                 1088: operator: .
                 1089: name: sq_wqe_count
          1090: if_stmt: 
           1091: if: 
            1092: condition: 
             1093: expr: 
              1094: name: 
               1095: name: ucmd
               1096: operator: .
               1097: name: rq_wqe_shift
              1098: operator: !=
              1099: name: 
               1100: name: qp
               1101: operator: ->
               1102: name: rq
               1103: operator: .
               1104: name: wqe_shift
              1105: operator: ||
              1106: name: 
               1107: name: ucmd
               1108: operator: .
               1109: name: rq_wqe_count
              1110: operator: !=
              1111: name: 
               1112: name: qp
               1113: operator: ->
               1114: name: rq
               1115: operator: .
               1116: name: wqe_cnt
            1117: block: 
             1118: block_content: 
              1119: expr_stmt: 
               1120: expr: 
                1121: call: 
                 1122: name: mlx5_ib_dbg
                 1123: argument_list: 
                  1124: argument: 
                   1125: expr: 
                    1126: name: dev
                  1127: argument: 
                   1128: expr: 
                    1129: literal: "invalid rq params\n"
              1130: return: 
               1131: expr: 
                1132: operator: -
                1133: name: EINVAL
          1134: if_stmt: 
           1135: if: 
            1136: condition: 
             1137: expr: 
              1138: name: 
               1139: name: ucmd
               1140: operator: .
               1141: name: sq_wqe_count
              1142: operator: >
              1143: name: max_wqes
            1144: block: 
             1145: block_content: 
              1146: expr_stmt: 
               1147: expr: 
                1148: call: 
                 1149: name: mlx5_ib_dbg
                 1150: argument_list: 
                  1151: argument: 
                   1152: expr: 
                    1153: name: dev
                  1154: argument: 
                   1155: expr: 
                    1156: literal: "requested sq_wqe_count (%d)>max allowed (%d)\n"
                  1157: argument: 
                   1158: expr: 
                    1159: name: 
                     1160: name: ucmd
                     1161: operator: .
                     1162: name: sq_wqe_count
                  1163: argument: 
                   1164: expr: 
                    1165: name: max_wqes
              1166: return: 
               1167: expr: 
                1168: operator: -
                1169: name: EINVAL
          1170: if_stmt: 
           1171: if: 
            1172: condition: 
             1173: expr: 
              1174: name: 
               1175: name: init_attr
               1176: operator: ->
               1177: name: create_flags
              1178: operator: &
              1179: call: 
               1180: name: mlx5_ib_create_qp_sqpn_qp1
               1181: argument_list: 
            1182: block: 
             1183: block_content: 
              1184: expr_stmt: 
               1185: expr: 
                1186: call: 
                 1187: name: mlx5_ib_dbg
                 1188: argument_list: 
                  1189: argument: 
                   1190: expr: 
                    1191: name: dev
                  1192: argument: 
                   1193: expr: 
                    1194: literal: "user-space is not allowed to create UD QPs spoofing as QP1\n"
              1195: return: 
               1196: expr: 
                1197: operator: -
                1198: name: EINVAL
          1199: expr_stmt: 
           1200: expr: 
            1201: name: err
            1202: operator: =
            1203: call: 
             1204: name: create_user_qp
             1205: argument_list: 
              1206: argument: 
               1207: expr: 
                1208: name: dev
              1209: argument: 
               1210: expr: 
                1211: name: pd
              1212: argument: 
               1213: expr: 
                1214: name: qp
              1215: argument: 
               1216: expr: 
                1217: name: udata
              1218: argument: 
               1219: expr: 
                1220: name: init_attr
              1221: argument: 
               1222: expr: 
                1223: operator: &
                1224: name: in
              1225: argument: 
               1226: expr: 
                1227: operator: &
                1228: name: resp
              1229: argument: 
               1230: expr: 
                1231: operator: &
                1232: name: inlen
              1233: argument: 
               1234: expr: 
                1235: name: base
          1236: if_stmt: 
           1237: if: 
            1238: condition: 
             1239: expr: 
              1240: name: err
            1241: block: 
             1242: block_content: 
              1243: expr_stmt: 
               1244: expr: 
                1245: call: 
                 1246: name: mlx5_ib_dbg
                 1247: argument_list: 
                  1248: argument: 
                   1249: expr: 
                    1250: name: dev
                  1251: argument: 
                   1252: expr: 
                    1253: literal: "err %d\n"
                  1254: argument: 
                   1255: expr: 
                    1256: name: err
       1257: else: 
        1258: block: 
         1259: block_content: 
          1260: expr_stmt: 
           1261: expr: 
            1262: name: err
            1263: operator: =
            1264: call: 
             1265: name: create_kernel_qp
             1266: argument_list: 
              1267: argument: 
               1268: expr: 
                1269: name: dev
              1270: argument: 
               1271: expr: 
                1272: name: init_attr
              1273: argument: 
               1274: expr: 
                1275: name: qp
              1276: argument: 
               1277: expr: 
                1278: operator: &
                1279: name: in
              1280: argument: 
               1281: expr: 
                1282: operator: &
                1283: name: inlen
              1284: argument: 
               1285: expr: 
                1286: name: base
          1287: if_stmt: 
           1288: if: 
            1289: condition: 
             1290: expr: 
              1291: name: err
            1292: block: 
             1293: block_content: 
              1294: expr_stmt: 
               1295: expr: 
                1296: call: 
                 1297: name: mlx5_ib_dbg
                 1298: argument_list: 
                  1299: argument: 
                   1300: expr: 
                    1301: name: dev
                  1302: argument: 
                   1303: expr: 
                    1304: literal: "err %d\n"
                  1305: argument: 
                   1306: expr: 
                    1307: name: err
      1308: if_stmt: 
       1309: if: 
        1310: condition: 
         1311: expr: 
          1312: name: err
        1313: block: 
         1314: block_content: 
          1315: return: 
           1316: expr: 
            1317: name: err
   1318: else: 
    1319: block: 
     1320: block_content: 
      1321: expr_stmt: 
       1322: expr: 
        1323: name: in
        1324: operator: =
        1325: call: 
         1326: name: kvzalloc
         1327: argument_list: 
          1328: argument: 
           1329: expr: 
            1330: name: inlen
          1331: argument: 
           1332: expr: 
            1333: name: GFP_KERNEL
      1334: if_stmt: 
       1335: if: 
        1336: condition: 
         1337: expr: 
          1338: operator: !
          1339: name: in
        1340: block: 
         1341: block_content: 
          1342: return: 
           1343: expr: 
            1344: operator: -
            1345: name: ENOMEM
      1346: expr_stmt: 
       1347: expr: 
        1348: name: 
         1349: name: qp
         1350: operator: ->
         1351: name: create_type
        1352: operator: =
        1353: name: MLX5_QP_EMPTY
  1354: if_stmt: 
   1355: if: 
    1356: condition: 
     1357: expr: 
      1358: call: 
       1359: name: is_sqp
       1360: argument_list: 
        1361: argument: 
         1362: expr: 
          1363: name: 
           1364: name: init_attr
           1365: operator: ->
           1366: name: qp_type
    1367: block: 
     1368: block_content: 
      1369: expr_stmt: 
       1370: expr: 
        1371: name: 
         1372: name: qp
         1373: operator: ->
         1374: name: port
        1375: operator: =
        1376: name: 
         1377: name: init_attr
         1378: operator: ->
         1379: name: port_num
  1380: expr_stmt: 
   1381: expr: 
    1382: name: qpc
    1383: operator: =
    1384: call: 
     1385: name: MLX5_ADDR_OF
     1386: argument_list: 
      1387: argument: 
       1388: expr: 
        1389: name: create_qp_in
      1390: argument: 
       1391: expr: 
        1392: name: in
      1393: argument: 
       1394: expr: 
        1395: name: qpc
  1396: expr_stmt: 
   1397: expr: 
    1398: call: 
     1399: name: MLX5_SET
     1400: argument_list: 
      1401: argument: 
       1402: expr: 
        1403: name: qpc
      1404: argument: 
       1405: expr: 
        1406: name: qpc
      1407: argument: 
       1408: expr: 
        1409: name: st
      1410: argument: 
       1411: expr: 
        1412: name: mlx5_st
  1413: expr_stmt: 
   1414: expr: 
    1415: call: 
     1416: name: MLX5_SET
     1417: argument_list: 
      1418: argument: 
       1419: expr: 
        1420: name: qpc
      1421: argument: 
       1422: expr: 
        1423: name: qpc
      1424: argument: 
       1425: expr: 
        1426: name: pm_state
      1427: argument: 
       1428: expr: 
        1429: name: MLX5_QP_PM_MIGRATED
  1430: if_stmt: 
   1431: if: 
    1432: condition: 
     1433: expr: 
      1434: name: 
       1435: name: init_attr
       1436: operator: ->
       1437: name: qp_type
      1438: operator: !=
      1439: name: MLX5_IB_QPT_REG_UMR
    1440: block: 
     1441: block_content: 
      1442: expr_stmt: 
       1443: expr: 
        1444: call: 
         1445: name: MLX5_SET
         1446: argument_list: 
          1447: argument: 
           1448: expr: 
            1449: name: qpc
          1450: argument: 
           1451: expr: 
            1452: name: qpc
          1453: argument: 
           1454: expr: 
            1455: name: pd
          1456: argument: 
           1457: expr: 
            1458: call: 
             1459: name: to_mpd
             1460: argument_list: 
              1461: argument: 
               1462: expr: 
                1463: ternary: 
                 1464: condition: 
                  1465: expr: 
                   1466: name: pd
                 1467: then: 
                  1468: expr: 
                   1469: name: pd
                 1470: else: 
                  1471: expr: 
                   1472: name: 
                    1473: name: devr
                    1474: operator: ->
                    1475: name: p0
            1476: operator: ->
            1477: name: pdn
   1478: else: 
    1479: block: 
     1480: block_content: 
      1481: expr_stmt: 
       1482: expr: 
        1483: call: 
         1484: name: MLX5_SET
         1485: argument_list: 
          1486: argument: 
           1487: expr: 
            1488: name: qpc
          1489: argument: 
           1490: expr: 
            1491: name: qpc
          1492: argument: 
           1493: expr: 
            1494: name: latency_sensitive
          1495: argument: 
           1496: expr: 
            1497: literal: 1
  1498: if_stmt: 
   1499: if: 
    1500: condition: 
     1501: expr: 
      1502: name: 
       1503: name: qp
       1504: operator: ->
       1505: name: wq_sig
    1506: block: 
     1507: block_content: 
      1508: expr_stmt: 
       1509: expr: 
        1510: call: 
         1511: name: MLX5_SET
         1512: argument_list: 
          1513: argument: 
           1514: expr: 
            1515: name: qpc
          1516: argument: 
           1517: expr: 
            1518: name: qpc
          1519: argument: 
           1520: expr: 
            1521: name: wq_signature
          1522: argument: 
           1523: expr: 
            1524: literal: 1
  1525: if_stmt: 
   1526: if: 
    1527: condition: 
     1528: expr: 
      1529: name: 
       1530: name: qp
       1531: operator: ->
       1532: name: flags
      1533: operator: &
      1534: name: MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK
    1535: block: 
     1536: block_content: 
      1537: expr_stmt: 
       1538: expr: 
        1539: call: 
         1540: name: MLX5_SET
         1541: argument_list: 
          1542: argument: 
           1543: expr: 
            1544: name: qpc
          1545: argument: 
           1546: expr: 
            1547: name: qpc
          1548: argument: 
           1549: expr: 
            1550: name: block_lb_mc
          1551: argument: 
           1552: expr: 
            1553: literal: 1
  1554: if_stmt: 
   1555: if: 
    1556: condition: 
     1557: expr: 
      1558: name: 
       1559: name: qp
       1560: operator: ->
       1561: name: flags
      1562: operator: &
      1563: name: MLX5_IB_QP_CROSS_CHANNEL
    1564: block: 
     1565: block_content: 
      1566: expr_stmt: 
       1567: expr: 
        1568: call: 
         1569: name: MLX5_SET
         1570: argument_list: 
          1571: argument: 
           1572: expr: 
            1573: name: qpc
          1574: argument: 
           1575: expr: 
            1576: name: qpc
          1577: argument: 
           1578: expr: 
            1579: name: cd_master
          1580: argument: 
           1581: expr: 
            1582: literal: 1
  1583: if_stmt: 
   1584: if: 
    1585: condition: 
     1586: expr: 
      1587: name: 
       1588: name: qp
       1589: operator: ->
       1590: name: flags
      1591: operator: &
      1592: name: MLX5_IB_QP_MANAGED_SEND
    1593: block: 
     1594: block_content: 
      1595: expr_stmt: 
       1596: expr: 
        1597: call: 
         1598: name: MLX5_SET
         1599: argument_list: 
          1600: argument: 
           1601: expr: 
            1602: name: qpc
          1603: argument: 
           1604: expr: 
            1605: name: qpc
          1606: argument: 
           1607: expr: 
            1608: name: cd_slave_send
          1609: argument: 
           1610: expr: 
            1611: literal: 1
  1612: if_stmt: 
   1613: if: 
    1614: condition: 
     1615: expr: 
      1616: name: 
       1617: name: qp
       1618: operator: ->
       1619: name: flags
      1620: operator: &
      1621: name: MLX5_IB_QP_MANAGED_RECV
    1622: block: 
     1623: block_content: 
      1624: expr_stmt: 
       1625: expr: 
        1626: call: 
         1627: name: MLX5_SET
         1628: argument_list: 
          1629: argument: 
           1630: expr: 
            1631: name: qpc
          1632: argument: 
           1633: expr: 
            1634: name: qpc
          1635: argument: 
           1636: expr: 
            1637: name: cd_slave_receive
          1638: argument: 
           1639: expr: 
            1640: literal: 1
  1641: if_stmt: 
   1642: if: 
    1643: condition: 
     1644: expr: 
      1645: name: 
       1646: name: qp
       1647: operator: ->
       1648: name: scat_cqe
      1649: operator: &&
      1650: call: 
       1651: name: is_connected
       1652: argument_list: 
        1653: argument: 
         1654: expr: 
          1655: name: 
           1656: name: init_attr
           1657: operator: ->
           1658: name: qp_type
    1659: block: 
     1660: block_content: 
      1661: decl_stmt: 
       1662: decl: 
        1663: type: 
         1664: name: int
        1665: name: rcqe_sz
      1666: decl_stmt: 
       1667: decl: 
        1668: type: 
         1669: name: int
        1670: name: scqe_sz
      1671: expr_stmt: 
       1672: expr: 
        1673: name: rcqe_sz
        1674: operator: =
        1675: call: 
         1676: name: mlx5_ib_get_cqe_size
         1677: argument_list: 
          1678: argument: 
           1679: expr: 
            1680: name: dev
          1681: argument: 
           1682: expr: 
            1683: name: 
             1684: name: init_attr
             1685: operator: ->
             1686: name: recv_cq
      1687: expr_stmt: 
       1688: expr: 
        1689: name: scqe_sz
        1690: operator: =
        1691: call: 
         1692: name: mlx5_ib_get_cqe_size
         1693: argument_list: 
          1694: argument: 
           1695: expr: 
            1696: name: dev
          1697: argument: 
           1698: expr: 
            1699: name: 
             1700: name: init_attr
             1701: operator: ->
             1702: name: send_cq
      1703: if_stmt: 
       1704: if: 
        1705: condition: 
         1706: expr: 
          1707: name: rcqe_sz
          1708: operator: ==
          1709: literal: 128
        1710: block: 
         1711: block_content: 
          1712: expr_stmt: 
           1713: expr: 
            1714: call: 
             1715: name: MLX5_SET
             1716: argument_list: 
              1717: argument: 
               1718: expr: 
                1719: name: qpc
              1720: argument: 
               1721: expr: 
                1722: name: qpc
              1723: argument: 
               1724: expr: 
                1725: name: cs_res
              1726: argument: 
               1727: expr: 
                1728: name: MLX5_RES_SCAT_DATA64_CQE
       1729: else: 
        1730: block: 
         1731: block_content: 
          1732: expr_stmt: 
           1733: expr: 
            1734: call: 
             1735: name: MLX5_SET
             1736: argument_list: 
              1737: argument: 
               1738: expr: 
                1739: name: qpc
              1740: argument: 
               1741: expr: 
                1742: name: qpc
              1743: argument: 
               1744: expr: 
                1745: name: cs_res
              1746: argument: 
               1747: expr: 
                1748: name: MLX5_RES_SCAT_DATA32_CQE
      1749: if_stmt: 
       1750: if: 
        1751: condition: 
         1752: expr: 
          1753: name: 
           1754: name: init_attr
           1755: operator: ->
           1756: name: sq_sig_type
          1757: operator: ==
          1758: name: IB_SIGNAL_ALL_WR
        1759: block: 
         1760: block_content: 
          1761: if_stmt: 
           1762: if: 
            1763: condition: 
             1764: expr: 
              1765: name: scqe_sz
              1766: operator: ==
              1767: literal: 128
            1768: block: 
             1769: block_content: 
              1770: expr_stmt: 
               1771: expr: 
                1772: call: 
                 1773: name: MLX5_SET
                 1774: argument_list: 
                  1775: argument: 
                   1776: expr: 
                    1777: name: qpc
                  1778: argument: 
                   1779: expr: 
                    1780: name: qpc
                  1781: argument: 
                   1782: expr: 
                    1783: name: cs_req
                  1784: argument: 
                   1785: expr: 
                    1786: name: MLX5_REQ_SCAT_DATA64_CQE
           1787: else: 
            1788: block: 
             1789: block_content: 
              1790: expr_stmt: 
               1791: expr: 
                1792: call: 
                 1793: name: MLX5_SET
                 1794: argument_list: 
                  1795: argument: 
                   1796: expr: 
                    1797: name: qpc
                  1798: argument: 
                   1799: expr: 
                    1800: name: qpc
                  1801: argument: 
                   1802: expr: 
                    1803: name: cs_req
                  1804: argument: 
                   1805: expr: 
                    1806: name: MLX5_REQ_SCAT_DATA32_CQE
  1807: if_stmt: 
   1808: if: 
    1809: condition: 
     1810: expr: 
      1811: name: 
       1812: name: qp
       1813: operator: ->
       1814: name: rq
       1815: operator: .
       1816: name: wqe_cnt
    1817: block: 
     1818: block_content: 
      1819: expr_stmt: 
       1820: expr: 
        1821: call: 
         1822: name: MLX5_SET
         1823: argument_list: 
          1824: argument: 
           1825: expr: 
            1826: name: qpc
          1827: argument: 
           1828: expr: 
            1829: name: qpc
          1830: argument: 
           1831: expr: 
            1832: name: log_rq_stride
          1833: argument: 
           1834: expr: 
            1835: name: 
             1836: name: qp
             1837: operator: ->
             1838: name: rq
             1839: operator: .
             1840: name: wqe_shift
            1841: operator: -
            1842: literal: 4
      1843: expr_stmt: 
       1844: expr: 
        1845: call: 
         1846: name: MLX5_SET
         1847: argument_list: 
          1848: argument: 
           1849: expr: 
            1850: name: qpc
          1851: argument: 
           1852: expr: 
            1853: name: qpc
          1854: argument: 
           1855: expr: 
            1856: name: log_rq_size
          1857: argument: 
           1858: expr: 
            1859: call: 
             1860: name: ilog2
             1861: argument_list: 
              1862: argument: 
               1863: expr: 
                1864: name: 
                 1865: name: qp
                 1866: operator: ->
                 1867: name: rq
                 1868: operator: .
                 1869: name: wqe_cnt
  1870: expr_stmt: 
   1871: expr: 
    1872: call: 
     1873: name: MLX5_SET
     1874: argument_list: 
      1875: argument: 
       1876: expr: 
        1877: name: qpc
      1878: argument: 
       1879: expr: 
        1880: name: qpc
      1881: argument: 
       1882: expr: 
        1883: name: rq_type
      1884: argument: 
       1885: expr: 
        1886: call: 
         1887: name: get_rx_type
         1888: argument_list: 
          1889: argument: 
           1890: expr: 
            1891: name: qp
          1892: argument: 
           1893: expr: 
            1894: name: init_attr
  1895: if_stmt: 
   1896: if: 
    1897: condition: 
     1898: expr: 
      1899: name: 
       1900: name: qp
       1901: operator: ->
       1902: name: sq
       1903: operator: .
       1904: name: wqe_cnt
    1905: block: 
     1906: block_content: 
      1907: expr_stmt: 
       1908: expr: 
        1909: call: 
         1910: name: MLX5_SET
         1911: argument_list: 
          1912: argument: 
           1913: expr: 
            1914: name: qpc
          1915: argument: 
           1916: expr: 
            1917: name: qpc
          1918: argument: 
           1919: expr: 
            1920: name: log_sq_size
          1921: argument: 
           1922: expr: 
            1923: call: 
             1924: name: ilog2
             1925: argument_list: 
              1926: argument: 
               1927: expr: 
                1928: name: 
                 1929: name: qp
                 1930: operator: ->
                 1931: name: sq
                 1932: operator: .
                 1933: name: wqe_cnt
   1934: else: 
    1935: block: 
     1936: block_content: 
      1937: expr_stmt: 
       1938: expr: 
        1939: call: 
         1940: name: MLX5_SET
         1941: argument_list: 
          1942: argument: 
           1943: expr: 
            1944: name: qpc
          1945: argument: 
           1946: expr: 
            1947: name: qpc
          1948: argument: 
           1949: expr: 
            1950: name: no_sq
          1951: argument: 
           1952: expr: 
            1953: literal: 1
      1954: if_stmt: 
       1955: if: 
        1956: condition: 
         1957: expr: 
          1958: name: 
           1959: name: init_attr
           1960: operator: ->
           1961: name: srq
          1962: operator: &&
          1963: name: 
           1964: name: init_attr
           1965: operator: ->
           1966: name: srq
           1967: operator: ->
           1968: name: srq_type
          1969: operator: ==
          1970: name: IB_SRQT_TM
        1971: block: 
         1972: block_content: 
          1973: expr_stmt: 
           1974: expr: 
            1975: call: 
             1976: name: MLX5_SET
             1977: argument_list: 
              1978: argument: 
               1979: expr: 
                1980: name: qpc
              1981: argument: 
               1982: expr: 
                1983: name: qpc
              1984: argument: 
               1985: expr: 
                1986: name: offload_type
              1987: argument: 
               1988: expr: 
                1989: name: MLX5_QPC_OFFLOAD_TYPE_RNDV
  1990: comment: /* Set default resources */
  1991: switch: 
   1992: condition: 
    1993: expr: 
     1994: name: 
      1995: name: init_attr
      1996: operator: ->
      1997: name: qp_type
   1998: block: 
    1999: block_content: 
     2000: case: 
      2001: expr: 
       2002: name: IB_QPT_XRC_TGT
     2003: expr_stmt: 
      2004: expr: 
       2005: call: 
        2006: name: MLX5_SET
        2007: argument_list: 
         2008: argument: 
          2009: expr: 
           2010: name: qpc
         2011: argument: 
          2012: expr: 
           2013: name: qpc
         2014: argument: 
          2015: expr: 
           2016: name: cqn_rcv
         2017: argument: 
          2018: expr: 
           2019: call: 
            2020: name: to_mcq
            2021: argument_list: 
             2022: argument: 
              2023: expr: 
               2024: name: 
                2025: name: devr
                2026: operator: ->
                2027: name: c0
           2028: operator: ->
           2029: name: 
            2030: name: mcq
            2031: operator: .
            2032: name: cqn
     2033: expr_stmt: 
      2034: expr: 
       2035: call: 
        2036: name: MLX5_SET
        2037: argument_list: 
         2038: argument: 
          2039: expr: 
           2040: name: qpc
         2041: argument: 
          2042: expr: 
           2043: name: qpc
         2044: argument: 
          2045: expr: 
           2046: name: cqn_snd
         2047: argument: 
          2048: expr: 
           2049: call: 
            2050: name: to_mcq
            2051: argument_list: 
             2052: argument: 
              2053: expr: 
               2054: name: 
                2055: name: devr
                2056: operator: ->
                2057: name: c0
           2058: operator: ->
           2059: name: 
            2060: name: mcq
            2061: operator: .
            2062: name: cqn
     2063: expr_stmt: 
      2064: expr: 
       2065: call: 
        2066: name: MLX5_SET
        2067: argument_list: 
         2068: argument: 
          2069: expr: 
           2070: name: qpc
         2071: argument: 
          2072: expr: 
           2073: name: qpc
         2074: argument: 
          2075: expr: 
           2076: name: srqn_rmpn_xrqn
         2077: argument: 
          2078: expr: 
           2079: call: 
            2080: name: to_msrq
            2081: argument_list: 
             2082: argument: 
              2083: expr: 
               2084: name: 
                2085: name: devr
                2086: operator: ->
                2087: name: s0
           2088: operator: ->
           2089: name: 
            2090: name: msrq
            2091: operator: .
            2092: name: srqn
     2093: expr_stmt: 
      2094: expr: 
       2095: call: 
        2096: name: MLX5_SET
        2097: argument_list: 
         2098: argument: 
          2099: expr: 
           2100: name: qpc
         2101: argument: 
          2102: expr: 
           2103: name: qpc
         2104: argument: 
          2105: expr: 
           2106: name: xrcd
         2107: argument: 
          2108: expr: 
           2109: call: 
            2110: name: to_mxrcd
            2111: argument_list: 
             2112: argument: 
              2113: expr: 
               2114: name: 
                2115: name: init_attr
                2116: operator: ->
                2117: name: xrcd
           2118: operator: ->
           2119: name: xrcdn
     2120: break: 
     2121: case: 
      2122: expr: 
       2123: name: IB_QPT_XRC_INI
     2124: expr_stmt: 
      2125: expr: 
       2126: call: 
        2127: name: MLX5_SET
        2128: argument_list: 
         2129: argument: 
          2130: expr: 
           2131: name: qpc
         2132: argument: 
          2133: expr: 
           2134: name: qpc
         2135: argument: 
          2136: expr: 
           2137: name: cqn_rcv
         2138: argument: 
          2139: expr: 
           2140: call: 
            2141: name: to_mcq
            2142: argument_list: 
             2143: argument: 
              2144: expr: 
               2145: name: 
                2146: name: devr
                2147: operator: ->
                2148: name: c0
           2149: operator: ->
           2150: name: 
            2151: name: mcq
            2152: operator: .
            2153: name: cqn
     2154: expr_stmt: 
      2155: expr: 
       2156: call: 
        2157: name: MLX5_SET
        2158: argument_list: 
         2159: argument: 
          2160: expr: 
           2161: name: qpc
         2162: argument: 
          2163: expr: 
           2164: name: qpc
         2165: argument: 
          2166: expr: 
           2167: name: xrcd
         2168: argument: 
          2169: expr: 
           2170: call: 
            2171: name: to_mxrcd
            2172: argument_list: 
             2173: argument: 
              2174: expr: 
               2175: name: 
                2176: name: devr
                2177: operator: ->
                2178: name: x1
           2179: operator: ->
           2180: name: xrcdn
     2181: expr_stmt: 
      2182: expr: 
       2183: call: 
        2184: name: MLX5_SET
        2185: argument_list: 
         2186: argument: 
          2187: expr: 
           2188: name: qpc
         2189: argument: 
          2190: expr: 
           2191: name: qpc
         2192: argument: 
          2193: expr: 
           2194: name: srqn_rmpn_xrqn
         2195: argument: 
          2196: expr: 
           2197: call: 
            2198: name: to_msrq
            2199: argument_list: 
             2200: argument: 
              2201: expr: 
               2202: name: 
                2203: name: devr
                2204: operator: ->
                2205: name: s0
           2206: operator: ->
           2207: name: 
            2208: name: msrq
            2209: operator: .
            2210: name: srqn
     2211: break: 
     2212: default: 
     2213: if_stmt: 
      2214: if: 
       2215: condition: 
        2216: expr: 
         2217: name: 
          2218: name: init_attr
          2219: operator: ->
          2220: name: srq
       2221: block: 
        2222: block_content: 
         2223: expr_stmt: 
          2224: expr: 
           2225: call: 
            2226: name: MLX5_SET
            2227: argument_list: 
             2228: argument: 
              2229: expr: 
               2230: name: qpc
             2231: argument: 
              2232: expr: 
               2233: name: qpc
             2234: argument: 
              2235: expr: 
               2236: name: xrcd
             2237: argument: 
              2238: expr: 
               2239: call: 
                2240: name: to_mxrcd
                2241: argument_list: 
                 2242: argument: 
                  2243: expr: 
                   2244: name: 
                    2245: name: devr
                    2246: operator: ->
                    2247: name: x0
               2248: operator: ->
               2249: name: xrcdn
         2250: expr_stmt: 
          2251: expr: 
           2252: call: 
            2253: name: MLX5_SET
            2254: argument_list: 
             2255: argument: 
              2256: expr: 
               2257: name: qpc
             2258: argument: 
              2259: expr: 
               2260: name: qpc
             2261: argument: 
              2262: expr: 
               2263: name: srqn_rmpn_xrqn
             2264: argument: 
              2265: expr: 
               2266: call: 
                2267: name: to_msrq
                2268: argument_list: 
                 2269: argument: 
                  2270: expr: 
                   2271: name: 
                    2272: name: init_attr
                    2273: operator: ->
                    2274: name: srq
               2275: operator: ->
               2276: name: 
                2277: name: msrq
                2278: operator: .
                2279: name: srqn
      2280: else: 
       2281: block: 
        2282: block_content: 
         2283: expr_stmt: 
          2284: expr: 
           2285: call: 
            2286: name: MLX5_SET
            2287: argument_list: 
             2288: argument: 
              2289: expr: 
               2290: name: qpc
             2291: argument: 
              2292: expr: 
               2293: name: qpc
             2294: argument: 
              2295: expr: 
               2296: name: xrcd
             2297: argument: 
              2298: expr: 
               2299: call: 
                2300: name: to_mxrcd
                2301: argument_list: 
                 2302: argument: 
                  2303: expr: 
                   2304: name: 
                    2305: name: devr
                    2306: operator: ->
                    2307: name: x1
               2308: operator: ->
               2309: name: xrcdn
         2310: expr_stmt: 
          2311: expr: 
           2312: call: 
            2313: name: MLX5_SET
            2314: argument_list: 
             2315: argument: 
              2316: expr: 
               2317: name: qpc
             2318: argument: 
              2319: expr: 
               2320: name: qpc
             2321: argument: 
              2322: expr: 
               2323: name: srqn_rmpn_xrqn
             2324: argument: 
              2325: expr: 
               2326: call: 
                2327: name: to_msrq
                2328: argument_list: 
                 2329: argument: 
                  2330: expr: 
                   2331: name: 
                    2332: name: devr
                    2333: operator: ->
                    2334: name: s1
               2335: operator: ->
               2336: name: 
                2337: name: msrq
                2338: operator: .
                2339: name: srqn
  2340: if_stmt: 
   2341: if: 
    2342: condition: 
     2343: expr: 
      2344: name: 
       2345: name: init_attr
       2346: operator: ->
       2347: name: send_cq
    2348: block: 
     2349: block_content: 
      2350: expr_stmt: 
       2351: expr: 
        2352: call: 
         2353: name: MLX5_SET
         2354: argument_list: 
          2355: argument: 
           2356: expr: 
            2357: name: qpc
          2358: argument: 
           2359: expr: 
            2360: name: qpc
          2361: argument: 
           2362: expr: 
            2363: name: cqn_snd
          2364: argument: 
           2365: expr: 
            2366: call: 
             2367: name: to_mcq
             2368: argument_list: 
              2369: argument: 
               2370: expr: 
                2371: name: 
                 2372: name: init_attr
                 2373: operator: ->
                 2374: name: send_cq
            2375: operator: ->
            2376: name: 
             2377: name: mcq
             2378: operator: .
             2379: name: cqn
  2380: if_stmt: 
   2381: if: 
    2382: condition: 
     2383: expr: 
      2384: name: 
       2385: name: init_attr
       2386: operator: ->
       2387: name: recv_cq
    2388: block: 
     2389: block_content: 
      2390: expr_stmt: 
       2391: expr: 
        2392: call: 
         2393: name: MLX5_SET
         2394: argument_list: 
          2395: argument: 
           2396: expr: 
            2397: name: qpc
          2398: argument: 
           2399: expr: 
            2400: name: qpc
          2401: argument: 
           2402: expr: 
            2403: name: cqn_rcv
          2404: argument: 
           2405: expr: 
            2406: call: 
             2407: name: to_mcq
             2408: argument_list: 
              2409: argument: 
               2410: expr: 
                2411: name: 
                 2412: name: init_attr
                 2413: operator: ->
                 2414: name: recv_cq
            2415: operator: ->
            2416: name: 
             2417: name: mcq
             2418: operator: .
             2419: name: cqn
  2420: expr_stmt: 
   2421: expr: 
    2422: call: 
     2423: name: MLX5_SET64
     2424: argument_list: 
      2425: argument: 
       2426: expr: 
        2427: name: qpc
      2428: argument: 
       2429: expr: 
        2430: name: qpc
      2431: argument: 
       2432: expr: 
        2433: name: dbr_addr
      2434: argument: 
       2435: expr: 
        2436: name: 
         2437: name: qp
         2438: operator: ->
         2439: name: db
         2440: operator: .
         2441: name: dma
  2442: comment: /* 0xffffff means we ask to work with cqe version 0 */
  2443: if_stmt: 
   2444: if: 
    2445: condition: 
     2446: expr: 
      2447: call: 
       2448: name: MLX5_CAP_GEN
       2449: argument_list: 
        2450: argument: 
         2451: expr: 
          2452: name: mdev
        2453: argument: 
         2454: expr: 
          2455: name: cqe_version
      2456: operator: ==
      2457: name: MLX5_CQE_VERSION_V1
    2458: block: 
     2459: block_content: 
      2460: expr_stmt: 
       2461: expr: 
        2462: call: 
         2463: name: MLX5_SET
         2464: argument_list: 
          2465: argument: 
           2466: expr: 
            2467: name: qpc
          2468: argument: 
           2469: expr: 
            2470: name: qpc
          2471: argument: 
           2472: expr: 
            2473: name: user_index
          2474: argument: 
           2475: expr: 
            2476: name: uidx
  2477: comment: /* we use IB_QP_CREATE_IPOIB_UD_LSO to indicates ipoib qp */
  2478: if_stmt: 
   2479: if: 
    2480: condition: 
     2481: expr: 
      2482: name: 
       2483: name: init_attr
       2484: operator: ->
       2485: name: qp_type
      2486: operator: ==
      2487: name: IB_QPT_UD
      2488: operator: &&
      2489: operator: (
      2490: name: 
       2491: name: init_attr
       2492: operator: ->
       2493: name: create_flags
      2494: operator: &
      2495: name: IB_QP_CREATE_IPOIB_UD_LSO
      2496: operator: )
    2497: block: 
     2498: block_content: 
      2499: expr_stmt: 
       2500: expr: 
        2501: call: 
         2502: name: MLX5_SET
         2503: argument_list: 
          2504: argument: 
           2505: expr: 
            2506: name: qpc
          2507: argument: 
           2508: expr: 
            2509: name: qpc
          2510: argument: 
           2511: expr: 
            2512: name: ulp_stateless_offload_mode
          2513: argument: 
           2514: expr: 
            2515: literal: 1
      2516: expr_stmt: 
       2517: expr: 
        2518: name: 
         2519: name: qp
         2520: operator: ->
         2521: name: flags
        2522: operator: |=
        2523: name: MLX5_IB_QP_LSO
  2524: if_stmt: 
   2525: if: 
    2526: condition: 
     2527: expr: 
      2528: name: 
       2529: name: init_attr
       2530: operator: ->
       2531: name: create_flags
      2532: operator: &
      2533: name: IB_QP_CREATE_PCI_WRITE_END_PADDING
    2534: block: 
     2535: block_content: 
      2536: if_stmt: 
       2537: if: 
        2538: condition: 
         2539: expr: 
          2540: operator: !
          2541: call: 
           2542: name: MLX5_CAP_GEN
           2543: argument_list: 
            2544: argument: 
             2545: expr: 
              2546: name: 
               2547: name: dev
               2548: operator: ->
               2549: name: mdev
            2550: argument: 
             2551: expr: 
              2552: name: end_pad
        2553: block: 
         2554: block_content: 
          2555: expr_stmt: 
           2556: expr: 
            2557: call: 
             2558: name: mlx5_ib_dbg
             2559: argument_list: 
              2560: argument: 
               2561: expr: 
                2562: name: dev
              2563: argument: 
               2564: expr: 
                2565: literal: "scatter end padding is not supported\n"
          2566: expr_stmt: 
           2567: expr: 
            2568: name: err
            2569: operator: =
            2570: operator: -
            2571: name: EOPNOTSUPP
          2572: goto: 
           2573: name: err
       2574: if: 
        2575: condition: 
         2576: expr: 
          2577: name: 
           2578: name: init_attr
           2579: operator: ->
           2580: name: qp_type
          2581: operator: !=
          2582: name: IB_QPT_RAW_PACKET
        2583: block: 
         2584: block_content: 
          2585: expr_stmt: 
           2586: expr: 
            2587: call: 
             2588: name: MLX5_SET
             2589: argument_list: 
              2590: argument: 
               2591: expr: 
                2592: name: qpc
              2593: argument: 
               2594: expr: 
                2595: name: qpc
              2596: argument: 
               2597: expr: 
                2598: name: end_padding_mode
              2599: argument: 
               2600: expr: 
                2601: name: MLX5_WQ_END_PAD_MODE_ALIGN
       2602: else: 
        2603: block: 
         2604: block_content: 
          2605: expr_stmt: 
           2606: expr: 
            2607: name: 
             2608: name: qp
             2609: operator: ->
             2610: name: flags
            2611: operator: |=
            2612: name: MLX5_IB_QP_PCI_WRITE_END_PADDING
  2613: if_stmt: 
   2614: if: 
    2615: condition: 
     2616: expr: 
      2617: name: inlen
      2618: operator: <
      2619: literal: 0
    2620: block: 
     2621: block_content: 
      2622: expr_stmt: 
       2623: expr: 
        2624: name: err
        2625: operator: =
        2626: operator: -
        2627: name: EINVAL
      2628: goto: 
       2629: name: err
  2630: if_stmt: 
   2631: if: 
    2632: condition: 
     2633: expr: 
      2634: name: 
       2635: name: init_attr
       2636: operator: ->
       2637: name: qp_type
      2638: operator: ==
      2639: name: IB_QPT_RAW_PACKET
      2640: operator: ||
      2641: name: 
       2642: name: qp
       2643: operator: ->
       2644: name: flags
      2645: operator: &
      2646: name: MLX5_IB_QP_UNDERLAY
    2647: block: 
     2648: block_content: 
      2649: expr_stmt: 
       2650: expr: 
        2651: name: 
         2652: name: qp
         2653: operator: ->
         2654: name: raw_packet_qp
         2655: operator: .
         2656: name: sq
         2657: operator: .
         2658: name: ubuffer
         2659: operator: .
         2660: name: buf_addr
        2661: operator: =
        2662: name: 
         2663: name: ucmd
         2664: operator: .
         2665: name: sq_buf_addr
      2666: expr_stmt: 
       2667: expr: 
        2668: call: 
         2669: name: raw_packet_qp_copy_info
         2670: argument_list: 
          2671: argument: 
           2672: expr: 
            2673: name: qp
          2674: argument: 
           2675: expr: 
            2676: operator: &
            2677: name: 
             2678: name: qp
             2679: operator: ->
             2680: name: raw_packet_qp
      2681: expr_stmt: 
       2682: expr: 
        2683: name: err
        2684: operator: =
        2685: call: 
         2686: name: create_raw_packet_qp
         2687: argument_list: 
          2688: argument: 
           2689: expr: 
            2690: name: dev
          2691: argument: 
           2692: expr: 
            2693: name: qp
          2694: argument: 
           2695: expr: 
            2696: name: in
          2697: argument: 
           2698: expr: 
            2699: name: inlen
          2700: argument: 
           2701: expr: 
            2702: name: pd
   2703: else: 
    2704: block: 
     2705: block_content: 
      2706: expr_stmt: 
       2707: expr: 
        2708: name: err
        2709: operator: =
        2710: call: 
         2711: name: mlx5_core_create_qp
         2712: argument_list: 
          2713: argument: 
           2714: expr: 
            2715: name: 
             2716: name: dev
             2717: operator: ->
             2718: name: mdev
          2719: argument: 
           2720: expr: 
            2721: operator: &
            2722: name: 
             2723: name: base
             2724: operator: ->
             2725: name: mqp
          2726: argument: 
           2727: expr: 
            2728: name: in
          2729: argument: 
           2730: expr: 
            2731: name: inlen
  2732: if_stmt: 
   2733: if: 
    2734: condition: 
     2735: expr: 
      2736: name: err
    2737: block: 
     2738: block_content: 
      2739: expr_stmt: 
       2740: expr: 
        2741: call: 
         2742: name: mlx5_ib_dbg
         2743: argument_list: 
          2744: argument: 
           2745: expr: 
            2746: name: dev
          2747: argument: 
           2748: expr: 
            2749: literal: "create qp failed\n"
      2750: goto: 
       2751: name: err_create
  2752: expr_stmt: 
   2753: expr: 
    2754: call: 
     2755: name: kvfree
     2756: argument_list: 
      2757: argument: 
       2758: expr: 
        2759: name: in
  2760: expr_stmt: 
   2761: expr: 
    2762: name: 
     2763: name: base
     2764: operator: ->
     2765: name: container_mibqp
    2766: operator: =
    2767: name: qp
  2768: expr_stmt: 
   2769: expr: 
    2770: name: 
     2771: name: base
     2772: operator: ->
     2773: name: mqp
     2774: operator: .
     2775: name: event
    2776: operator: =
    2777: name: mlx5_ib_qp_event
  2778: expr_stmt: 
   2779: expr: 
    2780: call: 
     2781: name: get_cqs
     2782: argument_list: 
      2783: argument: 
       2784: expr: 
        2785: name: 
         2786: name: init_attr
         2787: operator: ->
         2788: name: qp_type
      2789: argument: 
       2790: expr: 
        2791: name: 
         2792: name: init_attr
         2793: operator: ->
         2794: name: send_cq
      2795: argument: 
       2796: expr: 
        2797: name: 
         2798: name: init_attr
         2799: operator: ->
         2800: name: recv_cq
      2801: argument: 
       2802: expr: 
        2803: operator: &
        2804: name: send_cq
      2805: argument: 
       2806: expr: 
        2807: operator: &
        2808: name: recv_cq
  2809: expr_stmt: 
   2810: expr: 
    2811: call: 
     2812: name: spin_lock_irqsave
     2813: argument_list: 
      2814: argument: 
       2815: expr: 
        2816: operator: &
        2817: name: 
         2818: name: dev
         2819: operator: ->
         2820: name: reset_flow_resource_lock
      2821: argument: 
       2822: expr: 
        2823: name: flags
  2824: expr_stmt: 
   2825: expr: 
    2826: call: 
     2827: name: mlx5_ib_lock_cqs
     2828: argument_list: 
      2829: argument: 
       2830: expr: 
        2831: name: send_cq
      2832: argument: 
       2833: expr: 
        2834: name: recv_cq
  2835: comment: /* Maintain device to QPs access, needed for further handling via

----------------------------------------
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: 
      6: name: struct
      7: name: mlx5_ib_resources
     8: modifier: *
    9: name: devr
    10: init: 
     11: expr: 
      12: operator: &
      13: name: 
       14: name: dev
       15: operator: ->
       16: name: devr
  17: decl_stmt: 
   18: decl: 
    19: type: 
     20: name: int
    21: name: inlen
    22: init: 
     23: expr: 
      24: call: 
       25: name: MLX5_ST_SZ_BYTES
       26: argument_list: 
        27: argument: 
         28: expr: 
          29: name: create_qp_in
  30: decl_stmt: 
   31: decl: 
    32: type: 
     33: name: 
      34: name: struct
      35: name: mlx5_core_dev
     36: modifier: *
    37: name: mdev
    38: init: 
     39: expr: 
      40: name: 
       41: name: dev
       42: operator: ->
       43: name: mdev
  44: decl_stmt: 
   45: decl: 
    46: type: 
     47: name: 
      48: name: struct
      49: name: mlx5_ib_create_qp_resp
    50: name: resp
    51: init: 
     52: expr: 
      53: block: 
  54: decl_stmt: 
   55: decl: 
    56: type: 
     57: name: 
      58: name: struct
      59: name: mlx5_ib_cq
     60: modifier: *
    61: name: send_cq
  62: decl_stmt: 
   63: decl: 
    64: type: 
     65: name: 
      66: name: struct
      67: name: mlx5_ib_cq
     68: modifier: *
    69: name: recv_cq
  70: decl_stmt: 
   71: decl: 
    72: type: 
     73: name: unsigned
     74: name: long
    75: name: flags
  76: decl_stmt: 
   77: decl: 
    78: type: 
     79: name: u32
    80: name: uidx
    81: init: 
     82: expr: 
      83: name: MLX5_IB_DEFAULT_UIDX
  84: decl_stmt: 
   85: decl: 
    86: type: 
     87: name: 
      88: name: struct
      89: name: mlx5_ib_create_qp
    90: name: ucmd
  91: decl_stmt: 
   92: decl: 
    93: type: 
     94: name: 
      95: name: struct
      96: name: mlx5_ib_qp_base
     97: modifier: *
    98: name: base
  99: decl_stmt: 
   100: decl: 
    101: type: 
     102: name: int
    103: name: mlx5_st
  104: decl_stmt: 
   105: decl: 
    106: type: 
     107: name: void
     108: modifier: *
    109: name: qpc
  110: decl_stmt: 
   111: decl: 
    112: type: 
     113: name: u32
     114: modifier: *
    115: name: in
  116: decl_stmt: 
   117: decl: 
    118: type: 
     119: name: int
    120: name: err
  121: expr_stmt: 
   122: expr: 
    123: call: 
     124: name: mutex_init
     125: argument_list: 
      126: argument: 
       127: expr: 
        128: operator: &
        129: name: 
         130: name: qp
         131: operator: ->
         132: name: mutex
  133: expr_stmt: 
   134: expr: 
    135: call: 
     136: name: spin_lock_init
     137: argument_list: 
      138: argument: 
       139: expr: 
        140: operator: &
        141: name: 
         142: name: qp
         143: operator: ->
         144: name: sq
         145: operator: .
         146: name: lock
  147: expr_stmt: 
   148: expr: 
    149: call: 
     150: name: spin_lock_init
     151: argument_list: 
      152: argument: 
       153: expr: 
        154: operator: &
        155: name: 
         156: name: qp
         157: operator: ->
         158: name: rq
         159: operator: .
         160: name: lock
  161: expr_stmt: 
   162: expr: 
    163: name: mlx5_st
    164: operator: =
    165: call: 
     166: name: to_mlx5_st
     167: argument_list: 
      168: argument: 
       169: expr: 
        170: name: 
         171: name: init_attr
         172: operator: ->
         173: name: qp_type
  174: if_stmt: 
   175: if: 
    176: condition: 
     177: expr: 
      178: name: mlx5_st
      179: operator: <
      180: literal: 0
    181: block: 
     182: block_content: 
      183: return: 
       184: expr: 
        185: operator: -
        186: name: EINVAL
  187: if_stmt: 
   188: if: 
    189: condition: 
     190: expr: 
      191: name: 
       192: name: init_attr
       193: operator: ->
       194: name: rwq_ind_tbl
    195: block: 
     196: block_content: 
      197: if_stmt: 
       198: if: 
        199: condition: 
         200: expr: 
          201: operator: !
          202: name: udata
        203: block: 
         204: block_content: 
          205: return: 
           206: expr: 
            207: operator: -
            208: name: ENOSYS
      209: expr_stmt: 
       210: expr: 
        211: name: err
        212: operator: =
        213: call: 
         214: name: create_rss_raw_qp_tir
         215: argument_list: 
          216: argument: 
           217: expr: 
            218: name: dev
          219: argument: 
           220: expr: 
            221: name: qp
          222: argument: 
           223: expr: 
            224: name: pd
          225: argument: 
           226: expr: 
            227: name: init_attr
          228: argument: 
           229: expr: 
            230: name: udata
      231: return: 
       232: expr: 
        233: name: err
  234: if_stmt: 
   235: if: 
    236: condition: 
     237: expr: 
      238: name: 
       239: name: init_attr
       240: operator: ->
       241: name: create_flags
      242: operator: &
      243: name: IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK
    244: block: 
     245: block_content: 
      246: if_stmt: 
       247: if: 
        248: condition: 
         249: expr: 
          250: operator: !
          251: call: 
           252: name: MLX5_CAP_GEN
           253: argument_list: 
            254: argument: 
             255: expr: 
              256: name: mdev
            257: argument: 
             258: expr: 
              259: name: block_lb_mc
        260: block: 
         261: block_content: 
          262: expr_stmt: 
           263: expr: 
            264: call: 
             265: name: mlx5_ib_dbg
             266: argument_list: 
              267: argument: 
               268: expr: 
                269: name: dev
              270: argument: 
               271: expr: 
                272: literal: "block multicast loopback isn't supported\n"
          273: return: 
           274: expr: 
            275: operator: -
            276: name: EINVAL
       277: else: 
        278: block: 
         279: block_content: 
          280: expr_stmt: 
           281: expr: 
            282: name: 
             283: name: qp
             284: operator: ->
             285: name: flags
            286: operator: |=
            287: name: MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK
  288: if_stmt: 
   289: if: 
    290: condition: 
     291: expr: 
      292: name: 
       293: name: init_attr
       294: operator: ->
       295: name: create_flags
      296: operator: &
      297: operator: (
      298: name: IB_QP_CREATE_CROSS_CHANNEL
      299: operator: |
      300: name: IB_QP_CREATE_MANAGED_SEND
      301: operator: |
      302: name: IB_QP_CREATE_MANAGED_RECV
      303: operator: )
    304: block: 
     305: block_content: 
      306: if_stmt: 
       307: if: 
        308: condition: 
         309: expr: 
          310: operator: !
          311: call: 
           312: name: MLX5_CAP_GEN
           313: argument_list: 
            314: argument: 
             315: expr: 
              316: name: mdev
            317: argument: 
             318: expr: 
              319: name: cd
        320: block: 
         321: block_content: 
          322: expr_stmt: 
           323: expr: 
            324: call: 
             325: name: mlx5_ib_dbg
             326: argument_list: 
              327: argument: 
               328: expr: 
                329: name: dev
              330: argument: 
               331: expr: 
                332: literal: "cross-channel isn't supported\n"
          333: return: 
           334: expr: 
            335: operator: -
            336: name: EINVAL
      337: if_stmt: 
       338: if: 
        339: condition: 
         340: expr: 
          341: name: 
           342: name: init_attr
           343: operator: ->
           344: name: create_flags
          345: operator: &
          346: name: IB_QP_CREATE_CROSS_CHANNEL
        347: block: 
         348: block_content: 
          349: expr_stmt: 
           350: expr: 
            351: name: 
             352: name: qp
             353: operator: ->
             354: name: flags
            355: operator: |=
            356: name: MLX5_IB_QP_CROSS_CHANNEL
      357: if_stmt: 
       358: if: 
        359: condition: 
         360: expr: 
          361: name: 
           362: name: init_attr
           363: operator: ->
           364: name: create_flags
          365: operator: &
          366: name: IB_QP_CREATE_MANAGED_SEND
        367: block: 
         368: block_content: 
          369: expr_stmt: 
           370: expr: 
            371: name: 
             372: name: qp
             373: operator: ->
             374: name: flags
            375: operator: |=
            376: name: MLX5_IB_QP_MANAGED_SEND
      377: if_stmt: 
       378: if: 
        379: condition: 
         380: expr: 
          381: name: 
           382: name: init_attr
           383: operator: ->
           384: name: create_flags
          385: operator: &
          386: name: IB_QP_CREATE_MANAGED_RECV
        387: block: 
         388: block_content: 
          389: expr_stmt: 
           390: expr: 
            391: name: 
             392: name: qp
             393: operator: ->
             394: name: flags
            395: operator: |=
            396: name: MLX5_IB_QP_MANAGED_RECV
  397: if_stmt: 
   398: if: 
    399: condition: 
     400: expr: 
      401: name: 
       402: name: init_attr
       403: operator: ->
       404: name: qp_type
      405: operator: ==
      406: name: IB_QPT_UD
      407: operator: &&
      408: operator: (
      409: name: 
       410: name: init_attr
       411: operator: ->
       412: name: create_flags
      413: operator: &
      414: name: IB_QP_CREATE_IPOIB_UD_LSO
      415: operator: )
    416: block: 
     417: block_content: 
      418: if_stmt: 
       419: if: 
        420: condition: 
         421: expr: 
          422: operator: !
          423: call: 
           424: name: MLX5_CAP_GEN
           425: argument_list: 
            426: argument: 
             427: expr: 
              428: name: mdev
            429: argument: 
             430: expr: 
              431: name: ipoib_basic_offloads
        432: block: 
         433: block_content: 
          434: expr_stmt: 
           435: expr: 
            436: call: 
             437: name: mlx5_ib_dbg
             438: argument_list: 
              439: argument: 
               440: expr: 
                441: name: dev
              442: argument: 
               443: expr: 
                444: literal: "ipoib UD lso qp isn't supported\n"
          445: return: 
           446: expr: 
            447: operator: -
            448: name: EOPNOTSUPP
  449: if_stmt: 
   450: if: 
    451: condition: 
     452: expr: 
      453: name: 
       454: name: init_attr
       455: operator: ->
       456: name: create_flags
      457: operator: &
      458: name: IB_QP_CREATE_SCATTER_FCS
    459: block: 
     460: block_content: 
      461: if_stmt: 
       462: if: 
        463: condition: 
         464: expr: 
          465: name: 
           466: name: init_attr
           467: operator: ->
           468: name: qp_type
          469: operator: !=
          470: name: IB_QPT_RAW_PACKET
        471: block: 
         472: block_content: 
          473: expr_stmt: 
           474: expr: 
            475: call: 
             476: name: mlx5_ib_dbg
             477: argument_list: 
              478: argument: 
               479: expr: 
                480: name: dev
              481: argument: 
               482: expr: 
                483: literal: "Scatter FCS is supported only for Raw Packet QPs"
          484: return: 
           485: expr: 
            486: operator: -
            487: name: EOPNOTSUPP
      488: if_stmt: 
       489: if: 
        490: condition: 
         491: expr: 
          492: operator: !
          493: call: 
           494: name: MLX5_CAP_GEN
           495: argument_list: 
            496: argument: 
             497: expr: 
              498: name: 
               499: name: dev
               500: operator: ->
               501: name: mdev
            502: argument: 
             503: expr: 
              504: name: eth_net_offloads
          505: operator: ||
          506: operator: !
          507: call: 
           508: name: MLX5_CAP_ETH
           509: argument_list: 
            510: argument: 
             511: expr: 
              512: name: 
               513: name: dev
               514: operator: ->
               515: name: mdev
            516: argument: 
             517: expr: 
              518: name: scatter_fcs
        519: block: 
         520: block_content: 
          521: expr_stmt: 
           522: expr: 
            523: call: 
             524: name: mlx5_ib_dbg
             525: argument_list: 
              526: argument: 
               527: expr: 
                528: name: dev
              529: argument: 
               530: expr: 
                531: literal: "Scatter FCS isn't supported\n"
          532: return: 
           533: expr: 
            534: operator: -
            535: name: EOPNOTSUPP
      536: expr_stmt: 
       537: expr: 
        538: name: 
         539: name: qp
         540: operator: ->
         541: name: flags
        542: operator: |=
        543: name: MLX5_IB_QP_CAP_SCATTER_FCS
  544: if_stmt: 
   545: if: 
    546: condition: 
     547: expr: 
      548: name: 
       549: name: init_attr
       550: operator: ->
       551: name: sq_sig_type
      552: operator: ==
      553: name: IB_SIGNAL_ALL_WR
    554: block: 
     555: block_content: 
      556: expr_stmt: 
       557: expr: 
        558: name: 
         559: name: qp
         560: operator: ->
         561: name: sq_signal_bits
        562: operator: =
        563: name: MLX5_WQE_CTRL_CQ_UPDATE
  564: if_stmt: 
   565: if: 
    566: condition: 
     567: expr: 
      568: name: 
       569: name: init_attr
       570: operator: ->
       571: name: create_flags
      572: operator: &
      573: name: IB_QP_CREATE_CVLAN_STRIPPING
    574: block: 
     575: block_content: 
      576: if_stmt: 
       577: if: 
        578: condition: 
         579: expr: 
          580: operator: !
          581: operator: (
          582: call: 
           583: name: MLX5_CAP_GEN
           584: argument_list: 
            585: argument: 
             586: expr: 
              587: name: 
               588: name: dev
               589: operator: ->
               590: name: mdev
            591: argument: 
             592: expr: 
              593: name: eth_net_offloads
          594: operator: &&
          595: call: 
           596: name: MLX5_CAP_ETH
           597: argument_list: 
            598: argument: 
             599: expr: 
              600: name: 
               601: name: dev
               602: operator: ->
               603: name: mdev
            604: argument: 
             605: expr: 
              606: name: vlan_cap
          607: operator: )
          608: operator: ||
          609: operator: (
          610: name: 
           611: name: init_attr
           612: operator: ->
           613: name: qp_type
          614: operator: !=
          615: name: IB_QPT_RAW_PACKET
          616: operator: )
        617: block: 
         618: block_content: 
          619: return: 
           620: expr: 
            621: operator: -
            622: name: EOPNOTSUPP
      623: expr_stmt: 
       624: expr: 
        625: name: 
         626: name: qp
         627: operator: ->
         628: name: flags
        629: operator: |=
        630: name: MLX5_IB_QP_CVLAN_STRIPPING
  631: if_stmt: 
   632: if: 
    633: condition: 
     634: expr: 
      635: name: pd
      636: operator: &&
      637: name: 
       638: name: pd
       639: operator: ->
       640: name: uobject
    641: block: 
     642: block_content: 
      643: if_stmt: 
       644: if: 
        645: condition: 
         646: expr: 
          647: call: 
           648: name: ib_copy_from_udata
           649: argument_list: 
            650: argument: 
             651: expr: 
              652: operator: &
              653: name: ucmd
            654: argument: 
             655: expr: 
              656: name: udata
            657: argument: 
             658: expr: 
              659: sizeof: 
               660: argument_list: 
                661: argument: 
                 662: expr: 
                  663: name: ucmd
        664: block: 
         665: block_content: 
          666: expr_stmt: 
           667: expr: 
            668: call: 
             669: name: mlx5_ib_dbg
             670: argument_list: 
              671: argument: 
               672: expr: 
                673: name: dev
              674: argument: 
               675: expr: 
                676: literal: "copy failed\n"
          677: return: 
           678: expr: 
            679: operator: -
            680: name: EFAULT
      681: expr_stmt: 
       682: expr: 
        683: name: err
        684: operator: =
        685: call: 
         686: name: get_qp_user_index
         687: argument_list: 
          688: argument: 
           689: expr: 
            690: call: 
             691: name: to_mucontext
             692: argument_list: 
              693: argument: 
               694: expr: 
                695: name: 
                 696: name: pd
                 697: operator: ->
                 698: name: uobject
                 699: operator: ->
                 700: name: context
          701: argument: 
           702: expr: 
            703: operator: &
            704: name: ucmd
          705: argument: 
           706: expr: 
            707: name: 
             708: name: udata
             709: operator: ->
             710: name: inlen
          711: argument: 
           712: expr: 
            713: operator: &
            714: name: uidx
      715: if_stmt: 
       716: if: 
        717: condition: 
         718: expr: 
          719: name: err
        720: block: 
         721: block_content: 
          722: return: 
           723: expr: 
            724: name: err
      725: expr_stmt: 
       726: expr: 
        727: name: 
         728: name: qp
         729: operator: ->
         730: name: wq_sig
        731: operator: =
        732: operator: !
        733: operator: !
        734: operator: (
        735: name: 
         736: name: ucmd
         737: operator: .
         738: name: flags
        739: operator: &
        740: name: MLX5_QP_FLAG_SIGNATURE
        741: operator: )
      742: expr_stmt: 
       743: expr: 
        744: name: 
         745: name: qp
         746: operator: ->
         747: name: scat_cqe
        748: operator: =
        749: operator: !
        750: operator: !
        751: operator: (
        752: name: 
         753: name: ucmd
         754: operator: .
         755: name: flags
        756: operator: &
        757: name: MLX5_QP_FLAG_SCATTER_CQE
        758: operator: )
      759: if_stmt: 
       760: if: 
        761: condition: 
         762: expr: 
          763: name: 
           764: name: ucmd
           765: operator: .
           766: name: flags
          767: operator: &
          768: name: MLX5_QP_FLAG_TUNNEL_OFFLOADS
        769: block: 
         770: block_content: 
          771: if_stmt: 
           772: if: 
            773: condition: 
             774: expr: 
              775: name: 
               776: name: init_attr
               777: operator: ->
               778: name: qp_type
              779: operator: !=
              780: name: IB_QPT_RAW_PACKET
              781: operator: ||
              782: operator: !
              783: call: 
               784: name: tunnel_offload_supported
               785: argument_list: 
                786: argument: 
                 787: expr: 
                  788: name: mdev
            789: block: 
             790: block_content: 
              791: expr_stmt: 
               792: expr: 
                793: call: 
                 794: name: mlx5_ib_dbg
                 795: argument_list: 
                  796: argument: 
                   797: expr: 
                    798: name: dev
                  799: argument: 
                   800: expr: 
                    801: literal: "Tunnel offload isn't supported\n"
              802: return: 
               803: expr: 
                804: operator: -
                805: name: EOPNOTSUPP
          806: expr_stmt: 
           807: expr: 
            808: name: 
             809: name: qp
             810: operator: ->
             811: name: tunnel_offload_en
            812: operator: =
            813: literal: true
      814: if_stmt: 
       815: if: 
        816: condition: 
         817: expr: 
          818: name: 
           819: name: init_attr
           820: operator: ->
           821: name: create_flags
          822: operator: &
          823: name: IB_QP_CREATE_SOURCE_QPN
        824: block: 
         825: block_content: 
          826: if_stmt: 
           827: if: 
            828: condition: 
             829: expr: 
              830: name: 
               831: name: init_attr
               832: operator: ->
               833: name: qp_type
              834: operator: !=
              835: name: IB_QPT_UD
              836: operator: ||
              837: operator: (
              838: call: 
               839: name: MLX5_CAP_GEN
               840: argument_list: 
                841: argument: 
                 842: expr: 
                  843: name: 
                   844: name: dev
                   845: operator: ->
                   846: name: mdev
                847: argument: 
                 848: expr: 
                  849: name: port_type
              850: operator: !=
              851: name: MLX5_CAP_PORT_TYPE_IB
              852: operator: )
              853: operator: ||
              854: operator: !
              855: call: 
               856: name: mlx5_get_flow_namespace
               857: argument_list: 
                858: argument: 
                 859: expr: 
                  860: name: 
                   861: name: dev
                   862: operator: ->
                   863: name: mdev
                864: argument: 
                 865: expr: 
                  866: name: MLX5_FLOW_NAMESPACE_BYPASS
            867: block: 
             868: block_content: 
              869: expr_stmt: 
               870: expr: 
                871: call: 
                 872: name: mlx5_ib_dbg
                 873: argument_list: 
                  874: argument: 
                   875: expr: 
                    876: name: dev
                  877: argument: 
                   878: expr: 
                    879: literal: "Source QP option isn't supported\n"
              880: return: 
               881: expr: 
                882: operator: -
                883: name: EOPNOTSUPP
          884: expr_stmt: 
           885: expr: 
            886: name: 
             887: name: qp
             888: operator: ->
             889: name: flags
            890: operator: |=
            891: name: MLX5_IB_QP_UNDERLAY
          892: expr_stmt: 
           893: expr: 
            894: name: 
             895: name: qp
             896: operator: ->
             897: name: underlay_qpn
            898: operator: =
            899: name: 
             900: name: init_attr
             901: operator: ->
             902: name: source_qpn
   903: else: 
    904: block: 
     905: block_content: 
      906: expr_stmt: 
       907: expr: 
        908: name: 
         909: name: qp
         910: operator: ->
         911: name: wq_sig
        912: operator: =
        913: operator: !
        914: operator: !
        915: name: wq_signature
  916: expr_stmt: 
   917: expr: 
    918: name: base
    919: operator: =
    920: ternary: 
     921: condition: 
      922: expr: 
       923: operator: (
       924: name: 
        925: name: init_attr
        926: operator: ->
        927: name: qp_type
       928: operator: ==
       929: name: IB_QPT_RAW_PACKET
       930: operator: ||
       931: name: 
        932: name: qp
        933: operator: ->
        934: name: flags
       935: operator: &
       936: name: MLX5_IB_QP_UNDERLAY
       937: operator: )
     938: then: 
      939: expr: 
       940: operator: &
       941: name: 
        942: name: qp
        943: operator: ->
        944: name: raw_packet_qp
        945: operator: .
        946: name: rq
        947: operator: .
        948: name: base
     949: else: 
      950: expr: 
       951: operator: &
       952: name: 
        953: name: qp
        954: operator: ->
        955: name: trans_qp
        956: operator: .
        957: name: base
  958: expr_stmt: 
   959: expr: 
    960: name: 
     961: name: qp
     962: operator: ->
     963: name: has_rq
    964: operator: =
    965: call: 
     966: name: qp_has_rq
     967: argument_list: 
      968: argument: 
       969: expr: 
        970: name: init_attr
  971: expr_stmt: 
   972: expr: 
    973: name: err
    974: operator: =
    975: call: 
     976: name: set_rq_size
     977: argument_list: 
      978: argument: 
       979: expr: 
        980: name: dev
      981: argument: 
       982: expr: 
        983: operator: &
        984: name: 
         985: name: init_attr
         986: operator: ->
         987: name: cap
      988: argument: 
       989: expr: 
        990: name: 
         991: name: qp
         992: operator: ->
         993: name: has_rq
      994: argument: 
       995: expr: 
        996: name: qp
      997: argument: 
       998: expr: 
        999: ternary: 
         1000: condition: 
          1001: expr: 
           1002: operator: (
           1003: name: pd
           1004: operator: &&
           1005: name: 
            1006: name: pd
            1007: operator: ->
            1008: name: uobject
           1009: operator: )
         1010: then: 
          1011: expr: 
           1012: operator: &
           1013: name: ucmd
         1014: else: 
          1015: expr: 
           1016: name: NULL
  1017: if_stmt: 
   1018: if: 
    1019: condition: 
     1020: expr: 
      1021: name: err
    1022: block: 
     1023: block_content: 
      1024: expr_stmt: 
       1025: expr: 
        1026: call: 
         1027: name: mlx5_ib_dbg
         1028: argument_list: 
          1029: argument: 
           1030: expr: 
            1031: name: dev
          1032: argument: 
           1033: expr: 
            1034: literal: "err %d\n"
          1035: argument: 
           1036: expr: 
            1037: name: err
      1038: return: 
       1039: expr: 
        1040: name: err
  1041: if_stmt: 
   1042: if: 
    1043: condition: 
     1044: expr: 
      1045: name: pd
    1046: block: 
     1047: block_content: 
      1048: if_stmt: 
       1049: if: 
        1050: condition: 
         1051: expr: 
          1052: name: 
           1053: name: pd
           1054: operator: ->
           1055: name: uobject
        1056: block: 
         1057: block_content: 
          1058: decl_stmt: 
           1059: decl: 
            1060: type: 
             1061: name: __u32
            1062: name: max_wqes
            1063: init: 
             1064: expr: 
              1065: literal: 1
              1066: operator: <<
              1067: call: 
               1068: name: MLX5_CAP_GEN
               1069: argument_list: 
                1070: argument: 
                 1071: expr: 
                  1072: name: mdev
                1073: argument: 
                 1074: expr: 
                  1075: name: log_max_qp_sz
          1076: expr_stmt: 
           1077: expr: 
            1078: call: 
             1079: name: mlx5_ib_dbg
             1080: argument_list: 
              1081: argument: 
               1082: expr: 
                1083: name: dev
              1084: argument: 
               1085: expr: 
                1086: literal: "requested sq_wqe_count (%d)\n"
              1087: argument: 
               1088: expr: 
                1089: name: 
                 1090: name: ucmd
                 1091: operator: .
                 1092: name: sq_wqe_count
          1093: if_stmt: 
           1094: if: 
            1095: condition: 
             1096: expr: 
              1097: name: 
               1098: name: ucmd
               1099: operator: .
               1100: name: rq_wqe_shift
              1101: operator: !=
              1102: name: 
               1103: name: qp
               1104: operator: ->
               1105: name: rq
               1106: operator: .
               1107: name: wqe_shift
              1108: operator: ||
              1109: name: 
               1110: name: ucmd
               1111: operator: .
               1112: name: rq_wqe_count
              1113: operator: !=
              1114: name: 
               1115: name: qp
               1116: operator: ->
               1117: name: rq
               1118: operator: .
               1119: name: wqe_cnt
            1120: block: 
             1121: block_content: 
              1122: expr_stmt: 
               1123: expr: 
                1124: call: 
                 1125: name: mlx5_ib_dbg
                 1126: argument_list: 
                  1127: argument: 
                   1128: expr: 
                    1129: name: dev
                  1130: argument: 
                   1131: expr: 
                    1132: literal: "invalid rq params\n"
              1133: return: 
               1134: expr: 
                1135: operator: -
                1136: name: EINVAL
          1137: if_stmt: 
           1138: if: 
            1139: condition: 
             1140: expr: 
              1141: name: 
               1142: name: ucmd
               1143: operator: .
               1144: name: sq_wqe_count
              1145: operator: >
              1146: name: max_wqes
            1147: block: 
             1148: block_content: 
              1149: expr_stmt: 
               1150: expr: 
                1151: call: 
                 1152: name: mlx5_ib_dbg
                 1153: argument_list: 
                  1154: argument: 
                   1155: expr: 
                    1156: name: dev
                  1157: argument: 
                   1158: expr: 
                    1159: literal: "requested sq_wqe_count (%d)>max allowed (%d)\n"
                  1160: argument: 
                   1161: expr: 
                    1162: name: 
                     1163: name: ucmd
                     1164: operator: .
                     1165: name: sq_wqe_count
                  1166: argument: 
                   1167: expr: 
                    1168: name: max_wqes
              1169: return: 
               1170: expr: 
                1171: operator: -
                1172: name: EINVAL
          1173: if_stmt: 
           1174: if: 
            1175: condition: 
             1176: expr: 
              1177: name: 
               1178: name: init_attr
               1179: operator: ->
               1180: name: create_flags
              1181: operator: &
              1182: call: 
               1183: name: mlx5_ib_create_qp_sqpn_qp1
               1184: argument_list: 
            1185: block: 
             1186: block_content: 
              1187: expr_stmt: 
               1188: expr: 
                1189: call: 
                 1190: name: mlx5_ib_dbg
                 1191: argument_list: 
                  1192: argument: 
                   1193: expr: 
                    1194: name: dev
                  1195: argument: 
                   1196: expr: 
                    1197: literal: "user-space is not allowed to create UD QPs spoofing as QP1\n"
              1198: return: 
               1199: expr: 
                1200: operator: -
                1201: name: EINVAL
          1202: expr_stmt: 
           1203: expr: 
            1204: name: err
            1205: operator: =
            1206: call: 
             1207: name: create_user_qp
             1208: argument_list: 
              1209: argument: 
               1210: expr: 
                1211: name: dev
              1212: argument: 
               1213: expr: 
                1214: name: pd
              1215: argument: 
               1216: expr: 
                1217: name: qp
              1218: argument: 
               1219: expr: 
                1220: name: udata
              1221: argument: 
               1222: expr: 
                1223: name: init_attr
              1224: argument: 
               1225: expr: 
                1226: operator: &
                1227: name: in
              1228: argument: 
               1229: expr: 
                1230: operator: &
                1231: name: resp
              1232: argument: 
               1233: expr: 
                1234: operator: &
                1235: name: inlen
              1236: argument: 
               1237: expr: 
                1238: name: base
          1239: if_stmt: 
           1240: if: 
            1241: condition: 
             1242: expr: 
              1243: name: err
            1244: block: 
             1245: block_content: 
              1246: expr_stmt: 
               1247: expr: 
                1248: call: 
                 1249: name: mlx5_ib_dbg
                 1250: argument_list: 
                  1251: argument: 
                   1252: expr: 
                    1253: name: dev
                  1254: argument: 
                   1255: expr: 
                    1256: literal: "err %d\n"
                  1257: argument: 
                   1258: expr: 
                    1259: name: err
       1260: else: 
        1261: block: 
         1262: block_content: 
          1263: expr_stmt: 
           1264: expr: 
            1265: name: err
            1266: operator: =
            1267: call: 
             1268: name: create_kernel_qp
             1269: argument_list: 
              1270: argument: 
               1271: expr: 
                1272: name: dev
              1273: argument: 
               1274: expr: 
                1275: name: init_attr
              1276: argument: 
               1277: expr: 
                1278: name: qp
              1279: argument: 
               1280: expr: 
                1281: operator: &
                1282: name: in
              1283: argument: 
               1284: expr: 
                1285: operator: &
                1286: name: inlen
              1287: argument: 
               1288: expr: 
                1289: name: base
          1290: if_stmt: 
           1291: if: 
            1292: condition: 
             1293: expr: 
              1294: name: err
            1295: block: 
             1296: block_content: 
              1297: expr_stmt: 
               1298: expr: 
                1299: call: 
                 1300: name: mlx5_ib_dbg
                 1301: argument_list: 
                  1302: argument: 
                   1303: expr: 
                    1304: name: dev
                  1305: argument: 
                   1306: expr: 
                    1307: literal: "err %d\n"
                  1308: argument: 
                   1309: expr: 
                    1310: name: err
      1311: if_stmt: 
       1312: if: 
        1313: condition: 
         1314: expr: 
          1315: name: err
        1316: block: 
         1317: block_content: 
          1318: return: 
           1319: expr: 
            1320: name: err
   1321: else: 
    1322: block: 
     1323: block_content: 
      1324: expr_stmt: 
       1325: expr: 
        1326: name: in
        1327: operator: =
        1328: call: 
         1329: name: kvzalloc
         1330: argument_list: 
          1331: argument: 
           1332: expr: 
            1333: name: inlen
          1334: argument: 
           1335: expr: 
            1336: name: GFP_KERNEL
      1337: if_stmt: 
       1338: if: 
        1339: condition: 
         1340: expr: 
          1341: operator: !
          1342: name: in
        1343: block: 
         1344: block_content: 
          1345: return: 
           1346: expr: 
            1347: operator: -
            1348: name: ENOMEM
      1349: expr_stmt: 
       1350: expr: 
        1351: name: 
         1352: name: qp
         1353: operator: ->
         1354: name: create_type
        1355: operator: =
        1356: name: MLX5_QP_EMPTY
  1357: if_stmt: 
   1358: if: 
    1359: condition: 
     1360: expr: 
      1361: call: 
       1362: name: is_sqp
       1363: argument_list: 
        1364: argument: 
         1365: expr: 
          1366: name: 
           1367: name: init_attr
           1368: operator: ->
           1369: name: qp_type
    1370: block: 
     1371: block_content: 
      1372: expr_stmt: 
       1373: expr: 
        1374: name: 
         1375: name: qp
         1376: operator: ->
         1377: name: port
        1378: operator: =
        1379: name: 
         1380: name: init_attr
         1381: operator: ->
         1382: name: port_num
  1383: expr_stmt: 
   1384: expr: 
    1385: name: qpc
    1386: operator: =
    1387: call: 
     1388: name: MLX5_ADDR_OF
     1389: argument_list: 
      1390: argument: 
       1391: expr: 
        1392: name: create_qp_in
      1393: argument: 
       1394: expr: 
        1395: name: in
      1396: argument: 
       1397: expr: 
        1398: name: qpc
  1399: expr_stmt: 
   1400: expr: 
    1401: call: 
     1402: name: MLX5_SET
     1403: argument_list: 
      1404: argument: 
       1405: expr: 
        1406: name: qpc
      1407: argument: 
       1408: expr: 
        1409: name: qpc
      1410: argument: 
       1411: expr: 
        1412: name: st
      1413: argument: 
       1414: expr: 
        1415: name: mlx5_st
  1416: expr_stmt: 
   1417: expr: 
    1418: call: 
     1419: name: MLX5_SET
     1420: argument_list: 
      1421: argument: 
       1422: expr: 
        1423: name: qpc
      1424: argument: 
       1425: expr: 
        1426: name: qpc
      1427: argument: 
       1428: expr: 
        1429: name: pm_state
      1430: argument: 
       1431: expr: 
        1432: name: MLX5_QP_PM_MIGRATED
  1433: if_stmt: 
   1434: if: 
    1435: condition: 
     1436: expr: 
      1437: name: 
       1438: name: init_attr
       1439: operator: ->
       1440: name: qp_type
      1441: operator: !=
      1442: name: MLX5_IB_QPT_REG_UMR
    1443: block: 
     1444: block_content: 
      1445: expr_stmt: 
       1446: expr: 
        1447: call: 
         1448: name: MLX5_SET
         1449: argument_list: 
          1450: argument: 
           1451: expr: 
            1452: name: qpc
          1453: argument: 
           1454: expr: 
            1455: name: qpc
          1456: argument: 
           1457: expr: 
            1458: name: pd
          1459: argument: 
           1460: expr: 
            1461: call: 
             1462: name: to_mpd
             1463: argument_list: 
              1464: argument: 
               1465: expr: 
                1466: ternary: 
                 1467: condition: 
                  1468: expr: 
                   1469: name: pd
                 1470: then: 
                  1471: expr: 
                   1472: name: pd
                 1473: else: 
                  1474: expr: 
                   1475: name: 
                    1476: name: devr
                    1477: operator: ->
                    1478: name: p0
            1479: operator: ->
            1480: name: pdn
   1481: else: 
    1482: block: 
     1483: block_content: 
      1484: expr_stmt: 
       1485: expr: 
        1486: call: 
         1487: name: MLX5_SET
         1488: argument_list: 
          1489: argument: 
           1490: expr: 
            1491: name: qpc
          1492: argument: 
           1493: expr: 
            1494: name: qpc
          1495: argument: 
           1496: expr: 
            1497: name: latency_sensitive
          1498: argument: 
           1499: expr: 
            1500: literal: 1
  1501: if_stmt: 
   1502: if: 
    1503: condition: 
     1504: expr: 
      1505: name: 
       1506: name: qp
       1507: operator: ->
       1508: name: wq_sig
    1509: block: 
     1510: block_content: 
      1511: expr_stmt: 
       1512: expr: 
        1513: call: 
         1514: name: MLX5_SET
         1515: argument_list: 
          1516: argument: 
           1517: expr: 
            1518: name: qpc
          1519: argument: 
           1520: expr: 
            1521: name: qpc
          1522: argument: 
           1523: expr: 
            1524: name: wq_signature
          1525: argument: 
           1526: expr: 
            1527: literal: 1
  1528: if_stmt: 
   1529: if: 
    1530: condition: 
     1531: expr: 
      1532: name: 
       1533: name: qp
       1534: operator: ->
       1535: name: flags
      1536: operator: &
      1537: name: MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK
    1538: block: 
     1539: block_content: 
      1540: expr_stmt: 
       1541: expr: 
        1542: call: 
         1543: name: MLX5_SET
         1544: argument_list: 
          1545: argument: 
           1546: expr: 
            1547: name: qpc
          1548: argument: 
           1549: expr: 
            1550: name: qpc
          1551: argument: 
           1552: expr: 
            1553: name: block_lb_mc
          1554: argument: 
           1555: expr: 
            1556: literal: 1
  1557: if_stmt: 
   1558: if: 
    1559: condition: 
     1560: expr: 
      1561: name: 
       1562: name: qp
       1563: operator: ->
       1564: name: flags
      1565: operator: &
      1566: name: MLX5_IB_QP_CROSS_CHANNEL
    1567: block: 
     1568: block_content: 
      1569: expr_stmt: 
       1570: expr: 
        1571: call: 
         1572: name: MLX5_SET
         1573: argument_list: 
          1574: argument: 
           1575: expr: 
            1576: name: qpc
          1577: argument: 
           1578: expr: 
            1579: name: qpc
          1580: argument: 
           1581: expr: 
            1582: name: cd_master
          1583: argument: 
           1584: expr: 
            1585: literal: 1
  1586: if_stmt: 
   1587: if: 
    1588: condition: 
     1589: expr: 
      1590: name: 
       1591: name: qp
       1592: operator: ->
       1593: name: flags
      1594: operator: &
      1595: name: MLX5_IB_QP_MANAGED_SEND
    1596: block: 
     1597: block_content: 
      1598: expr_stmt: 
       1599: expr: 
        1600: call: 
         1601: name: MLX5_SET
         1602: argument_list: 
          1603: argument: 
           1604: expr: 
            1605: name: qpc
          1606: argument: 
           1607: expr: 
            1608: name: qpc
          1609: argument: 
           1610: expr: 
            1611: name: cd_slave_send
          1612: argument: 
           1613: expr: 
            1614: literal: 1
  1615: if_stmt: 
   1616: if: 
    1617: condition: 
     1618: expr: 
      1619: name: 
       1620: name: qp
       1621: operator: ->
       1622: name: flags
      1623: operator: &
      1624: name: MLX5_IB_QP_MANAGED_RECV
    1625: block: 
     1626: block_content: 
      1627: expr_stmt: 
       1628: expr: 
        1629: call: 
         1630: name: MLX5_SET
         1631: argument_list: 
          1632: argument: 
           1633: expr: 
            1634: name: qpc
          1635: argument: 
           1636: expr: 
            1637: name: qpc
          1638: argument: 
           1639: expr: 
            1640: name: cd_slave_receive
          1641: argument: 
           1642: expr: 
            1643: literal: 1
  1644: if_stmt: 
   1645: if: 
    1646: condition: 
     1647: expr: 
      1648: name: 
       1649: name: qp
       1650: operator: ->
       1651: name: scat_cqe
      1652: operator: &&
      1653: call: 
       1654: name: is_connected
       1655: argument_list: 
        1656: argument: 
         1657: expr: 
          1658: name: 
           1659: name: init_attr
           1660: operator: ->
           1661: name: qp_type
    1662: block: 
     1663: block_content: 
      1664: decl_stmt: 
       1665: decl: 
        1666: type: 
         1667: name: int
        1668: name: rcqe_sz
      1669: decl_stmt: 
       1670: decl: 
        1671: type: 
         1672: name: int
        1673: name: scqe_sz
      1674: expr_stmt: 
       1675: expr: 
        1676: name: rcqe_sz
        1677: operator: =
        1678: call: 
         1679: name: mlx5_ib_get_cqe_size
         1680: argument_list: 
          1681: argument: 
           1682: expr: 
            1683: name: dev
          1684: argument: 
           1685: expr: 
            1686: name: 
             1687: name: init_attr
             1688: operator: ->
             1689: name: recv_cq
      1690: expr_stmt: 
       1691: expr: 
        1692: name: scqe_sz
        1693: operator: =
        1694: call: 
         1695: name: mlx5_ib_get_cqe_size
         1696: argument_list: 
          1697: argument: 
           1698: expr: 
            1699: name: dev
          1700: argument: 
           1701: expr: 
            1702: name: 
             1703: name: init_attr
             1704: operator: ->
             1705: name: send_cq
      1706: if_stmt: 
       1707: if: 
        1708: condition: 
         1709: expr: 
          1710: name: rcqe_sz
          1711: operator: ==
          1712: literal: 128
        1713: block: 
         1714: block_content: 
          1715: expr_stmt: 
           1716: expr: 
            1717: call: 
             1718: name: MLX5_SET
             1719: argument_list: 
              1720: argument: 
               1721: expr: 
                1722: name: qpc
              1723: argument: 
               1724: expr: 
                1725: name: qpc
              1726: argument: 
               1727: expr: 
                1728: name: cs_res
              1729: argument: 
               1730: expr: 
                1731: name: MLX5_RES_SCAT_DATA64_CQE
       1732: else: 
        1733: block: 
         1734: block_content: 
          1735: expr_stmt: 
           1736: expr: 
            1737: call: 
             1738: name: MLX5_SET
             1739: argument_list: 
              1740: argument: 
               1741: expr: 
                1742: name: qpc
              1743: argument: 
               1744: expr: 
                1745: name: qpc
              1746: argument: 
               1747: expr: 
                1748: name: cs_res
              1749: argument: 
               1750: expr: 
                1751: name: MLX5_RES_SCAT_DATA32_CQE
      1752: if_stmt: 
       1753: if: 
        1754: condition: 
         1755: expr: 
          1756: name: 
           1757: name: init_attr
           1758: operator: ->
           1759: name: sq_sig_type
          1760: operator: ==
          1761: name: IB_SIGNAL_ALL_WR
        1762: block: 
         1763: block_content: 
          1764: if_stmt: 
           1765: if: 
            1766: condition: 
             1767: expr: 
              1768: name: scqe_sz
              1769: operator: ==
              1770: literal: 128
            1771: block: 
             1772: block_content: 
              1773: expr_stmt: 
               1774: expr: 
                1775: call: 
                 1776: name: MLX5_SET
                 1777: argument_list: 
                  1778: argument: 
                   1779: expr: 
                    1780: name: qpc
                  1781: argument: 
                   1782: expr: 
                    1783: name: qpc
                  1784: argument: 
                   1785: expr: 
                    1786: name: cs_req
                  1787: argument: 
                   1788: expr: 
                    1789: name: MLX5_REQ_SCAT_DATA64_CQE
           1790: else: 
            1791: block: 
             1792: block_content: 
              1793: expr_stmt: 
               1794: expr: 
                1795: call: 
                 1796: name: MLX5_SET
                 1797: argument_list: 
                  1798: argument: 
                   1799: expr: 
                    1800: name: qpc
                  1801: argument: 
                   1802: expr: 
                    1803: name: qpc
                  1804: argument: 
                   1805: expr: 
                    1806: name: cs_req
                  1807: argument: 
                   1808: expr: 
                    1809: name: MLX5_REQ_SCAT_DATA32_CQE
  1810: if_stmt: 
   1811: if: 
    1812: condition: 
     1813: expr: 
      1814: name: 
       1815: name: qp
       1816: operator: ->
       1817: name: rq
       1818: operator: .
       1819: name: wqe_cnt
    1820: block: 
     1821: block_content: 
      1822: expr_stmt: 
       1823: expr: 
        1824: call: 
         1825: name: MLX5_SET
         1826: argument_list: 
          1827: argument: 
           1828: expr: 
            1829: name: qpc
          1830: argument: 
           1831: expr: 
            1832: name: qpc
          1833: argument: 
           1834: expr: 
            1835: name: log_rq_stride
          1836: argument: 
           1837: expr: 
            1838: name: 
             1839: name: qp
             1840: operator: ->
             1841: name: rq
             1842: operator: .
             1843: name: wqe_shift
            1844: operator: -
            1845: literal: 4
      1846: expr_stmt: 
       1847: expr: 
        1848: call: 
         1849: name: MLX5_SET
         1850: argument_list: 
          1851: argument: 
           1852: expr: 
            1853: name: qpc
          1854: argument: 
           1855: expr: 
            1856: name: qpc
          1857: argument: 
           1858: expr: 
            1859: name: log_rq_size
          1860: argument: 
           1861: expr: 
            1862: call: 
             1863: name: ilog2
             1864: argument_list: 
              1865: argument: 
               1866: expr: 
                1867: name: 
                 1868: name: qp
                 1869: operator: ->
                 1870: name: rq
                 1871: operator: .
                 1872: name: wqe_cnt
  1873: expr_stmt: 
   1874: expr: 
    1875: call: 
     1876: name: MLX5_SET
     1877: argument_list: 
      1878: argument: 
       1879: expr: 
        1880: name: qpc
      1881: argument: 
       1882: expr: 
        1883: name: qpc
      1884: argument: 
       1885: expr: 
        1886: name: rq_type
      1887: argument: 
       1888: expr: 
        1889: call: 
         1890: name: get_rx_type
         1891: argument_list: 
          1892: argument: 
           1893: expr: 
            1894: name: qp
          1895: argument: 
           1896: expr: 
            1897: name: init_attr
  1898: if_stmt: 
   1899: if: 
    1900: condition: 
     1901: expr: 
      1902: name: 
       1903: name: qp
       1904: operator: ->
       1905: name: sq
       1906: operator: .
       1907: name: wqe_cnt
    1908: block: 
     1909: block_content: 
      1910: expr_stmt: 
       1911: expr: 
        1912: call: 
         1913: name: MLX5_SET
         1914: argument_list: 
          1915: argument: 
           1916: expr: 
            1917: name: qpc
          1918: argument: 
           1919: expr: 
            1920: name: qpc
          1921: argument: 
           1922: expr: 
            1923: name: log_sq_size
          1924: argument: 
           1925: expr: 
            1926: call: 
             1927: name: ilog2
             1928: argument_list: 
              1929: argument: 
               1930: expr: 
                1931: name: 
                 1932: name: qp
                 1933: operator: ->
                 1934: name: sq
                 1935: operator: .
                 1936: name: wqe_cnt
   1937: else: 
    1938: block: 
     1939: block_content: 
      1940: expr_stmt: 
       1941: expr: 
        1942: call: 
         1943: name: MLX5_SET
         1944: argument_list: 
          1945: argument: 
           1946: expr: 
            1947: name: qpc
          1948: argument: 
           1949: expr: 
            1950: name: qpc
          1951: argument: 
           1952: expr: 
            1953: name: no_sq
          1954: argument: 
           1955: expr: 
            1956: literal: 1
      1957: if_stmt: 
       1958: if: 
        1959: condition: 
         1960: expr: 
          1961: name: 
           1962: name: init_attr
           1963: operator: ->
           1964: name: srq
          1965: operator: &&
          1966: name: 
           1967: name: init_attr
           1968: operator: ->
           1969: name: srq
           1970: operator: ->
           1971: name: srq_type
          1972: operator: ==
          1973: name: IB_SRQT_TM
        1974: block: 
         1975: block_content: 
          1976: expr_stmt: 
           1977: expr: 
            1978: call: 
             1979: name: MLX5_SET
             1980: argument_list: 
              1981: argument: 
               1982: expr: 
                1983: name: qpc
              1984: argument: 
               1985: expr: 
                1986: name: qpc
              1987: argument: 
               1988: expr: 
                1989: name: offload_type
              1990: argument: 
               1991: expr: 
                1992: name: MLX5_QPC_OFFLOAD_TYPE_RNDV
  1993: comment: /* Set default resources */
  1994: switch: 
   1995: condition: 
    1996: expr: 
     1997: name: 
      1998: name: init_attr
      1999: operator: ->
      2000: name: qp_type
   2001: block: 
    2002: block_content: 
     2003: case: 
      2004: expr: 
       2005: name: IB_QPT_XRC_TGT
     2006: expr_stmt: 
      2007: expr: 
       2008: call: 
        2009: name: MLX5_SET
        2010: argument_list: 
         2011: argument: 
          2012: expr: 
           2013: name: qpc
         2014: argument: 
          2015: expr: 
           2016: name: qpc
         2017: argument: 
          2018: expr: 
           2019: name: cqn_rcv
         2020: argument: 
          2021: expr: 
           2022: call: 
            2023: name: to_mcq
            2024: argument_list: 
             2025: argument: 
              2026: expr: 
               2027: name: 
                2028: name: devr
                2029: operator: ->
                2030: name: c0
           2031: operator: ->
           2032: name: 
            2033: name: mcq
            2034: operator: .
            2035: name: cqn
     2036: expr_stmt: 
      2037: expr: 
       2038: call: 
        2039: name: MLX5_SET
        2040: argument_list: 
         2041: argument: 
          2042: expr: 
           2043: name: qpc
         2044: argument: 
          2045: expr: 
           2046: name: qpc
         2047: argument: 
          2048: expr: 
           2049: name: cqn_snd
         2050: argument: 
          2051: expr: 
           2052: call: 
            2053: name: to_mcq
            2054: argument_list: 
             2055: argument: 
              2056: expr: 
               2057: name: 
                2058: name: devr
                2059: operator: ->
                2060: name: c0
           2061: operator: ->
           2062: name: 
            2063: name: mcq
            2064: operator: .
            2065: name: cqn
     2066: expr_stmt: 
      2067: expr: 
       2068: call: 
        2069: name: MLX5_SET
        2070: argument_list: 
         2071: argument: 
          2072: expr: 
           2073: name: qpc
         2074: argument: 
          2075: expr: 
           2076: name: qpc
         2077: argument: 
          2078: expr: 
           2079: name: srqn_rmpn_xrqn
         2080: argument: 
          2081: expr: 
           2082: call: 
            2083: name: to_msrq
            2084: argument_list: 
             2085: argument: 
              2086: expr: 
               2087: name: 
                2088: name: devr
                2089: operator: ->
                2090: name: s0
           2091: operator: ->
           2092: name: 
            2093: name: msrq
            2094: operator: .
            2095: name: srqn
     2096: expr_stmt: 
      2097: expr: 
       2098: call: 
        2099: name: MLX5_SET
        2100: argument_list: 
         2101: argument: 
          2102: expr: 
           2103: name: qpc
         2104: argument: 
          2105: expr: 
           2106: name: qpc
         2107: argument: 
          2108: expr: 
           2109: name: xrcd
         2110: argument: 
          2111: expr: 
           2112: call: 
            2113: name: to_mxrcd
            2114: argument_list: 
             2115: argument: 
              2116: expr: 
               2117: name: 
                2118: name: init_attr
                2119: operator: ->
                2120: name: xrcd
           2121: operator: ->
           2122: name: xrcdn
     2123: break: 
     2124: case: 
      2125: expr: 
       2126: name: IB_QPT_XRC_INI
     2127: expr_stmt: 
      2128: expr: 
       2129: call: 
        2130: name: MLX5_SET
        2131: argument_list: 
         2132: argument: 
          2133: expr: 
           2134: name: qpc
         2135: argument: 
          2136: expr: 
           2137: name: qpc
         2138: argument: 
          2139: expr: 
           2140: name: cqn_rcv
         2141: argument: 
          2142: expr: 
           2143: call: 
            2144: name: to_mcq
            2145: argument_list: 
             2146: argument: 
              2147: expr: 
               2148: name: 
                2149: name: devr
                2150: operator: ->
                2151: name: c0
           2152: operator: ->
           2153: name: 
            2154: name: mcq
            2155: operator: .
            2156: name: cqn
     2157: expr_stmt: 
      2158: expr: 
       2159: call: 
        2160: name: MLX5_SET
        2161: argument_list: 
         2162: argument: 
          2163: expr: 
           2164: name: qpc
         2165: argument: 
          2166: expr: 
           2167: name: qpc
         2168: argument: 
          2169: expr: 
           2170: name: xrcd
         2171: argument: 
          2172: expr: 
           2173: call: 
            2174: name: to_mxrcd
            2175: argument_list: 
             2176: argument: 
              2177: expr: 
               2178: name: 
                2179: name: devr
                2180: operator: ->
                2181: name: x1
           2182: operator: ->
           2183: name: xrcdn
     2184: expr_stmt: 
      2185: expr: 
       2186: call: 
        2187: name: MLX5_SET
        2188: argument_list: 
         2189: argument: 
          2190: expr: 
           2191: name: qpc
         2192: argument: 
          2193: expr: 
           2194: name: qpc
         2195: argument: 
          2196: expr: 
           2197: name: srqn_rmpn_xrqn
         2198: argument: 
          2199: expr: 
           2200: call: 
            2201: name: to_msrq
            2202: argument_list: 
             2203: argument: 
              2204: expr: 
               2205: name: 
                2206: name: devr
                2207: operator: ->
                2208: name: s0
           2209: operator: ->
           2210: name: 
            2211: name: msrq
            2212: operator: .
            2213: name: srqn
     2214: break: 
     2215: default: 
     2216: if_stmt: 
      2217: if: 
       2218: condition: 
        2219: expr: 
         2220: name: 
          2221: name: init_attr
          2222: operator: ->
          2223: name: srq
       2224: block: 
        2225: block_content: 
         2226: expr_stmt: 
          2227: expr: 
           2228: call: 
            2229: name: MLX5_SET
            2230: argument_list: 
             2231: argument: 
              2232: expr: 
               2233: name: qpc
             2234: argument: 
              2235: expr: 
               2236: name: qpc
             2237: argument: 
              2238: expr: 
               2239: name: xrcd
             2240: argument: 
              2241: expr: 
               2242: call: 
                2243: name: to_mxrcd
                2244: argument_list: 
                 2245: argument: 
                  2246: expr: 
                   2247: name: 
                    2248: name: devr
                    2249: operator: ->
                    2250: name: x0
               2251: operator: ->
               2252: name: xrcdn
         2253: expr_stmt: 
          2254: expr: 
           2255: call: 
            2256: name: MLX5_SET
            2257: argument_list: 
             2258: argument: 
              2259: expr: 
               2260: name: qpc
             2261: argument: 
              2262: expr: 
               2263: name: qpc
             2264: argument: 
              2265: expr: 
               2266: name: srqn_rmpn_xrqn
             2267: argument: 
              2268: expr: 
               2269: call: 
                2270: name: to_msrq
                2271: argument_list: 
                 2272: argument: 
                  2273: expr: 
                   2274: name: 
                    2275: name: init_attr
                    2276: operator: ->
                    2277: name: srq
               2278: operator: ->
               2279: name: 
                2280: name: msrq
                2281: operator: .
                2282: name: srqn
      2283: else: 
       2284: block: 
        2285: block_content: 
         2286: expr_stmt: 
          2287: expr: 
           2288: call: 
            2289: name: MLX5_SET
            2290: argument_list: 
             2291: argument: 
              2292: expr: 
               2293: name: qpc
             2294: argument: 
              2295: expr: 
               2296: name: qpc
             2297: argument: 
              2298: expr: 
               2299: name: xrcd
             2300: argument: 
              2301: expr: 
               2302: call: 
                2303: name: to_mxrcd
                2304: argument_list: 
                 2305: argument: 
                  2306: expr: 
                   2307: name: 
                    2308: name: devr
                    2309: operator: ->
                    2310: name: x1
               2311: operator: ->
               2312: name: xrcdn
         2313: expr_stmt: 
          2314: expr: 
           2315: call: 
            2316: name: MLX5_SET
            2317: argument_list: 
             2318: argument: 
              2319: expr: 
               2320: name: qpc
             2321: argument: 
              2322: expr: 
               2323: name: qpc
             2324: argument: 
              2325: expr: 
               2326: name: srqn_rmpn_xrqn
             2327: argument: 
              2328: expr: 
               2329: call: 
                2330: name: to_msrq
                2331: argument_list: 
                 2332: argument: 
                  2333: expr: 
                   2334: name: 
                    2335: name: devr
                    2336: operator: ->
                    2337: name: s1
               2338: operator: ->
               2339: name: 
                2340: name: msrq
                2341: operator: .
                2342: name: srqn
  2343: if_stmt: 
   2344: if: 
    2345: condition: 
     2346: expr: 
      2347: name: 
       2348: name: init_attr
       2349: operator: ->
       2350: name: send_cq
    2351: block: 
     2352: block_content: 
      2353: expr_stmt: 
       2354: expr: 
        2355: call: 
         2356: name: MLX5_SET
         2357: argument_list: 
          2358: argument: 
           2359: expr: 
            2360: name: qpc
          2361: argument: 
           2362: expr: 
            2363: name: qpc
          2364: argument: 
           2365: expr: 
            2366: name: cqn_snd
          2367: argument: 
           2368: expr: 
            2369: call: 
             2370: name: to_mcq
             2371: argument_list: 
              2372: argument: 
               2373: expr: 
                2374: name: 
                 2375: name: init_attr
                 2376: operator: ->
                 2377: name: send_cq
            2378: operator: ->
            2379: name: 
             2380: name: mcq
             2381: operator: .
             2382: name: cqn
  2383: if_stmt: 
   2384: if: 
    2385: condition: 
     2386: expr: 
      2387: name: 
       2388: name: init_attr
       2389: operator: ->
       2390: name: recv_cq
    2391: block: 
     2392: block_content: 
      2393: expr_stmt: 
       2394: expr: 
        2395: call: 
         2396: name: MLX5_SET
         2397: argument_list: 
          2398: argument: 
           2399: expr: 
            2400: name: qpc
          2401: argument: 
           2402: expr: 
            2403: name: qpc
          2404: argument: 
           2405: expr: 
            2406: name: cqn_rcv
          2407: argument: 
           2408: expr: 
            2409: call: 
             2410: name: to_mcq
             2411: argument_list: 
              2412: argument: 
               2413: expr: 
                2414: name: 
                 2415: name: init_attr
                 2416: operator: ->
                 2417: name: recv_cq
            2418: operator: ->
            2419: name: 
             2420: name: mcq
             2421: operator: .
             2422: name: cqn
  2423: expr_stmt: 
   2424: expr: 
    2425: call: 
     2426: name: MLX5_SET64
     2427: argument_list: 
      2428: argument: 
       2429: expr: 
        2430: name: qpc
      2431: argument: 
       2432: expr: 
        2433: name: qpc
      2434: argument: 
       2435: expr: 
        2436: name: dbr_addr
      2437: argument: 
       2438: expr: 
        2439: name: 
         2440: name: qp
         2441: operator: ->
         2442: name: db
         2443: operator: .
         2444: name: dma
  2445: comment: /* 0xffffff means we ask to work with cqe version 0 */
  2446: if_stmt: 
   2447: if: 
    2448: condition: 
     2449: expr: 
      2450: call: 
       2451: name: MLX5_CAP_GEN
       2452: argument_list: 
        2453: argument: 
         2454: expr: 
          2455: name: mdev
        2456: argument: 
         2457: expr: 
          2458: name: cqe_version
      2459: operator: ==
      2460: name: MLX5_CQE_VERSION_V1
    2461: block: 
     2462: block_content: 
      2463: expr_stmt: 
       2464: expr: 
        2465: call: 
         2466: name: MLX5_SET
         2467: argument_list: 
          2468: argument: 
           2469: expr: 
            2470: name: qpc
          2471: argument: 
           2472: expr: 
            2473: name: qpc
          2474: argument: 
           2475: expr: 
            2476: name: user_index
          2477: argument: 
           2478: expr: 
            2479: name: uidx
  2480: comment: /* we use IB_QP_CREATE_IPOIB_UD_LSO to indicates ipoib qp */
  2481: if_stmt: 
   2482: if: 
    2483: condition: 
     2484: expr: 
      2485: name: 
       2486: name: init_attr
       2487: operator: ->
       2488: name: qp_type
      2489: operator: ==
      2490: name: IB_QPT_UD
      2491: operator: &&
      2492: operator: (
      2493: name: 
       2494: name: init_attr
       2495: operator: ->
       2496: name: create_flags
      2497: operator: &
      2498: name: IB_QP_CREATE_IPOIB_UD_LSO
      2499: operator: )
    2500: block: 
     2501: block_content: 
      2502: expr_stmt: 
       2503: expr: 
        2504: call: 
         2505: name: MLX5_SET
         2506: argument_list: 
          2507: argument: 
           2508: expr: 
            2509: name: qpc
          2510: argument: 
           2511: expr: 
            2512: name: qpc
          2513: argument: 
           2514: expr: 
            2515: name: ulp_stateless_offload_mode
          2516: argument: 
           2517: expr: 
            2518: literal: 1
      2519: expr_stmt: 
       2520: expr: 
        2521: name: 
         2522: name: qp
         2523: operator: ->
         2524: name: flags
        2525: operator: |=
        2526: name: MLX5_IB_QP_LSO
  2527: if_stmt: 
   2528: if: 
    2529: condition: 
     2530: expr: 
      2531: name: 
       2532: name: init_attr
       2533: operator: ->
       2534: name: create_flags
      2535: operator: &
      2536: name: IB_QP_CREATE_PCI_WRITE_END_PADDING
    2537: block: 
     2538: block_content: 
      2539: if_stmt: 
       2540: if: 
        2541: condition: 
         2542: expr: 
          2543: operator: !
          2544: call: 
           2545: name: MLX5_CAP_GEN
           2546: argument_list: 
            2547: argument: 
             2548: expr: 
              2549: name: 
               2550: name: dev
               2551: operator: ->
               2552: name: mdev
            2553: argument: 
             2554: expr: 
              2555: name: end_pad
        2556: block: 
         2557: block_content: 
          2558: expr_stmt: 
           2559: expr: 
            2560: call: 
             2561: name: mlx5_ib_dbg
             2562: argument_list: 
              2563: argument: 
               2564: expr: 
                2565: name: dev
              2566: argument: 
               2567: expr: 
                2568: literal: "scatter end padding is not supported\n"
          2569: expr_stmt: 
           2570: expr: 
            2571: name: err
            2572: operator: =
            2573: operator: -
            2574: name: EOPNOTSUPP
          2575: goto: 
           2576: name: err
       2577: if: 
        2578: condition: 
         2579: expr: 
          2580: name: 
           2581: name: init_attr
           2582: operator: ->
           2583: name: qp_type
          2584: operator: !=
          2585: name: IB_QPT_RAW_PACKET
        2586: block: 
         2587: block_content: 
          2588: expr_stmt: 
           2589: expr: 
            2590: call: 
             2591: name: MLX5_SET
             2592: argument_list: 
              2593: argument: 
               2594: expr: 
                2595: name: qpc
              2596: argument: 
               2597: expr: 
                2598: name: qpc
              2599: argument: 
               2600: expr: 
                2601: name: end_padding_mode
              2602: argument: 
               2603: expr: 
                2604: name: MLX5_WQ_END_PAD_MODE_ALIGN
       2605: else: 
        2606: block: 
         2607: block_content: 
          2608: expr_stmt: 
           2609: expr: 
            2610: name: 
             2611: name: qp
             2612: operator: ->
             2613: name: flags
            2614: operator: |=
            2615: name: MLX5_IB_QP_PCI_WRITE_END_PADDING
  2616: if_stmt: 
   2617: if: 
    2618: condition: 
     2619: expr: 
      2620: name: inlen
      2621: operator: <
      2622: literal: 0
    2623: block: 
     2624: block_content: 
      2625: expr_stmt: 
       2626: expr: 
        2627: name: err
        2628: operator: =
        2629: operator: -
        2630: name: EINVAL
      2631: goto: 
       2632: name: err
  2633: if_stmt: 
   2634: if: 
    2635: condition: 
     2636: expr: 
      2637: name: 
       2638: name: init_attr
       2639: operator: ->
       2640: name: qp_type
      2641: operator: ==
      2642: name: IB_QPT_RAW_PACKET
      2643: operator: ||
      2644: name: 
       2645: name: qp
       2646: operator: ->
       2647: name: flags
      2648: operator: &
      2649: name: MLX5_IB_QP_UNDERLAY
    2650: block: 
     2651: block_content: 
      2652: expr_stmt: 
       2653: expr: 
        2654: name: 
         2655: name: qp
         2656: operator: ->
         2657: name: raw_packet_qp
         2658: operator: .
         2659: name: sq
         2660: operator: .
         2661: name: ubuffer
         2662: operator: .
         2663: name: buf_addr
        2664: operator: =
        2665: name: 
         2666: name: ucmd
         2667: operator: .
         2668: name: sq_buf_addr
      2669: expr_stmt: 
       2670: expr: 
        2671: call: 
         2672: name: raw_packet_qp_copy_info
         2673: argument_list: 
          2674: argument: 
           2675: expr: 
            2676: name: qp
          2677: argument: 
           2678: expr: 
            2679: operator: &
            2680: name: 
             2681: name: qp
             2682: operator: ->
             2683: name: raw_packet_qp
      2684: expr_stmt: 
       2685: expr: 
        2686: name: err
        2687: operator: =
        2688: call: 
         2689: name: create_raw_packet_qp
         2690: argument_list: 
          2691: argument: 
           2692: expr: 
            2693: name: dev
          2694: argument: 
           2695: expr: 
            2696: name: qp
          2697: argument: 
           2698: expr: 
            2699: name: in
          2700: argument: 
           2701: expr: 
            2702: name: inlen
          2703: argument: 
           2704: expr: 
            2705: name: pd
   2706: else: 
    2707: block: 
     2708: block_content: 
      2709: expr_stmt: 
       2710: expr: 
        2711: name: err
        2712: operator: =
        2713: call: 
         2714: name: mlx5_core_create_qp
         2715: argument_list: 
          2716: argument: 
           2717: expr: 
            2718: name: 
             2719: name: dev
             2720: operator: ->
             2721: name: mdev
          2722: argument: 
           2723: expr: 
            2724: operator: &
            2725: name: 
             2726: name: base
             2727: operator: ->
             2728: name: mqp
          2729: argument: 
           2730: expr: 
            2731: name: in
          2732: argument: 
           2733: expr: 
            2734: name: inlen
  2735: if_stmt: 
   2736: if: 
    2737: condition: 
     2738: expr: 
      2739: name: err
    2740: block: 
     2741: block_content: 
      2742: expr_stmt: 
       2743: expr: 
        2744: call: 
         2745: name: mlx5_ib_dbg
         2746: argument_list: 
          2747: argument: 
           2748: expr: 
            2749: name: dev
          2750: argument: 
           2751: expr: 
            2752: literal: "create qp failed\n"
      2753: goto: 
       2754: name: err_create
  2755: expr_stmt: 
   2756: expr: 
    2757: call: 
     2758: name: kvfree
     2759: argument_list: 
      2760: argument: 
       2761: expr: 
        2762: name: in
  2763: expr_stmt: 
   2764: expr: 
    2765: name: 
     2766: name: base
     2767: operator: ->
     2768: name: container_mibqp
    2769: operator: =
    2770: name: qp
  2771: expr_stmt: 
   2772: expr: 
    2773: name: 
     2774: name: base
     2775: operator: ->
     2776: name: mqp
     2777: operator: .
     2778: name: event
    2779: operator: =
    2780: name: mlx5_ib_qp_event
  2781: expr_stmt: 
   2782: expr: 
    2783: call: 
     2784: name: get_cqs
     2785: argument_list: 
      2786: argument: 
       2787: expr: 
        2788: name: 
         2789: name: init_attr
         2790: operator: ->
         2791: name: qp_type
      2792: argument: 
       2793: expr: 
        2794: name: 
         2795: name: init_attr
         2796: operator: ->
         2797: name: send_cq
      2798: argument: 
       2799: expr: 
        2800: name: 
         2801: name: init_attr
         2802: operator: ->
         2803: name: recv_cq
      2804: argument: 
       2805: expr: 
        2806: operator: &
        2807: name: send_cq
      2808: argument: 
       2809: expr: 
        2810: operator: &
        2811: name: recv_cq
  2812: expr_stmt: 
   2813: expr: 
    2814: call: 
     2815: name: spin_lock_irqsave
     2816: argument_list: 
      2817: argument: 
       2818: expr: 
        2819: operator: &
        2820: name: 
         2821: name: dev
         2822: operator: ->
         2823: name: reset_flow_resource_lock
      2824: argument: 
       2825: expr: 
        2826: name: flags
  2827: expr_stmt: 
   2828: expr: 
    2829: call: 
     2830: name: mlx5_ib_lock_cqs
     2831: argument_list: 
      2832: argument: 
       2833: expr: 
        2834: name: send_cq
      2835: argument: 
       2836: expr: 
        2837: name: recv_cq
  2838: comment: /* Maintain device to QPs access, needed for further handling via
=====
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: 
     5: name: struct
     6: name: mlx5_ib_resources
    7: modifier: *
   8: name: devr
   9: init: 
    10: expr: 
     11: operator: &
     12: name: 
      13: name: dev
      14: operator: ->
      15: name: devr
 16: decl_stmt: 
  17: decl: 
   18: type: 
    19: name: int
   20: name: inlen
   21: init: 
    22: expr: 
     23: call: 
      24: name: MLX5_ST_SZ_BYTES
      25: argument_list: 
       26: argument: 
        27: expr: 
         28: name: create_qp_in
 29: decl_stmt: 
  30: decl: 
   31: type: 
    32: name: 
     33: name: struct
     34: name: mlx5_core_dev
    35: modifier: *
   36: name: mdev
   37: init: 
    38: expr: 
     39: name: 
      40: name: dev
      41: operator: ->
      42: name: mdev
 43: decl_stmt: 
  44: decl: 
   45: type: 
    46: name: 
     47: name: struct
     48: name: mlx5_ib_create_qp_resp
   49: name: resp
 50: decl_stmt: 
  51: decl: 
   52: type: 
    53: name: 
     54: name: struct
     55: name: mlx5_ib_cq
    56: modifier: *
   57: name: send_cq
 58: decl_stmt: 
  59: decl: 
   60: type: 
    61: name: 
     62: name: struct
     63: name: mlx5_ib_cq
    64: modifier: *
   65: name: recv_cq
 66: decl_stmt: 
  67: decl: 
   68: type: 
    69: name: unsigned
    70: name: long
   71: name: flags
 72: decl_stmt: 
  73: decl: 
   74: type: 
    75: name: u32
   76: name: uidx
   77: init: 
    78: expr: 
     79: name: MLX5_IB_DEFAULT_UIDX
 80: decl_stmt: 
  81: decl: 
   82: type: 
    83: name: 
     84: name: struct
     85: name: mlx5_ib_create_qp
   86: name: ucmd
 87: decl_stmt: 
  88: decl: 
   89: type: 
    90: name: 
     91: name: struct
     92: name: mlx5_ib_qp_base
    93: modifier: *
   94: name: base
 95: decl_stmt: 
  96: decl: 
   97: type: 
    98: name: int
   99: name: mlx5_st
 100: decl_stmt: 
  101: decl: 
   102: type: 
    103: name: void
    104: modifier: *
   105: name: qpc
 106: decl_stmt: 
  107: decl: 
   108: type: 
    109: name: u32
    110: modifier: *
   111: name: in
 112: decl_stmt: 
  113: decl: 
   114: type: 
    115: name: int
   116: name: err
 117: expr_stmt: 
  118: expr: 
   119: call: 
    120: name: mutex_init
    121: argument_list: 
     122: argument: 
      123: expr: 
       124: operator: &
       125: name: 
        126: name: qp
        127: operator: ->
        128: name: mutex
 129: expr_stmt: 
  130: expr: 
   131: call: 
    132: name: spin_lock_init
    133: argument_list: 
     134: argument: 
      135: expr: 
       136: operator: &
       137: name: 
        138: name: qp
        139: operator: ->
        140: name: sq
        141: operator: .
        142: name: lock
 143: expr_stmt: 
  144: expr: 
   145: call: 
    146: name: spin_lock_init
    147: argument_list: 
     148: argument: 
      149: expr: 
       150: operator: &
       151: name: 
        152: name: qp
        153: operator: ->
        154: name: rq
        155: operator: .
        156: name: lock
 157: expr_stmt: 
  158: expr: 
   159: name: mlx5_st
   160: operator: =
   161: call: 
    162: name: to_mlx5_st
    163: argument_list: 
     164: argument: 
      165: expr: 
       166: name: 
        167: name: init_attr
        168: operator: ->
        169: name: qp_type
 170: if_stmt: 
  171: if: 
   172: condition: 
    173: expr: 
     174: name: mlx5_st
     175: operator: <
     176: literal: 0
   177: block: 
    178: block_content: 
     179: return: 
      180: expr: 
       181: operator: -
       182: name: EINVAL
 183: if_stmt: 
  184: if: 
   185: condition: 
    186: expr: 
     187: name: 
      188: name: init_attr
      189: operator: ->
      190: name: rwq_ind_tbl
   191: block: 
    192: block_content: 
     193: if_stmt: 
      194: if: 
       195: condition: 
        196: expr: 
         197: operator: !
         198: name: udata
       199: block: 
        200: block_content: 
         201: return: 
          202: expr: 
           203: operator: -
           204: name: ENOSYS
     205: expr_stmt: 
      206: expr: 
       207: name: err
       208: operator: =
       209: call: 
        210: name: create_rss_raw_qp_tir
        211: argument_list: 
         212: argument: 
          213: expr: 
           214: name: dev
         215: argument: 
          216: expr: 
           217: name: qp
         218: argument: 
          219: expr: 
           220: name: pd
         221: argument: 
          222: expr: 
           223: name: init_attr
         224: argument: 
          225: expr: 
           226: name: udata
     227: return: 
      228: expr: 
       229: name: err
 230: if_stmt: 
  231: if: 
   232: condition: 
    233: expr: 
     234: name: 
      235: name: init_attr
      236: operator: ->
      237: name: create_flags
     238: operator: &
     239: name: IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK
   240: block: 
    241: block_content: 
     242: if_stmt: 
      243: if: 
       244: condition: 
        245: expr: 
         246: operator: !
         247: call: 
          248: name: MLX5_CAP_GEN
          249: argument_list: 
           250: argument: 
            251: expr: 
             252: name: mdev
           253: argument: 
            254: expr: 
             255: name: block_lb_mc
       256: block: 
        257: block_content: 
         258: expr_stmt: 
          259: expr: 
           260: call: 
            261: name: mlx5_ib_dbg
            262: argument_list: 
             263: argument: 
              264: expr: 
               265: name: dev
             266: argument: 
              267: expr: 
               268: literal: "block multicast loopback isn't supported\n"
         269: return: 
          270: expr: 
           271: operator: -
           272: name: EINVAL
      273: else: 
       274: block: 
        275: block_content: 
         276: expr_stmt: 
          277: expr: 
           278: name: 
            279: name: qp
            280: operator: ->
            281: name: flags
           282: operator: |=
           283: name: MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK
 284: if_stmt: 
  285: if: 
   286: condition: 
    287: expr: 
     288: name: 
      289: name: init_attr
      290: operator: ->
      291: name: create_flags
     292: operator: &
     293: operator: (
     294: name: IB_QP_CREATE_CROSS_CHANNEL
     295: operator: |
     296: name: IB_QP_CREATE_MANAGED_SEND
     297: operator: |
     298: name: IB_QP_CREATE_MANAGED_RECV
     299: operator: )
   300: block: 
    301: block_content: 
     302: if_stmt: 
      303: if: 
       304: condition: 
        305: expr: 
         306: operator: !
         307: call: 
          308: name: MLX5_CAP_GEN
          309: argument_list: 
           310: argument: 
            311: expr: 
             312: name: mdev
           313: argument: 
            314: expr: 
             315: name: cd
       316: block: 
        317: block_content: 
         318: expr_stmt: 
          319: expr: 
           320: call: 
            321: name: mlx5_ib_dbg
            322: argument_list: 
             323: argument: 
              324: expr: 
               325: name: dev
             326: argument: 
              327: expr: 
               328: literal: "cross-channel isn't supported\n"
         329: return: 
          330: expr: 
           331: operator: -
           332: name: EINVAL
     333: if_stmt: 
      334: if: 
       335: condition: 
        336: expr: 
         337: name: 
          338: name: init_attr
          339: operator: ->
          340: name: create_flags
         341: operator: &
         342: name: IB_QP_CREATE_CROSS_CHANNEL
       343: block: 
        344: block_content: 
         345: expr_stmt: 
          346: expr: 
           347: name: 
            348: name: qp
            349: operator: ->
            350: name: flags
           351: operator: |=
           352: name: MLX5_IB_QP_CROSS_CHANNEL
     353: if_stmt: 
      354: if: 
       355: condition: 
        356: expr: 
         357: name: 
          358: name: init_attr
          359: operator: ->
          360: name: create_flags
         361: operator: &
         362: name: IB_QP_CREATE_MANAGED_SEND
       363: block: 
        364: block_content: 
         365: expr_stmt: 
          366: expr: 
           367: name: 
            368: name: qp
            369: operator: ->
            370: name: flags
           371: operator: |=
           372: name: MLX5_IB_QP_MANAGED_SEND
     373: if_stmt: 
      374: if: 
       375: condition: 
        376: expr: 
         377: name: 
          378: name: init_attr
          379: operator: ->
          380: name: create_flags
         381: operator: &
         382: name: IB_QP_CREATE_MANAGED_RECV
       383: block: 
        384: block_content: 
         385: expr_stmt: 
          386: expr: 
           387: name: 
            388: name: qp
            389: operator: ->
            390: name: flags
           391: operator: |=
           392: name: MLX5_IB_QP_MANAGED_RECV
 393: if_stmt: 
  394: if: 
   395: condition: 
    396: expr: 
     397: name: 
      398: name: init_attr
      399: operator: ->
      400: name: qp_type
     401: operator: ==
     402: name: IB_QPT_UD
     403: operator: &&
     404: operator: (
     405: name: 
      406: name: init_attr
      407: operator: ->
      408: name: create_flags
     409: operator: &
     410: name: IB_QP_CREATE_IPOIB_UD_LSO
     411: operator: )
   412: block: 
    413: block_content: 
     414: if_stmt: 
      415: if: 
       416: condition: 
        417: expr: 
         418: operator: !
         419: call: 
          420: name: MLX5_CAP_GEN
          421: argument_list: 
           422: argument: 
            423: expr: 
             424: name: mdev
           425: argument: 
            426: expr: 
             427: name: ipoib_basic_offloads
       428: block: 
        429: block_content: 
         430: expr_stmt: 
          431: expr: 
           432: call: 
            433: name: mlx5_ib_dbg
            434: argument_list: 
             435: argument: 
              436: expr: 
               437: name: dev
             438: argument: 
              439: expr: 
               440: literal: "ipoib UD lso qp isn't supported\n"
         441: return: 
          442: expr: 
           443: operator: -
           444: name: EOPNOTSUPP
 445: if_stmt: 
  446: if: 
   447: condition: 
    448: expr: 
     449: name: 
      450: name: init_attr
      451: operator: ->
      452: name: create_flags
     453: operator: &
     454: name: IB_QP_CREATE_SCATTER_FCS
   455: block: 
    456: block_content: 
     457: if_stmt: 
      458: if: 
       459: condition: 
        460: expr: 
         461: name: 
          462: name: init_attr
          463: operator: ->
          464: name: qp_type
         465: operator: !=
         466: name: IB_QPT_RAW_PACKET
       467: block: 
        468: block_content: 
         469: expr_stmt: 
          470: expr: 
           471: call: 
            472: name: mlx5_ib_dbg
            473: argument_list: 
             474: argument: 
              475: expr: 
               476: name: dev
             477: argument: 
              478: expr: 
               479: literal: "Scatter FCS is supported only for Raw Packet QPs"
         480: return: 
          481: expr: 
           482: operator: -
           483: name: EOPNOTSUPP
     484: if_stmt: 
      485: if: 
       486: condition: 
        487: expr: 
         488: operator: !
         489: call: 
          490: name: MLX5_CAP_GEN
          491: argument_list: 
           492: argument: 
            493: expr: 
             494: name: 
              495: name: dev
              496: operator: ->
              497: name: mdev
           498: argument: 
            499: expr: 
             500: name: eth_net_offloads
         501: operator: ||
         502: operator: !
         503: call: 
          504: name: MLX5_CAP_ETH
          505: argument_list: 
           506: argument: 
            507: expr: 
             508: name: 
              509: name: dev
              510: operator: ->
              511: name: mdev
           512: argument: 
            513: expr: 
             514: name: scatter_fcs
       515: block: 
        516: block_content: 
         517: expr_stmt: 
          518: expr: 
           519: call: 
            520: name: mlx5_ib_dbg
            521: argument_list: 
             522: argument: 
              523: expr: 
               524: name: dev
             525: argument: 
              526: expr: 
               527: literal: "Scatter FCS isn't supported\n"
         528: return: 
          529: expr: 
           530: operator: -
           531: name: EOPNOTSUPP
     532: expr_stmt: 
      533: expr: 
       534: name: 
        535: name: qp
        536: operator: ->
        537: name: flags
       538: operator: |=
       539: name: MLX5_IB_QP_CAP_SCATTER_FCS
 540: if_stmt: 
  541: if: 
   542: condition: 
    543: expr: 
     544: name: 
      545: name: init_attr
      546: operator: ->
      547: name: sq_sig_type
     548: operator: ==
     549: name: IB_SIGNAL_ALL_WR
   550: block: 
    551: block_content: 
     552: expr_stmt: 
      553: expr: 
       554: name: 
        555: name: qp
        556: operator: ->
        557: name: sq_signal_bits
       558: operator: =
       559: name: MLX5_WQE_CTRL_CQ_UPDATE
 560: if_stmt: 
  561: if: 
   562: condition: 
    563: expr: 
     564: name: 
      565: name: init_attr
      566: operator: ->
      567: name: create_flags
     568: operator: &
     569: name: IB_QP_CREATE_CVLAN_STRIPPING
   570: block: 
    571: block_content: 
     572: if_stmt: 
      573: if: 
       574: condition: 
        575: expr: 
         576: operator: !
         577: operator: (
         578: call: 
          579: name: MLX5_CAP_GEN
          580: argument_list: 
           581: argument: 
            582: expr: 
             583: name: 
              584: name: dev
              585: operator: ->
              586: name: mdev
           587: argument: 
            588: expr: 
             589: name: eth_net_offloads
         590: operator: &&
         591: call: 
          592: name: MLX5_CAP_ETH
          593: argument_list: 
           594: argument: 
            595: expr: 
             596: name: 
              597: name: dev
              598: operator: ->
              599: name: mdev
           600: argument: 
            601: expr: 
             602: name: vlan_cap
         603: operator: )
         604: operator: ||
         605: operator: (
         606: name: 
          607: name: init_attr
          608: operator: ->
          609: name: qp_type
         610: operator: !=
         611: name: IB_QPT_RAW_PACKET
         612: operator: )
       613: block: 
        614: block_content: 
         615: return: 
          616: expr: 
           617: operator: -
           618: name: EOPNOTSUPP
     619: expr_stmt: 
      620: expr: 
       621: name: 
        622: name: qp
        623: operator: ->
        624: name: flags
       625: operator: |=
       626: name: MLX5_IB_QP_CVLAN_STRIPPING
 627: if_stmt: 
  628: if: 
   629: condition: 
    630: expr: 
     631: name: pd
     632: operator: &&
     633: name: 
      634: name: pd
      635: operator: ->
      636: name: uobject
   637: block: 
    638: block_content: 
     639: if_stmt: 
      640: if: 
       641: condition: 
        642: expr: 
         643: call: 
          644: name: ib_copy_from_udata
          645: argument_list: 
           646: argument: 
            647: expr: 
             648: operator: &
             649: name: ucmd
           650: argument: 
            651: expr: 
             652: name: udata
           653: argument: 
            654: expr: 
             655: sizeof: 
              656: argument_list: 
               657: argument: 
                658: expr: 
                 659: name: ucmd
       660: block: 
        661: block_content: 
         662: expr_stmt: 
          663: expr: 
           664: call: 
            665: name: mlx5_ib_dbg
            666: argument_list: 
             667: argument: 
              668: expr: 
               669: name: dev
             670: argument: 
              671: expr: 
               672: literal: "copy failed\n"
         673: return: 
          674: expr: 
           675: operator: -
           676: name: EFAULT
     677: expr_stmt: 
      678: expr: 
       679: name: err
       680: operator: =
       681: call: 
        682: name: get_qp_user_index
        683: argument_list: 
         684: argument: 
          685: expr: 
           686: call: 
            687: name: to_mucontext
            688: argument_list: 
             689: argument: 
              690: expr: 
               691: name: 
                692: name: pd
                693: operator: ->
                694: name: uobject
                695: operator: ->
                696: name: context
         697: argument: 
          698: expr: 
           699: operator: &
           700: name: ucmd
         701: argument: 
          702: expr: 
           703: name: 
            704: name: udata
            705: operator: ->
            706: name: inlen
         707: argument: 
          708: expr: 
           709: operator: &
           710: name: uidx
     711: if_stmt: 
      712: if: 
       713: condition: 
        714: expr: 
         715: name: err
       716: block: 
        717: block_content: 
         718: return: 
          719: expr: 
           720: name: err
     721: expr_stmt: 
      722: expr: 
       723: name: 
        724: name: qp
        725: operator: ->
        726: name: wq_sig
       727: operator: =
       728: operator: !
       729: operator: !
       730: operator: (
       731: name: 
        732: name: ucmd
        733: operator: .
        734: name: flags
       735: operator: &
       736: name: MLX5_QP_FLAG_SIGNATURE
       737: operator: )
     738: expr_stmt: 
      739: expr: 
       740: name: 
        741: name: qp
        742: operator: ->
        743: name: scat_cqe
       744: operator: =
       745: operator: !
       746: operator: !
       747: operator: (
       748: name: 
        749: name: ucmd
        750: operator: .
        751: name: flags
       752: operator: &
       753: name: MLX5_QP_FLAG_SCATTER_CQE
       754: operator: )
     755: if_stmt: 
      756: if: 
       757: condition: 
        758: expr: 
         759: name: 
          760: name: ucmd
          761: operator: .
          762: name: flags
         763: operator: &
         764: name: MLX5_QP_FLAG_TUNNEL_OFFLOADS
       765: block: 
        766: block_content: 
         767: if_stmt: 
          768: if: 
           769: condition: 
            770: expr: 
             771: name: 
              772: name: init_attr
              773: operator: ->
              774: name: qp_type
             775: operator: !=
             776: name: IB_QPT_RAW_PACKET
             777: operator: ||
             778: operator: !
             779: call: 
              780: name: tunnel_offload_supported
              781: argument_list: 
               782: argument: 
                783: expr: 
                 784: name: mdev
           785: block: 
            786: block_content: 
             787: expr_stmt: 
              788: expr: 
               789: call: 
                790: name: mlx5_ib_dbg
                791: argument_list: 
                 792: argument: 
                  793: expr: 
                   794: name: dev
                 795: argument: 
                  796: expr: 
                   797: literal: "Tunnel offload isn't supported\n"
             798: return: 
              799: expr: 
               800: operator: -
               801: name: EOPNOTSUPP
         802: expr_stmt: 
          803: expr: 
           804: name: 
            805: name: qp
            806: operator: ->
            807: name: tunnel_offload_en
           808: operator: =
           809: literal: true
     810: if_stmt: 
      811: if: 
       812: condition: 
        813: expr: 
         814: name: 
          815: name: init_attr
          816: operator: ->
          817: name: create_flags
         818: operator: &
         819: name: IB_QP_CREATE_SOURCE_QPN
       820: block: 
        821: block_content: 
         822: if_stmt: 
          823: if: 
           824: condition: 
            825: expr: 
             826: name: 
              827: name: init_attr
              828: operator: ->
              829: name: qp_type
             830: operator: !=
             831: name: IB_QPT_UD
             832: operator: ||
             833: operator: (
             834: call: 
              835: name: MLX5_CAP_GEN
              836: argument_list: 
               837: argument: 
                838: expr: 
                 839: name: 
                  840: name: dev
                  841: operator: ->
                  842: name: mdev
               843: argument: 
                844: expr: 
                 845: name: port_type
             846: operator: !=
             847: name: MLX5_CAP_PORT_TYPE_IB
             848: operator: )
             849: operator: ||
             850: operator: !
             851: call: 
              852: name: mlx5_get_flow_namespace
              853: argument_list: 
               854: argument: 
                855: expr: 
                 856: name: 
                  857: name: dev
                  858: operator: ->
                  859: name: mdev
               860: argument: 
                861: expr: 
                 862: name: MLX5_FLOW_NAMESPACE_BYPASS
           863: block: 
            864: block_content: 
             865: expr_stmt: 
              866: expr: 
               867: call: 
                868: name: mlx5_ib_dbg
                869: argument_list: 
                 870: argument: 
                  871: expr: 
                   872: name: dev
                 873: argument: 
                  874: expr: 
                   875: literal: "Source QP option isn't supported\n"
             876: return: 
              877: expr: 
               878: operator: -
               879: name: EOPNOTSUPP
         880: expr_stmt: 
          881: expr: 
           882: name: 
            883: name: qp
            884: operator: ->
            885: name: flags
           886: operator: |=
           887: name: MLX5_IB_QP_UNDERLAY
         888: expr_stmt: 
          889: expr: 
           890: name: 
            891: name: qp
            892: operator: ->
            893: name: underlay_qpn
           894: operator: =
           895: name: 
            896: name: init_attr
            897: operator: ->
            898: name: source_qpn
  899: else: 
   900: block: 
    901: block_content: 
     902: expr_stmt: 
      903: expr: 
       904: name: 
        905: name: qp
        906: operator: ->
        907: name: wq_sig
       908: operator: =
       909: operator: !
       910: operator: !
       911: name: wq_signature
 912: expr_stmt: 
  913: expr: 
   914: name: base
   915: operator: =
   916: ternary: 
    917: condition: 
     918: expr: 
      919: operator: (
      920: name: 
       921: name: init_attr
       922: operator: ->
       923: name: qp_type
      924: operator: ==
      925: name: IB_QPT_RAW_PACKET
      926: operator: ||
      927: name: 
       928: name: qp
       929: operator: ->
       930: name: flags
      931: operator: &
      932: name: MLX5_IB_QP_UNDERLAY
      933: operator: )
    934: then: 
     935: expr: 
      936: operator: &
      937: name: 
       938: name: qp
       939: operator: ->
       940: name: raw_packet_qp
       941: operator: .
       942: name: rq
       943: operator: .
       944: name: base
    945: else: 
     946: expr: 
      947: operator: &
      948: name: 
       949: name: qp
       950: operator: ->
       951: name: trans_qp
       952: operator: .
       953: name: base
 954: expr_stmt: 
  955: expr: 
   956: name: 
    957: name: qp
    958: operator: ->
    959: name: has_rq
   960: operator: =
   961: call: 
    962: name: qp_has_rq
    963: argument_list: 
     964: argument: 
      965: expr: 
       966: name: init_attr
 967: expr_stmt: 
  968: expr: 
   969: name: err
   970: operator: =
   971: call: 
    972: name: set_rq_size
    973: argument_list: 
     974: argument: 
      975: expr: 
       976: name: dev
     977: argument: 
      978: expr: 
       979: operator: &
       980: name: 
        981: name: init_attr
        982: operator: ->
        983: name: cap
     984: argument: 
      985: expr: 
       986: name: 
        987: name: qp
        988: operator: ->
        989: name: has_rq
     990: argument: 
      991: expr: 
       992: name: qp
     993: argument: 
      994: expr: 
       995: ternary: 
        996: condition: 
         997: expr: 
          998: operator: (
          999: name: pd
          1000: operator: &&
          1001: name: 
           1002: name: pd
           1003: operator: ->
           1004: name: uobject
          1005: operator: )
        1006: then: 
         1007: expr: 
          1008: operator: &
          1009: name: ucmd
        1010: else: 
         1011: expr: 
          1012: name: NULL
 1013: if_stmt: 
  1014: if: 
   1015: condition: 
    1016: expr: 
     1017: name: err
   1018: block: 
    1019: block_content: 
     1020: expr_stmt: 
      1021: expr: 
       1022: call: 
        1023: name: mlx5_ib_dbg
        1024: argument_list: 
         1025: argument: 
          1026: expr: 
           1027: name: dev
         1028: argument: 
          1029: expr: 
           1030: literal: "err %d\n"
         1031: argument: 
          1032: expr: 
           1033: name: err
     1034: return: 
      1035: expr: 
       1036: name: err
 1037: if_stmt: 
  1038: if: 
   1039: condition: 
    1040: expr: 
     1041: name: pd
   1042: block: 
    1043: block_content: 
     1044: if_stmt: 
      1045: if: 
       1046: condition: 
        1047: expr: 
         1048: name: 
          1049: name: pd
          1050: operator: ->
          1051: name: uobject
       1052: block: 
        1053: block_content: 
         1054: decl_stmt: 
          1055: decl: 
           1056: type: 
            1057: name: __u32
           1058: name: max_wqes
           1059: init: 
            1060: expr: 
             1061: literal: 1
             1062: operator: <<
             1063: call: 
              1064: name: MLX5_CAP_GEN
              1065: argument_list: 
               1066: argument: 
                1067: expr: 
                 1068: name: mdev
               1069: argument: 
                1070: expr: 
                 1071: name: log_max_qp_sz
         1072: expr_stmt: 
          1073: expr: 
           1074: call: 
            1075: name: mlx5_ib_dbg
            1076: argument_list: 
             1077: argument: 
              1078: expr: 
               1079: name: dev
             1080: argument: 
              1081: expr: 
               1082: literal: "requested sq_wqe_count (%d)\n"
             1083: argument: 
              1084: expr: 
               1085: name: 
                1086: name: ucmd
                1087: operator: .
                1088: name: sq_wqe_count
         1089: if_stmt: 
          1090: if: 
           1091: condition: 
            1092: expr: 
             1093: name: 
              1094: name: ucmd
              1095: operator: .
              1096: name: rq_wqe_shift
             1097: operator: !=
             1098: name: 
              1099: name: qp
              1100: operator: ->
              1101: name: rq
              1102: operator: .
              1103: name: wqe_shift
             1104: operator: ||
             1105: name: 
              1106: name: ucmd
              1107: operator: .
              1108: name: rq_wqe_count
             1109: operator: !=
             1110: name: 
              1111: name: qp
              1112: operator: ->
              1113: name: rq
              1114: operator: .
              1115: name: wqe_cnt
           1116: block: 
            1117: block_content: 
             1118: expr_stmt: 
              1119: expr: 
               1120: call: 
                1121: name: mlx5_ib_dbg
                1122: argument_list: 
                 1123: argument: 
                  1124: expr: 
                   1125: name: dev
                 1126: argument: 
                  1127: expr: 
                   1128: literal: "invalid rq params\n"
             1129: return: 
              1130: expr: 
               1131: operator: -
               1132: name: EINVAL
         1133: if_stmt: 
          1134: if: 
           1135: condition: 
            1136: expr: 
             1137: name: 
              1138: name: ucmd
              1139: operator: .
              1140: name: sq_wqe_count
             1141: operator: >
             1142: name: max_wqes
           1143: block: 
            1144: block_content: 
             1145: expr_stmt: 
              1146: expr: 
               1147: call: 
                1148: name: mlx5_ib_dbg
                1149: argument_list: 
                 1150: argument: 
                  1151: expr: 
                   1152: name: dev
                 1153: argument: 
                  1154: expr: 
                   1155: literal: "requested sq_wqe_count (%d)>max allowed (%d)\n"
                 1156: argument: 
                  1157: expr: 
                   1158: name: 
                    1159: name: ucmd
                    1160: operator: .
                    1161: name: sq_wqe_count
                 1162: argument: 
                  1163: expr: 
                   1164: name: max_wqes
             1165: return: 
              1166: expr: 
               1167: operator: -
               1168: name: EINVAL
         1169: if_stmt: 
          1170: if: 
           1171: condition: 
            1172: expr: 
             1173: name: 
              1174: name: init_attr
              1175: operator: ->
              1176: name: create_flags
             1177: operator: &
             1178: call: 
              1179: name: mlx5_ib_create_qp_sqpn_qp1
              1180: argument_list: 
           1181: block: 
            1182: block_content: 
             1183: expr_stmt: 
              1184: expr: 
               1185: call: 
                1186: name: mlx5_ib_dbg
                1187: argument_list: 
                 1188: argument: 
                  1189: expr: 
                   1190: name: dev
                 1191: argument: 
                  1192: expr: 
                   1193: literal: "user-space is not allowed to create UD QPs spoofing as QP1\n"
             1194: return: 
              1195: expr: 
               1196: operator: -
               1197: name: EINVAL
         1198: expr_stmt: 
          1199: expr: 
           1200: name: err
           1201: operator: =
           1202: call: 
            1203: name: create_user_qp
            1204: argument_list: 
             1205: argument: 
              1206: expr: 
               1207: name: dev
             1208: argument: 
              1209: expr: 
               1210: name: pd
             1211: argument: 
              1212: expr: 
               1213: name: qp
             1214: argument: 
              1215: expr: 
               1216: name: udata
             1217: argument: 
              1218: expr: 
               1219: name: init_attr
             1220: argument: 
              1221: expr: 
               1222: operator: &
               1223: name: in
             1224: argument: 
              1225: expr: 
               1226: operator: &
               1227: name: resp
             1228: argument: 
              1229: expr: 
               1230: operator: &
               1231: name: inlen
             1232: argument: 
              1233: expr: 
               1234: name: base
         1235: if_stmt: 
          1236: if: 
           1237: condition: 
            1238: expr: 
             1239: name: err
           1240: block: 
            1241: block_content: 
             1242: expr_stmt: 
              1243: expr: 
               1244: call: 
                1245: name: mlx5_ib_dbg
                1246: argument_list: 
                 1247: argument: 
                  1248: expr: 
                   1249: name: dev
                 1250: argument: 
                  1251: expr: 
                   1252: literal: "err %d\n"
                 1253: argument: 
                  1254: expr: 
                   1255: name: err
      1256: else: 
       1257: block: 
        1258: block_content: 
         1259: expr_stmt: 
          1260: expr: 
           1261: name: err
           1262: operator: =
           1263: call: 
            1264: name: create_kernel_qp
            1265: argument_list: 
             1266: argument: 
              1267: expr: 
               1268: name: dev
             1269: argument: 
              1270: expr: 
               1271: name: init_attr
             1272: argument: 
              1273: expr: 
               1274: name: qp
             1275: argument: 
              1276: expr: 
               1277: operator: &
               1278: name: in
             1279: argument: 
              1280: expr: 
               1281: operator: &
               1282: name: inlen
             1283: argument: 
              1284: expr: 
               1285: name: base
         1286: if_stmt: 
          1287: if: 
           1288: condition: 
            1289: expr: 
             1290: name: err
           1291: block: 
            1292: block_content: 
             1293: expr_stmt: 
              1294: expr: 
               1295: call: 
                1296: name: mlx5_ib_dbg
                1297: argument_list: 
                 1298: argument: 
                  1299: expr: 
                   1300: name: dev
                 1301: argument: 
                  1302: expr: 
                   1303: literal: "err %d\n"
                 1304: argument: 
                  1305: expr: 
                   1306: name: err
     1307: if_stmt: 
      1308: if: 
       1309: condition: 
        1310: expr: 
         1311: name: err
       1312: block: 
        1313: block_content: 
         1314: return: 
          1315: expr: 
           1316: name: err
  1317: else: 
   1318: block: 
    1319: block_content: 
     1320: expr_stmt: 
      1321: expr: 
       1322: name: in
       1323: operator: =
       1324: call: 
        1325: name: kvzalloc
        1326: argument_list: 
         1327: argument: 
          1328: expr: 
           1329: name: inlen
         1330: argument: 
          1331: expr: 
           1332: name: GFP_KERNEL
     1333: if_stmt: 
      1334: if: 
       1335: condition: 
        1336: expr: 
         1337: operator: !
         1338: name: in
       1339: block: 
        1340: block_content: 
         1341: return: 
          1342: expr: 
           1343: operator: -
           1344: name: ENOMEM
     1345: expr_stmt: 
      1346: expr: 
       1347: name: 
        1348: name: qp
        1349: operator: ->
        1350: name: create_type
       1351: operator: =
       1352: name: MLX5_QP_EMPTY
 1353: if_stmt: 
  1354: if: 
   1355: condition: 
    1356: expr: 
     1357: call: 
      1358: name: is_sqp
      1359: argument_list: 
       1360: argument: 
        1361: expr: 
         1362: name: 
          1363: name: init_attr
          1364: operator: ->
          1365: name: qp_type
   1366: block: 
    1367: block_content: 
     1368: expr_stmt: 
      1369: expr: 
       1370: name: 
        1371: name: qp
        1372: operator: ->
        1373: name: port
       1374: operator: =
       1375: name: 
        1376: name: init_attr
        1377: operator: ->
        1378: name: port_num
 1379: expr_stmt: 
  1380: expr: 
   1381: name: qpc
   1382: operator: =
   1383: call: 
    1384: name: MLX5_ADDR_OF
    1385: argument_list: 
     1386: argument: 
      1387: expr: 
       1388: name: create_qp_in
     1389: argument: 
      1390: expr: 
       1391: name: in
     1392: argument: 
      1393: expr: 
       1394: name: qpc
 1395: expr_stmt: 
  1396: expr: 
   1397: call: 
    1398: name: MLX5_SET
    1399: argument_list: 
     1400: argument: 
      1401: expr: 
       1402: name: qpc
     1403: argument: 
      1404: expr: 
       1405: name: qpc
     1406: argument: 
      1407: expr: 
       1408: name: st
     1409: argument: 
      1410: expr: 
       1411: name: mlx5_st
 1412: expr_stmt: 
  1413: expr: 
   1414: call: 
    1415: name: MLX5_SET
    1416: argument_list: 
     1417: argument: 
      1418: expr: 
       1419: name: qpc
     1420: argument: 
      1421: expr: 
       1422: name: qpc
     1423: argument: 
      1424: expr: 
       1425: name: pm_state
     1426: argument: 
      1427: expr: 
       1428: name: MLX5_QP_PM_MIGRATED
 1429: if_stmt: 
  1430: if: 
   1431: condition: 
    1432: expr: 
     1433: name: 
      1434: name: init_attr
      1435: operator: ->
      1436: name: qp_type
     1437: operator: !=
     1438: name: MLX5_IB_QPT_REG_UMR
   1439: block: 
    1440: block_content: 
     1441: expr_stmt: 
      1442: expr: 
       1443: call: 
        1444: name: MLX5_SET
        1445: argument_list: 
         1446: argument: 
          1447: expr: 
           1448: name: qpc
         1449: argument: 
          1450: expr: 
           1451: name: qpc
         1452: argument: 
          1453: expr: 
           1454: name: pd
         1455: argument: 
          1456: expr: 
           1457: call: 
            1458: name: to_mpd
            1459: argument_list: 
             1460: argument: 
              1461: expr: 
               1462: ternary: 
                1463: condition: 
                 1464: expr: 
                  1465: name: pd
                1466: then: 
                 1467: expr: 
                  1468: name: pd
                1469: else: 
                 1470: expr: 
                  1471: name: 
                   1472: name: devr
                   1473: operator: ->
                   1474: name: p0
           1475: operator: ->
           1476: name: pdn
  1477: else: 
   1478: block: 
    1479: block_content: 
     1480: expr_stmt: 
      1481: expr: 
       1482: call: 
        1483: name: MLX5_SET
        1484: argument_list: 
         1485: argument: 
          1486: expr: 
           1487: name: qpc
         1488: argument: 
          1489: expr: 
           1490: name: qpc
         1491: argument: 
          1492: expr: 
           1493: name: latency_sensitive
         1494: argument: 
          1495: expr: 
           1496: literal: 1
 1497: if_stmt: 
  1498: if: 
   1499: condition: 
    1500: expr: 
     1501: name: 
      1502: name: qp
      1503: operator: ->
      1504: name: wq_sig
   1505: block: 
    1506: block_content: 
     1507: expr_stmt: 
      1508: expr: 
       1509: call: 
        1510: name: MLX5_SET
        1511: argument_list: 
         1512: argument: 
          1513: expr: 
           1514: name: qpc
         1515: argument: 
          1516: expr: 
           1517: name: qpc
         1518: argument: 
          1519: expr: 
           1520: name: wq_signature
         1521: argument: 
          1522: expr: 
           1523: literal: 1
 1524: if_stmt: 
  1525: if: 
   1526: condition: 
    1527: expr: 
     1528: name: 
      1529: name: qp
      1530: operator: ->
      1531: name: flags
     1532: operator: &
     1533: name: MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK
   1534: block: 
    1535: block_content: 
     1536: expr_stmt: 
      1537: expr: 
       1538: call: 
        1539: name: MLX5_SET
        1540: argument_list: 
         1541: argument: 
          1542: expr: 
           1543: name: qpc
         1544: argument: 
          1545: expr: 
           1546: name: qpc
         1547: argument: 
          1548: expr: 
           1549: name: block_lb_mc
         1550: argument: 
          1551: expr: 
           1552: literal: 1
 1553: if_stmt: 
  1554: if: 
   1555: condition: 
    1556: expr: 
     1557: name: 
      1558: name: qp
      1559: operator: ->
      1560: name: flags
     1561: operator: &
     1562: name: MLX5_IB_QP_CROSS_CHANNEL
   1563: block: 
    1564: block_content: 
     1565: expr_stmt: 
      1566: expr: 
       1567: call: 
        1568: name: MLX5_SET
        1569: argument_list: 
         1570: argument: 
          1571: expr: 
           1572: name: qpc
         1573: argument: 
          1574: expr: 
           1575: name: qpc
         1576: argument: 
          1577: expr: 
           1578: name: cd_master
         1579: argument: 
          1580: expr: 
           1581: literal: 1
 1582: if_stmt: 
  1583: if: 
   1584: condition: 
    1585: expr: 
     1586: name: 
      1587: name: qp
      1588: operator: ->
      1589: name: flags
     1590: operator: &
     1591: name: MLX5_IB_QP_MANAGED_SEND
   1592: block: 
    1593: block_content: 
     1594: expr_stmt: 
      1595: expr: 
       1596: call: 
        1597: name: MLX5_SET
        1598: argument_list: 
         1599: argument: 
          1600: expr: 
           1601: name: qpc
         1602: argument: 
          1603: expr: 
           1604: name: qpc
         1605: argument: 
          1606: expr: 
           1607: name: cd_slave_send
         1608: argument: 
          1609: expr: 
           1610: literal: 1
 1611: if_stmt: 
  1612: if: 
   1613: condition: 
    1614: expr: 
     1615: name: 
      1616: name: qp
      1617: operator: ->
      1618: name: flags
     1619: operator: &
     1620: name: MLX5_IB_QP_MANAGED_RECV
   1621: block: 
    1622: block_content: 
     1623: expr_stmt: 
      1624: expr: 
       1625: call: 
        1626: name: MLX5_SET
        1627: argument_list: 
         1628: argument: 
          1629: expr: 
           1630: name: qpc
         1631: argument: 
          1632: expr: 
           1633: name: qpc
         1634: argument: 
          1635: expr: 
           1636: name: cd_slave_receive
         1637: argument: 
          1638: expr: 
           1639: literal: 1
 1640: if_stmt: 
  1641: if: 
   1642: condition: 
    1643: expr: 
     1644: name: 
      1645: name: qp
      1646: operator: ->
      1647: name: scat_cqe
     1648: operator: &&
     1649: call: 
      1650: name: is_connected
      1651: argument_list: 
       1652: argument: 
        1653: expr: 
         1654: name: 
          1655: name: init_attr
          1656: operator: ->
          1657: name: qp_type
   1658: block: 
    1659: block_content: 
     1660: decl_stmt: 
      1661: decl: 
       1662: type: 
        1663: name: int
       1664: name: rcqe_sz
     1665: decl_stmt: 
      1666: decl: 
       1667: type: 
        1668: name: int
       1669: name: scqe_sz
     1670: expr_stmt: 
      1671: expr: 
       1672: name: rcqe_sz
       1673: operator: =
       1674: call: 
        1675: name: mlx5_ib_get_cqe_size
        1676: argument_list: 
         1677: argument: 
          1678: expr: 
           1679: name: dev
         1680: argument: 
          1681: expr: 
           1682: name: 
            1683: name: init_attr
            1684: operator: ->
            1685: name: recv_cq
     1686: expr_stmt: 
      1687: expr: 
       1688: name: scqe_sz
       1689: operator: =
       1690: call: 
        1691: name: mlx5_ib_get_cqe_size
        1692: argument_list: 
         1693: argument: 
          1694: expr: 
           1695: name: dev
         1696: argument: 
          1697: expr: 
           1698: name: 
            1699: name: init_attr
            1700: operator: ->
            1701: name: send_cq
     1702: if_stmt: 
      1703: if: 
       1704: condition: 
        1705: expr: 
         1706: name: rcqe_sz
         1707: operator: ==
         1708: literal: 128
       1709: block: 
        1710: block_content: 
         1711: expr_stmt: 
          1712: expr: 
           1713: call: 
            1714: name: MLX5_SET
            1715: argument_list: 
             1716: argument: 
              1717: expr: 
               1718: name: qpc
             1719: argument: 
              1720: expr: 
               1721: name: qpc
             1722: argument: 
              1723: expr: 
               1724: name: cs_res
             1725: argument: 
              1726: expr: 
               1727: name: MLX5_RES_SCAT_DATA64_CQE
      1728: else: 
       1729: block: 
        1730: block_content: 
         1731: expr_stmt: 
          1732: expr: 
           1733: call: 
            1734: name: MLX5_SET
            1735: argument_list: 
             1736: argument: 
              1737: expr: 
               1738: name: qpc
             1739: argument: 
              1740: expr: 
               1741: name: qpc
             1742: argument: 
              1743: expr: 
               1744: name: cs_res
             1745: argument: 
              1746: expr: 
               1747: name: MLX5_RES_SCAT_DATA32_CQE
     1748: if_stmt: 
      1749: if: 
       1750: condition: 
        1751: expr: 
         1752: name: 
          1753: name: init_attr
          1754: operator: ->
          1755: name: sq_sig_type
         1756: operator: ==
         1757: name: IB_SIGNAL_ALL_WR
       1758: block: 
        1759: block_content: 
         1760: if_stmt: 
          1761: if: 
           1762: condition: 
            1763: expr: 
             1764: name: scqe_sz
             1765: operator: ==
             1766: literal: 128
           1767: block: 
            1768: block_content: 
             1769: expr_stmt: 
              1770: expr: 
               1771: call: 
                1772: name: MLX5_SET
                1773: argument_list: 
                 1774: argument: 
                  1775: expr: 
                   1776: name: qpc
                 1777: argument: 
                  1778: expr: 
                   1779: name: qpc
                 1780: argument: 
                  1781: expr: 
                   1782: name: cs_req
                 1783: argument: 
                  1784: expr: 
                   1785: name: MLX5_REQ_SCAT_DATA64_CQE
          1786: else: 
           1787: block: 
            1788: block_content: 
             1789: expr_stmt: 
              1790: expr: 
               1791: call: 
                1792: name: MLX5_SET
                1793: argument_list: 
                 1794: argument: 
                  1795: expr: 
                   1796: name: qpc
                 1797: argument: 
                  1798: expr: 
                   1799: name: qpc
                 1800: argument: 
                  1801: expr: 
                   1802: name: cs_req
                 1803: argument: 
                  1804: expr: 
                   1805: name: MLX5_REQ_SCAT_DATA32_CQE
 1806: if_stmt: 
  1807: if: 
   1808: condition: 
    1809: expr: 
     1810: name: 
      1811: name: qp
      1812: operator: ->
      1813: name: rq
      1814: operator: .
      1815: name: wqe_cnt
   1816: block: 
    1817: block_content: 
     1818: expr_stmt: 
      1819: expr: 
       1820: call: 
        1821: name: MLX5_SET
        1822: argument_list: 
         1823: argument: 
          1824: expr: 
           1825: name: qpc
         1826: argument: 
          1827: expr: 
           1828: name: qpc
         1829: argument: 
          1830: expr: 
           1831: name: log_rq_stride
         1832: argument: 
          1833: expr: 
           1834: name: 
            1835: name: qp
            1836: operator: ->
            1837: name: rq
            1838: operator: .
            1839: name: wqe_shift
           1840: operator: -
           1841: literal: 4
     1842: expr_stmt: 
      1843: expr: 
       1844: call: 
        1845: name: MLX5_SET
        1846: argument_list: 
         1847: argument: 
          1848: expr: 
           1849: name: qpc
         1850: argument: 
          1851: expr: 
           1852: name: qpc
         1853: argument: 
          1854: expr: 
           1855: name: log_rq_size
         1856: argument: 
          1857: expr: 
           1858: call: 
            1859: name: ilog2
            1860: argument_list: 
             1861: argument: 
              1862: expr: 
               1863: name: 
                1864: name: qp
                1865: operator: ->
                1866: name: rq
                1867: operator: .
                1868: name: wqe_cnt
 1869: expr_stmt: 
  1870: expr: 
   1871: call: 
    1872: name: MLX5_SET
    1873: argument_list: 
     1874: argument: 
      1875: expr: 
       1876: name: qpc
     1877: argument: 
      1878: expr: 
       1879: name: qpc
     1880: argument: 
      1881: expr: 
       1882: name: rq_type
     1883: argument: 
      1884: expr: 
       1885: call: 
        1886: name: get_rx_type
        1887: argument_list: 
         1888: argument: 
          1889: expr: 
           1890: name: qp
         1891: argument: 
          1892: expr: 
           1893: name: init_attr
 1894: if_stmt: 
  1895: if: 
   1896: condition: 
    1897: expr: 
     1898: name: 
      1899: name: qp
      1900: operator: ->
      1901: name: sq
      1902: operator: .
      1903: name: wqe_cnt
   1904: block: 
    1905: block_content: 
     1906: expr_stmt: 
      1907: expr: 
       1908: call: 
        1909: name: MLX5_SET
        1910: argument_list: 
         1911: argument: 
          1912: expr: 
           1913: name: qpc
         1914: argument: 
          1915: expr: 
           1916: name: qpc
         1917: argument: 
          1918: expr: 
           1919: name: log_sq_size
         1920: argument: 
          1921: expr: 
           1922: call: 
            1923: name: ilog2
            1924: argument_list: 
             1925: argument: 
              1926: expr: 
               1927: name: 
                1928: name: qp
                1929: operator: ->
                1930: name: sq
                1931: operator: .
                1932: name: wqe_cnt
  1933: else: 
   1934: block: 
    1935: block_content: 
     1936: expr_stmt: 
      1937: expr: 
       1938: call: 
        1939: name: MLX5_SET
        1940: argument_list: 
         1941: argument: 
          1942: expr: 
           1943: name: qpc
         1944: argument: 
          1945: expr: 
           1946: name: qpc
         1947: argument: 
          1948: expr: 
           1949: name: no_sq
         1950: argument: 
          1951: expr: 
           1952: literal: 1
     1953: if_stmt: 
      1954: if: 
       1955: condition: 
        1956: expr: 
         1957: name: 
          1958: name: init_attr
          1959: operator: ->
          1960: name: srq
         1961: operator: &&
         1962: name: 
          1963: name: init_attr
          1964: operator: ->
          1965: name: srq
          1966: operator: ->
          1967: name: srq_type
         1968: operator: ==
         1969: name: IB_SRQT_TM
       1970: block: 
        1971: block_content: 
         1972: expr_stmt: 
          1973: expr: 
           1974: call: 
            1975: name: MLX5_SET
            1976: argument_list: 
             1977: argument: 
              1978: expr: 
               1979: name: qpc
             1980: argument: 
              1981: expr: 
               1982: name: qpc
             1983: argument: 
              1984: expr: 
               1985: name: offload_type
             1986: argument: 
              1987: expr: 
               1988: name: MLX5_QPC_OFFLOAD_TYPE_RNDV
 1989: comment: /* Set default resources */
 1990: switch: 
  1991: condition: 
   1992: expr: 
    1993: name: 
     1994: name: init_attr
     1995: operator: ->
     1996: name: qp_type
  1997: block: 
   1998: block_content: 
    1999: case: 
     2000: expr: 
      2001: name: IB_QPT_XRC_TGT
    2002: expr_stmt: 
     2003: expr: 
      2004: call: 
       2005: name: MLX5_SET
       2006: argument_list: 
        2007: argument: 
         2008: expr: 
          2009: name: qpc
        2010: argument: 
         2011: expr: 
          2012: name: qpc
        2013: argument: 
         2014: expr: 
          2015: name: cqn_rcv
        2016: argument: 
         2017: expr: 
          2018: call: 
           2019: name: to_mcq
           2020: argument_list: 
            2021: argument: 
             2022: expr: 
              2023: name: 
               2024: name: devr
               2025: operator: ->
               2026: name: c0
          2027: operator: ->
          2028: name: 
           2029: name: mcq
           2030: operator: .
           2031: name: cqn
    2032: expr_stmt: 
     2033: expr: 
      2034: call: 
       2035: name: MLX5_SET
       2036: argument_list: 
        2037: argument: 
         2038: expr: 
          2039: name: qpc
        2040: argument: 
         2041: expr: 
          2042: name: qpc
        2043: argument: 
         2044: expr: 
          2045: name: cqn_snd
        2046: argument: 
         2047: expr: 
          2048: call: 
           2049: name: to_mcq
           2050: argument_list: 
            2051: argument: 
             2052: expr: 
              2053: name: 
               2054: name: devr
               2055: operator: ->
               2056: name: c0
          2057: operator: ->
          2058: name: 
           2059: name: mcq
           2060: operator: .
           2061: name: cqn
    2062: expr_stmt: 
     2063: expr: 
      2064: call: 
       2065: name: MLX5_SET
       2066: argument_list: 
        2067: argument: 
         2068: expr: 
          2069: name: qpc
        2070: argument: 
         2071: expr: 
          2072: name: qpc
        2073: argument: 
         2074: expr: 
          2075: name: srqn_rmpn_xrqn
        2076: argument: 
         2077: expr: 
          2078: call: 
           2079: name: to_msrq
           2080: argument_list: 
            2081: argument: 
             2082: expr: 
              2083: name: 
               2084: name: devr
               2085: operator: ->
               2086: name: s0
          2087: operator: ->
          2088: name: 
           2089: name: msrq
           2090: operator: .
           2091: name: srqn
    2092: expr_stmt: 
     2093: expr: 
      2094: call: 
       2095: name: MLX5_SET
       2096: argument_list: 
        2097: argument: 
         2098: expr: 
          2099: name: qpc
        2100: argument: 
         2101: expr: 
          2102: name: qpc
        2103: argument: 
         2104: expr: 
          2105: name: xrcd
        2106: argument: 
         2107: expr: 
          2108: call: 
           2109: name: to_mxrcd
           2110: argument_list: 
            2111: argument: 
             2112: expr: 
              2113: name: 
               2114: name: init_attr
               2115: operator: ->
               2116: name: xrcd
          2117: operator: ->
          2118: name: xrcdn
    2119: break: 
    2120: case: 
     2121: expr: 
      2122: name: IB_QPT_XRC_INI
    2123: expr_stmt: 
     2124: expr: 
      2125: call: 
       2126: name: MLX5_SET
       2127: argument_list: 
        2128: argument: 
         2129: expr: 
          2130: name: qpc
        2131: argument: 
         2132: expr: 
          2133: name: qpc
        2134: argument: 
         2135: expr: 
          2136: name: cqn_rcv
        2137: argument: 
         2138: expr: 
          2139: call: 
           2140: name: to_mcq
           2141: argument_list: 
            2142: argument: 
             2143: expr: 
              2144: name: 
               2145: name: devr
               2146: operator: ->
               2147: name: c0
          2148: operator: ->
          2149: name: 
           2150: name: mcq
           2151: operator: .
           2152: name: cqn
    2153: expr_stmt: 
     2154: expr: 
      2155: call: 
       2156: name: MLX5_SET
       2157: argument_list: 
        2158: argument: 
         2159: expr: 
          2160: name: qpc
        2161: argument: 
         2162: expr: 
          2163: name: qpc
        2164: argument: 
         2165: expr: 
          2166: name: xrcd
        2167: argument: 
         2168: expr: 
          2169: call: 
           2170: name: to_mxrcd
           2171: argument_list: 
            2172: argument: 
             2173: expr: 
              2174: name: 
               2175: name: devr
               2176: operator: ->
               2177: name: x1
          2178: operator: ->
          2179: name: xrcdn
    2180: expr_stmt: 
     2181: expr: 
      2182: call: 
       2183: name: MLX5_SET
       2184: argument_list: 
        2185: argument: 
         2186: expr: 
          2187: name: qpc
        2188: argument: 
         2189: expr: 
          2190: name: qpc
        2191: argument: 
         2192: expr: 
          2193: name: srqn_rmpn_xrqn
        2194: argument: 
         2195: expr: 
          2196: call: 
           2197: name: to_msrq
           2198: argument_list: 
            2199: argument: 
             2200: expr: 
              2201: name: 
               2202: name: devr
               2203: operator: ->
               2204: name: s0
          2205: operator: ->
          2206: name: 
           2207: name: msrq
           2208: operator: .
           2209: name: srqn
    2210: break: 
    2211: default: 
    2212: if_stmt: 
     2213: if: 
      2214: condition: 
       2215: expr: 
        2216: name: 
         2217: name: init_attr
         2218: operator: ->
         2219: name: srq
      2220: block: 
       2221: block_content: 
        2222: expr_stmt: 
         2223: expr: 
          2224: call: 
           2225: name: MLX5_SET
           2226: argument_list: 
            2227: argument: 
             2228: expr: 
              2229: name: qpc
            2230: argument: 
             2231: expr: 
              2232: name: qpc
            2233: argument: 
             2234: expr: 
              2235: name: xrcd
            2236: argument: 
             2237: expr: 
              2238: call: 
               2239: name: to_mxrcd
               2240: argument_list: 
                2241: argument: 
                 2242: expr: 
                  2243: name: 
                   2244: name: devr
                   2245: operator: ->
                   2246: name: x0
              2247: operator: ->
              2248: name: xrcdn
        2249: expr_stmt: 
         2250: expr: 
          2251: call: 
           2252: name: MLX5_SET
           2253: argument_list: 
            2254: argument: 
             2255: expr: 
              2256: name: qpc
            2257: argument: 
             2258: expr: 
              2259: name: qpc
            2260: argument: 
             2261: expr: 
              2262: name: srqn_rmpn_xrqn
            2263: argument: 
             2264: expr: 
              2265: call: 
               2266: name: to_msrq
               2267: argument_list: 
                2268: argument: 
                 2269: expr: 
                  2270: name: 
                   2271: name: init_attr
                   2272: operator: ->
                   2273: name: srq
              2274: operator: ->
              2275: name: 
               2276: name: msrq
               2277: operator: .
               2278: name: srqn
     2279: else: 
      2280: block: 
       2281: block_content: 
        2282: expr_stmt: 
         2283: expr: 
          2284: call: 
           2285: name: MLX5_SET
           2286: argument_list: 
            2287: argument: 
             2288: expr: 
              2289: name: qpc
            2290: argument: 
             2291: expr: 
              2292: name: qpc
            2293: argument: 
             2294: expr: 
              2295: name: xrcd
            2296: argument: 
             2297: expr: 
              2298: call: 
               2299: name: to_mxrcd
               2300: argument_list: 
                2301: argument: 
                 2302: expr: 
                  2303: name: 
                   2304: name: devr
                   2305: operator: ->
                   2306: name: x1
              2307: operator: ->
              2308: name: xrcdn
        2309: expr_stmt: 
         2310: expr: 
          2311: call: 
           2312: name: MLX5_SET
           2313: argument_list: 
            2314: argument: 
             2315: expr: 
              2316: name: qpc
            2317: argument: 
             2318: expr: 
              2319: name: qpc
            2320: argument: 
             2321: expr: 
              2322: name: srqn_rmpn_xrqn
            2323: argument: 
             2324: expr: 
              2325: call: 
               2326: name: to_msrq
               2327: argument_list: 
                2328: argument: 
                 2329: expr: 
                  2330: name: 
                   2331: name: devr
                   2332: operator: ->
                   2333: name: s1
              2334: operator: ->
              2335: name: 
               2336: name: msrq
               2337: operator: .
               2338: name: srqn
 2339: if_stmt: 
  2340: if: 
   2341: condition: 
    2342: expr: 
     2343: name: 
      2344: name: init_attr
      2345: operator: ->
      2346: name: send_cq
   2347: block: 
    2348: block_content: 
     2349: expr_stmt: 
      2350: expr: 
       2351: call: 
        2352: name: MLX5_SET
        2353: argument_list: 
         2354: argument: 
          2355: expr: 
           2356: name: qpc
         2357: argument: 
          2358: expr: 
           2359: name: qpc
         2360: argument: 
          2361: expr: 
           2362: name: cqn_snd
         2363: argument: 
          2364: expr: 
           2365: call: 
            2366: name: to_mcq
            2367: argument_list: 
             2368: argument: 
              2369: expr: 
               2370: name: 
                2371: name: init_attr
                2372: operator: ->
                2373: name: send_cq
           2374: operator: ->
           2375: name: 
            2376: name: mcq
            2377: operator: .
            2378: name: cqn
 2379: if_stmt: 
  2380: if: 
   2381: condition: 
    2382: expr: 
     2383: name: 
      2384: name: init_attr
      2385: operator: ->
      2386: name: recv_cq
   2387: block: 
    2388: block_content: 
     2389: expr_stmt: 
      2390: expr: 
       2391: call: 
        2392: name: MLX5_SET
        2393: argument_list: 
         2394: argument: 
          2395: expr: 
           2396: name: qpc
         2397: argument: 
          2398: expr: 
           2399: name: qpc
         2400: argument: 
          2401: expr: 
           2402: name: cqn_rcv
         2403: argument: 
          2404: expr: 
           2405: call: 
            2406: name: to_mcq
            2407: argument_list: 
             2408: argument: 
              2409: expr: 
               2410: name: 
                2411: name: init_attr
                2412: operator: ->
                2413: name: recv_cq
           2414: operator: ->
           2415: name: 
            2416: name: mcq
            2417: operator: .
            2418: name: cqn
 2419: expr_stmt: 
  2420: expr: 
   2421: call: 
    2422: name: MLX5_SET64
    2423: argument_list: 
     2424: argument: 
      2425: expr: 
       2426: name: qpc
     2427: argument: 
      2428: expr: 
       2429: name: qpc
     2430: argument: 
      2431: expr: 
       2432: name: dbr_addr
     2433: argument: 
      2434: expr: 
       2435: name: 
        2436: name: qp
        2437: operator: ->
        2438: name: db
        2439: operator: .
        2440: name: dma
 2441: comment: /* 0xffffff means we ask to work with cqe version 0 */
 2442: if_stmt: 
  2443: if: 
   2444: condition: 
    2445: expr: 
     2446: call: 
      2447: name: MLX5_CAP_GEN
      2448: argument_list: 
       2449: argument: 
        2450: expr: 
         2451: name: mdev
       2452: argument: 
        2453: expr: 
         2454: name: cqe_version
     2455: operator: ==
     2456: name: MLX5_CQE_VERSION_V1
   2457: block: 
    2458: block_content: 
     2459: expr_stmt: 
      2460: expr: 
       2461: call: 
        2462: name: MLX5_SET
        2463: argument_list: 
         2464: argument: 
          2465: expr: 
           2466: name: qpc
         2467: argument: 
          2468: expr: 
           2469: name: qpc
         2470: argument: 
          2471: expr: 
           2472: name: user_index
         2473: argument: 
          2474: expr: 
           2475: name: uidx
 2476: comment: /* we use IB_QP_CREATE_IPOIB_UD_LSO to indicates ipoib qp */
 2477: if_stmt: 
  2478: if: 
   2479: condition: 
    2480: expr: 
     2481: name: 
      2482: name: init_attr
      2483: operator: ->
      2484: name: qp_type
     2485: operator: ==
     2486: name: IB_QPT_UD
     2487: operator: &&
     2488: operator: (
     2489: name: 
      2490: name: init_attr
      2491: operator: ->
      2492: name: create_flags
     2493: operator: &
     2494: name: IB_QP_CREATE_IPOIB_UD_LSO
     2495: operator: )
   2496: block: 
    2497: block_content: 
     2498: expr_stmt: 
      2499: expr: 
       2500: call: 
        2501: name: MLX5_SET
        2502: argument_list: 
         2503: argument: 
          2504: expr: 
           2505: name: qpc
         2506: argument: 
          2507: expr: 
           2508: name: qpc
         2509: argument: 
          2510: expr: 
           2511: name: ulp_stateless_offload_mode
         2512: argument: 
          2513: expr: 
           2514: literal: 1
     2515: expr_stmt: 
      2516: expr: 
       2517: name: 
        2518: name: qp
        2519: operator: ->
        2520: name: flags
       2521: operator: |=
       2522: name: MLX5_IB_QP_LSO
 2523: if_stmt: 
  2524: if: 
   2525: condition: 
    2526: expr: 
     2527: name: 
      2528: name: init_attr
      2529: operator: ->
      2530: name: create_flags
     2531: operator: &
     2532: name: IB_QP_CREATE_PCI_WRITE_END_PADDING
   2533: block: 
    2534: block_content: 
     2535: if_stmt: 
      2536: if: 
       2537: condition: 
        2538: expr: 
         2539: operator: !
         2540: call: 
          2541: name: MLX5_CAP_GEN
          2542: argument_list: 
           2543: argument: 
            2544: expr: 
             2545: name: 
              2546: name: dev
              2547: operator: ->
              2548: name: mdev
           2549: argument: 
            2550: expr: 
             2551: name: end_pad
       2552: block: 
        2553: block_content: 
         2554: expr_stmt: 
          2555: expr: 
           2556: call: 
            2557: name: mlx5_ib_dbg
            2558: argument_list: 
             2559: argument: 
              2560: expr: 
               2561: name: dev
             2562: argument: 
              2563: expr: 
               2564: literal: "scatter end padding is not supported\n"
         2565: expr_stmt: 
          2566: expr: 
           2567: name: err
           2568: operator: =
           2569: operator: -
           2570: name: EOPNOTSUPP
         2571: goto: 
          2572: name: err
      2573: if: 
       2574: condition: 
        2575: expr: 
         2576: name: 
          2577: name: init_attr
          2578: operator: ->
          2579: name: qp_type
         2580: operator: !=
         2581: name: IB_QPT_RAW_PACKET
       2582: block: 
        2583: block_content: 
         2584: expr_stmt: 
          2585: expr: 
           2586: call: 
            2587: name: MLX5_SET
            2588: argument_list: 
             2589: argument: 
              2590: expr: 
               2591: name: qpc
             2592: argument: 
              2593: expr: 
               2594: name: qpc
             2595: argument: 
              2596: expr: 
               2597: name: end_padding_mode
             2598: argument: 
              2599: expr: 
               2600: name: MLX5_WQ_END_PAD_MODE_ALIGN
      2601: else: 
       2602: block: 
        2603: block_content: 
         2604: expr_stmt: 
          2605: expr: 
           2606: name: 
            2607: name: qp
            2608: operator: ->
            2609: name: flags
           2610: operator: |=
           2611: name: MLX5_IB_QP_PCI_WRITE_END_PADDING
 2612: if_stmt: 
  2613: if: 
   2614: condition: 
    2615: expr: 
     2616: name: inlen
     2617: operator: <
     2618: literal: 0
   2619: block: 
    2620: block_content: 
     2621: expr_stmt: 
      2622: expr: 
       2623: name: err
       2624: operator: =
       2625: operator: -
       2626: name: EINVAL
     2627: goto: 
      2628: name: err
 2629: if_stmt: 
  2630: if: 
   2631: condition: 
    2632: expr: 
     2633: name: 
      2634: name: init_attr
      2635: operator: ->
      2636: name: qp_type
     2637: operator: ==
     2638: name: IB_QPT_RAW_PACKET
     2639: operator: ||
     2640: name: 
      2641: name: qp
      2642: operator: ->
      2643: name: flags
     2644: operator: &
     2645: name: MLX5_IB_QP_UNDERLAY
   2646: block: 
    2647: block_content: 
     2648: expr_stmt: 
      2649: expr: 
       2650: name: 
        2651: name: qp
        2652: operator: ->
        2653: name: raw_packet_qp
        2654: operator: .
        2655: name: sq
        2656: operator: .
        2657: name: ubuffer
        2658: operator: .
        2659: name: buf_addr
       2660: operator: =
       2661: name: 
        2662: name: ucmd
        2663: operator: .
        2664: name: sq_buf_addr
     2665: expr_stmt: 
      2666: expr: 
       2667: call: 
        2668: name: raw_packet_qp_copy_info
        2669: argument_list: 
         2670: argument: 
          2671: expr: 
           2672: name: qp
         2673: argument: 
          2674: expr: 
           2675: operator: &
           2676: name: 
            2677: name: qp
            2678: operator: ->
            2679: name: raw_packet_qp
     2680: expr_stmt: 
      2681: expr: 
       2682: name: err
       2683: operator: =
       2684: call: 
        2685: name: create_raw_packet_qp
        2686: argument_list: 
         2687: argument: 
          2688: expr: 
           2689: name: dev
         2690: argument: 
          2691: expr: 
           2692: name: qp
         2693: argument: 
          2694: expr: 
           2695: name: in
         2696: argument: 
          2697: expr: 
           2698: name: inlen
         2699: argument: 
          2700: expr: 
           2701: name: pd
  2702: else: 
   2703: block: 
    2704: block_content: 
     2705: expr_stmt: 
      2706: expr: 
       2707: name: err
       2708: operator: =
       2709: call: 
        2710: name: mlx5_core_create_qp
        2711: argument_list: 
         2712: argument: 
          2713: expr: 
           2714: name: 
            2715: name: dev
            2716: operator: ->
            2717: name: mdev
         2718: argument: 
          2719: expr: 
           2720: operator: &
           2721: name: 
            2722: name: base
            2723: operator: ->
            2724: name: mqp
         2725: argument: 
          2726: expr: 
           2727: name: in
         2728: argument: 
          2729: expr: 
           2730: name: inlen
 2731: if_stmt: 
  2732: if: 
   2733: condition: 
    2734: expr: 
     2735: name: err
   2736: block: 
    2737: block_content: 
     2738: expr_stmt: 
      2739: expr: 
       2740: call: 
        2741: name: mlx5_ib_dbg
        2742: argument_list: 
         2743: argument: 
          2744: expr: 
           2745: name: dev
         2746: argument: 
          2747: expr: 
           2748: literal: "create qp failed\n"
     2749: goto: 
      2750: name: err_create
 2751: expr_stmt: 
  2752: expr: 
   2753: call: 
    2754: name: kvfree
    2755: argument_list: 
     2756: argument: 
      2757: expr: 
       2758: name: in
 2759: expr_stmt: 
  2760: expr: 
   2761: name: 
    2762: name: base
    2763: operator: ->
    2764: name: container_mibqp
   2765: operator: =
   2766: name: qp
 2767: expr_stmt: 
  2768: expr: 
   2769: name: 
    2770: name: base
    2771: operator: ->
    2772: name: mqp
    2773: operator: .
    2774: name: event
   2775: operator: =
   2776: name: mlx5_ib_qp_event
 2777: expr_stmt: 
  2778: expr: 
   2779: call: 
    2780: name: get_cqs
    2781: argument_list: 
     2782: argument: 
      2783: expr: 
       2784: name: 
        2785: name: init_attr
        2786: operator: ->
        2787: name: qp_type
     2788: argument: 
      2789: expr: 
       2790: name: 
        2791: name: init_attr
        2792: operator: ->
        2793: name: send_cq
     2794: argument: 
      2795: expr: 
       2796: name: 
        2797: name: init_attr
        2798: operator: ->
        2799: name: recv_cq
     2800: argument: 
      2801: expr: 
       2802: operator: &
       2803: name: send_cq
     2804: argument: 
      2805: expr: 
       2806: operator: &
       2807: name: recv_cq
 2808: expr_stmt: 
  2809: expr: 
   2810: call: 
    2811: name: spin_lock_irqsave
    2812: argument_list: 
     2813: argument: 
      2814: expr: 
       2815: operator: &
       2816: name: 
        2817: name: dev
        2818: operator: ->
        2819: name: reset_flow_resource_lock
     2820: argument: 
      2821: expr: 
       2822: name: flags
 2823: expr_stmt: 
  2824: expr: 
   2825: call: 
    2826: name: mlx5_ib_lock_cqs
    2827: argument_list: 
     2828: argument: 
      2829: expr: 
       2830: name: send_cq
     2831: argument: 
      2832: expr: 
       2833: name: recv_cq
 2834: comment: /* Maintain device to QPs access, needed for further handling via

----------------------------------------
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: 
     5: name: struct
     6: name: mlx5_ib_resources
    7: modifier: *
   8: name: devr
   9: init: 
    10: expr: 
     11: operator: &
     12: name: 
      13: name: dev
      14: operator: ->
      15: name: devr
 16: decl_stmt: 
  17: decl: 
   18: type: 
    19: name: int
   20: name: inlen
   21: init: 
    22: expr: 
     23: call: 
      24: name: MLX5_ST_SZ_BYTES
      25: argument_list: 
       26: argument: 
        27: expr: 
         28: name: create_qp_in
 29: decl_stmt: 
  30: decl: 
   31: type: 
    32: name: 
     33: name: struct
     34: name: mlx5_core_dev
    35: modifier: *
   36: name: mdev
   37: init: 
    38: expr: 
     39: name: 
      40: name: dev
      41: operator: ->
      42: name: mdev
 43: decl_stmt: 
  44: decl: 
   45: type: 
    46: name: 
     47: name: struct
     48: name: mlx5_ib_create_qp_resp
   49: name: resp
   50: init: 
    51: expr: 
     52: block: 
 53: decl_stmt: 
  54: decl: 
   55: type: 
    56: name: 
     57: name: struct
     58: name: mlx5_ib_cq
    59: modifier: *
   60: name: send_cq
 61: decl_stmt: 
  62: decl: 
   63: type: 
    64: name: 
     65: name: struct
     66: name: mlx5_ib_cq
    67: modifier: *
   68: name: recv_cq
 69: decl_stmt: 
  70: decl: 
   71: type: 
    72: name: unsigned
    73: name: long
   74: name: flags
 75: decl_stmt: 
  76: decl: 
   77: type: 
    78: name: u32
   79: name: uidx
   80: init: 
    81: expr: 
     82: name: MLX5_IB_DEFAULT_UIDX
 83: decl_stmt: 
  84: decl: 
   85: type: 
    86: name: 
     87: name: struct
     88: name: mlx5_ib_create_qp
   89: name: ucmd
 90: decl_stmt: 
  91: decl: 
   92: type: 
    93: name: 
     94: name: struct
     95: name: mlx5_ib_qp_base
    96: modifier: *
   97: name: base
 98: decl_stmt: 
  99: decl: 
   100: type: 
    101: name: int
   102: name: mlx5_st
 103: decl_stmt: 
  104: decl: 
   105: type: 
    106: name: void
    107: modifier: *
   108: name: qpc
 109: decl_stmt: 
  110: decl: 
   111: type: 
    112: name: u32
    113: modifier: *
   114: name: in
 115: decl_stmt: 
  116: decl: 
   117: type: 
    118: name: int
   119: name: err
 120: expr_stmt: 
  121: expr: 
   122: call: 
    123: name: mutex_init
    124: argument_list: 
     125: argument: 
      126: expr: 
       127: operator: &
       128: name: 
        129: name: qp
        130: operator: ->
        131: name: mutex
 132: expr_stmt: 
  133: expr: 
   134: call: 
    135: name: spin_lock_init
    136: argument_list: 
     137: argument: 
      138: expr: 
       139: operator: &
       140: name: 
        141: name: qp
        142: operator: ->
        143: name: sq
        144: operator: .
        145: name: lock
 146: expr_stmt: 
  147: expr: 
   148: call: 
    149: name: spin_lock_init
    150: argument_list: 
     151: argument: 
      152: expr: 
       153: operator: &
       154: name: 
        155: name: qp
        156: operator: ->
        157: name: rq
        158: operator: .
        159: name: lock
 160: expr_stmt: 
  161: expr: 
   162: name: mlx5_st
   163: operator: =
   164: call: 
    165: name: to_mlx5_st
    166: argument_list: 
     167: argument: 
      168: expr: 
       169: name: 
        170: name: init_attr
        171: operator: ->
        172: name: qp_type
 173: if_stmt: 
  174: if: 
   175: condition: 
    176: expr: 
     177: name: mlx5_st
     178: operator: <
     179: literal: 0
   180: block: 
    181: block_content: 
     182: return: 
      183: expr: 
       184: operator: -
       185: name: EINVAL
 186: if_stmt: 
  187: if: 
   188: condition: 
    189: expr: 
     190: name: 
      191: name: init_attr
      192: operator: ->
      193: name: rwq_ind_tbl
   194: block: 
    195: block_content: 
     196: if_stmt: 
      197: if: 
       198: condition: 
        199: expr: 
         200: operator: !
         201: name: udata
       202: block: 
        203: block_content: 
         204: return: 
          205: expr: 
           206: operator: -
           207: name: ENOSYS
     208: expr_stmt: 
      209: expr: 
       210: name: err
       211: operator: =
       212: call: 
        213: name: create_rss_raw_qp_tir
        214: argument_list: 
         215: argument: 
          216: expr: 
           217: name: dev
         218: argument: 
          219: expr: 
           220: name: qp
         221: argument: 
          222: expr: 
           223: name: pd
         224: argument: 
          225: expr: 
           226: name: init_attr
         227: argument: 
          228: expr: 
           229: name: udata
     230: return: 
      231: expr: 
       232: name: err
 233: if_stmt: 
  234: if: 
   235: condition: 
    236: expr: 
     237: name: 
      238: name: init_attr
      239: operator: ->
      240: name: create_flags
     241: operator: &
     242: name: IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK
   243: block: 
    244: block_content: 
     245: if_stmt: 
      246: if: 
       247: condition: 
        248: expr: 
         249: operator: !
         250: call: 
          251: name: MLX5_CAP_GEN
          252: argument_list: 
           253: argument: 
            254: expr: 
             255: name: mdev
           256: argument: 
            257: expr: 
             258: name: block_lb_mc
       259: block: 
        260: block_content: 
         261: expr_stmt: 
          262: expr: 
           263: call: 
            264: name: mlx5_ib_dbg
            265: argument_list: 
             266: argument: 
              267: expr: 
               268: name: dev
             269: argument: 
              270: expr: 
               271: literal: "block multicast loopback isn't supported\n"
         272: return: 
          273: expr: 
           274: operator: -
           275: name: EINVAL
      276: else: 
       277: block: 
        278: block_content: 
         279: expr_stmt: 
          280: expr: 
           281: name: 
            282: name: qp
            283: operator: ->
            284: name: flags
           285: operator: |=
           286: name: MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK
 287: if_stmt: 
  288: if: 
   289: condition: 
    290: expr: 
     291: name: 
      292: name: init_attr
      293: operator: ->
      294: name: create_flags
     295: operator: &
     296: operator: (
     297: name: IB_QP_CREATE_CROSS_CHANNEL
     298: operator: |
     299: name: IB_QP_CREATE_MANAGED_SEND
     300: operator: |
     301: name: IB_QP_CREATE_MANAGED_RECV
     302: operator: )
   303: block: 
    304: block_content: 
     305: if_stmt: 
      306: if: 
       307: condition: 
        308: expr: 
         309: operator: !
         310: call: 
          311: name: MLX5_CAP_GEN
          312: argument_list: 
           313: argument: 
            314: expr: 
             315: name: mdev
           316: argument: 
            317: expr: 
             318: name: cd
       319: block: 
        320: block_content: 
         321: expr_stmt: 
          322: expr: 
           323: call: 
            324: name: mlx5_ib_dbg
            325: argument_list: 
             326: argument: 
              327: expr: 
               328: name: dev
             329: argument: 
              330: expr: 
               331: literal: "cross-channel isn't supported\n"
         332: return: 
          333: expr: 
           334: operator: -
           335: name: EINVAL
     336: if_stmt: 
      337: if: 
       338: condition: 
        339: expr: 
         340: name: 
          341: name: init_attr
          342: operator: ->
          343: name: create_flags
         344: operator: &
         345: name: IB_QP_CREATE_CROSS_CHANNEL
       346: block: 
        347: block_content: 
         348: expr_stmt: 
          349: expr: 
           350: name: 
            351: name: qp
            352: operator: ->
            353: name: flags
           354: operator: |=
           355: name: MLX5_IB_QP_CROSS_CHANNEL
     356: if_stmt: 
      357: if: 
       358: condition: 
        359: expr: 
         360: name: 
          361: name: init_attr
          362: operator: ->
          363: name: create_flags
         364: operator: &
         365: name: IB_QP_CREATE_MANAGED_SEND
       366: block: 
        367: block_content: 
         368: expr_stmt: 
          369: expr: 
           370: name: 
            371: name: qp
            372: operator: ->
            373: name: flags
           374: operator: |=
           375: name: MLX5_IB_QP_MANAGED_SEND
     376: if_stmt: 
      377: if: 
       378: condition: 
        379: expr: 
         380: name: 
          381: name: init_attr
          382: operator: ->
          383: name: create_flags
         384: operator: &
         385: name: IB_QP_CREATE_MANAGED_RECV
       386: block: 
        387: block_content: 
         388: expr_stmt: 
          389: expr: 
           390: name: 
            391: name: qp
            392: operator: ->
            393: name: flags
           394: operator: |=
           395: name: MLX5_IB_QP_MANAGED_RECV
 396: if_stmt: 
  397: if: 
   398: condition: 
    399: expr: 
     400: name: 
      401: name: init_attr
      402: operator: ->
      403: name: qp_type
     404: operator: ==
     405: name: IB_QPT_UD
     406: operator: &&
     407: operator: (
     408: name: 
      409: name: init_attr
      410: operator: ->
      411: name: create_flags
     412: operator: &
     413: name: IB_QP_CREATE_IPOIB_UD_LSO
     414: operator: )
   415: block: 
    416: block_content: 
     417: if_stmt: 
      418: if: 
       419: condition: 
        420: expr: 
         421: operator: !
         422: call: 
          423: name: MLX5_CAP_GEN
          424: argument_list: 
           425: argument: 
            426: expr: 
             427: name: mdev
           428: argument: 
            429: expr: 
             430: name: ipoib_basic_offloads
       431: block: 
        432: block_content: 
         433: expr_stmt: 
          434: expr: 
           435: call: 
            436: name: mlx5_ib_dbg
            437: argument_list: 
             438: argument: 
              439: expr: 
               440: name: dev
             441: argument: 
              442: expr: 
               443: literal: "ipoib UD lso qp isn't supported\n"
         444: return: 
          445: expr: 
           446: operator: -
           447: name: EOPNOTSUPP
 448: if_stmt: 
  449: if: 
   450: condition: 
    451: expr: 
     452: name: 
      453: name: init_attr
      454: operator: ->
      455: name: create_flags
     456: operator: &
     457: name: IB_QP_CREATE_SCATTER_FCS
   458: block: 
    459: block_content: 
     460: if_stmt: 
      461: if: 
       462: condition: 
        463: expr: 
         464: name: 
          465: name: init_attr
          466: operator: ->
          467: name: qp_type
         468: operator: !=
         469: name: IB_QPT_RAW_PACKET
       470: block: 
        471: block_content: 
         472: expr_stmt: 
          473: expr: 
           474: call: 
            475: name: mlx5_ib_dbg
            476: argument_list: 
             477: argument: 
              478: expr: 
               479: name: dev
             480: argument: 
              481: expr: 
               482: literal: "Scatter FCS is supported only for Raw Packet QPs"
         483: return: 
          484: expr: 
           485: operator: -
           486: name: EOPNOTSUPP
     487: if_stmt: 
      488: if: 
       489: condition: 
        490: expr: 
         491: operator: !
         492: call: 
          493: name: MLX5_CAP_GEN
          494: argument_list: 
           495: argument: 
            496: expr: 
             497: name: 
              498: name: dev
              499: operator: ->
              500: name: mdev
           501: argument: 
            502: expr: 
             503: name: eth_net_offloads
         504: operator: ||
         505: operator: !
         506: call: 
          507: name: MLX5_CAP_ETH
          508: argument_list: 
           509: argument: 
            510: expr: 
             511: name: 
              512: name: dev
              513: operator: ->
              514: name: mdev
           515: argument: 
            516: expr: 
             517: name: scatter_fcs
       518: block: 
        519: block_content: 
         520: expr_stmt: 
          521: expr: 
           522: call: 
            523: name: mlx5_ib_dbg
            524: argument_list: 
             525: argument: 
              526: expr: 
               527: name: dev
             528: argument: 
              529: expr: 
               530: literal: "Scatter FCS isn't supported\n"
         531: return: 
          532: expr: 
           533: operator: -
           534: name: EOPNOTSUPP
     535: expr_stmt: 
      536: expr: 
       537: name: 
        538: name: qp
        539: operator: ->
        540: name: flags
       541: operator: |=
       542: name: MLX5_IB_QP_CAP_SCATTER_FCS
 543: if_stmt: 
  544: if: 
   545: condition: 
    546: expr: 
     547: name: 
      548: name: init_attr
      549: operator: ->
      550: name: sq_sig_type
     551: operator: ==
     552: name: IB_SIGNAL_ALL_WR
   553: block: 
    554: block_content: 
     555: expr_stmt: 
      556: expr: 
       557: name: 
        558: name: qp
        559: operator: ->
        560: name: sq_signal_bits
       561: operator: =
       562: name: MLX5_WQE_CTRL_CQ_UPDATE
 563: if_stmt: 
  564: if: 
   565: condition: 
    566: expr: 
     567: name: 
      568: name: init_attr
      569: operator: ->
      570: name: create_flags
     571: operator: &
     572: name: IB_QP_CREATE_CVLAN_STRIPPING
   573: block: 
    574: block_content: 
     575: if_stmt: 
      576: if: 
       577: condition: 
        578: expr: 
         579: operator: !
         580: operator: (
         581: call: 
          582: name: MLX5_CAP_GEN
          583: argument_list: 
           584: argument: 
            585: expr: 
             586: name: 
              587: name: dev
              588: operator: ->
              589: name: mdev
           590: argument: 
            591: expr: 
             592: name: eth_net_offloads
         593: operator: &&
         594: call: 
          595: name: MLX5_CAP_ETH
          596: argument_list: 
           597: argument: 
            598: expr: 
             599: name: 
              600: name: dev
              601: operator: ->
              602: name: mdev
           603: argument: 
            604: expr: 
             605: name: vlan_cap
         606: operator: )
         607: operator: ||
         608: operator: (
         609: name: 
          610: name: init_attr
          611: operator: ->
          612: name: qp_type
         613: operator: !=
         614: name: IB_QPT_RAW_PACKET
         615: operator: )
       616: block: 
        617: block_content: 
         618: return: 
          619: expr: 
           620: operator: -
           621: name: EOPNOTSUPP
     622: expr_stmt: 
      623: expr: 
       624: name: 
        625: name: qp
        626: operator: ->
        627: name: flags
       628: operator: |=
       629: name: MLX5_IB_QP_CVLAN_STRIPPING
 630: if_stmt: 
  631: if: 
   632: condition: 
    633: expr: 
     634: name: pd
     635: operator: &&
     636: name: 
      637: name: pd
      638: operator: ->
      639: name: uobject
   640: block: 
    641: block_content: 
     642: if_stmt: 
      643: if: 
       644: condition: 
        645: expr: 
         646: call: 
          647: name: ib_copy_from_udata
          648: argument_list: 
           649: argument: 
            650: expr: 
             651: operator: &
             652: name: ucmd
           653: argument: 
            654: expr: 
             655: name: udata
           656: argument: 
            657: expr: 
             658: sizeof: 
              659: argument_list: 
               660: argument: 
                661: expr: 
                 662: name: ucmd
       663: block: 
        664: block_content: 
         665: expr_stmt: 
          666: expr: 
           667: call: 
            668: name: mlx5_ib_dbg
            669: argument_list: 
             670: argument: 
              671: expr: 
               672: name: dev
             673: argument: 
              674: expr: 
               675: literal: "copy failed\n"
         676: return: 
          677: expr: 
           678: operator: -
           679: name: EFAULT
     680: expr_stmt: 
      681: expr: 
       682: name: err
       683: operator: =
       684: call: 
        685: name: get_qp_user_index
        686: argument_list: 
         687: argument: 
          688: expr: 
           689: call: 
            690: name: to_mucontext
            691: argument_list: 
             692: argument: 
              693: expr: 
               694: name: 
                695: name: pd
                696: operator: ->
                697: name: uobject
                698: operator: ->
                699: name: context
         700: argument: 
          701: expr: 
           702: operator: &
           703: name: ucmd
         704: argument: 
          705: expr: 
           706: name: 
            707: name: udata
            708: operator: ->
            709: name: inlen
         710: argument: 
          711: expr: 
           712: operator: &
           713: name: uidx
     714: if_stmt: 
      715: if: 
       716: condition: 
        717: expr: 
         718: name: err
       719: block: 
        720: block_content: 
         721: return: 
          722: expr: 
           723: name: err
     724: expr_stmt: 
      725: expr: 
       726: name: 
        727: name: qp
        728: operator: ->
        729: name: wq_sig
       730: operator: =
       731: operator: !
       732: operator: !
       733: operator: (
       734: name: 
        735: name: ucmd
        736: operator: .
        737: name: flags
       738: operator: &
       739: name: MLX5_QP_FLAG_SIGNATURE
       740: operator: )
     741: expr_stmt: 
      742: expr: 
       743: name: 
        744: name: qp
        745: operator: ->
        746: name: scat_cqe
       747: operator: =
       748: operator: !
       749: operator: !
       750: operator: (
       751: name: 
        752: name: ucmd
        753: operator: .
        754: name: flags
       755: operator: &
       756: name: MLX5_QP_FLAG_SCATTER_CQE
       757: operator: )
     758: if_stmt: 
      759: if: 
       760: condition: 
        761: expr: 
         762: name: 
          763: name: ucmd
          764: operator: .
          765: name: flags
         766: operator: &
         767: name: MLX5_QP_FLAG_TUNNEL_OFFLOADS
       768: block: 
        769: block_content: 
         770: if_stmt: 
          771: if: 
           772: condition: 
            773: expr: 
             774: name: 
              775: name: init_attr
              776: operator: ->
              777: name: qp_type
             778: operator: !=
             779: name: IB_QPT_RAW_PACKET
             780: operator: ||
             781: operator: !
             782: call: 
              783: name: tunnel_offload_supported
              784: argument_list: 
               785: argument: 
                786: expr: 
                 787: name: mdev
           788: block: 
            789: block_content: 
             790: expr_stmt: 
              791: expr: 
               792: call: 
                793: name: mlx5_ib_dbg
                794: argument_list: 
                 795: argument: 
                  796: expr: 
                   797: name: dev
                 798: argument: 
                  799: expr: 
                   800: literal: "Tunnel offload isn't supported\n"
             801: return: 
              802: expr: 
               803: operator: -
               804: name: EOPNOTSUPP
         805: expr_stmt: 
          806: expr: 
           807: name: 
            808: name: qp
            809: operator: ->
            810: name: tunnel_offload_en
           811: operator: =
           812: literal: true
     813: if_stmt: 
      814: if: 
       815: condition: 
        816: expr: 
         817: name: 
          818: name: init_attr
          819: operator: ->
          820: name: create_flags
         821: operator: &
         822: name: IB_QP_CREATE_SOURCE_QPN
       823: block: 
        824: block_content: 
         825: if_stmt: 
          826: if: 
           827: condition: 
            828: expr: 
             829: name: 
              830: name: init_attr
              831: operator: ->
              832: name: qp_type
             833: operator: !=
             834: name: IB_QPT_UD
             835: operator: ||
             836: operator: (
             837: call: 
              838: name: MLX5_CAP_GEN
              839: argument_list: 
               840: argument: 
                841: expr: 
                 842: name: 
                  843: name: dev
                  844: operator: ->
                  845: name: mdev
               846: argument: 
                847: expr: 
                 848: name: port_type
             849: operator: !=
             850: name: MLX5_CAP_PORT_TYPE_IB
             851: operator: )
             852: operator: ||
             853: operator: !
             854: call: 
              855: name: mlx5_get_flow_namespace
              856: argument_list: 
               857: argument: 
                858: expr: 
                 859: name: 
                  860: name: dev
                  861: operator: ->
                  862: name: mdev
               863: argument: 
                864: expr: 
                 865: name: MLX5_FLOW_NAMESPACE_BYPASS
           866: block: 
            867: block_content: 
             868: expr_stmt: 
              869: expr: 
               870: call: 
                871: name: mlx5_ib_dbg
                872: argument_list: 
                 873: argument: 
                  874: expr: 
                   875: name: dev
                 876: argument: 
                  877: expr: 
                   878: literal: "Source QP option isn't supported\n"
             879: return: 
              880: expr: 
               881: operator: -
               882: name: EOPNOTSUPP
         883: expr_stmt: 
          884: expr: 
           885: name: 
            886: name: qp
            887: operator: ->
            888: name: flags
           889: operator: |=
           890: name: MLX5_IB_QP_UNDERLAY
         891: expr_stmt: 
          892: expr: 
           893: name: 
            894: name: qp
            895: operator: ->
            896: name: underlay_qpn
           897: operator: =
           898: name: 
            899: name: init_attr
            900: operator: ->
            901: name: source_qpn
  902: else: 
   903: block: 
    904: block_content: 
     905: expr_stmt: 
      906: expr: 
       907: name: 
        908: name: qp
        909: operator: ->
        910: name: wq_sig
       911: operator: =
       912: operator: !
       913: operator: !
       914: name: wq_signature
 915: expr_stmt: 
  916: expr: 
   917: name: base
   918: operator: =
   919: ternary: 
    920: condition: 
     921: expr: 
      922: operator: (
      923: name: 
       924: name: init_attr
       925: operator: ->
       926: name: qp_type
      927: operator: ==
      928: name: IB_QPT_RAW_PACKET
      929: operator: ||
      930: name: 
       931: name: qp
       932: operator: ->
       933: name: flags
      934: operator: &
      935: name: MLX5_IB_QP_UNDERLAY
      936: operator: )
    937: then: 
     938: expr: 
      939: operator: &
      940: name: 
       941: name: qp
       942: operator: ->
       943: name: raw_packet_qp
       944: operator: .
       945: name: rq
       946: operator: .
       947: name: base
    948: else: 
     949: expr: 
      950: operator: &
      951: name: 
       952: name: qp
       953: operator: ->
       954: name: trans_qp
       955: operator: .
       956: name: base
 957: expr_stmt: 
  958: expr: 
   959: name: 
    960: name: qp
    961: operator: ->
    962: name: has_rq
   963: operator: =
   964: call: 
    965: name: qp_has_rq
    966: argument_list: 
     967: argument: 
      968: expr: 
       969: name: init_attr
 970: expr_stmt: 
  971: expr: 
   972: name: err
   973: operator: =
   974: call: 
    975: name: set_rq_size
    976: argument_list: 
     977: argument: 
      978: expr: 
       979: name: dev
     980: argument: 
      981: expr: 
       982: operator: &
       983: name: 
        984: name: init_attr
        985: operator: ->
        986: name: cap
     987: argument: 
      988: expr: 
       989: name: 
        990: name: qp
        991: operator: ->
        992: name: has_rq
     993: argument: 
      994: expr: 
       995: name: qp
     996: argument: 
      997: expr: 
       998: ternary: 
        999: condition: 
         1000: expr: 
          1001: operator: (
          1002: name: pd
          1003: operator: &&
          1004: name: 
           1005: name: pd
           1006: operator: ->
           1007: name: uobject
          1008: operator: )
        1009: then: 
         1010: expr: 
          1011: operator: &
          1012: name: ucmd
        1013: else: 
         1014: expr: 
          1015: name: NULL
 1016: if_stmt: 
  1017: if: 
   1018: condition: 
    1019: expr: 
     1020: name: err
   1021: block: 
    1022: block_content: 
     1023: expr_stmt: 
      1024: expr: 
       1025: call: 
        1026: name: mlx5_ib_dbg
        1027: argument_list: 
         1028: argument: 
          1029: expr: 
           1030: name: dev
         1031: argument: 
          1032: expr: 
           1033: literal: "err %d\n"
         1034: argument: 
          1035: expr: 
           1036: name: err
     1037: return: 
      1038: expr: 
       1039: name: err
 1040: if_stmt: 
  1041: if: 
   1042: condition: 
    1043: expr: 
     1044: name: pd
   1045: block: 
    1046: block_content: 
     1047: if_stmt: 
      1048: if: 
       1049: condition: 
        1050: expr: 
         1051: name: 
          1052: name: pd
          1053: operator: ->
          1054: name: uobject
       1055: block: 
        1056: block_content: 
         1057: decl_stmt: 
          1058: decl: 
           1059: type: 
            1060: name: __u32
           1061: name: max_wqes
           1062: init: 
            1063: expr: 
             1064: literal: 1
             1065: operator: <<
             1066: call: 
              1067: name: MLX5_CAP_GEN
              1068: argument_list: 
               1069: argument: 
                1070: expr: 
                 1071: name: mdev
               1072: argument: 
                1073: expr: 
                 1074: name: log_max_qp_sz
         1075: expr_stmt: 
          1076: expr: 
           1077: call: 
            1078: name: mlx5_ib_dbg
            1079: argument_list: 
             1080: argument: 
              1081: expr: 
               1082: name: dev
             1083: argument: 
              1084: expr: 
               1085: literal: "requested sq_wqe_count (%d)\n"
             1086: argument: 
              1087: expr: 
               1088: name: 
                1089: name: ucmd
                1090: operator: .
                1091: name: sq_wqe_count
         1092: if_stmt: 
          1093: if: 
           1094: condition: 
            1095: expr: 
             1096: name: 
              1097: name: ucmd
              1098: operator: .
              1099: name: rq_wqe_shift
             1100: operator: !=
             1101: name: 
              1102: name: qp
              1103: operator: ->
              1104: name: rq
              1105: operator: .
              1106: name: wqe_shift
             1107: operator: ||
             1108: name: 
              1109: name: ucmd
              1110: operator: .
              1111: name: rq_wqe_count
             1112: operator: !=
             1113: name: 
              1114: name: qp
              1115: operator: ->
              1116: name: rq
              1117: operator: .
              1118: name: wqe_cnt
           1119: block: 
            1120: block_content: 
             1121: expr_stmt: 
              1122: expr: 
               1123: call: 
                1124: name: mlx5_ib_dbg
                1125: argument_list: 
                 1126: argument: 
                  1127: expr: 
                   1128: name: dev
                 1129: argument: 
                  1130: expr: 
                   1131: literal: "invalid rq params\n"
             1132: return: 
              1133: expr: 
               1134: operator: -
               1135: name: EINVAL
         1136: if_stmt: 
          1137: if: 
           1138: condition: 
            1139: expr: 
             1140: name: 
              1141: name: ucmd
              1142: operator: .
              1143: name: sq_wqe_count
             1144: operator: >
             1145: name: max_wqes
           1146: block: 
            1147: block_content: 
             1148: expr_stmt: 
              1149: expr: 
               1150: call: 
                1151: name: mlx5_ib_dbg
                1152: argument_list: 
                 1153: argument: 
                  1154: expr: 
                   1155: name: dev
                 1156: argument: 
                  1157: expr: 
                   1158: literal: "requested sq_wqe_count (%d)>max allowed (%d)\n"
                 1159: argument: 
                  1160: expr: 
                   1161: name: 
                    1162: name: ucmd
                    1163: operator: .
                    1164: name: sq_wqe_count
                 1165: argument: 
                  1166: expr: 
                   1167: name: max_wqes
             1168: return: 
              1169: expr: 
               1170: operator: -
               1171: name: EINVAL
         1172: if_stmt: 
          1173: if: 
           1174: condition: 
            1175: expr: 
             1176: name: 
              1177: name: init_attr
              1178: operator: ->
              1179: name: create_flags
             1180: operator: &
             1181: call: 
              1182: name: mlx5_ib_create_qp_sqpn_qp1
              1183: argument_list: 
           1184: block: 
            1185: block_content: 
             1186: expr_stmt: 
              1187: expr: 
               1188: call: 
                1189: name: mlx5_ib_dbg
                1190: argument_list: 
                 1191: argument: 
                  1192: expr: 
                   1193: name: dev
                 1194: argument: 
                  1195: expr: 
                   1196: literal: "user-space is not allowed to create UD QPs spoofing as QP1\n"
             1197: return: 
              1198: expr: 
               1199: operator: -
               1200: name: EINVAL
         1201: expr_stmt: 
          1202: expr: 
           1203: name: err
           1204: operator: =
           1205: call: 
            1206: name: create_user_qp
            1207: argument_list: 
             1208: argument: 
              1209: expr: 
               1210: name: dev
             1211: argument: 
              1212: expr: 
               1213: name: pd
             1214: argument: 
              1215: expr: 
               1216: name: qp
             1217: argument: 
              1218: expr: 
               1219: name: udata
             1220: argument: 
              1221: expr: 
               1222: name: init_attr
             1223: argument: 
              1224: expr: 
               1225: operator: &
               1226: name: in
             1227: argument: 
              1228: expr: 
               1229: operator: &
               1230: name: resp
             1231: argument: 
              1232: expr: 
               1233: operator: &
               1234: name: inlen
             1235: argument: 
              1236: expr: 
               1237: name: base
         1238: if_stmt: 
          1239: if: 
           1240: condition: 
            1241: expr: 
             1242: name: err
           1243: block: 
            1244: block_content: 
             1245: expr_stmt: 
              1246: expr: 
               1247: call: 
                1248: name: mlx5_ib_dbg
                1249: argument_list: 
                 1250: argument: 
                  1251: expr: 
                   1252: name: dev
                 1253: argument: 
                  1254: expr: 
                   1255: literal: "err %d\n"
                 1256: argument: 
                  1257: expr: 
                   1258: name: err
      1259: else: 
       1260: block: 
        1261: block_content: 
         1262: expr_stmt: 
          1263: expr: 
           1264: name: err
           1265: operator: =
           1266: call: 
            1267: name: create_kernel_qp
            1268: argument_list: 
             1269: argument: 
              1270: expr: 
               1271: name: dev
             1272: argument: 
              1273: expr: 
               1274: name: init_attr
             1275: argument: 
              1276: expr: 
               1277: name: qp
             1278: argument: 
              1279: expr: 
               1280: operator: &
               1281: name: in
             1282: argument: 
              1283: expr: 
               1284: operator: &
               1285: name: inlen
             1286: argument: 
              1287: expr: 
               1288: name: base
         1289: if_stmt: 
          1290: if: 
           1291: condition: 
            1292: expr: 
             1293: name: err
           1294: block: 
            1295: block_content: 
             1296: expr_stmt: 
              1297: expr: 
               1298: call: 
                1299: name: mlx5_ib_dbg
                1300: argument_list: 
                 1301: argument: 
                  1302: expr: 
                   1303: name: dev
                 1304: argument: 
                  1305: expr: 
                   1306: literal: "err %d\n"
                 1307: argument: 
                  1308: expr: 
                   1309: name: err
     1310: if_stmt: 
      1311: if: 
       1312: condition: 
        1313: expr: 
         1314: name: err
       1315: block: 
        1316: block_content: 
         1317: return: 
          1318: expr: 
           1319: name: err
  1320: else: 
   1321: block: 
    1322: block_content: 
     1323: expr_stmt: 
      1324: expr: 
       1325: name: in
       1326: operator: =
       1327: call: 
        1328: name: kvzalloc
        1329: argument_list: 
         1330: argument: 
          1331: expr: 
           1332: name: inlen
         1333: argument: 
          1334: expr: 
           1335: name: GFP_KERNEL
     1336: if_stmt: 
      1337: if: 
       1338: condition: 
        1339: expr: 
         1340: operator: !
         1341: name: in
       1342: block: 
        1343: block_content: 
         1344: return: 
          1345: expr: 
           1346: operator: -
           1347: name: ENOMEM
     1348: expr_stmt: 
      1349: expr: 
       1350: name: 
        1351: name: qp
        1352: operator: ->
        1353: name: create_type
       1354: operator: =
       1355: name: MLX5_QP_EMPTY
 1356: if_stmt: 
  1357: if: 
   1358: condition: 
    1359: expr: 
     1360: call: 
      1361: name: is_sqp
      1362: argument_list: 
       1363: argument: 
        1364: expr: 
         1365: name: 
          1366: name: init_attr
          1367: operator: ->
          1368: name: qp_type
   1369: block: 
    1370: block_content: 
     1371: expr_stmt: 
      1372: expr: 
       1373: name: 
        1374: name: qp
        1375: operator: ->
        1376: name: port
       1377: operator: =
       1378: name: 
        1379: name: init_attr
        1380: operator: ->
        1381: name: port_num
 1382: expr_stmt: 
  1383: expr: 
   1384: name: qpc
   1385: operator: =
   1386: call: 
    1387: name: MLX5_ADDR_OF
    1388: argument_list: 
     1389: argument: 
      1390: expr: 
       1391: name: create_qp_in
     1392: argument: 
      1393: expr: 
       1394: name: in
     1395: argument: 
      1396: expr: 
       1397: name: qpc
 1398: expr_stmt: 
  1399: expr: 
   1400: call: 
    1401: name: MLX5_SET
    1402: argument_list: 
     1403: argument: 
      1404: expr: 
       1405: name: qpc
     1406: argument: 
      1407: expr: 
       1408: name: qpc
     1409: argument: 
      1410: expr: 
       1411: name: st
     1412: argument: 
      1413: expr: 
       1414: name: mlx5_st
 1415: expr_stmt: 
  1416: expr: 
   1417: call: 
    1418: name: MLX5_SET
    1419: argument_list: 
     1420: argument: 
      1421: expr: 
       1422: name: qpc
     1423: argument: 
      1424: expr: 
       1425: name: qpc
     1426: argument: 
      1427: expr: 
       1428: name: pm_state
     1429: argument: 
      1430: expr: 
       1431: name: MLX5_QP_PM_MIGRATED
 1432: if_stmt: 
  1433: if: 
   1434: condition: 
    1435: expr: 
     1436: name: 
      1437: name: init_attr
      1438: operator: ->
      1439: name: qp_type
     1440: operator: !=
     1441: name: MLX5_IB_QPT_REG_UMR
   1442: block: 
    1443: block_content: 
     1444: expr_stmt: 
      1445: expr: 
       1446: call: 
        1447: name: MLX5_SET
        1448: argument_list: 
         1449: argument: 
          1450: expr: 
           1451: name: qpc
         1452: argument: 
          1453: expr: 
           1454: name: qpc
         1455: argument: 
          1456: expr: 
           1457: name: pd
         1458: argument: 
          1459: expr: 
           1460: call: 
            1461: name: to_mpd
            1462: argument_list: 
             1463: argument: 
              1464: expr: 
               1465: ternary: 
                1466: condition: 
                 1467: expr: 
                  1468: name: pd
                1469: then: 
                 1470: expr: 
                  1471: name: pd
                1472: else: 
                 1473: expr: 
                  1474: name: 
                   1475: name: devr
                   1476: operator: ->
                   1477: name: p0
           1478: operator: ->
           1479: name: pdn
  1480: else: 
   1481: block: 
    1482: block_content: 
     1483: expr_stmt: 
      1484: expr: 
       1485: call: 
        1486: name: MLX5_SET
        1487: argument_list: 
         1488: argument: 
          1489: expr: 
           1490: name: qpc
         1491: argument: 
          1492: expr: 
           1493: name: qpc
         1494: argument: 
          1495: expr: 
           1496: name: latency_sensitive
         1497: argument: 
          1498: expr: 
           1499: literal: 1
 1500: if_stmt: 
  1501: if: 
   1502: condition: 
    1503: expr: 
     1504: name: 
      1505: name: qp
      1506: operator: ->
      1507: name: wq_sig
   1508: block: 
    1509: block_content: 
     1510: expr_stmt: 
      1511: expr: 
       1512: call: 
        1513: name: MLX5_SET
        1514: argument_list: 
         1515: argument: 
          1516: expr: 
           1517: name: qpc
         1518: argument: 
          1519: expr: 
           1520: name: qpc
         1521: argument: 
          1522: expr: 
           1523: name: wq_signature
         1524: argument: 
          1525: expr: 
           1526: literal: 1
 1527: if_stmt: 
  1528: if: 
   1529: condition: 
    1530: expr: 
     1531: name: 
      1532: name: qp
      1533: operator: ->
      1534: name: flags
     1535: operator: &
     1536: name: MLX5_IB_QP_BLOCK_MULTICAST_LOOPBACK
   1537: block: 
    1538: block_content: 
     1539: expr_stmt: 
      1540: expr: 
       1541: call: 
        1542: name: MLX5_SET
        1543: argument_list: 
         1544: argument: 
          1545: expr: 
           1546: name: qpc
         1547: argument: 
          1548: expr: 
           1549: name: qpc
         1550: argument: 
          1551: expr: 
           1552: name: block_lb_mc
         1553: argument: 
          1554: expr: 
           1555: literal: 1
 1556: if_stmt: 
  1557: if: 
   1558: condition: 
    1559: expr: 
     1560: name: 
      1561: name: qp
      1562: operator: ->
      1563: name: flags
     1564: operator: &
     1565: name: MLX5_IB_QP_CROSS_CHANNEL
   1566: block: 
    1567: block_content: 
     1568: expr_stmt: 
      1569: expr: 
       1570: call: 
        1571: name: MLX5_SET
        1572: argument_list: 
         1573: argument: 
          1574: expr: 
           1575: name: qpc
         1576: argument: 
          1577: expr: 
           1578: name: qpc
         1579: argument: 
          1580: expr: 
           1581: name: cd_master
         1582: argument: 
          1583: expr: 
           1584: literal: 1
 1585: if_stmt: 
  1586: if: 
   1587: condition: 
    1588: expr: 
     1589: name: 
      1590: name: qp
      1591: operator: ->
      1592: name: flags
     1593: operator: &
     1594: name: MLX5_IB_QP_MANAGED_SEND
   1595: block: 
    1596: block_content: 
     1597: expr_stmt: 
      1598: expr: 
       1599: call: 
        1600: name: MLX5_SET
        1601: argument_list: 
         1602: argument: 
          1603: expr: 
           1604: name: qpc
         1605: argument: 
          1606: expr: 
           1607: name: qpc
         1608: argument: 
          1609: expr: 
           1610: name: cd_slave_send
         1611: argument: 
          1612: expr: 
           1613: literal: 1
 1614: if_stmt: 
  1615: if: 
   1616: condition: 
    1617: expr: 
     1618: name: 
      1619: name: qp
      1620: operator: ->
      1621: name: flags
     1622: operator: &
     1623: name: MLX5_IB_QP_MANAGED_RECV
   1624: block: 
    1625: block_content: 
     1626: expr_stmt: 
      1627: expr: 
       1628: call: 
        1629: name: MLX5_SET
        1630: argument_list: 
         1631: argument: 
          1632: expr: 
           1633: name: qpc
         1634: argument: 
          1635: expr: 
           1636: name: qpc
         1637: argument: 
          1638: expr: 
           1639: name: cd_slave_receive
         1640: argument: 
          1641: expr: 
           1642: literal: 1
 1643: if_stmt: 
  1644: if: 
   1645: condition: 
    1646: expr: 
     1647: name: 
      1648: name: qp
      1649: operator: ->
      1650: name: scat_cqe
     1651: operator: &&
     1652: call: 
      1653: name: is_connected
      1654: argument_list: 
       1655: argument: 
        1656: expr: 
         1657: name: 
          1658: name: init_attr
          1659: operator: ->
          1660: name: qp_type
   1661: block: 
    1662: block_content: 
     1663: decl_stmt: 
      1664: decl: 
       1665: type: 
        1666: name: int
       1667: name: rcqe_sz
     1668: decl_stmt: 
      1669: decl: 
       1670: type: 
        1671: name: int
       1672: name: scqe_sz
     1673: expr_stmt: 
      1674: expr: 
       1675: name: rcqe_sz
       1676: operator: =
       1677: call: 
        1678: name: mlx5_ib_get_cqe_size
        1679: argument_list: 
         1680: argument: 
          1681: expr: 
           1682: name: dev
         1683: argument: 
          1684: expr: 
           1685: name: 
            1686: name: init_attr
            1687: operator: ->
            1688: name: recv_cq
     1689: expr_stmt: 
      1690: expr: 
       1691: name: scqe_sz
       1692: operator: =
       1693: call: 
        1694: name: mlx5_ib_get_cqe_size
        1695: argument_list: 
         1696: argument: 
          1697: expr: 
           1698: name: dev
         1699: argument: 
          1700: expr: 
           1701: name: 
            1702: name: init_attr
            1703: operator: ->
            1704: name: send_cq
     1705: if_stmt: 
      1706: if: 
       1707: condition: 
        1708: expr: 
         1709: name: rcqe_sz
         1710: operator: ==
         1711: literal: 128
       1712: block: 
        1713: block_content: 
         1714: expr_stmt: 
          1715: expr: 
           1716: call: 
            1717: name: MLX5_SET
            1718: argument_list: 
             1719: argument: 
              1720: expr: 
               1721: name: qpc
             1722: argument: 
              1723: expr: 
               1724: name: qpc
             1725: argument: 
              1726: expr: 
               1727: name: cs_res
             1728: argument: 
              1729: expr: 
               1730: name: MLX5_RES_SCAT_DATA64_CQE
      1731: else: 
       1732: block: 
        1733: block_content: 
         1734: expr_stmt: 
          1735: expr: 
           1736: call: 
            1737: name: MLX5_SET
            1738: argument_list: 
             1739: argument: 
              1740: expr: 
               1741: name: qpc
             1742: argument: 
              1743: expr: 
               1744: name: qpc
             1745: argument: 
              1746: expr: 
               1747: name: cs_res
             1748: argument: 
              1749: expr: 
               1750: name: MLX5_RES_SCAT_DATA32_CQE
     1751: if_stmt: 
      1752: if: 
       1753: condition: 
        1754: expr: 
         1755: name: 
          1756: name: init_attr
          1757: operator: ->
          1758: name: sq_sig_type
         1759: operator: ==
         1760: name: IB_SIGNAL_ALL_WR
       1761: block: 
        1762: block_content: 
         1763: if_stmt: 
          1764: if: 
           1765: condition: 
            1766: expr: 
             1767: name: scqe_sz
             1768: operator: ==
             1769: literal: 128
           1770: block: 
            1771: block_content: 
             1772: expr_stmt: 
              1773: expr: 
               1774: call: 
                1775: name: MLX5_SET
                1776: argument_list: 
                 1777: argument: 
                  1778: expr: 
                   1779: name: qpc
                 1780: argument: 
                  1781: expr: 
                   1782: name: qpc
                 1783: argument: 
                  1784: expr: 
                   1785: name: cs_req
                 1786: argument: 
                  1787: expr: 
                   1788: name: MLX5_REQ_SCAT_DATA64_CQE
          1789: else: 
           1790: block: 
            1791: block_content: 
             1792: expr_stmt: 
              1793: expr: 
               1794: call: 
                1795: name: MLX5_SET
                1796: argument_list: 
                 1797: argument: 
                  1798: expr: 
                   1799: name: qpc
                 1800: argument: 
                  1801: expr: 
                   1802: name: qpc
                 1803: argument: 
                  1804: expr: 
                   1805: name: cs_req
                 1806: argument: 
                  1807: expr: 
                   1808: name: MLX5_REQ_SCAT_DATA32_CQE
 1809: if_stmt: 
  1810: if: 
   1811: condition: 
    1812: expr: 
     1813: name: 
      1814: name: qp
      1815: operator: ->
      1816: name: rq
      1817: operator: .
      1818: name: wqe_cnt
   1819: block: 
    1820: block_content: 
     1821: expr_stmt: 
      1822: expr: 
       1823: call: 
        1824: name: MLX5_SET
        1825: argument_list: 
         1826: argument: 
          1827: expr: 
           1828: name: qpc
         1829: argument: 
          1830: expr: 
           1831: name: qpc
         1832: argument: 
          1833: expr: 
           1834: name: log_rq_stride
         1835: argument: 
          1836: expr: 
           1837: name: 
            1838: name: qp
            1839: operator: ->
            1840: name: rq
            1841: operator: .
            1842: name: wqe_shift
           1843: operator: -
           1844: literal: 4
     1845: expr_stmt: 
      1846: expr: 
       1847: call: 
        1848: name: MLX5_SET
        1849: argument_list: 
         1850: argument: 
          1851: expr: 
           1852: name: qpc
         1853: argument: 
          1854: expr: 
           1855: name: qpc
         1856: argument: 
          1857: expr: 
           1858: name: log_rq_size
         1859: argument: 
          1860: expr: 
           1861: call: 
            1862: name: ilog2
            1863: argument_list: 
             1864: argument: 
              1865: expr: 
               1866: name: 
                1867: name: qp
                1868: operator: ->
                1869: name: rq
                1870: operator: .
                1871: name: wqe_cnt
 1872: expr_stmt: 
  1873: expr: 
   1874: call: 
    1875: name: MLX5_SET
    1876: argument_list: 
     1877: argument: 
      1878: expr: 
       1879: name: qpc
     1880: argument: 
      1881: expr: 
       1882: name: qpc
     1883: argument: 
      1884: expr: 
       1885: name: rq_type
     1886: argument: 
      1887: expr: 
       1888: call: 
        1889: name: get_rx_type
        1890: argument_list: 
         1891: argument: 
          1892: expr: 
           1893: name: qp
         1894: argument: 
          1895: expr: 
           1896: name: init_attr
 1897: if_stmt: 
  1898: if: 
   1899: condition: 
    1900: expr: 
     1901: name: 
      1902: name: qp
      1903: operator: ->
      1904: name: sq
      1905: operator: .
      1906: name: wqe_cnt
   1907: block: 
    1908: block_content: 
     1909: expr_stmt: 
      1910: expr: 
       1911: call: 
        1912: name: MLX5_SET
        1913: argument_list: 
         1914: argument: 
          1915: expr: 
           1916: name: qpc
         1917: argument: 
          1918: expr: 
           1919: name: qpc
         1920: argument: 
          1921: expr: 
           1922: name: log_sq_size
         1923: argument: 
          1924: expr: 
           1925: call: 
            1926: name: ilog2
            1927: argument_list: 
             1928: argument: 
              1929: expr: 
               1930: name: 
                1931: name: qp
                1932: operator: ->
                1933: name: sq
                1934: operator: .
                1935: name: wqe_cnt
  1936: else: 
   1937: block: 
    1938: block_content: 
     1939: expr_stmt: 
      1940: expr: 
       1941: call: 
        1942: name: MLX5_SET
        1943: argument_list: 
         1944: argument: 
          1945: expr: 
           1946: name: qpc
         1947: argument: 
          1948: expr: 
           1949: name: qpc
         1950: argument: 
          1951: expr: 
           1952: name: no_sq
         1953: argument: 
          1954: expr: 
           1955: literal: 1
     1956: if_stmt: 
      1957: if: 
       1958: condition: 
        1959: expr: 
         1960: name: 
          1961: name: init_attr
          1962: operator: ->
          1963: name: srq
         1964: operator: &&
         1965: name: 
          1966: name: init_attr
          1967: operator: ->
          1968: name: srq
          1969: operator: ->
          1970: name: srq_type
         1971: operator: ==
         1972: name: IB_SRQT_TM
       1973: block: 
        1974: block_content: 
         1975: expr_stmt: 
          1976: expr: 
           1977: call: 
            1978: name: MLX5_SET
            1979: argument_list: 
             1980: argument: 
              1981: expr: 
               1982: name: qpc
             1983: argument: 
              1984: expr: 
               1985: name: qpc
             1986: argument: 
              1987: expr: 
               1988: name: offload_type
             1989: argument: 
              1990: expr: 
               1991: name: MLX5_QPC_OFFLOAD_TYPE_RNDV
 1992: comment: /* Set default resources */
 1993: switch: 
  1994: condition: 
   1995: expr: 
    1996: name: 
     1997: name: init_attr
     1998: operator: ->
     1999: name: qp_type
  2000: block: 
   2001: block_content: 
    2002: case: 
     2003: expr: 
      2004: name: IB_QPT_XRC_TGT
    2005: expr_stmt: 
     2006: expr: 
      2007: call: 
       2008: name: MLX5_SET
       2009: argument_list: 
        2010: argument: 
         2011: expr: 
          2012: name: qpc
        2013: argument: 
         2014: expr: 
          2015: name: qpc
        2016: argument: 
         2017: expr: 
          2018: name: cqn_rcv
        2019: argument: 
         2020: expr: 
          2021: call: 
           2022: name: to_mcq
           2023: argument_list: 
            2024: argument: 
             2025: expr: 
              2026: name: 
               2027: name: devr
               2028: operator: ->
               2029: name: c0
          2030: operator: ->
          2031: name: 
           2032: name: mcq
           2033: operator: .
           2034: name: cqn
    2035: expr_stmt: 
     2036: expr: 
      2037: call: 
       2038: name: MLX5_SET
       2039: argument_list: 
        2040: argument: 
         2041: expr: 
          2042: name: qpc
        2043: argument: 
         2044: expr: 
          2045: name: qpc
        2046: argument: 
         2047: expr: 
          2048: name: cqn_snd
        2049: argument: 
         2050: expr: 
          2051: call: 
           2052: name: to_mcq
           2053: argument_list: 
            2054: argument: 
             2055: expr: 
              2056: name: 
               2057: name: devr
               2058: operator: ->
               2059: name: c0
          2060: operator: ->
          2061: name: 
           2062: name: mcq
           2063: operator: .
           2064: name: cqn
    2065: expr_stmt: 
     2066: expr: 
      2067: call: 
       2068: name: MLX5_SET
       2069: argument_list: 
        2070: argument: 
         2071: expr: 
          2072: name: qpc
        2073: argument: 
         2074: expr: 
          2075: name: qpc
        2076: argument: 
         2077: expr: 
          2078: name: srqn_rmpn_xrqn
        2079: argument: 
         2080: expr: 
          2081: call: 
           2082: name: to_msrq
           2083: argument_list: 
            2084: argument: 
             2085: expr: 
              2086: name: 
               2087: name: devr
               2088: operator: ->
               2089: name: s0
          2090: operator: ->
          2091: name: 
           2092: name: msrq
           2093: operator: .
           2094: name: srqn
    2095: expr_stmt: 
     2096: expr: 
      2097: call: 
       2098: name: MLX5_SET
       2099: argument_list: 
        2100: argument: 
         2101: expr: 
          2102: name: qpc
        2103: argument: 
         2104: expr: 
          2105: name: qpc
        2106: argument: 
         2107: expr: 
          2108: name: xrcd
        2109: argument: 
         2110: expr: 
          2111: call: 
           2112: name: to_mxrcd
           2113: argument_list: 
            2114: argument: 
             2115: expr: 
              2116: name: 
               2117: name: init_attr
               2118: operator: ->
               2119: name: xrcd
          2120: operator: ->
          2121: name: xrcdn
    2122: break: 
    2123: case: 
     2124: expr: 
      2125: name: IB_QPT_XRC_INI
    2126: expr_stmt: 
     2127: expr: 
      2128: call: 
       2129: name: MLX5_SET
       2130: argument_list: 
        2131: argument: 
         2132: expr: 
          2133: name: qpc
        2134: argument: 
         2135: expr: 
          2136: name: qpc
        2137: argument: 
         2138: expr: 
          2139: name: cqn_rcv
        2140: argument: 
         2141: expr: 
          2142: call: 
           2143: name: to_mcq
           2144: argument_list: 
            2145: argument: 
             2146: expr: 
              2147: name: 
               2148: name: devr
               2149: operator: ->
               2150: name: c0
          2151: operator: ->
          2152: name: 
           2153: name: mcq
           2154: operator: .
           2155: name: cqn
    2156: expr_stmt: 
     2157: expr: 
      2158: call: 
       2159: name: MLX5_SET
       2160: argument_list: 
        2161: argument: 
         2162: expr: 
          2163: name: qpc
        2164: argument: 
         2165: expr: 
          2166: name: qpc
        2167: argument: 
         2168: expr: 
          2169: name: xrcd
        2170: argument: 
         2171: expr: 
          2172: call: 
           2173: name: to_mxrcd
           2174: argument_list: 
            2175: argument: 
             2176: expr: 
              2177: name: 
               2178: name: devr
               2179: operator: ->
               2180: name: x1
          2181: operator: ->
          2182: name: xrcdn
    2183: expr_stmt: 
     2184: expr: 
      2185: call: 
       2186: name: MLX5_SET
       2187: argument_list: 
        2188: argument: 
         2189: expr: 
          2190: name: qpc
        2191: argument: 
         2192: expr: 
          2193: name: qpc
        2194: argument: 
         2195: expr: 
          2196: name: srqn_rmpn_xrqn
        2197: argument: 
         2198: expr: 
          2199: call: 
           2200: name: to_msrq
           2201: argument_list: 
            2202: argument: 
             2203: expr: 
              2204: name: 
               2205: name: devr
               2206: operator: ->
               2207: name: s0
          2208: operator: ->
          2209: name: 
           2210: name: msrq
           2211: operator: .
           2212: name: srqn
    2213: break: 
    2214: default: 
    2215: if_stmt: 
     2216: if: 
      2217: condition: 
       2218: expr: 
        2219: name: 
         2220: name: init_attr
         2221: operator: ->
         2222: name: srq
      2223: block: 
       2224: block_content: 
        2225: expr_stmt: 
         2226: expr: 
          2227: call: 
           2228: name: MLX5_SET
           2229: argument_list: 
            2230: argument: 
             2231: expr: 
              2232: name: qpc
            2233: argument: 
             2234: expr: 
              2235: name: qpc
            2236: argument: 
             2237: expr: 
              2238: name: xrcd
            2239: argument: 
             2240: expr: 
              2241: call: 
               2242: name: to_mxrcd
               2243: argument_list: 
                2244: argument: 
                 2245: expr: 
                  2246: name: 
                   2247: name: devr
                   2248: operator: ->
                   2249: name: x0
              2250: operator: ->
              2251: name: xrcdn
        2252: expr_stmt: 
         2253: expr: 
          2254: call: 
           2255: name: MLX5_SET
           2256: argument_list: 
            2257: argument: 
             2258: expr: 
              2259: name: qpc
            2260: argument: 
             2261: expr: 
              2262: name: qpc
            2263: argument: 
             2264: expr: 
              2265: name: srqn_rmpn_xrqn
            2266: argument: 
             2267: expr: 
              2268: call: 
               2269: name: to_msrq
               2270: argument_list: 
                2271: argument: 
                 2272: expr: 
                  2273: name: 
                   2274: name: init_attr
                   2275: operator: ->
                   2276: name: srq
              2277: operator: ->
              2278: name: 
               2279: name: msrq
               2280: operator: .
               2281: name: srqn
     2282: else: 
      2283: block: 
       2284: block_content: 
        2285: expr_stmt: 
         2286: expr: 
          2287: call: 
           2288: name: MLX5_SET
           2289: argument_list: 
            2290: argument: 
             2291: expr: 
              2292: name: qpc
            2293: argument: 
             2294: expr: 
              2295: name: qpc
            2296: argument: 
             2297: expr: 
              2298: name: xrcd
            2299: argument: 
             2300: expr: 
              2301: call: 
               2302: name: to_mxrcd
               2303: argument_list: 
                2304: argument: 
                 2305: expr: 
                  2306: name: 
                   2307: name: devr
                   2308: operator: ->
                   2309: name: x1
              2310: operator: ->
              2311: name: xrcdn
        2312: expr_stmt: 
         2313: expr: 
          2314: call: 
           2315: name: MLX5_SET
           2316: argument_list: 
            2317: argument: 
             2318: expr: 
              2319: name: qpc
            2320: argument: 
             2321: expr: 
              2322: name: qpc
            2323: argument: 
             2324: expr: 
              2325: name: srqn_rmpn_xrqn
            2326: argument: 
             2327: expr: 
              2328: call: 
               2329: name: to_msrq
               2330: argument_list: 
                2331: argument: 
                 2332: expr: 
                  2333: name: 
                   2334: name: devr
                   2335: operator: ->
                   2336: name: s1
              2337: operator: ->
              2338: name: 
               2339: name: msrq
               2340: operator: .
               2341: name: srqn
 2342: if_stmt: 
  2343: if: 
   2344: condition: 
    2345: expr: 
     2346: name: 
      2347: name: init_attr
      2348: operator: ->
      2349: name: send_cq
   2350: block: 
    2351: block_content: 
     2352: expr_stmt: 
      2353: expr: 
       2354: call: 
        2355: name: MLX5_SET
        2356: argument_list: 
         2357: argument: 
          2358: expr: 
           2359: name: qpc
         2360: argument: 
          2361: expr: 
           2362: name: qpc
         2363: argument: 
          2364: expr: 
           2365: name: cqn_snd
         2366: argument: 
          2367: expr: 
           2368: call: 
            2369: name: to_mcq
            2370: argument_list: 
             2371: argument: 
              2372: expr: 
               2373: name: 
                2374: name: init_attr
                2375: operator: ->
                2376: name: send_cq
           2377: operator: ->
           2378: name: 
            2379: name: mcq
            2380: operator: .
            2381: name: cqn
 2382: if_stmt: 
  2383: if: 
   2384: condition: 
    2385: expr: 
     2386: name: 
      2387: name: init_attr
      2388: operator: ->
      2389: name: recv_cq
   2390: block: 
    2391: block_content: 
     2392: expr_stmt: 
      2393: expr: 
       2394: call: 
        2395: name: MLX5_SET
        2396: argument_list: 
         2397: argument: 
          2398: expr: 
           2399: name: qpc
         2400: argument: 
          2401: expr: 
           2402: name: qpc
         2403: argument: 
          2404: expr: 
           2405: name: cqn_rcv
         2406: argument: 
          2407: expr: 
           2408: call: 
            2409: name: to_mcq
            2410: argument_list: 
             2411: argument: 
              2412: expr: 
               2413: name: 
                2414: name: init_attr
                2415: operator: ->
                2416: name: recv_cq
           2417: operator: ->
           2418: name: 
            2419: name: mcq
            2420: operator: .
            2421: name: cqn
 2422: expr_stmt: 
  2423: expr: 
   2424: call: 
    2425: name: MLX5_SET64
    2426: argument_list: 
     2427: argument: 
      2428: expr: 
       2429: name: qpc
     2430: argument: 
      2431: expr: 
       2432: name: qpc
     2433: argument: 
      2434: expr: 
       2435: name: dbr_addr
     2436: argument: 
      2437: expr: 
       2438: name: 
        2439: name: qp
        2440: operator: ->
        2441: name: db
        2442: operator: .
        2443: name: dma
 2444: comment: /* 0xffffff means we ask to work with cqe version 0 */
 2445: if_stmt: 
  2446: if: 
   2447: condition: 
    2448: expr: 
     2449: call: 
      2450: name: MLX5_CAP_GEN
      2451: argument_list: 
       2452: argument: 
        2453: expr: 
         2454: name: mdev
       2455: argument: 
        2456: expr: 
         2457: name: cqe_version
     2458: operator: ==
     2459: name: MLX5_CQE_VERSION_V1
   2460: block: 
    2461: block_content: 
     2462: expr_stmt: 
      2463: expr: 
       2464: call: 
        2465: name: MLX5_SET
        2466: argument_list: 
         2467: argument: 
          2468: expr: 
           2469: name: qpc
         2470: argument: 
          2471: expr: 
           2472: name: qpc
         2473: argument: 
          2474: expr: 
           2475: name: user_index
         2476: argument: 
          2477: expr: 
           2478: name: uidx
 2479: comment: /* we use IB_QP_CREATE_IPOIB_UD_LSO to indicates ipoib qp */
 2480: if_stmt: 
  2481: if: 
   2482: condition: 
    2483: expr: 
     2484: name: 
      2485: name: init_attr
      2486: operator: ->
      2487: name: qp_type
     2488: operator: ==
     2489: name: IB_QPT_UD
     2490: operator: &&
     2491: operator: (
     2492: name: 
      2493: name: init_attr
      2494: operator: ->
      2495: name: create_flags
     2496: operator: &
     2497: name: IB_QP_CREATE_IPOIB_UD_LSO
     2498: operator: )
   2499: block: 
    2500: block_content: 
     2501: expr_stmt: 
      2502: expr: 
       2503: call: 
        2504: name: MLX5_SET
        2505: argument_list: 
         2506: argument: 
          2507: expr: 
           2508: name: qpc
         2509: argument: 
          2510: expr: 
           2511: name: qpc
         2512: argument: 
          2513: expr: 
           2514: name: ulp_stateless_offload_mode
         2515: argument: 
          2516: expr: 
           2517: literal: 1
     2518: expr_stmt: 
      2519: expr: 
       2520: name: 
        2521: name: qp
        2522: operator: ->
        2523: name: flags
       2524: operator: |=
       2525: name: MLX5_IB_QP_LSO
 2526: if_stmt: 
  2527: if: 
   2528: condition: 
    2529: expr: 
     2530: name: 
      2531: name: init_attr
      2532: operator: ->
      2533: name: create_flags
     2534: operator: &
     2535: name: IB_QP_CREATE_PCI_WRITE_END_PADDING
   2536: block: 
    2537: block_content: 
     2538: if_stmt: 
      2539: if: 
       2540: condition: 
        2541: expr: 
         2542: operator: !
         2543: call: 
          2544: name: MLX5_CAP_GEN
          2545: argument_list: 
           2546: argument: 
            2547: expr: 
             2548: name: 
              2549: name: dev
              2550: operator: ->
              2551: name: mdev
           2552: argument: 
            2553: expr: 
             2554: name: end_pad
       2555: block: 
        2556: block_content: 
         2557: expr_stmt: 
          2558: expr: 
           2559: call: 
            2560: name: mlx5_ib_dbg
            2561: argument_list: 
             2562: argument: 
              2563: expr: 
               2564: name: dev
             2565: argument: 
              2566: expr: 
               2567: literal: "scatter end padding is not supported\n"
         2568: expr_stmt: 
          2569: expr: 
           2570: name: err
           2571: operator: =
           2572: operator: -
           2573: name: EOPNOTSUPP
         2574: goto: 
          2575: name: err
      2576: if: 
       2577: condition: 
        2578: expr: 
         2579: name: 
          2580: name: init_attr
          2581: operator: ->
          2582: name: qp_type
         2583: operator: !=
         2584: name: IB_QPT_RAW_PACKET
       2585: block: 
        2586: block_content: 
         2587: expr_stmt: 
          2588: expr: 
           2589: call: 
            2590: name: MLX5_SET
            2591: argument_list: 
             2592: argument: 
              2593: expr: 
               2594: name: qpc
             2595: argument: 
              2596: expr: 
               2597: name: qpc
             2598: argument: 
              2599: expr: 
               2600: name: end_padding_mode
             2601: argument: 
              2602: expr: 
               2603: name: MLX5_WQ_END_PAD_MODE_ALIGN
      2604: else: 
       2605: block: 
        2606: block_content: 
         2607: expr_stmt: 
          2608: expr: 
           2609: name: 
            2610: name: qp
            2611: operator: ->
            2612: name: flags
           2613: operator: |=
           2614: name: MLX5_IB_QP_PCI_WRITE_END_PADDING
 2615: if_stmt: 
  2616: if: 
   2617: condition: 
    2618: expr: 
     2619: name: inlen
     2620: operator: <
     2621: literal: 0
   2622: block: 
    2623: block_content: 
     2624: expr_stmt: 
      2625: expr: 
       2626: name: err
       2627: operator: =
       2628: operator: -
       2629: name: EINVAL
     2630: goto: 
      2631: name: err
 2632: if_stmt: 
  2633: if: 
   2634: condition: 
    2635: expr: 
     2636: name: 
      2637: name: init_attr
      2638: operator: ->
      2639: name: qp_type
     2640: operator: ==
     2641: name: IB_QPT_RAW_PACKET
     2642: operator: ||
     2643: name: 
      2644: name: qp
      2645: operator: ->
      2646: name: flags
     2647: operator: &
     2648: name: MLX5_IB_QP_UNDERLAY
   2649: block: 
    2650: block_content: 
     2651: expr_stmt: 
      2652: expr: 
       2653: name: 
        2654: name: qp
        2655: operator: ->
        2656: name: raw_packet_qp
        2657: operator: .
        2658: name: sq
        2659: operator: .
        2660: name: ubuffer
        2661: operator: .
        2662: name: buf_addr
       2663: operator: =
       2664: name: 
        2665: name: ucmd
        2666: operator: .
        2667: name: sq_buf_addr
     2668: expr_stmt: 
      2669: expr: 
       2670: call: 
        2671: name: raw_packet_qp_copy_info
        2672: argument_list: 
         2673: argument: 
          2674: expr: 
           2675: name: qp
         2676: argument: 
          2677: expr: 
           2678: operator: &
           2679: name: 
            2680: name: qp
            2681: operator: ->
            2682: name: raw_packet_qp
     2683: expr_stmt: 
      2684: expr: 
       2685: name: err
       2686: operator: =
       2687: call: 
        2688: name: create_raw_packet_qp
        2689: argument_list: 
         2690: argument: 
          2691: expr: 
           2692: name: dev
         2693: argument: 
          2694: expr: 
           2695: name: qp
         2696: argument: 
          2697: expr: 
           2698: name: in
         2699: argument: 
          2700: expr: 
           2701: name: inlen
         2702: argument: 
          2703: expr: 
           2704: name: pd
  2705: else: 
   2706: block: 
    2707: block_content: 
     2708: expr_stmt: 
      2709: expr: 
       2710: name: err
       2711: operator: =
       2712: call: 
        2713: name: mlx5_core_create_qp
        2714: argument_list: 
         2715: argument: 
          2716: expr: 
           2717: name: 
            2718: name: dev
            2719: operator: ->
            2720: name: mdev
         2721: argument: 
          2722: expr: 
           2723: operator: &
           2724: name: 
            2725: name: base
            2726: operator: ->
            2727: name: mqp
         2728: argument: 
          2729: expr: 
           2730: name: in
         2731: argument: 
          2732: expr: 
           2733: name: inlen
 2734: if_stmt: 
  2735: if: 
   2736: condition: 
    2737: expr: 
     2738: name: err
   2739: block: 
    2740: block_content: 
     2741: expr_stmt: 
      2742: expr: 
       2743: call: 
        2744: name: mlx5_ib_dbg
        2745: argument_list: 
         2746: argument: 
          2747: expr: 
           2748: name: dev
         2749: argument: 
          2750: expr: 
           2751: literal: "create qp failed\n"
     2752: goto: 
      2753: name: err_create
 2754: expr_stmt: 
  2755: expr: 
   2756: call: 
    2757: name: kvfree
    2758: argument_list: 
     2759: argument: 
      2760: expr: 
       2761: name: in
 2762: expr_stmt: 
  2763: expr: 
   2764: name: 
    2765: name: base
    2766: operator: ->
    2767: name: container_mibqp
   2768: operator: =
   2769: name: qp
 2770: expr_stmt: 
  2771: expr: 
   2772: name: 
    2773: name: base
    2774: operator: ->
    2775: name: mqp
    2776: operator: .
    2777: name: event
   2778: operator: =
   2779: name: mlx5_ib_qp_event
 2780: expr_stmt: 
  2781: expr: 
   2782: call: 
    2783: name: get_cqs
    2784: argument_list: 
     2785: argument: 
      2786: expr: 
       2787: name: 
        2788: name: init_attr
        2789: operator: ->
        2790: name: qp_type
     2791: argument: 
      2792: expr: 
       2793: name: 
        2794: name: init_attr
        2795: operator: ->
        2796: name: send_cq
     2797: argument: 
      2798: expr: 
       2799: name: 
        2800: name: init_attr
        2801: operator: ->
        2802: name: recv_cq
     2803: argument: 
      2804: expr: 
       2805: operator: &
       2806: name: send_cq
     2807: argument: 
      2808: expr: 
       2809: operator: &
       2810: name: recv_cq
 2811: expr_stmt: 
  2812: expr: 
   2813: call: 
    2814: name: spin_lock_irqsave
    2815: argument_list: 
     2816: argument: 
      2817: expr: 
       2818: operator: &
       2819: name: 
        2820: name: dev
        2821: operator: ->
        2822: name: reset_flow_resource_lock
     2823: argument: 
      2824: expr: 
       2825: name: flags
 2826: expr_stmt: 
  2827: expr: 
   2828: call: 
    2829: name: mlx5_ib_lock_cqs
    2830: argument_list: 
     2831: argument: 
      2832: expr: 
       2833: name: send_cq
     2834: argument: 
      2835: expr: 
       2836: name: recv_cq
 2837: comment: /* Maintain device to QPs access, needed for further handling via
=====
0: decl_stmt: 
 1: decl: 
  2: type: 
   3: name: 
    4: name: struct
    5: name: mlx5_ib_create_qp_resp
  6: name: resp

----------------------------------------
0: decl_stmt: 
 1: decl: 
  2: type: 
   3: name: 
    4: name: struct
    5: name: mlx5_ib_create_qp_resp
  6: name: resp
  7: init: 
   8: expr: 
    9: block: 
=====
0: decl: 
 1: type: 
  2: name: 
   3: name: struct
   4: name: mlx5_ib_create_qp_resp
 5: name: resp

----------------------------------------
0: decl: 
 1: type: 
  2: name: 
   3: name: struct
   4: name: mlx5_ib_create_qp_resp
 5: name: resp
 6: init: 
  7: expr: 
   8: block: 
=====
0: comment: /* Set default resources */

----------------------------------------
=====
0: comment: /* 0xffffff means we ask to work with cqe version 0 */

----------------------------------------
=====
0: comment: /* we use IB_QP_CREATE_IPOIB_UD_LSO to indicates ipoib qp */

----------------------------------------
=====
0: comment: /* Maintain device to QPs access, needed for further handling via

----------------------------------------
=====
