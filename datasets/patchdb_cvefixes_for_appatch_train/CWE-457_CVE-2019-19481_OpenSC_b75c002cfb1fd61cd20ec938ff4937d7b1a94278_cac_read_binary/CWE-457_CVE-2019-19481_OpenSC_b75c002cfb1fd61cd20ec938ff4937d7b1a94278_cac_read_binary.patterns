0: unit: 
 1: function: 
  2: type: 
   3: specifier: static
   4: name: int
  5: name: cac_read_binary
  6: parameter_list: 
   7: parameter: 
    8: decl: 
     9: type: 
      10: name: sc_card_t
      11: modifier: *
     12: name: card
   13: parameter: 
    14: decl: 
     15: type: 
      16: name: unsigned
      17: name: int
     18: name: idx
   19: parameter: 
    20: decl: 
     21: type: 
      22: name: unsigned
      23: name: char
      24: modifier: *
     25: name: buf
   26: parameter: 
    27: decl: 
     28: type: 
      29: name: size_t
     30: name: count
   31: parameter: 
    32: decl: 
     33: type: 
      34: name: unsigned
      35: name: long
     36: name: flags
  37: block: 
   38: block_content: 
    39: decl_stmt: 
     40: decl: 
      41: type: 
       42: name: cac_private_data_t
       43: modifier: *
      44: name: priv
      45: init: 
       46: expr: 
        47: call: 
         48: name: CAC_DATA
         49: argument_list: 
          50: argument: 
           51: expr: 
            52: name: card
    53: decl_stmt: 
     54: decl: 
      55: type: 
       56: name: int
      57: name: r
      58: init: 
       59: expr: 
        60: literal: 0
    61: decl_stmt: 
     62: decl: 
      63: type: 
       64: name: u8
       65: modifier: *
      66: name: val
      67: init: 
       68: expr: 
        69: name: NULL
    70: decl_stmt: 
     71: decl: 
      72: type: 
       73: name: u8
       74: modifier: *
      75: name: cert_ptr
    76: decl_stmt: 
     77: decl: 
      78: type: 
       79: name: size_t
      80: name: val_len
    81: decl_stmt: 
     82: decl: 
      83: type: 
       84: name: size_t
      85: name: len
     86: decl: 
      87: type: 
      88: name: cert_len
    89: decl_stmt: 
     90: decl: 
      91: type: 
       92: name: u8
      93: name: cert_type
    94: expr_stmt: 
     95: expr: 
      96: call: 
       97: name: SC_FUNC_CALLED
       98: argument_list: 
        99: argument: 
         100: expr: 
          101: name: 
           102: name: card
           103: operator: ->
           104: name: ctx
        105: argument: 
         106: expr: 
          107: name: SC_LOG_DEBUG_VERBOSE
    108: comment: /* if we didn't return it all last time, return the remainder */
    109: if_stmt: 
     110: if: 
      111: condition: 
       112: expr: 
        113: name: 
         114: name: priv
         115: operator: ->
         116: name: cached
      117: block: 
       118: block_content: 
        119: expr_stmt: 
         120: expr: 
          121: call: 
           122: name: sc_log
           123: argument_list: 
            124: argument: 
             125: expr: 
              126: name: 
               127: name: card
               128: operator: ->
               129: name: ctx
            130: argument: 
             131: expr: 
              132: literal: "returning cached value idx=%d count=%"
              133: name: SC_FORMAT_LEN_SIZE_T
              134: literal: "u"
            135: argument: 
             136: expr: 
              137: name: idx
            138: argument: 
             139: expr: 
              140: name: count
        141: if_stmt: 
         142: if: 
          143: condition: 
           144: expr: 
            145: name: idx
            146: operator: >
            147: name: 
             148: name: priv
             149: operator: ->
             150: name: cache_buf_len
          151: block: 
           152: block_content: 
            153: expr_stmt: 
             154: expr: 
              155: call: 
               156: name: LOG_FUNC_RETURN
               157: argument_list: 
                158: argument: 
                 159: expr: 
                  160: name: 
                   161: name: card
                   162: operator: ->
                   163: name: ctx
                164: argument: 
                 165: expr: 
                  166: name: SC_ERROR_FILE_END_REACHED
        167: expr_stmt: 
         168: expr: 
          169: name: len
          170: operator: =
          171: call: 
           172: name: MIN
           173: argument_list: 
            174: argument: 
             175: expr: 
              176: name: count
            177: argument: 
             178: expr: 
              179: name: 
               180: name: priv
               181: operator: ->
               182: name: cache_buf_len
              183: operator: -
              184: name: idx
        185: expr_stmt: 
         186: expr: 
          187: call: 
           188: name: memcpy
           189: argument_list: 
            190: argument: 
             191: expr: 
              192: name: buf
            193: argument: 
             194: expr: 
              195: operator: &
              196: name: 
               197: name: priv
               198: operator: ->
               199: name: cache_buf
               200: index: 
                201: expr: 
                 202: name: idx
            203: argument: 
             204: expr: 
              205: name: len
        206: expr_stmt: 
         207: expr: 
          208: call: 
           209: name: LOG_FUNC_RETURN
           210: argument_list: 
            211: argument: 
             212: expr: 
              213: name: 
               214: name: card
               215: operator: ->
               216: name: ctx
            217: argument: 
             218: expr: 
              219: name: len
    220: expr_stmt: 
     221: expr: 
      222: call: 
       223: name: sc_log
       224: argument_list: 
        225: argument: 
         226: expr: 
          227: name: 
           228: name: card
           229: operator: ->
           230: name: ctx
        231: argument: 
         232: expr: 
          233: literal: "clearing cache idx=%d count=%"
          234: name: SC_FORMAT_LEN_SIZE_T
          235: literal: "u"
        236: argument: 
         237: expr: 
          238: name: idx
        239: argument: 
         240: expr: 
          241: name: count
    242: expr_stmt: 
     243: expr: 
      244: call: 
       245: name: free
       246: argument_list: 
        247: argument: 
         248: expr: 
          249: name: 
           250: name: priv
           251: operator: ->
           252: name: cache_buf
    253: expr_stmt: 
     254: expr: 
      255: name: 
       256: name: priv
       257: operator: ->
       258: name: cache_buf
      259: operator: =
      260: name: NULL
    261: expr_stmt: 
     262: expr: 
      263: name: 
       264: name: priv
       265: operator: ->
       266: name: cache_buf_len
      267: operator: =
      268: literal: 0
    269: expr_stmt: 
     270: expr: 
      271: name: r
      272: operator: =
      273: call: 
       274: name: cac_cac1_get_certificate
       275: argument_list: 
        276: argument: 
         277: expr: 
          278: name: card
        279: argument: 
         280: expr: 
          281: operator: &
          282: name: val
        283: argument: 
         284: expr: 
          285: operator: &
          286: name: val_len
    287: if_stmt: 
     288: if: 
      289: condition: 
       290: expr: 
        291: name: r
        292: operator: <
        293: literal: 0
      294: block: 
       295: block_content: 
        296: goto: 
         297: name: done
    298: if_stmt: 
     299: if: 
      300: condition: 
       301: expr: 
        302: name: val_len
        303: operator: <
        304: literal: 1
      305: block: 
       306: block_content: 
        307: expr_stmt: 
         308: expr: 
          309: name: r
          310: operator: =
          311: name: SC_ERROR_INVALID_DATA
        312: goto: 
         313: name: done
    314: expr_stmt: 
     315: expr: 
      316: name: cert_type
      317: operator: =
      318: name: 
       319: name: val
       320: index: 
        321: expr: 
         322: literal: 0
    323: expr_stmt: 
     324: expr: 
      325: name: cert_ptr
      326: operator: =
      327: name: val
      328: operator: +
      329: literal: 1
    330: expr_stmt: 
     331: expr: 
      332: name: cert_len
      333: operator: =
      334: name: val_len
      335: operator: -
      336: literal: 1
    337: comment: /* if the info byte is 1, then the cert is compressed, decompress it */
    338: if_stmt: 
     339: if: 
      340: condition: 
       341: expr: 
        342: operator: (
        343: name: cert_type
        344: operator: &
        345: literal: 0x3
        346: operator: )
        347: operator: ==
        348: literal: 1
      349: block: 
       350: block_content: 
        351: ifdef: 
         352: directive: ifdef
         353: name: ENABLE_ZLIB
        354: expr_stmt: 
         355: expr: 
          356: name: r
          357: operator: =
          358: call: 
           359: name: sc_decompress_alloc
           360: argument_list: 
            361: argument: 
             362: expr: 
              363: operator: &
              364: name: 
               365: name: priv
               366: operator: ->
               367: name: cache_buf
            368: argument: 
             369: expr: 
              370: operator: &
              371: name: 
               372: name: priv
               373: operator: ->
               374: name: cache_buf_len
            375: argument: 
             376: expr: 
              377: name: cert_ptr
            378: argument: 
             379: expr: 
              380: name: cert_len
            381: argument: 
             382: expr: 
              383: name: COMPRESSION_AUTO
        384: else: 
         385: directive: else
        386: expr_stmt: 
         387: expr: 
          388: call: 
           389: name: sc_log
           390: argument_list: 
            391: argument: 
             392: expr: 
              393: name: 
               394: name: card
               395: operator: ->
               396: name: ctx
            397: argument: 
             398: expr: 
              399: literal: "CAC compression not supported, no zlib"
        400: expr_stmt: 
         401: expr: 
          402: name: r
          403: operator: =
          404: name: SC_ERROR_NOT_SUPPORTED
        405: endif: 
         406: directive: endif
        407: if_stmt: 
         408: if: 
          409: condition: 
           410: expr: 
            411: name: r
          412: block: 
           413: block_content: 
            414: goto: 
             415: name: done
     416: if: 
      417: condition: 
       418: expr: 
        419: name: cert_len
        420: operator: >
        421: literal: 0
      422: block: 
       423: block_content: 
        424: expr_stmt: 
         425: expr: 
          426: name: 
           427: name: priv
           428: operator: ->
           429: name: cache_buf
          430: operator: =
          431: call: 
           432: name: malloc
           433: argument_list: 
            434: argument: 
             435: expr: 
              436: name: cert_len
        437: if_stmt: 
         438: if: 
          439: condition: 
           440: expr: 
            441: name: 
             442: name: priv
             443: operator: ->
             444: name: cache_buf
            445: operator: ==
            446: name: NULL
          447: block: 
           448: block_content: 
            449: expr_stmt: 
             450: expr: 
              451: name: r
              452: operator: =
              453: name: SC_ERROR_OUT_OF_MEMORY
            454: goto: 
             455: name: done
        456: expr_stmt: 
         457: expr: 
          458: name: 
           459: name: priv
           460: operator: ->
           461: name: cache_buf_len
          462: operator: =
          463: name: cert_len
        464: expr_stmt: 
         465: expr: 
          466: call: 
           467: name: memcpy
           468: argument_list: 
            469: argument: 
             470: expr: 
              471: name: 
               472: name: priv
               473: operator: ->
               474: name: cache_buf
            475: argument: 
             476: expr: 
              477: name: cert_ptr
            478: argument: 
             479: expr: 
              480: name: cert_len
    481: comment: /* OK we've read the data, now copy the required portion out to the callers buffer */
    482: expr_stmt: 
     483: expr: 
      484: name: 
       485: name: priv
       486: operator: ->
       487: name: cached
      488: operator: =
      489: literal: 1
    490: expr_stmt: 
     491: expr: 
      492: name: len
      493: operator: =
      494: call: 
       495: name: MIN
       496: argument_list: 
        497: argument: 
         498: expr: 
          499: name: count
        500: argument: 
         501: expr: 
          502: name: 
           503: name: priv
           504: operator: ->
           505: name: cache_buf_len
          506: operator: -
          507: name: idx
    508: if_stmt: 
     509: if: 
      510: condition: 
       511: expr: 
        512: name: len
        513: operator: &&
        514: name: 
         515: name: priv
         516: operator: ->
         517: name: cache_buf
      518: block: 
       519: block_content: 
        520: expr_stmt: 
         521: expr: 
          522: call: 
           523: name: memcpy
           524: argument_list: 
            525: argument: 
             526: expr: 
              527: name: buf
            528: argument: 
             529: expr: 
              530: operator: &
              531: name: 
               532: name: priv
               533: operator: ->
               534: name: cache_buf
               535: index: 
                536: expr: 
                 537: name: idx
            538: argument: 
             539: expr: 
              540: name: len
    541: expr_stmt: 
     542: expr: 
      543: name: r
      544: operator: =
      545: name: len
    546: label: 
     547: name: done
    548: if_stmt: 
     549: if: 
      550: condition: 
       551: expr: 
        552: name: val
      553: block: 
       554: block_content: 
        555: expr_stmt: 
         556: expr: 
          557: call: 
           558: name: free
           559: argument_list: 
            560: argument: 
             561: expr: 
              562: name: val
    563: expr_stmt: 
     564: expr: 
      565: call: 
       566: name: LOG_FUNC_RETURN
       567: argument_list: 
        568: argument: 
         569: expr: 
          570: name: 
           571: name: card
           572: operator: ->
           573: name: ctx
        574: argument: 
         575: expr: 
          576: name: r

----------------------------------------
0: unit: 
 1: function: 
  2: type: 
   3: specifier: static
   4: name: int
  5: name: cac_read_binary
  6: parameter_list: 
   7: parameter: 
    8: decl: 
     9: type: 
      10: name: sc_card_t
      11: modifier: *
     12: name: card
   13: parameter: 
    14: decl: 
     15: type: 
      16: name: unsigned
      17: name: int
     18: name: idx
   19: parameter: 
    20: decl: 
     21: type: 
      22: name: unsigned
      23: name: char
      24: modifier: *
     25: name: buf
   26: parameter: 
    27: decl: 
     28: type: 
      29: name: size_t
     30: name: count
   31: parameter: 
    32: decl: 
     33: type: 
      34: name: unsigned
      35: name: long
     36: name: flags
  37: block: 
   38: block_content: 
    39: decl_stmt: 
     40: decl: 
      41: type: 
       42: name: cac_private_data_t
       43: modifier: *
      44: name: priv
      45: init: 
       46: expr: 
        47: call: 
         48: name: CAC_DATA
         49: argument_list: 
          50: argument: 
           51: expr: 
            52: name: card
    53: decl_stmt: 
     54: decl: 
      55: type: 
       56: name: int
      57: name: r
      58: init: 
       59: expr: 
        60: literal: 0
    61: decl_stmt: 
     62: decl: 
      63: type: 
       64: name: u8
       65: modifier: *
      66: name: val
      67: init: 
       68: expr: 
        69: name: NULL
    70: decl_stmt: 
     71: decl: 
      72: type: 
       73: name: u8
       74: modifier: *
      75: name: cert_ptr
    76: decl_stmt: 
     77: decl: 
      78: type: 
       79: name: size_t
      80: name: val_len
      81: init: 
       82: expr: 
        83: literal: 0
    84: decl_stmt: 
     85: decl: 
      86: type: 
       87: name: size_t
      88: name: len
     89: decl: 
      90: type: 
      91: name: cert_len
    92: decl_stmt: 
     93: decl: 
      94: type: 
       95: name: u8
      96: name: cert_type
    97: expr_stmt: 
     98: expr: 
      99: call: 
       100: name: SC_FUNC_CALLED
       101: argument_list: 
        102: argument: 
         103: expr: 
          104: name: 
           105: name: card
           106: operator: ->
           107: name: ctx
        108: argument: 
         109: expr: 
          110: name: SC_LOG_DEBUG_VERBOSE
    111: comment: /* if we didn't return it all last time, return the remainder */
    112: if_stmt: 
     113: if: 
      114: condition: 
       115: expr: 
        116: name: 
         117: name: priv
         118: operator: ->
         119: name: cached
      120: block: 
       121: block_content: 
        122: expr_stmt: 
         123: expr: 
          124: call: 
           125: name: sc_log
           126: argument_list: 
            127: argument: 
             128: expr: 
              129: name: 
               130: name: card
               131: operator: ->
               132: name: ctx
            133: argument: 
             134: expr: 
              135: literal: "returning cached value idx=%d count=%"
              136: name: SC_FORMAT_LEN_SIZE_T
              137: literal: "u"
            138: argument: 
             139: expr: 
              140: name: idx
            141: argument: 
             142: expr: 
              143: name: count
        144: if_stmt: 
         145: if: 
          146: condition: 
           147: expr: 
            148: name: idx
            149: operator: >
            150: name: 
             151: name: priv
             152: operator: ->
             153: name: cache_buf_len
          154: block: 
           155: block_content: 
            156: expr_stmt: 
             157: expr: 
              158: call: 
               159: name: LOG_FUNC_RETURN
               160: argument_list: 
                161: argument: 
                 162: expr: 
                  163: name: 
                   164: name: card
                   165: operator: ->
                   166: name: ctx
                167: argument: 
                 168: expr: 
                  169: name: SC_ERROR_FILE_END_REACHED
        170: expr_stmt: 
         171: expr: 
          172: name: len
          173: operator: =
          174: call: 
           175: name: MIN
           176: argument_list: 
            177: argument: 
             178: expr: 
              179: name: count
            180: argument: 
             181: expr: 
              182: name: 
               183: name: priv
               184: operator: ->
               185: name: cache_buf_len
              186: operator: -
              187: name: idx
        188: expr_stmt: 
         189: expr: 
          190: call: 
           191: name: memcpy
           192: argument_list: 
            193: argument: 
             194: expr: 
              195: name: buf
            196: argument: 
             197: expr: 
              198: operator: &
              199: name: 
               200: name: priv
               201: operator: ->
               202: name: cache_buf
               203: index: 
                204: expr: 
                 205: name: idx
            206: argument: 
             207: expr: 
              208: name: len
        209: expr_stmt: 
         210: expr: 
          211: call: 
           212: name: LOG_FUNC_RETURN
           213: argument_list: 
            214: argument: 
             215: expr: 
              216: name: 
               217: name: card
               218: operator: ->
               219: name: ctx
            220: argument: 
             221: expr: 
              222: name: len
    223: expr_stmt: 
     224: expr: 
      225: call: 
       226: name: sc_log
       227: argument_list: 
        228: argument: 
         229: expr: 
          230: name: 
           231: name: card
           232: operator: ->
           233: name: ctx
        234: argument: 
         235: expr: 
          236: literal: "clearing cache idx=%d count=%"
          237: name: SC_FORMAT_LEN_SIZE_T
          238: literal: "u"
        239: argument: 
         240: expr: 
          241: name: idx
        242: argument: 
         243: expr: 
          244: name: count
    245: expr_stmt: 
     246: expr: 
      247: call: 
       248: name: free
       249: argument_list: 
        250: argument: 
         251: expr: 
          252: name: 
           253: name: priv
           254: operator: ->
           255: name: cache_buf
    256: expr_stmt: 
     257: expr: 
      258: name: 
       259: name: priv
       260: operator: ->
       261: name: cache_buf
      262: operator: =
      263: name: NULL
    264: expr_stmt: 
     265: expr: 
      266: name: 
       267: name: priv
       268: operator: ->
       269: name: cache_buf_len
      270: operator: =
      271: literal: 0
    272: expr_stmt: 
     273: expr: 
      274: name: r
      275: operator: =
      276: call: 
       277: name: cac_cac1_get_certificate
       278: argument_list: 
        279: argument: 
         280: expr: 
          281: name: card
        282: argument: 
         283: expr: 
          284: operator: &
          285: name: val
        286: argument: 
         287: expr: 
          288: operator: &
          289: name: val_len
    290: if_stmt: 
     291: if: 
      292: condition: 
       293: expr: 
        294: name: r
        295: operator: <
        296: literal: 0
      297: block: 
       298: block_content: 
        299: goto: 
         300: name: done
    301: if_stmt: 
     302: if: 
      303: condition: 
       304: expr: 
        305: name: val_len
        306: operator: <
        307: literal: 1
      308: block: 
       309: block_content: 
        310: expr_stmt: 
         311: expr: 
          312: name: r
          313: operator: =
          314: name: SC_ERROR_INVALID_DATA
        315: goto: 
         316: name: done
    317: expr_stmt: 
     318: expr: 
      319: name: cert_type
      320: operator: =
      321: name: 
       322: name: val
       323: index: 
        324: expr: 
         325: literal: 0
    326: expr_stmt: 
     327: expr: 
      328: name: cert_ptr
      329: operator: =
      330: name: val
      331: operator: +
      332: literal: 1
    333: expr_stmt: 
     334: expr: 
      335: name: cert_len
      336: operator: =
      337: name: val_len
      338: operator: -
      339: literal: 1
    340: comment: /* if the info byte is 1, then the cert is compressed, decompress it */
    341: if_stmt: 
     342: if: 
      343: condition: 
       344: expr: 
        345: operator: (
        346: name: cert_type
        347: operator: &
        348: literal: 0x3
        349: operator: )
        350: operator: ==
        351: literal: 1
      352: block: 
       353: block_content: 
        354: ifdef: 
         355: directive: ifdef
         356: name: ENABLE_ZLIB
        357: expr_stmt: 
         358: expr: 
          359: name: r
          360: operator: =
          361: call: 
           362: name: sc_decompress_alloc
           363: argument_list: 
            364: argument: 
             365: expr: 
              366: operator: &
              367: name: 
               368: name: priv
               369: operator: ->
               370: name: cache_buf
            371: argument: 
             372: expr: 
              373: operator: &
              374: name: 
               375: name: priv
               376: operator: ->
               377: name: cache_buf_len
            378: argument: 
             379: expr: 
              380: name: cert_ptr
            381: argument: 
             382: expr: 
              383: name: cert_len
            384: argument: 
             385: expr: 
              386: name: COMPRESSION_AUTO
        387: else: 
         388: directive: else
        389: expr_stmt: 
         390: expr: 
          391: call: 
           392: name: sc_log
           393: argument_list: 
            394: argument: 
             395: expr: 
              396: name: 
               397: name: card
               398: operator: ->
               399: name: ctx
            400: argument: 
             401: expr: 
              402: literal: "CAC compression not supported, no zlib"
        403: expr_stmt: 
         404: expr: 
          405: name: r
          406: operator: =
          407: name: SC_ERROR_NOT_SUPPORTED
        408: endif: 
         409: directive: endif
        410: if_stmt: 
         411: if: 
          412: condition: 
           413: expr: 
            414: name: r
          415: block: 
           416: block_content: 
            417: goto: 
             418: name: done
     419: if: 
      420: condition: 
       421: expr: 
        422: name: cert_len
        423: operator: >
        424: literal: 0
      425: block: 
       426: block_content: 
        427: expr_stmt: 
         428: expr: 
          429: name: 
           430: name: priv
           431: operator: ->
           432: name: cache_buf
          433: operator: =
          434: call: 
           435: name: malloc
           436: argument_list: 
            437: argument: 
             438: expr: 
              439: name: cert_len
        440: if_stmt: 
         441: if: 
          442: condition: 
           443: expr: 
            444: name: 
             445: name: priv
             446: operator: ->
             447: name: cache_buf
            448: operator: ==
            449: name: NULL
          450: block: 
           451: block_content: 
            452: expr_stmt: 
             453: expr: 
              454: name: r
              455: operator: =
              456: name: SC_ERROR_OUT_OF_MEMORY
            457: goto: 
             458: name: done
        459: expr_stmt: 
         460: expr: 
          461: name: 
           462: name: priv
           463: operator: ->
           464: name: cache_buf_len
          465: operator: =
          466: name: cert_len
        467: expr_stmt: 
         468: expr: 
          469: call: 
           470: name: memcpy
           471: argument_list: 
            472: argument: 
             473: expr: 
              474: name: 
               475: name: priv
               476: operator: ->
               477: name: cache_buf
            478: argument: 
             479: expr: 
              480: name: cert_ptr
            481: argument: 
             482: expr: 
              483: name: cert_len
    484: comment: /* OK we've read the data, now copy the required portion out to the callers buffer */
    485: expr_stmt: 
     486: expr: 
      487: name: 
       488: name: priv
       489: operator: ->
       490: name: cached
      491: operator: =
      492: literal: 1
    493: expr_stmt: 
     494: expr: 
      495: name: len
      496: operator: =
      497: call: 
       498: name: MIN
       499: argument_list: 
        500: argument: 
         501: expr: 
          502: name: count
        503: argument: 
         504: expr: 
          505: name: 
           506: name: priv
           507: operator: ->
           508: name: cache_buf_len
          509: operator: -
          510: name: idx
    511: if_stmt: 
     512: if: 
      513: condition: 
       514: expr: 
        515: name: len
        516: operator: &&
        517: name: 
         518: name: priv
         519: operator: ->
         520: name: cache_buf
      521: block: 
       522: block_content: 
        523: expr_stmt: 
         524: expr: 
          525: call: 
           526: name: memcpy
           527: argument_list: 
            528: argument: 
             529: expr: 
              530: name: buf
            531: argument: 
             532: expr: 
              533: operator: &
              534: name: 
               535: name: priv
               536: operator: ->
               537: name: cache_buf
               538: index: 
                539: expr: 
                 540: name: idx
            541: argument: 
             542: expr: 
              543: name: len
    544: expr_stmt: 
     545: expr: 
      546: name: r
      547: operator: =
      548: name: len
    549: label: 
     550: name: done
    551: if_stmt: 
     552: if: 
      553: condition: 
       554: expr: 
        555: name: val
      556: block: 
       557: block_content: 
        558: expr_stmt: 
         559: expr: 
          560: call: 
           561: name: free
           562: argument_list: 
            563: argument: 
             564: expr: 
              565: name: val
    566: expr_stmt: 
     567: expr: 
      568: call: 
       569: name: LOG_FUNC_RETURN
       570: argument_list: 
        571: argument: 
         572: expr: 
          573: name: 
           574: name: card
           575: operator: ->
           576: name: ctx
        577: argument: 
         578: expr: 
          579: name: r
=====
0: function: 
 1: type: 
  2: specifier: static
  3: name: int
 4: name: cac_read_binary
 5: parameter_list: 
  6: parameter: 
   7: decl: 
    8: type: 
     9: name: sc_card_t
     10: modifier: *
    11: name: card
  12: parameter: 
   13: decl: 
    14: type: 
     15: name: unsigned
     16: name: int
    17: name: idx
  18: parameter: 
   19: decl: 
    20: type: 
     21: name: unsigned
     22: name: char
     23: modifier: *
    24: name: buf
  25: parameter: 
   26: decl: 
    27: type: 
     28: name: size_t
    29: name: count
  30: parameter: 
   31: decl: 
    32: type: 
     33: name: unsigned
     34: name: long
    35: name: flags
 36: block: 
  37: block_content: 
   38: decl_stmt: 
    39: decl: 
     40: type: 
      41: name: cac_private_data_t
      42: modifier: *
     43: name: priv
     44: init: 
      45: expr: 
       46: call: 
        47: name: CAC_DATA
        48: argument_list: 
         49: argument: 
          50: expr: 
           51: name: card
   52: decl_stmt: 
    53: decl: 
     54: type: 
      55: name: int
     56: name: r
     57: init: 
      58: expr: 
       59: literal: 0
   60: decl_stmt: 
    61: decl: 
     62: type: 
      63: name: u8
      64: modifier: *
     65: name: val
     66: init: 
      67: expr: 
       68: name: NULL
   69: decl_stmt: 
    70: decl: 
     71: type: 
      72: name: u8
      73: modifier: *
     74: name: cert_ptr
   75: decl_stmt: 
    76: decl: 
     77: type: 
      78: name: size_t
     79: name: val_len
   80: decl_stmt: 
    81: decl: 
     82: type: 
      83: name: size_t
     84: name: len
    85: decl: 
     86: type: 
     87: name: cert_len
   88: decl_stmt: 
    89: decl: 
     90: type: 
      91: name: u8
     92: name: cert_type
   93: expr_stmt: 
    94: expr: 
     95: call: 
      96: name: SC_FUNC_CALLED
      97: argument_list: 
       98: argument: 
        99: expr: 
         100: name: 
          101: name: card
          102: operator: ->
          103: name: ctx
       104: argument: 
        105: expr: 
         106: name: SC_LOG_DEBUG_VERBOSE
   107: comment: /* if we didn't return it all last time, return the remainder */
   108: if_stmt: 
    109: if: 
     110: condition: 
      111: expr: 
       112: name: 
        113: name: priv
        114: operator: ->
        115: name: cached
     116: block: 
      117: block_content: 
       118: expr_stmt: 
        119: expr: 
         120: call: 
          121: name: sc_log
          122: argument_list: 
           123: argument: 
            124: expr: 
             125: name: 
              126: name: card
              127: operator: ->
              128: name: ctx
           129: argument: 
            130: expr: 
             131: literal: "returning cached value idx=%d count=%"
             132: name: SC_FORMAT_LEN_SIZE_T
             133: literal: "u"
           134: argument: 
            135: expr: 
             136: name: idx
           137: argument: 
            138: expr: 
             139: name: count
       140: if_stmt: 
        141: if: 
         142: condition: 
          143: expr: 
           144: name: idx
           145: operator: >
           146: name: 
            147: name: priv
            148: operator: ->
            149: name: cache_buf_len
         150: block: 
          151: block_content: 
           152: expr_stmt: 
            153: expr: 
             154: call: 
              155: name: LOG_FUNC_RETURN
              156: argument_list: 
               157: argument: 
                158: expr: 
                 159: name: 
                  160: name: card
                  161: operator: ->
                  162: name: ctx
               163: argument: 
                164: expr: 
                 165: name: SC_ERROR_FILE_END_REACHED
       166: expr_stmt: 
        167: expr: 
         168: name: len
         169: operator: =
         170: call: 
          171: name: MIN
          172: argument_list: 
           173: argument: 
            174: expr: 
             175: name: count
           176: argument: 
            177: expr: 
             178: name: 
              179: name: priv
              180: operator: ->
              181: name: cache_buf_len
             182: operator: -
             183: name: idx
       184: expr_stmt: 
        185: expr: 
         186: call: 
          187: name: memcpy
          188: argument_list: 
           189: argument: 
            190: expr: 
             191: name: buf
           192: argument: 
            193: expr: 
             194: operator: &
             195: name: 
              196: name: priv
              197: operator: ->
              198: name: cache_buf
              199: index: 
               200: expr: 
                201: name: idx
           202: argument: 
            203: expr: 
             204: name: len
       205: expr_stmt: 
        206: expr: 
         207: call: 
          208: name: LOG_FUNC_RETURN
          209: argument_list: 
           210: argument: 
            211: expr: 
             212: name: 
              213: name: card
              214: operator: ->
              215: name: ctx
           216: argument: 
            217: expr: 
             218: name: len
   219: expr_stmt: 
    220: expr: 
     221: call: 
      222: name: sc_log
      223: argument_list: 
       224: argument: 
        225: expr: 
         226: name: 
          227: name: card
          228: operator: ->
          229: name: ctx
       230: argument: 
        231: expr: 
         232: literal: "clearing cache idx=%d count=%"
         233: name: SC_FORMAT_LEN_SIZE_T
         234: literal: "u"
       235: argument: 
        236: expr: 
         237: name: idx
       238: argument: 
        239: expr: 
         240: name: count
   241: expr_stmt: 
    242: expr: 
     243: call: 
      244: name: free
      245: argument_list: 
       246: argument: 
        247: expr: 
         248: name: 
          249: name: priv
          250: operator: ->
          251: name: cache_buf
   252: expr_stmt: 
    253: expr: 
     254: name: 
      255: name: priv
      256: operator: ->
      257: name: cache_buf
     258: operator: =
     259: name: NULL
   260: expr_stmt: 
    261: expr: 
     262: name: 
      263: name: priv
      264: operator: ->
      265: name: cache_buf_len
     266: operator: =
     267: literal: 0
   268: expr_stmt: 
    269: expr: 
     270: name: r
     271: operator: =
     272: call: 
      273: name: cac_cac1_get_certificate
      274: argument_list: 
       275: argument: 
        276: expr: 
         277: name: card
       278: argument: 
        279: expr: 
         280: operator: &
         281: name: val
       282: argument: 
        283: expr: 
         284: operator: &
         285: name: val_len
   286: if_stmt: 
    287: if: 
     288: condition: 
      289: expr: 
       290: name: r
       291: operator: <
       292: literal: 0
     293: block: 
      294: block_content: 
       295: goto: 
        296: name: done
   297: if_stmt: 
    298: if: 
     299: condition: 
      300: expr: 
       301: name: val_len
       302: operator: <
       303: literal: 1
     304: block: 
      305: block_content: 
       306: expr_stmt: 
        307: expr: 
         308: name: r
         309: operator: =
         310: name: SC_ERROR_INVALID_DATA
       311: goto: 
        312: name: done
   313: expr_stmt: 
    314: expr: 
     315: name: cert_type
     316: operator: =
     317: name: 
      318: name: val
      319: index: 
       320: expr: 
        321: literal: 0
   322: expr_stmt: 
    323: expr: 
     324: name: cert_ptr
     325: operator: =
     326: name: val
     327: operator: +
     328: literal: 1
   329: expr_stmt: 
    330: expr: 
     331: name: cert_len
     332: operator: =
     333: name: val_len
     334: operator: -
     335: literal: 1
   336: comment: /* if the info byte is 1, then the cert is compressed, decompress it */
   337: if_stmt: 
    338: if: 
     339: condition: 
      340: expr: 
       341: operator: (
       342: name: cert_type
       343: operator: &
       344: literal: 0x3
       345: operator: )
       346: operator: ==
       347: literal: 1
     348: block: 
      349: block_content: 
       350: ifdef: 
        351: directive: ifdef
        352: name: ENABLE_ZLIB
       353: expr_stmt: 
        354: expr: 
         355: name: r
         356: operator: =
         357: call: 
          358: name: sc_decompress_alloc
          359: argument_list: 
           360: argument: 
            361: expr: 
             362: operator: &
             363: name: 
              364: name: priv
              365: operator: ->
              366: name: cache_buf
           367: argument: 
            368: expr: 
             369: operator: &
             370: name: 
              371: name: priv
              372: operator: ->
              373: name: cache_buf_len
           374: argument: 
            375: expr: 
             376: name: cert_ptr
           377: argument: 
            378: expr: 
             379: name: cert_len
           380: argument: 
            381: expr: 
             382: name: COMPRESSION_AUTO
       383: else: 
        384: directive: else
       385: expr_stmt: 
        386: expr: 
         387: call: 
          388: name: sc_log
          389: argument_list: 
           390: argument: 
            391: expr: 
             392: name: 
              393: name: card
              394: operator: ->
              395: name: ctx
           396: argument: 
            397: expr: 
             398: literal: "CAC compression not supported, no zlib"
       399: expr_stmt: 
        400: expr: 
         401: name: r
         402: operator: =
         403: name: SC_ERROR_NOT_SUPPORTED
       404: endif: 
        405: directive: endif
       406: if_stmt: 
        407: if: 
         408: condition: 
          409: expr: 
           410: name: r
         411: block: 
          412: block_content: 
           413: goto: 
            414: name: done
    415: if: 
     416: condition: 
      417: expr: 
       418: name: cert_len
       419: operator: >
       420: literal: 0
     421: block: 
      422: block_content: 
       423: expr_stmt: 
        424: expr: 
         425: name: 
          426: name: priv
          427: operator: ->
          428: name: cache_buf
         429: operator: =
         430: call: 
          431: name: malloc
          432: argument_list: 
           433: argument: 
            434: expr: 
             435: name: cert_len
       436: if_stmt: 
        437: if: 
         438: condition: 
          439: expr: 
           440: name: 
            441: name: priv
            442: operator: ->
            443: name: cache_buf
           444: operator: ==
           445: name: NULL
         446: block: 
          447: block_content: 
           448: expr_stmt: 
            449: expr: 
             450: name: r
             451: operator: =
             452: name: SC_ERROR_OUT_OF_MEMORY
           453: goto: 
            454: name: done
       455: expr_stmt: 
        456: expr: 
         457: name: 
          458: name: priv
          459: operator: ->
          460: name: cache_buf_len
         461: operator: =
         462: name: cert_len
       463: expr_stmt: 
        464: expr: 
         465: call: 
          466: name: memcpy
          467: argument_list: 
           468: argument: 
            469: expr: 
             470: name: 
              471: name: priv
              472: operator: ->
              473: name: cache_buf
           474: argument: 
            475: expr: 
             476: name: cert_ptr
           477: argument: 
            478: expr: 
             479: name: cert_len
   480: comment: /* OK we've read the data, now copy the required portion out to the callers buffer */
   481: expr_stmt: 
    482: expr: 
     483: name: 
      484: name: priv
      485: operator: ->
      486: name: cached
     487: operator: =
     488: literal: 1
   489: expr_stmt: 
    490: expr: 
     491: name: len
     492: operator: =
     493: call: 
      494: name: MIN
      495: argument_list: 
       496: argument: 
        497: expr: 
         498: name: count
       499: argument: 
        500: expr: 
         501: name: 
          502: name: priv
          503: operator: ->
          504: name: cache_buf_len
         505: operator: -
         506: name: idx
   507: if_stmt: 
    508: if: 
     509: condition: 
      510: expr: 
       511: name: len
       512: operator: &&
       513: name: 
        514: name: priv
        515: operator: ->
        516: name: cache_buf
     517: block: 
      518: block_content: 
       519: expr_stmt: 
        520: expr: 
         521: call: 
          522: name: memcpy
          523: argument_list: 
           524: argument: 
            525: expr: 
             526: name: buf
           527: argument: 
            528: expr: 
             529: operator: &
             530: name: 
              531: name: priv
              532: operator: ->
              533: name: cache_buf
              534: index: 
               535: expr: 
                536: name: idx
           537: argument: 
            538: expr: 
             539: name: len
   540: expr_stmt: 
    541: expr: 
     542: name: r
     543: operator: =
     544: name: len
   545: label: 
    546: name: done
   547: if_stmt: 
    548: if: 
     549: condition: 
      550: expr: 
       551: name: val
     552: block: 
      553: block_content: 
       554: expr_stmt: 
        555: expr: 
         556: call: 
          557: name: free
          558: argument_list: 
           559: argument: 
            560: expr: 
             561: name: val
   562: expr_stmt: 
    563: expr: 
     564: call: 
      565: name: LOG_FUNC_RETURN
      566: argument_list: 
       567: argument: 
        568: expr: 
         569: name: 
          570: name: card
          571: operator: ->
          572: name: ctx
       573: argument: 
        574: expr: 
         575: name: r

----------------------------------------
0: function: 
 1: type: 
  2: specifier: static
  3: name: int
 4: name: cac_read_binary
 5: parameter_list: 
  6: parameter: 
   7: decl: 
    8: type: 
     9: name: sc_card_t
     10: modifier: *
    11: name: card
  12: parameter: 
   13: decl: 
    14: type: 
     15: name: unsigned
     16: name: int
    17: name: idx
  18: parameter: 
   19: decl: 
    20: type: 
     21: name: unsigned
     22: name: char
     23: modifier: *
    24: name: buf
  25: parameter: 
   26: decl: 
    27: type: 
     28: name: size_t
    29: name: count
  30: parameter: 
   31: decl: 
    32: type: 
     33: name: unsigned
     34: name: long
    35: name: flags
 36: block: 
  37: block_content: 
   38: decl_stmt: 
    39: decl: 
     40: type: 
      41: name: cac_private_data_t
      42: modifier: *
     43: name: priv
     44: init: 
      45: expr: 
       46: call: 
        47: name: CAC_DATA
        48: argument_list: 
         49: argument: 
          50: expr: 
           51: name: card
   52: decl_stmt: 
    53: decl: 
     54: type: 
      55: name: int
     56: name: r
     57: init: 
      58: expr: 
       59: literal: 0
   60: decl_stmt: 
    61: decl: 
     62: type: 
      63: name: u8
      64: modifier: *
     65: name: val
     66: init: 
      67: expr: 
       68: name: NULL
   69: decl_stmt: 
    70: decl: 
     71: type: 
      72: name: u8
      73: modifier: *
     74: name: cert_ptr
   75: decl_stmt: 
    76: decl: 
     77: type: 
      78: name: size_t
     79: name: val_len
     80: init: 
      81: expr: 
       82: literal: 0
   83: decl_stmt: 
    84: decl: 
     85: type: 
      86: name: size_t
     87: name: len
    88: decl: 
     89: type: 
     90: name: cert_len
   91: decl_stmt: 
    92: decl: 
     93: type: 
      94: name: u8
     95: name: cert_type
   96: expr_stmt: 
    97: expr: 
     98: call: 
      99: name: SC_FUNC_CALLED
      100: argument_list: 
       101: argument: 
        102: expr: 
         103: name: 
          104: name: card
          105: operator: ->
          106: name: ctx
       107: argument: 
        108: expr: 
         109: name: SC_LOG_DEBUG_VERBOSE
   110: comment: /* if we didn't return it all last time, return the remainder */
   111: if_stmt: 
    112: if: 
     113: condition: 
      114: expr: 
       115: name: 
        116: name: priv
        117: operator: ->
        118: name: cached
     119: block: 
      120: block_content: 
       121: expr_stmt: 
        122: expr: 
         123: call: 
          124: name: sc_log
          125: argument_list: 
           126: argument: 
            127: expr: 
             128: name: 
              129: name: card
              130: operator: ->
              131: name: ctx
           132: argument: 
            133: expr: 
             134: literal: "returning cached value idx=%d count=%"
             135: name: SC_FORMAT_LEN_SIZE_T
             136: literal: "u"
           137: argument: 
            138: expr: 
             139: name: idx
           140: argument: 
            141: expr: 
             142: name: count
       143: if_stmt: 
        144: if: 
         145: condition: 
          146: expr: 
           147: name: idx
           148: operator: >
           149: name: 
            150: name: priv
            151: operator: ->
            152: name: cache_buf_len
         153: block: 
          154: block_content: 
           155: expr_stmt: 
            156: expr: 
             157: call: 
              158: name: LOG_FUNC_RETURN
              159: argument_list: 
               160: argument: 
                161: expr: 
                 162: name: 
                  163: name: card
                  164: operator: ->
                  165: name: ctx
               166: argument: 
                167: expr: 
                 168: name: SC_ERROR_FILE_END_REACHED
       169: expr_stmt: 
        170: expr: 
         171: name: len
         172: operator: =
         173: call: 
          174: name: MIN
          175: argument_list: 
           176: argument: 
            177: expr: 
             178: name: count
           179: argument: 
            180: expr: 
             181: name: 
              182: name: priv
              183: operator: ->
              184: name: cache_buf_len
             185: operator: -
             186: name: idx
       187: expr_stmt: 
        188: expr: 
         189: call: 
          190: name: memcpy
          191: argument_list: 
           192: argument: 
            193: expr: 
             194: name: buf
           195: argument: 
            196: expr: 
             197: operator: &
             198: name: 
              199: name: priv
              200: operator: ->
              201: name: cache_buf
              202: index: 
               203: expr: 
                204: name: idx
           205: argument: 
            206: expr: 
             207: name: len
       208: expr_stmt: 
        209: expr: 
         210: call: 
          211: name: LOG_FUNC_RETURN
          212: argument_list: 
           213: argument: 
            214: expr: 
             215: name: 
              216: name: card
              217: operator: ->
              218: name: ctx
           219: argument: 
            220: expr: 
             221: name: len
   222: expr_stmt: 
    223: expr: 
     224: call: 
      225: name: sc_log
      226: argument_list: 
       227: argument: 
        228: expr: 
         229: name: 
          230: name: card
          231: operator: ->
          232: name: ctx
       233: argument: 
        234: expr: 
         235: literal: "clearing cache idx=%d count=%"
         236: name: SC_FORMAT_LEN_SIZE_T
         237: literal: "u"
       238: argument: 
        239: expr: 
         240: name: idx
       241: argument: 
        242: expr: 
         243: name: count
   244: expr_stmt: 
    245: expr: 
     246: call: 
      247: name: free
      248: argument_list: 
       249: argument: 
        250: expr: 
         251: name: 
          252: name: priv
          253: operator: ->
          254: name: cache_buf
   255: expr_stmt: 
    256: expr: 
     257: name: 
      258: name: priv
      259: operator: ->
      260: name: cache_buf
     261: operator: =
     262: name: NULL
   263: expr_stmt: 
    264: expr: 
     265: name: 
      266: name: priv
      267: operator: ->
      268: name: cache_buf_len
     269: operator: =
     270: literal: 0
   271: expr_stmt: 
    272: expr: 
     273: name: r
     274: operator: =
     275: call: 
      276: name: cac_cac1_get_certificate
      277: argument_list: 
       278: argument: 
        279: expr: 
         280: name: card
       281: argument: 
        282: expr: 
         283: operator: &
         284: name: val
       285: argument: 
        286: expr: 
         287: operator: &
         288: name: val_len
   289: if_stmt: 
    290: if: 
     291: condition: 
      292: expr: 
       293: name: r
       294: operator: <
       295: literal: 0
     296: block: 
      297: block_content: 
       298: goto: 
        299: name: done
   300: if_stmt: 
    301: if: 
     302: condition: 
      303: expr: 
       304: name: val_len
       305: operator: <
       306: literal: 1
     307: block: 
      308: block_content: 
       309: expr_stmt: 
        310: expr: 
         311: name: r
         312: operator: =
         313: name: SC_ERROR_INVALID_DATA
       314: goto: 
        315: name: done
   316: expr_stmt: 
    317: expr: 
     318: name: cert_type
     319: operator: =
     320: name: 
      321: name: val
      322: index: 
       323: expr: 
        324: literal: 0
   325: expr_stmt: 
    326: expr: 
     327: name: cert_ptr
     328: operator: =
     329: name: val
     330: operator: +
     331: literal: 1
   332: expr_stmt: 
    333: expr: 
     334: name: cert_len
     335: operator: =
     336: name: val_len
     337: operator: -
     338: literal: 1
   339: comment: /* if the info byte is 1, then the cert is compressed, decompress it */
   340: if_stmt: 
    341: if: 
     342: condition: 
      343: expr: 
       344: operator: (
       345: name: cert_type
       346: operator: &
       347: literal: 0x3
       348: operator: )
       349: operator: ==
       350: literal: 1
     351: block: 
      352: block_content: 
       353: ifdef: 
        354: directive: ifdef
        355: name: ENABLE_ZLIB
       356: expr_stmt: 
        357: expr: 
         358: name: r
         359: operator: =
         360: call: 
          361: name: sc_decompress_alloc
          362: argument_list: 
           363: argument: 
            364: expr: 
             365: operator: &
             366: name: 
              367: name: priv
              368: operator: ->
              369: name: cache_buf
           370: argument: 
            371: expr: 
             372: operator: &
             373: name: 
              374: name: priv
              375: operator: ->
              376: name: cache_buf_len
           377: argument: 
            378: expr: 
             379: name: cert_ptr
           380: argument: 
            381: expr: 
             382: name: cert_len
           383: argument: 
            384: expr: 
             385: name: COMPRESSION_AUTO
       386: else: 
        387: directive: else
       388: expr_stmt: 
        389: expr: 
         390: call: 
          391: name: sc_log
          392: argument_list: 
           393: argument: 
            394: expr: 
             395: name: 
              396: name: card
              397: operator: ->
              398: name: ctx
           399: argument: 
            400: expr: 
             401: literal: "CAC compression not supported, no zlib"
       402: expr_stmt: 
        403: expr: 
         404: name: r
         405: operator: =
         406: name: SC_ERROR_NOT_SUPPORTED
       407: endif: 
        408: directive: endif
       409: if_stmt: 
        410: if: 
         411: condition: 
          412: expr: 
           413: name: r
         414: block: 
          415: block_content: 
           416: goto: 
            417: name: done
    418: if: 
     419: condition: 
      420: expr: 
       421: name: cert_len
       422: operator: >
       423: literal: 0
     424: block: 
      425: block_content: 
       426: expr_stmt: 
        427: expr: 
         428: name: 
          429: name: priv
          430: operator: ->
          431: name: cache_buf
         432: operator: =
         433: call: 
          434: name: malloc
          435: argument_list: 
           436: argument: 
            437: expr: 
             438: name: cert_len
       439: if_stmt: 
        440: if: 
         441: condition: 
          442: expr: 
           443: name: 
            444: name: priv
            445: operator: ->
            446: name: cache_buf
           447: operator: ==
           448: name: NULL
         449: block: 
          450: block_content: 
           451: expr_stmt: 
            452: expr: 
             453: name: r
             454: operator: =
             455: name: SC_ERROR_OUT_OF_MEMORY
           456: goto: 
            457: name: done
       458: expr_stmt: 
        459: expr: 
         460: name: 
          461: name: priv
          462: operator: ->
          463: name: cache_buf_len
         464: operator: =
         465: name: cert_len
       466: expr_stmt: 
        467: expr: 
         468: call: 
          469: name: memcpy
          470: argument_list: 
           471: argument: 
            472: expr: 
             473: name: 
              474: name: priv
              475: operator: ->
              476: name: cache_buf
           477: argument: 
            478: expr: 
             479: name: cert_ptr
           480: argument: 
            481: expr: 
             482: name: cert_len
   483: comment: /* OK we've read the data, now copy the required portion out to the callers buffer */
   484: expr_stmt: 
    485: expr: 
     486: name: 
      487: name: priv
      488: operator: ->
      489: name: cached
     490: operator: =
     491: literal: 1
   492: expr_stmt: 
    493: expr: 
     494: name: len
     495: operator: =
     496: call: 
      497: name: MIN
      498: argument_list: 
       499: argument: 
        500: expr: 
         501: name: count
       502: argument: 
        503: expr: 
         504: name: 
          505: name: priv
          506: operator: ->
          507: name: cache_buf_len
         508: operator: -
         509: name: idx
   510: if_stmt: 
    511: if: 
     512: condition: 
      513: expr: 
       514: name: len
       515: operator: &&
       516: name: 
        517: name: priv
        518: operator: ->
        519: name: cache_buf
     520: block: 
      521: block_content: 
       522: expr_stmt: 
        523: expr: 
         524: call: 
          525: name: memcpy
          526: argument_list: 
           527: argument: 
            528: expr: 
             529: name: buf
           530: argument: 
            531: expr: 
             532: operator: &
             533: name: 
              534: name: priv
              535: operator: ->
              536: name: cache_buf
              537: index: 
               538: expr: 
                539: name: idx
           540: argument: 
            541: expr: 
             542: name: len
   543: expr_stmt: 
    544: expr: 
     545: name: r
     546: operator: =
     547: name: len
   548: label: 
    549: name: done
   550: if_stmt: 
    551: if: 
     552: condition: 
      553: expr: 
       554: name: val
     555: block: 
      556: block_content: 
       557: expr_stmt: 
        558: expr: 
         559: call: 
          560: name: free
          561: argument_list: 
           562: argument: 
            563: expr: 
             564: name: val
   565: expr_stmt: 
    566: expr: 
     567: call: 
      568: name: LOG_FUNC_RETURN
      569: argument_list: 
       570: argument: 
        571: expr: 
         572: name: 
          573: name: card
          574: operator: ->
          575: name: ctx
       576: argument: 
        577: expr: 
         578: name: r
=====
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: cac_private_data_t
     6: modifier: *
    7: name: priv
    8: init: 
     9: expr: 
      10: call: 
       11: name: CAC_DATA
       12: argument_list: 
        13: argument: 
         14: expr: 
          15: name: card
  16: decl_stmt: 
   17: decl: 
    18: type: 
     19: name: int
    20: name: r
    21: init: 
     22: expr: 
      23: literal: 0
  24: decl_stmt: 
   25: decl: 
    26: type: 
     27: name: u8
     28: modifier: *
    29: name: val
    30: init: 
     31: expr: 
      32: name: NULL
  33: decl_stmt: 
   34: decl: 
    35: type: 
     36: name: u8
     37: modifier: *
    38: name: cert_ptr
  39: decl_stmt: 
   40: decl: 
    41: type: 
     42: name: size_t
    43: name: val_len
  44: decl_stmt: 
   45: decl: 
    46: type: 
     47: name: size_t
    48: name: len
   49: decl: 
    50: type: 
    51: name: cert_len
  52: decl_stmt: 
   53: decl: 
    54: type: 
     55: name: u8
    56: name: cert_type
  57: expr_stmt: 
   58: expr: 
    59: call: 
     60: name: SC_FUNC_CALLED
     61: argument_list: 
      62: argument: 
       63: expr: 
        64: name: 
         65: name: card
         66: operator: ->
         67: name: ctx
      68: argument: 
       69: expr: 
        70: name: SC_LOG_DEBUG_VERBOSE
  71: comment: /* if we didn't return it all last time, return the remainder */
  72: if_stmt: 
   73: if: 
    74: condition: 
     75: expr: 
      76: name: 
       77: name: priv
       78: operator: ->
       79: name: cached
    80: block: 
     81: block_content: 
      82: expr_stmt: 
       83: expr: 
        84: call: 
         85: name: sc_log
         86: argument_list: 
          87: argument: 
           88: expr: 
            89: name: 
             90: name: card
             91: operator: ->
             92: name: ctx
          93: argument: 
           94: expr: 
            95: literal: "returning cached value idx=%d count=%"
            96: name: SC_FORMAT_LEN_SIZE_T
            97: literal: "u"
          98: argument: 
           99: expr: 
            100: name: idx
          101: argument: 
           102: expr: 
            103: name: count
      104: if_stmt: 
       105: if: 
        106: condition: 
         107: expr: 
          108: name: idx
          109: operator: >
          110: name: 
           111: name: priv
           112: operator: ->
           113: name: cache_buf_len
        114: block: 
         115: block_content: 
          116: expr_stmt: 
           117: expr: 
            118: call: 
             119: name: LOG_FUNC_RETURN
             120: argument_list: 
              121: argument: 
               122: expr: 
                123: name: 
                 124: name: card
                 125: operator: ->
                 126: name: ctx
              127: argument: 
               128: expr: 
                129: name: SC_ERROR_FILE_END_REACHED
      130: expr_stmt: 
       131: expr: 
        132: name: len
        133: operator: =
        134: call: 
         135: name: MIN
         136: argument_list: 
          137: argument: 
           138: expr: 
            139: name: count
          140: argument: 
           141: expr: 
            142: name: 
             143: name: priv
             144: operator: ->
             145: name: cache_buf_len
            146: operator: -
            147: name: idx
      148: expr_stmt: 
       149: expr: 
        150: call: 
         151: name: memcpy
         152: argument_list: 
          153: argument: 
           154: expr: 
            155: name: buf
          156: argument: 
           157: expr: 
            158: operator: &
            159: name: 
             160: name: priv
             161: operator: ->
             162: name: cache_buf
             163: index: 
              164: expr: 
               165: name: idx
          166: argument: 
           167: expr: 
            168: name: len
      169: expr_stmt: 
       170: expr: 
        171: call: 
         172: name: LOG_FUNC_RETURN
         173: argument_list: 
          174: argument: 
           175: expr: 
            176: name: 
             177: name: card
             178: operator: ->
             179: name: ctx
          180: argument: 
           181: expr: 
            182: name: len
  183: expr_stmt: 
   184: expr: 
    185: call: 
     186: name: sc_log
     187: argument_list: 
      188: argument: 
       189: expr: 
        190: name: 
         191: name: card
         192: operator: ->
         193: name: ctx
      194: argument: 
       195: expr: 
        196: literal: "clearing cache idx=%d count=%"
        197: name: SC_FORMAT_LEN_SIZE_T
        198: literal: "u"
      199: argument: 
       200: expr: 
        201: name: idx
      202: argument: 
       203: expr: 
        204: name: count
  205: expr_stmt: 
   206: expr: 
    207: call: 
     208: name: free
     209: argument_list: 
      210: argument: 
       211: expr: 
        212: name: 
         213: name: priv
         214: operator: ->
         215: name: cache_buf
  216: expr_stmt: 
   217: expr: 
    218: name: 
     219: name: priv
     220: operator: ->
     221: name: cache_buf
    222: operator: =
    223: name: NULL
  224: expr_stmt: 
   225: expr: 
    226: name: 
     227: name: priv
     228: operator: ->
     229: name: cache_buf_len
    230: operator: =
    231: literal: 0
  232: expr_stmt: 
   233: expr: 
    234: name: r
    235: operator: =
    236: call: 
     237: name: cac_cac1_get_certificate
     238: argument_list: 
      239: argument: 
       240: expr: 
        241: name: card
      242: argument: 
       243: expr: 
        244: operator: &
        245: name: val
      246: argument: 
       247: expr: 
        248: operator: &
        249: name: val_len
  250: if_stmt: 
   251: if: 
    252: condition: 
     253: expr: 
      254: name: r
      255: operator: <
      256: literal: 0
    257: block: 
     258: block_content: 
      259: goto: 
       260: name: done
  261: if_stmt: 
   262: if: 
    263: condition: 
     264: expr: 
      265: name: val_len
      266: operator: <
      267: literal: 1
    268: block: 
     269: block_content: 
      270: expr_stmt: 
       271: expr: 
        272: name: r
        273: operator: =
        274: name: SC_ERROR_INVALID_DATA
      275: goto: 
       276: name: done
  277: expr_stmt: 
   278: expr: 
    279: name: cert_type
    280: operator: =
    281: name: 
     282: name: val
     283: index: 
      284: expr: 
       285: literal: 0
  286: expr_stmt: 
   287: expr: 
    288: name: cert_ptr
    289: operator: =
    290: name: val
    291: operator: +
    292: literal: 1
  293: expr_stmt: 
   294: expr: 
    295: name: cert_len
    296: operator: =
    297: name: val_len
    298: operator: -
    299: literal: 1
  300: comment: /* if the info byte is 1, then the cert is compressed, decompress it */
  301: if_stmt: 
   302: if: 
    303: condition: 
     304: expr: 
      305: operator: (
      306: name: cert_type
      307: operator: &
      308: literal: 0x3
      309: operator: )
      310: operator: ==
      311: literal: 1
    312: block: 
     313: block_content: 
      314: ifdef: 
       315: directive: ifdef
       316: name: ENABLE_ZLIB
      317: expr_stmt: 
       318: expr: 
        319: name: r
        320: operator: =
        321: call: 
         322: name: sc_decompress_alloc
         323: argument_list: 
          324: argument: 
           325: expr: 
            326: operator: &
            327: name: 
             328: name: priv
             329: operator: ->
             330: name: cache_buf
          331: argument: 
           332: expr: 
            333: operator: &
            334: name: 
             335: name: priv
             336: operator: ->
             337: name: cache_buf_len
          338: argument: 
           339: expr: 
            340: name: cert_ptr
          341: argument: 
           342: expr: 
            343: name: cert_len
          344: argument: 
           345: expr: 
            346: name: COMPRESSION_AUTO
      347: else: 
       348: directive: else
      349: expr_stmt: 
       350: expr: 
        351: call: 
         352: name: sc_log
         353: argument_list: 
          354: argument: 
           355: expr: 
            356: name: 
             357: name: card
             358: operator: ->
             359: name: ctx
          360: argument: 
           361: expr: 
            362: literal: "CAC compression not supported, no zlib"
      363: expr_stmt: 
       364: expr: 
        365: name: r
        366: operator: =
        367: name: SC_ERROR_NOT_SUPPORTED
      368: endif: 
       369: directive: endif
      370: if_stmt: 
       371: if: 
        372: condition: 
         373: expr: 
          374: name: r
        375: block: 
         376: block_content: 
          377: goto: 
           378: name: done
   379: if: 
    380: condition: 
     381: expr: 
      382: name: cert_len
      383: operator: >
      384: literal: 0
    385: block: 
     386: block_content: 
      387: expr_stmt: 
       388: expr: 
        389: name: 
         390: name: priv
         391: operator: ->
         392: name: cache_buf
        393: operator: =
        394: call: 
         395: name: malloc
         396: argument_list: 
          397: argument: 
           398: expr: 
            399: name: cert_len
      400: if_stmt: 
       401: if: 
        402: condition: 
         403: expr: 
          404: name: 
           405: name: priv
           406: operator: ->
           407: name: cache_buf
          408: operator: ==
          409: name: NULL
        410: block: 
         411: block_content: 
          412: expr_stmt: 
           413: expr: 
            414: name: r
            415: operator: =
            416: name: SC_ERROR_OUT_OF_MEMORY
          417: goto: 
           418: name: done
      419: expr_stmt: 
       420: expr: 
        421: name: 
         422: name: priv
         423: operator: ->
         424: name: cache_buf_len
        425: operator: =
        426: name: cert_len
      427: expr_stmt: 
       428: expr: 
        429: call: 
         430: name: memcpy
         431: argument_list: 
          432: argument: 
           433: expr: 
            434: name: 
             435: name: priv
             436: operator: ->
             437: name: cache_buf
          438: argument: 
           439: expr: 
            440: name: cert_ptr
          441: argument: 
           442: expr: 
            443: name: cert_len
  444: comment: /* OK we've read the data, now copy the required portion out to the callers buffer */
  445: expr_stmt: 
   446: expr: 
    447: name: 
     448: name: priv
     449: operator: ->
     450: name: cached
    451: operator: =
    452: literal: 1
  453: expr_stmt: 
   454: expr: 
    455: name: len
    456: operator: =
    457: call: 
     458: name: MIN
     459: argument_list: 
      460: argument: 
       461: expr: 
        462: name: count
      463: argument: 
       464: expr: 
        465: name: 
         466: name: priv
         467: operator: ->
         468: name: cache_buf_len
        469: operator: -
        470: name: idx
  471: if_stmt: 
   472: if: 
    473: condition: 
     474: expr: 
      475: name: len
      476: operator: &&
      477: name: 
       478: name: priv
       479: operator: ->
       480: name: cache_buf
    481: block: 
     482: block_content: 
      483: expr_stmt: 
       484: expr: 
        485: call: 
         486: name: memcpy
         487: argument_list: 
          488: argument: 
           489: expr: 
            490: name: buf
          491: argument: 
           492: expr: 
            493: operator: &
            494: name: 
             495: name: priv
             496: operator: ->
             497: name: cache_buf
             498: index: 
              499: expr: 
               500: name: idx
          501: argument: 
           502: expr: 
            503: name: len
  504: expr_stmt: 
   505: expr: 
    506: name: r
    507: operator: =
    508: name: len
  509: label: 
   510: name: done
  511: if_stmt: 
   512: if: 
    513: condition: 
     514: expr: 
      515: name: val
    516: block: 
     517: block_content: 
      518: expr_stmt: 
       519: expr: 
        520: call: 
         521: name: free
         522: argument_list: 
          523: argument: 
           524: expr: 
            525: name: val
  526: expr_stmt: 
   527: expr: 
    528: call: 
     529: name: LOG_FUNC_RETURN
     530: argument_list: 
      531: argument: 
       532: expr: 
        533: name: 
         534: name: card
         535: operator: ->
         536: name: ctx
      537: argument: 
       538: expr: 
        539: name: r

----------------------------------------
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: cac_private_data_t
     6: modifier: *
    7: name: priv
    8: init: 
     9: expr: 
      10: call: 
       11: name: CAC_DATA
       12: argument_list: 
        13: argument: 
         14: expr: 
          15: name: card
  16: decl_stmt: 
   17: decl: 
    18: type: 
     19: name: int
    20: name: r
    21: init: 
     22: expr: 
      23: literal: 0
  24: decl_stmt: 
   25: decl: 
    26: type: 
     27: name: u8
     28: modifier: *
    29: name: val
    30: init: 
     31: expr: 
      32: name: NULL
  33: decl_stmt: 
   34: decl: 
    35: type: 
     36: name: u8
     37: modifier: *
    38: name: cert_ptr
  39: decl_stmt: 
   40: decl: 
    41: type: 
     42: name: size_t
    43: name: val_len
    44: init: 
     45: expr: 
      46: literal: 0
  47: decl_stmt: 
   48: decl: 
    49: type: 
     50: name: size_t
    51: name: len
   52: decl: 
    53: type: 
    54: name: cert_len
  55: decl_stmt: 
   56: decl: 
    57: type: 
     58: name: u8
    59: name: cert_type
  60: expr_stmt: 
   61: expr: 
    62: call: 
     63: name: SC_FUNC_CALLED
     64: argument_list: 
      65: argument: 
       66: expr: 
        67: name: 
         68: name: card
         69: operator: ->
         70: name: ctx
      71: argument: 
       72: expr: 
        73: name: SC_LOG_DEBUG_VERBOSE
  74: comment: /* if we didn't return it all last time, return the remainder */
  75: if_stmt: 
   76: if: 
    77: condition: 
     78: expr: 
      79: name: 
       80: name: priv
       81: operator: ->
       82: name: cached
    83: block: 
     84: block_content: 
      85: expr_stmt: 
       86: expr: 
        87: call: 
         88: name: sc_log
         89: argument_list: 
          90: argument: 
           91: expr: 
            92: name: 
             93: name: card
             94: operator: ->
             95: name: ctx
          96: argument: 
           97: expr: 
            98: literal: "returning cached value idx=%d count=%"
            99: name: SC_FORMAT_LEN_SIZE_T
            100: literal: "u"
          101: argument: 
           102: expr: 
            103: name: idx
          104: argument: 
           105: expr: 
            106: name: count
      107: if_stmt: 
       108: if: 
        109: condition: 
         110: expr: 
          111: name: idx
          112: operator: >
          113: name: 
           114: name: priv
           115: operator: ->
           116: name: cache_buf_len
        117: block: 
         118: block_content: 
          119: expr_stmt: 
           120: expr: 
            121: call: 
             122: name: LOG_FUNC_RETURN
             123: argument_list: 
              124: argument: 
               125: expr: 
                126: name: 
                 127: name: card
                 128: operator: ->
                 129: name: ctx
              130: argument: 
               131: expr: 
                132: name: SC_ERROR_FILE_END_REACHED
      133: expr_stmt: 
       134: expr: 
        135: name: len
        136: operator: =
        137: call: 
         138: name: MIN
         139: argument_list: 
          140: argument: 
           141: expr: 
            142: name: count
          143: argument: 
           144: expr: 
            145: name: 
             146: name: priv
             147: operator: ->
             148: name: cache_buf_len
            149: operator: -
            150: name: idx
      151: expr_stmt: 
       152: expr: 
        153: call: 
         154: name: memcpy
         155: argument_list: 
          156: argument: 
           157: expr: 
            158: name: buf
          159: argument: 
           160: expr: 
            161: operator: &
            162: name: 
             163: name: priv
             164: operator: ->
             165: name: cache_buf
             166: index: 
              167: expr: 
               168: name: idx
          169: argument: 
           170: expr: 
            171: name: len
      172: expr_stmt: 
       173: expr: 
        174: call: 
         175: name: LOG_FUNC_RETURN
         176: argument_list: 
          177: argument: 
           178: expr: 
            179: name: 
             180: name: card
             181: operator: ->
             182: name: ctx
          183: argument: 
           184: expr: 
            185: name: len
  186: expr_stmt: 
   187: expr: 
    188: call: 
     189: name: sc_log
     190: argument_list: 
      191: argument: 
       192: expr: 
        193: name: 
         194: name: card
         195: operator: ->
         196: name: ctx
      197: argument: 
       198: expr: 
        199: literal: "clearing cache idx=%d count=%"
        200: name: SC_FORMAT_LEN_SIZE_T
        201: literal: "u"
      202: argument: 
       203: expr: 
        204: name: idx
      205: argument: 
       206: expr: 
        207: name: count
  208: expr_stmt: 
   209: expr: 
    210: call: 
     211: name: free
     212: argument_list: 
      213: argument: 
       214: expr: 
        215: name: 
         216: name: priv
         217: operator: ->
         218: name: cache_buf
  219: expr_stmt: 
   220: expr: 
    221: name: 
     222: name: priv
     223: operator: ->
     224: name: cache_buf
    225: operator: =
    226: name: NULL
  227: expr_stmt: 
   228: expr: 
    229: name: 
     230: name: priv
     231: operator: ->
     232: name: cache_buf_len
    233: operator: =
    234: literal: 0
  235: expr_stmt: 
   236: expr: 
    237: name: r
    238: operator: =
    239: call: 
     240: name: cac_cac1_get_certificate
     241: argument_list: 
      242: argument: 
       243: expr: 
        244: name: card
      245: argument: 
       246: expr: 
        247: operator: &
        248: name: val
      249: argument: 
       250: expr: 
        251: operator: &
        252: name: val_len
  253: if_stmt: 
   254: if: 
    255: condition: 
     256: expr: 
      257: name: r
      258: operator: <
      259: literal: 0
    260: block: 
     261: block_content: 
      262: goto: 
       263: name: done
  264: if_stmt: 
   265: if: 
    266: condition: 
     267: expr: 
      268: name: val_len
      269: operator: <
      270: literal: 1
    271: block: 
     272: block_content: 
      273: expr_stmt: 
       274: expr: 
        275: name: r
        276: operator: =
        277: name: SC_ERROR_INVALID_DATA
      278: goto: 
       279: name: done
  280: expr_stmt: 
   281: expr: 
    282: name: cert_type
    283: operator: =
    284: name: 
     285: name: val
     286: index: 
      287: expr: 
       288: literal: 0
  289: expr_stmt: 
   290: expr: 
    291: name: cert_ptr
    292: operator: =
    293: name: val
    294: operator: +
    295: literal: 1
  296: expr_stmt: 
   297: expr: 
    298: name: cert_len
    299: operator: =
    300: name: val_len
    301: operator: -
    302: literal: 1
  303: comment: /* if the info byte is 1, then the cert is compressed, decompress it */
  304: if_stmt: 
   305: if: 
    306: condition: 
     307: expr: 
      308: operator: (
      309: name: cert_type
      310: operator: &
      311: literal: 0x3
      312: operator: )
      313: operator: ==
      314: literal: 1
    315: block: 
     316: block_content: 
      317: ifdef: 
       318: directive: ifdef
       319: name: ENABLE_ZLIB
      320: expr_stmt: 
       321: expr: 
        322: name: r
        323: operator: =
        324: call: 
         325: name: sc_decompress_alloc
         326: argument_list: 
          327: argument: 
           328: expr: 
            329: operator: &
            330: name: 
             331: name: priv
             332: operator: ->
             333: name: cache_buf
          334: argument: 
           335: expr: 
            336: operator: &
            337: name: 
             338: name: priv
             339: operator: ->
             340: name: cache_buf_len
          341: argument: 
           342: expr: 
            343: name: cert_ptr
          344: argument: 
           345: expr: 
            346: name: cert_len
          347: argument: 
           348: expr: 
            349: name: COMPRESSION_AUTO
      350: else: 
       351: directive: else
      352: expr_stmt: 
       353: expr: 
        354: call: 
         355: name: sc_log
         356: argument_list: 
          357: argument: 
           358: expr: 
            359: name: 
             360: name: card
             361: operator: ->
             362: name: ctx
          363: argument: 
           364: expr: 
            365: literal: "CAC compression not supported, no zlib"
      366: expr_stmt: 
       367: expr: 
        368: name: r
        369: operator: =
        370: name: SC_ERROR_NOT_SUPPORTED
      371: endif: 
       372: directive: endif
      373: if_stmt: 
       374: if: 
        375: condition: 
         376: expr: 
          377: name: r
        378: block: 
         379: block_content: 
          380: goto: 
           381: name: done
   382: if: 
    383: condition: 
     384: expr: 
      385: name: cert_len
      386: operator: >
      387: literal: 0
    388: block: 
     389: block_content: 
      390: expr_stmt: 
       391: expr: 
        392: name: 
         393: name: priv
         394: operator: ->
         395: name: cache_buf
        396: operator: =
        397: call: 
         398: name: malloc
         399: argument_list: 
          400: argument: 
           401: expr: 
            402: name: cert_len
      403: if_stmt: 
       404: if: 
        405: condition: 
         406: expr: 
          407: name: 
           408: name: priv
           409: operator: ->
           410: name: cache_buf
          411: operator: ==
          412: name: NULL
        413: block: 
         414: block_content: 
          415: expr_stmt: 
           416: expr: 
            417: name: r
            418: operator: =
            419: name: SC_ERROR_OUT_OF_MEMORY
          420: goto: 
           421: name: done
      422: expr_stmt: 
       423: expr: 
        424: name: 
         425: name: priv
         426: operator: ->
         427: name: cache_buf_len
        428: operator: =
        429: name: cert_len
      430: expr_stmt: 
       431: expr: 
        432: call: 
         433: name: memcpy
         434: argument_list: 
          435: argument: 
           436: expr: 
            437: name: 
             438: name: priv
             439: operator: ->
             440: name: cache_buf
          441: argument: 
           442: expr: 
            443: name: cert_ptr
          444: argument: 
           445: expr: 
            446: name: cert_len
  447: comment: /* OK we've read the data, now copy the required portion out to the callers buffer */
  448: expr_stmt: 
   449: expr: 
    450: name: 
     451: name: priv
     452: operator: ->
     453: name: cached
    454: operator: =
    455: literal: 1
  456: expr_stmt: 
   457: expr: 
    458: name: len
    459: operator: =
    460: call: 
     461: name: MIN
     462: argument_list: 
      463: argument: 
       464: expr: 
        465: name: count
      466: argument: 
       467: expr: 
        468: name: 
         469: name: priv
         470: operator: ->
         471: name: cache_buf_len
        472: operator: -
        473: name: idx
  474: if_stmt: 
   475: if: 
    476: condition: 
     477: expr: 
      478: name: len
      479: operator: &&
      480: name: 
       481: name: priv
       482: operator: ->
       483: name: cache_buf
    484: block: 
     485: block_content: 
      486: expr_stmt: 
       487: expr: 
        488: call: 
         489: name: memcpy
         490: argument_list: 
          491: argument: 
           492: expr: 
            493: name: buf
          494: argument: 
           495: expr: 
            496: operator: &
            497: name: 
             498: name: priv
             499: operator: ->
             500: name: cache_buf
             501: index: 
              502: expr: 
               503: name: idx
          504: argument: 
           505: expr: 
            506: name: len
  507: expr_stmt: 
   508: expr: 
    509: name: r
    510: operator: =
    511: name: len
  512: label: 
   513: name: done
  514: if_stmt: 
   515: if: 
    516: condition: 
     517: expr: 
      518: name: val
    519: block: 
     520: block_content: 
      521: expr_stmt: 
       522: expr: 
        523: call: 
         524: name: free
         525: argument_list: 
          526: argument: 
           527: expr: 
            528: name: val
  529: expr_stmt: 
   530: expr: 
    531: call: 
     532: name: LOG_FUNC_RETURN
     533: argument_list: 
      534: argument: 
       535: expr: 
        536: name: 
         537: name: card
         538: operator: ->
         539: name: ctx
      540: argument: 
       541: expr: 
        542: name: r
=====
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: cac_private_data_t
    5: modifier: *
   6: name: priv
   7: init: 
    8: expr: 
     9: call: 
      10: name: CAC_DATA
      11: argument_list: 
       12: argument: 
        13: expr: 
         14: name: card
 15: decl_stmt: 
  16: decl: 
   17: type: 
    18: name: int
   19: name: r
   20: init: 
    21: expr: 
     22: literal: 0
 23: decl_stmt: 
  24: decl: 
   25: type: 
    26: name: u8
    27: modifier: *
   28: name: val
   29: init: 
    30: expr: 
     31: name: NULL
 32: decl_stmt: 
  33: decl: 
   34: type: 
    35: name: u8
    36: modifier: *
   37: name: cert_ptr
 38: decl_stmt: 
  39: decl: 
   40: type: 
    41: name: size_t
   42: name: val_len
 43: decl_stmt: 
  44: decl: 
   45: type: 
    46: name: size_t
   47: name: len
  48: decl: 
   49: type: 
   50: name: cert_len
 51: decl_stmt: 
  52: decl: 
   53: type: 
    54: name: u8
   55: name: cert_type
 56: expr_stmt: 
  57: expr: 
   58: call: 
    59: name: SC_FUNC_CALLED
    60: argument_list: 
     61: argument: 
      62: expr: 
       63: name: 
        64: name: card
        65: operator: ->
        66: name: ctx
     67: argument: 
      68: expr: 
       69: name: SC_LOG_DEBUG_VERBOSE
 70: comment: /* if we didn't return it all last time, return the remainder */
 71: if_stmt: 
  72: if: 
   73: condition: 
    74: expr: 
     75: name: 
      76: name: priv
      77: operator: ->
      78: name: cached
   79: block: 
    80: block_content: 
     81: expr_stmt: 
      82: expr: 
       83: call: 
        84: name: sc_log
        85: argument_list: 
         86: argument: 
          87: expr: 
           88: name: 
            89: name: card
            90: operator: ->
            91: name: ctx
         92: argument: 
          93: expr: 
           94: literal: "returning cached value idx=%d count=%"
           95: name: SC_FORMAT_LEN_SIZE_T
           96: literal: "u"
         97: argument: 
          98: expr: 
           99: name: idx
         100: argument: 
          101: expr: 
           102: name: count
     103: if_stmt: 
      104: if: 
       105: condition: 
        106: expr: 
         107: name: idx
         108: operator: >
         109: name: 
          110: name: priv
          111: operator: ->
          112: name: cache_buf_len
       113: block: 
        114: block_content: 
         115: expr_stmt: 
          116: expr: 
           117: call: 
            118: name: LOG_FUNC_RETURN
            119: argument_list: 
             120: argument: 
              121: expr: 
               122: name: 
                123: name: card
                124: operator: ->
                125: name: ctx
             126: argument: 
              127: expr: 
               128: name: SC_ERROR_FILE_END_REACHED
     129: expr_stmt: 
      130: expr: 
       131: name: len
       132: operator: =
       133: call: 
        134: name: MIN
        135: argument_list: 
         136: argument: 
          137: expr: 
           138: name: count
         139: argument: 
          140: expr: 
           141: name: 
            142: name: priv
            143: operator: ->
            144: name: cache_buf_len
           145: operator: -
           146: name: idx
     147: expr_stmt: 
      148: expr: 
       149: call: 
        150: name: memcpy
        151: argument_list: 
         152: argument: 
          153: expr: 
           154: name: buf
         155: argument: 
          156: expr: 
           157: operator: &
           158: name: 
            159: name: priv
            160: operator: ->
            161: name: cache_buf
            162: index: 
             163: expr: 
              164: name: idx
         165: argument: 
          166: expr: 
           167: name: len
     168: expr_stmt: 
      169: expr: 
       170: call: 
        171: name: LOG_FUNC_RETURN
        172: argument_list: 
         173: argument: 
          174: expr: 
           175: name: 
            176: name: card
            177: operator: ->
            178: name: ctx
         179: argument: 
          180: expr: 
           181: name: len
 182: expr_stmt: 
  183: expr: 
   184: call: 
    185: name: sc_log
    186: argument_list: 
     187: argument: 
      188: expr: 
       189: name: 
        190: name: card
        191: operator: ->
        192: name: ctx
     193: argument: 
      194: expr: 
       195: literal: "clearing cache idx=%d count=%"
       196: name: SC_FORMAT_LEN_SIZE_T
       197: literal: "u"
     198: argument: 
      199: expr: 
       200: name: idx
     201: argument: 
      202: expr: 
       203: name: count
 204: expr_stmt: 
  205: expr: 
   206: call: 
    207: name: free
    208: argument_list: 
     209: argument: 
      210: expr: 
       211: name: 
        212: name: priv
        213: operator: ->
        214: name: cache_buf
 215: expr_stmt: 
  216: expr: 
   217: name: 
    218: name: priv
    219: operator: ->
    220: name: cache_buf
   221: operator: =
   222: name: NULL
 223: expr_stmt: 
  224: expr: 
   225: name: 
    226: name: priv
    227: operator: ->
    228: name: cache_buf_len
   229: operator: =
   230: literal: 0
 231: expr_stmt: 
  232: expr: 
   233: name: r
   234: operator: =
   235: call: 
    236: name: cac_cac1_get_certificate
    237: argument_list: 
     238: argument: 
      239: expr: 
       240: name: card
     241: argument: 
      242: expr: 
       243: operator: &
       244: name: val
     245: argument: 
      246: expr: 
       247: operator: &
       248: name: val_len
 249: if_stmt: 
  250: if: 
   251: condition: 
    252: expr: 
     253: name: r
     254: operator: <
     255: literal: 0
   256: block: 
    257: block_content: 
     258: goto: 
      259: name: done
 260: if_stmt: 
  261: if: 
   262: condition: 
    263: expr: 
     264: name: val_len
     265: operator: <
     266: literal: 1
   267: block: 
    268: block_content: 
     269: expr_stmt: 
      270: expr: 
       271: name: r
       272: operator: =
       273: name: SC_ERROR_INVALID_DATA
     274: goto: 
      275: name: done
 276: expr_stmt: 
  277: expr: 
   278: name: cert_type
   279: operator: =
   280: name: 
    281: name: val
    282: index: 
     283: expr: 
      284: literal: 0
 285: expr_stmt: 
  286: expr: 
   287: name: cert_ptr
   288: operator: =
   289: name: val
   290: operator: +
   291: literal: 1
 292: expr_stmt: 
  293: expr: 
   294: name: cert_len
   295: operator: =
   296: name: val_len
   297: operator: -
   298: literal: 1
 299: comment: /* if the info byte is 1, then the cert is compressed, decompress it */
 300: if_stmt: 
  301: if: 
   302: condition: 
    303: expr: 
     304: operator: (
     305: name: cert_type
     306: operator: &
     307: literal: 0x3
     308: operator: )
     309: operator: ==
     310: literal: 1
   311: block: 
    312: block_content: 
     313: ifdef: 
      314: directive: ifdef
      315: name: ENABLE_ZLIB
     316: expr_stmt: 
      317: expr: 
       318: name: r
       319: operator: =
       320: call: 
        321: name: sc_decompress_alloc
        322: argument_list: 
         323: argument: 
          324: expr: 
           325: operator: &
           326: name: 
            327: name: priv
            328: operator: ->
            329: name: cache_buf
         330: argument: 
          331: expr: 
           332: operator: &
           333: name: 
            334: name: priv
            335: operator: ->
            336: name: cache_buf_len
         337: argument: 
          338: expr: 
           339: name: cert_ptr
         340: argument: 
          341: expr: 
           342: name: cert_len
         343: argument: 
          344: expr: 
           345: name: COMPRESSION_AUTO
     346: else: 
      347: directive: else
     348: expr_stmt: 
      349: expr: 
       350: call: 
        351: name: sc_log
        352: argument_list: 
         353: argument: 
          354: expr: 
           355: name: 
            356: name: card
            357: operator: ->
            358: name: ctx
         359: argument: 
          360: expr: 
           361: literal: "CAC compression not supported, no zlib"
     362: expr_stmt: 
      363: expr: 
       364: name: r
       365: operator: =
       366: name: SC_ERROR_NOT_SUPPORTED
     367: endif: 
      368: directive: endif
     369: if_stmt: 
      370: if: 
       371: condition: 
        372: expr: 
         373: name: r
       374: block: 
        375: block_content: 
         376: goto: 
          377: name: done
  378: if: 
   379: condition: 
    380: expr: 
     381: name: cert_len
     382: operator: >
     383: literal: 0
   384: block: 
    385: block_content: 
     386: expr_stmt: 
      387: expr: 
       388: name: 
        389: name: priv
        390: operator: ->
        391: name: cache_buf
       392: operator: =
       393: call: 
        394: name: malloc
        395: argument_list: 
         396: argument: 
          397: expr: 
           398: name: cert_len
     399: if_stmt: 
      400: if: 
       401: condition: 
        402: expr: 
         403: name: 
          404: name: priv
          405: operator: ->
          406: name: cache_buf
         407: operator: ==
         408: name: NULL
       409: block: 
        410: block_content: 
         411: expr_stmt: 
          412: expr: 
           413: name: r
           414: operator: =
           415: name: SC_ERROR_OUT_OF_MEMORY
         416: goto: 
          417: name: done
     418: expr_stmt: 
      419: expr: 
       420: name: 
        421: name: priv
        422: operator: ->
        423: name: cache_buf_len
       424: operator: =
       425: name: cert_len
     426: expr_stmt: 
      427: expr: 
       428: call: 
        429: name: memcpy
        430: argument_list: 
         431: argument: 
          432: expr: 
           433: name: 
            434: name: priv
            435: operator: ->
            436: name: cache_buf
         437: argument: 
          438: expr: 
           439: name: cert_ptr
         440: argument: 
          441: expr: 
           442: name: cert_len
 443: comment: /* OK we've read the data, now copy the required portion out to the callers buffer */
 444: expr_stmt: 
  445: expr: 
   446: name: 
    447: name: priv
    448: operator: ->
    449: name: cached
   450: operator: =
   451: literal: 1
 452: expr_stmt: 
  453: expr: 
   454: name: len
   455: operator: =
   456: call: 
    457: name: MIN
    458: argument_list: 
     459: argument: 
      460: expr: 
       461: name: count
     462: argument: 
      463: expr: 
       464: name: 
        465: name: priv
        466: operator: ->
        467: name: cache_buf_len
       468: operator: -
       469: name: idx
 470: if_stmt: 
  471: if: 
   472: condition: 
    473: expr: 
     474: name: len
     475: operator: &&
     476: name: 
      477: name: priv
      478: operator: ->
      479: name: cache_buf
   480: block: 
    481: block_content: 
     482: expr_stmt: 
      483: expr: 
       484: call: 
        485: name: memcpy
        486: argument_list: 
         487: argument: 
          488: expr: 
           489: name: buf
         490: argument: 
          491: expr: 
           492: operator: &
           493: name: 
            494: name: priv
            495: operator: ->
            496: name: cache_buf
            497: index: 
             498: expr: 
              499: name: idx
         500: argument: 
          501: expr: 
           502: name: len
 503: expr_stmt: 
  504: expr: 
   505: name: r
   506: operator: =
   507: name: len
 508: label: 
  509: name: done
 510: if_stmt: 
  511: if: 
   512: condition: 
    513: expr: 
     514: name: val
   515: block: 
    516: block_content: 
     517: expr_stmt: 
      518: expr: 
       519: call: 
        520: name: free
        521: argument_list: 
         522: argument: 
          523: expr: 
           524: name: val
 525: expr_stmt: 
  526: expr: 
   527: call: 
    528: name: LOG_FUNC_RETURN
    529: argument_list: 
     530: argument: 
      531: expr: 
       532: name: 
        533: name: card
        534: operator: ->
        535: name: ctx
     536: argument: 
      537: expr: 
       538: name: r

----------------------------------------
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: cac_private_data_t
    5: modifier: *
   6: name: priv
   7: init: 
    8: expr: 
     9: call: 
      10: name: CAC_DATA
      11: argument_list: 
       12: argument: 
        13: expr: 
         14: name: card
 15: decl_stmt: 
  16: decl: 
   17: type: 
    18: name: int
   19: name: r
   20: init: 
    21: expr: 
     22: literal: 0
 23: decl_stmt: 
  24: decl: 
   25: type: 
    26: name: u8
    27: modifier: *
   28: name: val
   29: init: 
    30: expr: 
     31: name: NULL
 32: decl_stmt: 
  33: decl: 
   34: type: 
    35: name: u8
    36: modifier: *
   37: name: cert_ptr
 38: decl_stmt: 
  39: decl: 
   40: type: 
    41: name: size_t
   42: name: val_len
   43: init: 
    44: expr: 
     45: literal: 0
 46: decl_stmt: 
  47: decl: 
   48: type: 
    49: name: size_t
   50: name: len
  51: decl: 
   52: type: 
   53: name: cert_len
 54: decl_stmt: 
  55: decl: 
   56: type: 
    57: name: u8
   58: name: cert_type
 59: expr_stmt: 
  60: expr: 
   61: call: 
    62: name: SC_FUNC_CALLED
    63: argument_list: 
     64: argument: 
      65: expr: 
       66: name: 
        67: name: card
        68: operator: ->
        69: name: ctx
     70: argument: 
      71: expr: 
       72: name: SC_LOG_DEBUG_VERBOSE
 73: comment: /* if we didn't return it all last time, return the remainder */
 74: if_stmt: 
  75: if: 
   76: condition: 
    77: expr: 
     78: name: 
      79: name: priv
      80: operator: ->
      81: name: cached
   82: block: 
    83: block_content: 
     84: expr_stmt: 
      85: expr: 
       86: call: 
        87: name: sc_log
        88: argument_list: 
         89: argument: 
          90: expr: 
           91: name: 
            92: name: card
            93: operator: ->
            94: name: ctx
         95: argument: 
          96: expr: 
           97: literal: "returning cached value idx=%d count=%"
           98: name: SC_FORMAT_LEN_SIZE_T
           99: literal: "u"
         100: argument: 
          101: expr: 
           102: name: idx
         103: argument: 
          104: expr: 
           105: name: count
     106: if_stmt: 
      107: if: 
       108: condition: 
        109: expr: 
         110: name: idx
         111: operator: >
         112: name: 
          113: name: priv
          114: operator: ->
          115: name: cache_buf_len
       116: block: 
        117: block_content: 
         118: expr_stmt: 
          119: expr: 
           120: call: 
            121: name: LOG_FUNC_RETURN
            122: argument_list: 
             123: argument: 
              124: expr: 
               125: name: 
                126: name: card
                127: operator: ->
                128: name: ctx
             129: argument: 
              130: expr: 
               131: name: SC_ERROR_FILE_END_REACHED
     132: expr_stmt: 
      133: expr: 
       134: name: len
       135: operator: =
       136: call: 
        137: name: MIN
        138: argument_list: 
         139: argument: 
          140: expr: 
           141: name: count
         142: argument: 
          143: expr: 
           144: name: 
            145: name: priv
            146: operator: ->
            147: name: cache_buf_len
           148: operator: -
           149: name: idx
     150: expr_stmt: 
      151: expr: 
       152: call: 
        153: name: memcpy
        154: argument_list: 
         155: argument: 
          156: expr: 
           157: name: buf
         158: argument: 
          159: expr: 
           160: operator: &
           161: name: 
            162: name: priv
            163: operator: ->
            164: name: cache_buf
            165: index: 
             166: expr: 
              167: name: idx
         168: argument: 
          169: expr: 
           170: name: len
     171: expr_stmt: 
      172: expr: 
       173: call: 
        174: name: LOG_FUNC_RETURN
        175: argument_list: 
         176: argument: 
          177: expr: 
           178: name: 
            179: name: card
            180: operator: ->
            181: name: ctx
         182: argument: 
          183: expr: 
           184: name: len
 185: expr_stmt: 
  186: expr: 
   187: call: 
    188: name: sc_log
    189: argument_list: 
     190: argument: 
      191: expr: 
       192: name: 
        193: name: card
        194: operator: ->
        195: name: ctx
     196: argument: 
      197: expr: 
       198: literal: "clearing cache idx=%d count=%"
       199: name: SC_FORMAT_LEN_SIZE_T
       200: literal: "u"
     201: argument: 
      202: expr: 
       203: name: idx
     204: argument: 
      205: expr: 
       206: name: count
 207: expr_stmt: 
  208: expr: 
   209: call: 
    210: name: free
    211: argument_list: 
     212: argument: 
      213: expr: 
       214: name: 
        215: name: priv
        216: operator: ->
        217: name: cache_buf
 218: expr_stmt: 
  219: expr: 
   220: name: 
    221: name: priv
    222: operator: ->
    223: name: cache_buf
   224: operator: =
   225: name: NULL
 226: expr_stmt: 
  227: expr: 
   228: name: 
    229: name: priv
    230: operator: ->
    231: name: cache_buf_len
   232: operator: =
   233: literal: 0
 234: expr_stmt: 
  235: expr: 
   236: name: r
   237: operator: =
   238: call: 
    239: name: cac_cac1_get_certificate
    240: argument_list: 
     241: argument: 
      242: expr: 
       243: name: card
     244: argument: 
      245: expr: 
       246: operator: &
       247: name: val
     248: argument: 
      249: expr: 
       250: operator: &
       251: name: val_len
 252: if_stmt: 
  253: if: 
   254: condition: 
    255: expr: 
     256: name: r
     257: operator: <
     258: literal: 0
   259: block: 
    260: block_content: 
     261: goto: 
      262: name: done
 263: if_stmt: 
  264: if: 
   265: condition: 
    266: expr: 
     267: name: val_len
     268: operator: <
     269: literal: 1
   270: block: 
    271: block_content: 
     272: expr_stmt: 
      273: expr: 
       274: name: r
       275: operator: =
       276: name: SC_ERROR_INVALID_DATA
     277: goto: 
      278: name: done
 279: expr_stmt: 
  280: expr: 
   281: name: cert_type
   282: operator: =
   283: name: 
    284: name: val
    285: index: 
     286: expr: 
      287: literal: 0
 288: expr_stmt: 
  289: expr: 
   290: name: cert_ptr
   291: operator: =
   292: name: val
   293: operator: +
   294: literal: 1
 295: expr_stmt: 
  296: expr: 
   297: name: cert_len
   298: operator: =
   299: name: val_len
   300: operator: -
   301: literal: 1
 302: comment: /* if the info byte is 1, then the cert is compressed, decompress it */
 303: if_stmt: 
  304: if: 
   305: condition: 
    306: expr: 
     307: operator: (
     308: name: cert_type
     309: operator: &
     310: literal: 0x3
     311: operator: )
     312: operator: ==
     313: literal: 1
   314: block: 
    315: block_content: 
     316: ifdef: 
      317: directive: ifdef
      318: name: ENABLE_ZLIB
     319: expr_stmt: 
      320: expr: 
       321: name: r
       322: operator: =
       323: call: 
        324: name: sc_decompress_alloc
        325: argument_list: 
         326: argument: 
          327: expr: 
           328: operator: &
           329: name: 
            330: name: priv
            331: operator: ->
            332: name: cache_buf
         333: argument: 
          334: expr: 
           335: operator: &
           336: name: 
            337: name: priv
            338: operator: ->
            339: name: cache_buf_len
         340: argument: 
          341: expr: 
           342: name: cert_ptr
         343: argument: 
          344: expr: 
           345: name: cert_len
         346: argument: 
          347: expr: 
           348: name: COMPRESSION_AUTO
     349: else: 
      350: directive: else
     351: expr_stmt: 
      352: expr: 
       353: call: 
        354: name: sc_log
        355: argument_list: 
         356: argument: 
          357: expr: 
           358: name: 
            359: name: card
            360: operator: ->
            361: name: ctx
         362: argument: 
          363: expr: 
           364: literal: "CAC compression not supported, no zlib"
     365: expr_stmt: 
      366: expr: 
       367: name: r
       368: operator: =
       369: name: SC_ERROR_NOT_SUPPORTED
     370: endif: 
      371: directive: endif
     372: if_stmt: 
      373: if: 
       374: condition: 
        375: expr: 
         376: name: r
       377: block: 
        378: block_content: 
         379: goto: 
          380: name: done
  381: if: 
   382: condition: 
    383: expr: 
     384: name: cert_len
     385: operator: >
     386: literal: 0
   387: block: 
    388: block_content: 
     389: expr_stmt: 
      390: expr: 
       391: name: 
        392: name: priv
        393: operator: ->
        394: name: cache_buf
       395: operator: =
       396: call: 
        397: name: malloc
        398: argument_list: 
         399: argument: 
          400: expr: 
           401: name: cert_len
     402: if_stmt: 
      403: if: 
       404: condition: 
        405: expr: 
         406: name: 
          407: name: priv
          408: operator: ->
          409: name: cache_buf
         410: operator: ==
         411: name: NULL
       412: block: 
        413: block_content: 
         414: expr_stmt: 
          415: expr: 
           416: name: r
           417: operator: =
           418: name: SC_ERROR_OUT_OF_MEMORY
         419: goto: 
          420: name: done
     421: expr_stmt: 
      422: expr: 
       423: name: 
        424: name: priv
        425: operator: ->
        426: name: cache_buf_len
       427: operator: =
       428: name: cert_len
     429: expr_stmt: 
      430: expr: 
       431: call: 
        432: name: memcpy
        433: argument_list: 
         434: argument: 
          435: expr: 
           436: name: 
            437: name: priv
            438: operator: ->
            439: name: cache_buf
         440: argument: 
          441: expr: 
           442: name: cert_ptr
         443: argument: 
          444: expr: 
           445: name: cert_len
 446: comment: /* OK we've read the data, now copy the required portion out to the callers buffer */
 447: expr_stmt: 
  448: expr: 
   449: name: 
    450: name: priv
    451: operator: ->
    452: name: cached
   453: operator: =
   454: literal: 1
 455: expr_stmt: 
  456: expr: 
   457: name: len
   458: operator: =
   459: call: 
    460: name: MIN
    461: argument_list: 
     462: argument: 
      463: expr: 
       464: name: count
     465: argument: 
      466: expr: 
       467: name: 
        468: name: priv
        469: operator: ->
        470: name: cache_buf_len
       471: operator: -
       472: name: idx
 473: if_stmt: 
  474: if: 
   475: condition: 
    476: expr: 
     477: name: len
     478: operator: &&
     479: name: 
      480: name: priv
      481: operator: ->
      482: name: cache_buf
   483: block: 
    484: block_content: 
     485: expr_stmt: 
      486: expr: 
       487: call: 
        488: name: memcpy
        489: argument_list: 
         490: argument: 
          491: expr: 
           492: name: buf
         493: argument: 
          494: expr: 
           495: operator: &
           496: name: 
            497: name: priv
            498: operator: ->
            499: name: cache_buf
            500: index: 
             501: expr: 
              502: name: idx
         503: argument: 
          504: expr: 
           505: name: len
 506: expr_stmt: 
  507: expr: 
   508: name: r
   509: operator: =
   510: name: len
 511: label: 
  512: name: done
 513: if_stmt: 
  514: if: 
   515: condition: 
    516: expr: 
     517: name: val
   518: block: 
    519: block_content: 
     520: expr_stmt: 
      521: expr: 
       522: call: 
        523: name: free
        524: argument_list: 
         525: argument: 
          526: expr: 
           527: name: val
 528: expr_stmt: 
  529: expr: 
   530: call: 
    531: name: LOG_FUNC_RETURN
    532: argument_list: 
     533: argument: 
      534: expr: 
       535: name: 
        536: name: card
        537: operator: ->
        538: name: ctx
     539: argument: 
      540: expr: 
       541: name: r
=====
0: decl_stmt: 
 1: decl: 
  2: type: 
   3: name: size_t
  4: name: val_len

----------------------------------------
0: decl_stmt: 
 1: decl: 
  2: type: 
   3: name: size_t
  4: name: val_len
  5: init: 
   6: expr: 
    7: literal: 0
=====
0: decl: 
 1: type: 
  2: name: size_t
 3: name: val_len

----------------------------------------
0: decl: 
 1: type: 
  2: name: size_t
 3: name: val_len
 4: init: 
  5: expr: 
   6: literal: 0
=====
