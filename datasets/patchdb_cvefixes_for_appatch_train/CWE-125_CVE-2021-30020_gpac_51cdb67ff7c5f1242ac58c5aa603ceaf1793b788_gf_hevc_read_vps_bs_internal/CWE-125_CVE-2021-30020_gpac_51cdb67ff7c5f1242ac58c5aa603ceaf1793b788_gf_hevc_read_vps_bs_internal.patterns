0: expr: 
 1: ?: !@#$holes0
 2: operator: -
 3: literal: 1
 4: ?: !@#$holes1

----------------------------------------
0: expr: 
 1: ?: !@#$holes0
 2: operator: -
 3: literal: 1
 4: ?: !@#$holes1
=====
0: unit: 
 1: function: 
  2: type: 
   3: specifier: static
   4: name: s32
  5: name: gf_hevc_read_vps_bs_internal
  6: parameter_list: 
   7: parameter: 
    8: decl: 
     9: type: 
      10: name: GF_BitStream
      11: modifier: *
     12: name: bs
   13: parameter: 
    14: decl: 
     15: type: 
      16: name: HEVCState
      17: modifier: *
     18: name: hevc
   19: parameter: 
    20: decl: 
     21: type: 
      22: name: Bool
     23: name: stop_at_vps_ext
  24: block: 
   25: block_content: 
    26: decl_stmt: 
     27: decl: 
      28: type: 
       29: name: u8
      30: name: vps_sub_layer_ordering_info_present_flag
     31: decl: 
      32: type: 
      33: name: vps_extension_flag
    34: decl_stmt: 
     35: decl: 
      36: type: 
       37: name: u32
      38: name: i
     39: decl: 
      40: type: 
      41: name: j
    42: decl_stmt: 
     43: decl: 
      44: type: 
       45: name: s32
      46: name: vps_id
    47: decl_stmt: 
     48: decl: 
      49: type: 
       50: name: HEVC_VPS
       51: modifier: *
      52: name: vps
    53: decl_stmt: 
     54: decl: 
      55: type: 
       56: name: u8
      57: name: 
       58: name: layer_id_included_flag
       59: index: 
        60: expr: 
         61: name: MAX_LHVC_LAYERS
       62: index: 
        63: expr: 
         64: literal: 64
    65: comment: //nalu header already parsed
    66: expr_stmt: 
     67: expr: 
      68: name: vps_id
      69: operator: =
      70: call: 
       71: name: gf_bs_read_int_log
       72: argument_list: 
        73: argument: 
         74: expr: 
          75: name: bs
        76: argument: 
         77: expr: 
          78: literal: 4
        79: argument: 
         80: expr: 
          81: literal: "vps_id"
    82: if_stmt: 
     83: if: 
      84: condition: 
       85: expr: 
        86: name: vps_id
        87: operator: >=
        88: literal: 16
      89: block: 
       90: block_content: 
        91: return: 
         92: expr: 
          93: operator: -
          94: literal: 1
    95: expr_stmt: 
     96: expr: 
      97: name: vps
      98: operator: =
      99: operator: &
      100: name: 
       101: name: hevc
       102: operator: ->
       103: name: vps
       104: index: 
        105: expr: 
         106: name: vps_id
    107: expr_stmt: 
     108: expr: 
      109: name: 
       110: name: vps
       111: operator: ->
       112: name: bit_pos_vps_extensions
      113: operator: =
      114: operator: -
      115: literal: 1
    116: if_stmt: 
     117: if: 
      118: condition: 
       119: expr: 
        120: operator: !
        121: name: 
         122: name: vps
         123: operator: ->
         124: name: state
      125: block: 
       126: block_content: 
        127: expr_stmt: 
         128: expr: 
          129: name: 
           130: name: vps
           131: operator: ->
           132: name: id
          133: operator: =
          134: name: vps_id
        135: expr_stmt: 
         136: expr: 
          137: name: 
           138: name: vps
           139: operator: ->
           140: name: state
          141: operator: =
          142: literal: 1
    143: expr_stmt: 
     144: expr: 
      145: name: 
       146: name: vps
       147: operator: ->
       148: name: base_layer_internal_flag
      149: operator: =
      150: call: 
       151: name: gf_bs_read_int_log
       152: argument_list: 
        153: argument: 
         154: expr: 
          155: name: bs
        156: argument: 
         157: expr: 
          158: literal: 1
        159: argument: 
         160: expr: 
          161: literal: "base_layer_internal_flag"
    162: expr_stmt: 
     163: expr: 
      164: name: 
       165: name: vps
       166: operator: ->
       167: name: base_layer_available_flag
      168: operator: =
      169: call: 
       170: name: gf_bs_read_int_log
       171: argument_list: 
        172: argument: 
         173: expr: 
          174: name: bs
        175: argument: 
         176: expr: 
          177: literal: 1
        178: argument: 
         179: expr: 
          180: literal: "base_layer_available_flag"
    181: expr_stmt: 
     182: expr: 
      183: name: 
       184: name: vps
       185: operator: ->
       186: name: max_layers
      187: operator: =
      188: literal: 1
      189: operator: +
      190: call: 
       191: name: gf_bs_read_int_log
       192: argument_list: 
        193: argument: 
         194: expr: 
          195: name: bs
        196: argument: 
         197: expr: 
          198: literal: 6
        199: argument: 
         200: expr: 
          201: literal: "max_layers_minus1"
    202: if_stmt: 
     203: if: 
      204: condition: 
       205: expr: 
        206: name: 
         207: name: vps
         208: operator: ->
         209: name: max_layers
        210: operator: >
        211: name: MAX_LHVC_LAYERS
      212: block: 
       213: block_content: 
        214: expr_stmt: 
         215: expr: 
          216: call: 
           217: name: GF_LOG
           218: argument_list: 
            219: argument: 
             220: expr: 
              221: name: GF_LOG_ERROR
            222: argument: 
             223: expr: 
              224: name: GF_LOG_CODING
            225: argument: 
             226: expr: 
              227: operator: (
              228: literal: "[HEVC] sorry, %d layers in VPS but only %d supported\n"
              229: operator: ,
              230: name: 
               231: name: vps
               232: operator: ->
               233: name: max_layers
              234: operator: ,
              235: name: MAX_LHVC_LAYERS
              236: operator: )
        237: return: 
         238: expr: 
          239: operator: -
          240: literal: 1
    241: expr_stmt: 
     242: expr: 
      243: name: 
       244: name: vps
       245: operator: ->
       246: name: max_sub_layers
      247: operator: =
      248: call: 
       249: name: gf_bs_read_int_log
       250: argument_list: 
        251: argument: 
         252: expr: 
          253: name: bs
        254: argument: 
         255: expr: 
          256: literal: 3
        257: argument: 
         258: expr: 
          259: literal: "max_sub_layers_minus1"
      260: operator: +
      261: literal: 1
    262: expr_stmt: 
     263: expr: 
      264: name: 
       265: name: vps
       266: operator: ->
       267: name: temporal_id_nesting
      268: operator: =
      269: call: 
       270: name: gf_bs_read_int_log
       271: argument_list: 
        272: argument: 
         273: expr: 
          274: name: bs
        275: argument: 
         276: expr: 
          277: literal: 1
        278: argument: 
         279: expr: 
          280: literal: "temporal_id_nesting"
    281: expr_stmt: 
     282: expr: 
      283: call: 
       284: name: gf_bs_read_int_log
       285: argument_list: 
        286: argument: 
         287: expr: 
          288: name: bs
        289: argument: 
         290: expr: 
          291: literal: 16
        292: argument: 
         293: expr: 
          294: literal: "vps_reserved_ffff_16bits"
    295: expr_stmt: 
     296: expr: 
      297: call: 
       298: name: hevc_profile_tier_level
       299: argument_list: 
        300: argument: 
         301: expr: 
          302: name: bs
        303: argument: 
         304: expr: 
          305: literal: 1
        306: argument: 
         307: expr: 
          308: name: 
           309: name: vps
           310: operator: ->
           311: name: max_sub_layers
          312: operator: -
          313: literal: 1
        314: argument: 
         315: expr: 
          316: operator: &
          317: name: 
           318: name: vps
           319: operator: ->
           320: name: ptl
        321: argument: 
         322: expr: 
          323: literal: 0
    324: expr_stmt: 
     325: expr: 
      326: name: vps_sub_layer_ordering_info_present_flag
      327: operator: =
      328: call: 
       329: name: gf_bs_read_int_log
       330: argument_list: 
        331: argument: 
         332: expr: 
          333: name: bs
        334: argument: 
         335: expr: 
          336: literal: 1
        337: argument: 
         338: expr: 
          339: literal: "vps_sub_layer_ordering_info_present_flag"
    340: for: 
     341: control: 
      342: init: 
       343: expr: 
        344: name: i
        345: operator: =
        346: operator: (
        347: ternary: 
         348: condition: 
          349: expr: 
           350: name: vps_sub_layer_ordering_info_present_flag
         351: then: 
          352: expr: 
           353: literal: 0
         354: else: 
          355: expr: 
           356: name: 
            357: name: vps
            358: operator: ->
            359: name: max_sub_layers
           360: operator: -
           361: literal: 1
        362: operator: )
      363: condition: 
       364: expr: 
        365: name: i
        366: operator: <
        367: name: 
         368: name: vps
         369: operator: ->
         370: name: max_sub_layers
      371: incr: 
       372: expr: 
        373: name: i
        374: operator: ++
     375: block: 
      376: block_content: 
       377: expr_stmt: 
        378: expr: 
         379: call: 
          380: name: gf_bs_read_ue_log_idx
          381: argument_list: 
           382: argument: 
            383: expr: 
             384: name: bs
           385: argument: 
            386: expr: 
             387: literal: "vps_max_dec_pic_buffering_minus1"
           388: argument: 
            389: expr: 
             390: name: i
       391: expr_stmt: 
        392: expr: 
         393: call: 
          394: name: gf_bs_read_ue_log_idx
          395: argument_list: 
           396: argument: 
            397: expr: 
             398: name: bs
           399: argument: 
            400: expr: 
             401: literal: "vps_max_num_reorder_pics"
           402: argument: 
            403: expr: 
             404: name: i
       405: expr_stmt: 
        406: expr: 
         407: call: 
          408: name: gf_bs_read_ue_log_idx
          409: argument_list: 
           410: argument: 
            411: expr: 
             412: name: bs
           413: argument: 
            414: expr: 
             415: literal: "vps_max_latency_increase_plus1"
           416: argument: 
            417: expr: 
             418: name: i
    419: expr_stmt: 
     420: expr: 
      421: name: 
       422: name: vps
       423: operator: ->
       424: name: max_layer_id
      425: operator: =
      426: call: 
       427: name: gf_bs_read_int_log
       428: argument_list: 
        429: argument: 
         430: expr: 
          431: name: bs
        432: argument: 
         433: expr: 
          434: literal: 6
        435: argument: 
         436: expr: 
          437: literal: "max_layer_id"
    438: if_stmt: 
     439: if: 
      440: condition: 
       441: expr: 
        442: name: 
         443: name: vps
         444: operator: ->
         445: name: max_layer_id
        446: operator: >
        447: name: MAX_LHVC_LAYERS
      448: block: 
       449: block_content: 
        450: expr_stmt: 
         451: expr: 
          452: call: 
           453: name: GF_LOG
           454: argument_list: 
            455: argument: 
             456: expr: 
              457: name: GF_LOG_ERROR
            458: argument: 
             459: expr: 
              460: name: GF_LOG_CODING
            461: argument: 
             462: expr: 
              463: operator: (
              464: literal: "[HEVC] VPS max layer ID %u but GPAC only supports %u\n"
              465: operator: ,
              466: name: 
               467: name: vps
               468: operator: ->
               469: name: max_layer_id
              470: operator: ,
              471: name: MAX_LHVC_LAYERS
              472: operator: )
        473: return: 
         474: expr: 
          475: operator: -
          476: literal: 1
    477: expr_stmt: 
     478: expr: 
      479: name: 
       480: name: vps
       481: operator: ->
       482: name: num_layer_sets
      483: operator: =
      484: call: 
       485: name: gf_bs_read_ue_log
       486: argument_list: 
        487: argument: 
         488: expr: 
          489: name: bs
        490: argument: 
         491: expr: 
          492: literal: "num_layer_sets_minus1"
      493: operator: +
      494: literal: 1
    495: if_stmt: 
     496: if: 
      497: condition: 
       498: expr: 
        499: name: 
         500: name: vps
         501: operator: ->
         502: name: num_layer_sets
        503: operator: >
        504: name: MAX_LHVC_LAYERS
      505: block: 
       506: block_content: 
        507: expr_stmt: 
         508: expr: 
          509: call: 
           510: name: GF_LOG
           511: argument_list: 
            512: argument: 
             513: expr: 
              514: name: GF_LOG_ERROR
            515: argument: 
             516: expr: 
              517: name: GF_LOG_CODING
            518: argument: 
             519: expr: 
              520: operator: (
              521: literal: "[HEVC] Wrong number of layer sets in VPS %d\n"
              522: operator: ,
              523: name: 
               524: name: vps
               525: operator: ->
               526: name: num_layer_sets
              527: operator: )
        528: return: 
         529: expr: 
          530: operator: -
          531: literal: 1
    532: for: 
     533: control: 
      534: init: 
       535: expr: 
        536: name: i
        537: operator: =
        538: literal: 1
      539: condition: 
       540: expr: 
        541: name: i
        542: operator: <
        543: name: 
         544: name: vps
         545: operator: ->
         546: name: num_layer_sets
      547: incr: 
       548: expr: 
        549: name: i
        550: operator: ++
     551: block: 
      552: block_content: 
       553: for: 
        554: control: 
         555: init: 
          556: expr: 
           557: name: j
           558: operator: =
           559: literal: 0
         560: condition: 
          561: expr: 
           562: name: j
           563: operator: <=
           564: name: 
            565: name: vps
            566: operator: ->
            567: name: max_layer_id
         568: incr: 
          569: expr: 
           570: name: j
           571: operator: ++
        572: block: 
         573: block_content: 
          574: expr_stmt: 
           575: expr: 
            576: name: 
             577: name: layer_id_included_flag
             578: index: 
              579: expr: 
               580: name: i
             581: index: 
              582: expr: 
               583: name: j
            584: operator: =
            585: call: 
             586: name: gf_bs_read_int_log_idx2
             587: argument_list: 
              588: argument: 
               589: expr: 
                590: name: bs
              591: argument: 
               592: expr: 
                593: literal: 1
              594: argument: 
               595: expr: 
                596: literal: "layer_id_included_flag"
              597: argument: 
               598: expr: 
                599: name: i
              600: argument: 
               601: expr: 
                602: name: j
    603: expr_stmt: 
     604: expr: 
      605: name: 
       606: name: vps
       607: operator: ->
       608: name: num_layers_in_id_list
       609: index: 
        610: expr: 
         611: literal: 0
      612: operator: =
      613: literal: 1
    614: for: 
     615: control: 
      616: init: 
       617: expr: 
        618: name: i
        619: operator: =
        620: literal: 1
      621: condition: 
       622: expr: 
        623: name: i
        624: operator: <
        625: name: 
         626: name: vps
         627: operator: ->
         628: name: num_layer_sets
      629: incr: 
       630: expr: 
        631: name: i
        632: operator: ++
     633: block: 
      634: block_content: 
       635: decl_stmt: 
        636: decl: 
         637: type: 
          638: name: u32
         639: name: n
        640: decl: 
         641: type: 
         642: name: m
       643: expr_stmt: 
        644: expr: 
         645: name: n
         646: operator: =
         647: literal: 0
       648: for: 
        649: control: 
         650: init: 
          651: expr: 
           652: name: m
           653: operator: =
           654: literal: 0
         655: condition: 
          656: expr: 
           657: name: m
           658: operator: <=
           659: name: 
            660: name: vps
            661: operator: ->
            662: name: max_layer_id
         663: incr: 
          664: expr: 
           665: name: m
           666: operator: ++
        667: block: 
         668: block_content: 
          669: if_stmt: 
           670: if: 
            671: condition: 
             672: expr: 
              673: name: 
               674: name: layer_id_included_flag
               675: index: 
                676: expr: 
                 677: name: i
               678: index: 
                679: expr: 
                 680: name: m
            681: block: 
             682: block_content: 
              683: expr_stmt: 
               684: expr: 
                685: name: 
                 686: name: vps
                 687: operator: ->
                 688: name: LayerSetLayerIdList
                 689: index: 
                  690: expr: 
                   691: name: i
                 692: index: 
                  693: expr: 
                   694: name: n
                   695: operator: ++
                696: operator: =
                697: name: m
              698: if_stmt: 
               699: if: 
                700: condition: 
                 701: expr: 
                  702: name: 
                   703: name: vps
                   704: operator: ->
                   705: name: LayerSetLayerIdListMax
                   706: index: 
                    707: expr: 
                     708: name: i
                  709: operator: <
                  710: name: m
                711: block: 
                 712: block_content: 
                  713: expr_stmt: 
                   714: expr: 
                    715: name: 
                     716: name: vps
                     717: operator: ->
                     718: name: LayerSetLayerIdListMax
                     719: index: 
                      720: expr: 
                       721: name: i
                    722: operator: =
                    723: name: m
       724: expr_stmt: 
        725: expr: 
         726: name: 
          727: name: vps
          728: operator: ->
          729: name: num_layers_in_id_list
          730: index: 
           731: expr: 
            732: name: i
         733: operator: =
         734: name: n
    735: if_stmt: 
     736: if: 
      737: condition: 
       738: expr: 
        739: call: 
         740: name: gf_bs_read_int_log
         741: argument_list: 
          742: argument: 
           743: expr: 
            744: name: bs
          745: argument: 
           746: expr: 
            747: literal: 1
          748: argument: 
           749: expr: 
            750: literal: "vps_timing_info_present_flag"
      751: block: 
       752: block_content: 
        753: decl_stmt: 
         754: decl: 
          755: type: 
           756: name: u32
          757: name: vps_num_hrd_parameters
        758: expr_stmt: 
         759: expr: 
          760: call: 
           761: name: gf_bs_read_int_log
           762: argument_list: 
            763: argument: 
             764: expr: 
              765: name: bs
            766: argument: 
             767: expr: 
              768: literal: 32
            769: argument: 
             770: expr: 
              771: literal: "vps_num_units_in_tick"
        772: expr_stmt: 
         773: expr: 
          774: call: 
           775: name: gf_bs_read_int_log
           776: argument_list: 
            777: argument: 
             778: expr: 
              779: name: bs
            780: argument: 
             781: expr: 
              782: literal: 32
            783: argument: 
             784: expr: 
              785: literal: "vps_time_scale"
        786: if_stmt: 
         787: if: 
          788: condition: 
           789: expr: 
            790: call: 
             791: name: gf_bs_read_int_log
             792: argument_list: 
              793: argument: 
               794: expr: 
                795: name: bs
              796: argument: 
               797: expr: 
                798: literal: 1
              799: argument: 
               800: expr: 
                801: literal: "vps_poc_proportional_to_timing_flag"
          802: block: 
           803: block_content: 
            804: expr_stmt: 
             805: expr: 
              806: call: 
               807: name: gf_bs_read_ue_log
               808: argument_list: 
                809: argument: 
                 810: expr: 
                  811: name: bs
                812: argument: 
                 813: expr: 
                  814: literal: "vps_num_ticks_poc_diff_one_minus1"
        815: expr_stmt: 
         816: expr: 
          817: name: vps_num_hrd_parameters
          818: operator: =
          819: call: 
           820: name: gf_bs_read_ue_log
           821: argument_list: 
            822: argument: 
             823: expr: 
              824: name: bs
            825: argument: 
             826: expr: 
              827: literal: "vps_num_hrd_parameters"
        828: for: 
         829: control: 
          830: init: 
           831: expr: 
            832: name: i
            833: operator: =
            834: literal: 0
          835: condition: 
           836: expr: 
            837: name: i
            838: operator: <
            839: name: vps_num_hrd_parameters
          840: incr: 
           841: expr: 
            842: name: i
            843: operator: ++
         844: block: 
          845: block_content: 
           846: decl_stmt: 
            847: decl: 
             848: type: 
              849: name: Bool
             850: name: cprms_present_flag
             851: init: 
              852: expr: 
               853: name: GF_TRUE
           854: expr_stmt: 
            855: expr: 
             856: call: 
              857: name: gf_bs_read_ue_log_idx
              858: argument_list: 
               859: argument: 
                860: expr: 
                 861: name: bs
               862: argument: 
                863: expr: 
                 864: literal: "hrd_layer_set_idx"
               865: argument: 
                866: expr: 
                 867: name: i
           868: if_stmt: 
            869: if: 
             870: condition: 
              871: expr: 
               872: name: i
               873: operator: >
               874: literal: 0
             875: block: 
              876: block_content: 
               877: expr_stmt: 
                878: expr: 
                 879: name: cprms_present_flag
                 880: operator: =
                 881: call: 
                  882: name: gf_bs_read_int_log
                  883: argument_list: 
                   884: argument: 
                    885: expr: 
                     886: name: bs
                   887: argument: 
                    888: expr: 
                     889: literal: 1
                   890: argument: 
                    891: expr: 
                     892: literal: "cprms_present_flag"
           893: expr_stmt: 
            894: expr: 
             895: call: 
              896: name: hevc_parse_hrd_parameters
              897: argument_list: 
               898: argument: 
                899: expr: 
                 900: name: bs
               901: argument: 
                902: expr: 
                 903: name: cprms_present_flag
               904: argument: 
                905: expr: 
                 906: name: 
                  907: name: vps
                  908: operator: ->
                  909: name: max_sub_layers
                 910: operator: -
                 911: literal: 1
               912: argument: 
                913: expr: 
                 914: name: i
    915: if_stmt: 
     916: if: 
      917: condition: 
       918: expr: 
        919: name: stop_at_vps_ext
      920: block: 
       921: block_content: 
        922: return: 
         923: expr: 
          924: name: vps_id
    925: expr_stmt: 
     926: expr: 
      927: name: vps_extension_flag
      928: operator: =
      929: call: 
       930: name: gf_bs_read_int_log
       931: argument_list: 
        932: argument: 
         933: expr: 
          934: name: bs
        935: argument: 
         936: expr: 
          937: literal: 1
        938: argument: 
         939: expr: 
          940: literal: "vps_extension_flag"
    941: if_stmt: 
     942: if: 
      943: condition: 
       944: expr: 
        945: name: vps_extension_flag
      946: block: 
       947: block_content: 
        948: decl_stmt: 
         949: decl: 
          950: type: 
           951: name: Bool
          952: name: res
        953: expr_stmt: 
         954: expr: 
          955: call: 
           956: name: gf_bs_align
           957: argument_list: 
            958: argument: 
             959: expr: 
              960: name: bs
        961: expr_stmt: 
         962: expr: 
          963: name: res
          964: operator: =
          965: call: 
           966: name: hevc_parse_vps_extension
           967: argument_list: 
            968: argument: 
             969: expr: 
              970: name: vps
            971: argument: 
             972: expr: 
              973: name: bs
        974: if_stmt: 
         975: if: 
          976: condition: 
           977: expr: 
            978: name: res
            979: operator: !=
            980: name: GF_TRUE
          981: block: 
           982: block_content: 
            983: expr_stmt: 
             984: expr: 
              985: call: 
               986: name: GF_LOG
               987: argument_list: 
                988: argument: 
                 989: expr: 
                  990: name: GF_LOG_ERROR
                991: argument: 
                 992: expr: 
                  993: name: GF_LOG_CODING
                994: argument: 
                 995: expr: 
                  996: operator: (
                  997: literal: "[HEVC] Failed to parse VPS extensions\n"
                  998: operator: )
            999: return: 
             1000: expr: 
              1001: operator: -
              1002: literal: 1
        1003: if_stmt: 
         1004: if: 
          1005: condition: 
           1006: expr: 
            1007: call: 
             1008: name: gf_bs_read_int_log
             1009: argument_list: 
              1010: argument: 
               1011: expr: 
                1012: name: bs
              1013: argument: 
               1014: expr: 
                1015: literal: 1
              1016: argument: 
               1017: expr: 
                1018: literal: "vps_extension2_flag"
          1019: block: 
           1020: block_content: 
            1021: if: 
             1022: directive: if
             1023: expr: 
              1024: literal: 0
            1025: comment: /*vps_extension_data_flag */
            1026: endif: 
             1027: directive: endif
    1028: return: 
     1029: expr: 
      1030: name: vps_id

----------------------------------------
0: unit: 
 1: function: 
  2: type: 
   3: specifier: static
   4: name: s32
  5: name: gf_hevc_read_vps_bs_internal
  6: parameter_list: 
   7: parameter: 
    8: decl: 
     9: type: 
      10: name: GF_BitStream
      11: modifier: *
     12: name: bs
   13: parameter: 
    14: decl: 
     15: type: 
      16: name: HEVCState
      17: modifier: *
     18: name: hevc
   19: parameter: 
    20: decl: 
     21: type: 
      22: name: Bool
     23: name: stop_at_vps_ext
  24: block: 
   25: block_content: 
    26: decl_stmt: 
     27: decl: 
      28: type: 
       29: name: u8
      30: name: vps_sub_layer_ordering_info_present_flag
     31: decl: 
      32: type: 
      33: name: vps_extension_flag
    34: decl_stmt: 
     35: decl: 
      36: type: 
       37: name: u32
      38: name: i
     39: decl: 
      40: type: 
      41: name: j
    42: decl_stmt: 
     43: decl: 
      44: type: 
       45: name: s32
      46: name: vps_id
    47: decl_stmt: 
     48: decl: 
      49: type: 
       50: name: HEVC_VPS
       51: modifier: *
      52: name: vps
    53: decl_stmt: 
     54: decl: 
      55: type: 
       56: name: u8
      57: name: 
       58: name: layer_id_included_flag
       59: index: 
        60: expr: 
         61: name: MAX_LHVC_LAYERS
       62: index: 
        63: expr: 
         64: literal: 64
    65: comment: //nalu header already parsed
    66: expr_stmt: 
     67: expr: 
      68: name: vps_id
      69: operator: =
      70: call: 
       71: name: gf_bs_read_int_log
       72: argument_list: 
        73: argument: 
         74: expr: 
          75: name: bs
        76: argument: 
         77: expr: 
          78: literal: 4
        79: argument: 
         80: expr: 
          81: literal: "vps_id"
    82: if_stmt: 
     83: if: 
      84: condition: 
       85: expr: 
        86: operator: (
        87: name: vps_id
        88: operator: <
        89: literal: 0
        90: operator: )
        91: operator: ||
        92: operator: (
        93: name: vps_id
        94: operator: >=
        95: literal: 16
        96: operator: )
      97: block: 
       98: block_content: 
        99: return: 
         100: expr: 
          101: operator: -
          102: literal: 1
    103: expr_stmt: 
     104: expr: 
      105: name: vps
      106: operator: =
      107: operator: &
      108: name: 
       109: name: hevc
       110: operator: ->
       111: name: vps
       112: index: 
        113: expr: 
         114: name: vps_id
    115: expr_stmt: 
     116: expr: 
      117: name: 
       118: name: vps
       119: operator: ->
       120: name: bit_pos_vps_extensions
      121: operator: =
      122: operator: -
      123: literal: 1
    124: if_stmt: 
     125: if: 
      126: condition: 
       127: expr: 
        128: operator: !
        129: name: 
         130: name: vps
         131: operator: ->
         132: name: state
      133: block: 
       134: block_content: 
        135: expr_stmt: 
         136: expr: 
          137: name: 
           138: name: vps
           139: operator: ->
           140: name: id
          141: operator: =
          142: name: vps_id
        143: expr_stmt: 
         144: expr: 
          145: name: 
           146: name: vps
           147: operator: ->
           148: name: state
          149: operator: =
          150: literal: 1
    151: expr_stmt: 
     152: expr: 
      153: name: 
       154: name: vps
       155: operator: ->
       156: name: base_layer_internal_flag
      157: operator: =
      158: call: 
       159: name: gf_bs_read_int_log
       160: argument_list: 
        161: argument: 
         162: expr: 
          163: name: bs
        164: argument: 
         165: expr: 
          166: literal: 1
        167: argument: 
         168: expr: 
          169: literal: "base_layer_internal_flag"
    170: expr_stmt: 
     171: expr: 
      172: name: 
       173: name: vps
       174: operator: ->
       175: name: base_layer_available_flag
      176: operator: =
      177: call: 
       178: name: gf_bs_read_int_log
       179: argument_list: 
        180: argument: 
         181: expr: 
          182: name: bs
        183: argument: 
         184: expr: 
          185: literal: 1
        186: argument: 
         187: expr: 
          188: literal: "base_layer_available_flag"
    189: expr_stmt: 
     190: expr: 
      191: name: 
       192: name: vps
       193: operator: ->
       194: name: max_layers
      195: operator: =
      196: literal: 1
      197: operator: +
      198: call: 
       199: name: gf_bs_read_int_log
       200: argument_list: 
        201: argument: 
         202: expr: 
          203: name: bs
        204: argument: 
         205: expr: 
          206: literal: 6
        207: argument: 
         208: expr: 
          209: literal: "max_layers_minus1"
    210: if_stmt: 
     211: if: 
      212: condition: 
       213: expr: 
        214: name: 
         215: name: vps
         216: operator: ->
         217: name: max_layers
        218: operator: >
        219: name: MAX_LHVC_LAYERS
      220: block: 
       221: block_content: 
        222: expr_stmt: 
         223: expr: 
          224: call: 
           225: name: GF_LOG
           226: argument_list: 
            227: argument: 
             228: expr: 
              229: name: GF_LOG_ERROR
            230: argument: 
             231: expr: 
              232: name: GF_LOG_CODING
            233: argument: 
             234: expr: 
              235: operator: (
              236: literal: "[HEVC] sorry, %d layers in VPS but only %d supported\n"
              237: operator: ,
              238: name: 
               239: name: vps
               240: operator: ->
               241: name: max_layers
              242: operator: ,
              243: name: MAX_LHVC_LAYERS
              244: operator: )
        245: return: 
         246: expr: 
          247: operator: -
          248: literal: 1
    249: expr_stmt: 
     250: expr: 
      251: name: 
       252: name: vps
       253: operator: ->
       254: name: max_sub_layers
      255: operator: =
      256: call: 
       257: name: gf_bs_read_int_log
       258: argument_list: 
        259: argument: 
         260: expr: 
          261: name: bs
        262: argument: 
         263: expr: 
          264: literal: 3
        265: argument: 
         266: expr: 
          267: literal: "max_sub_layers_minus1"
      268: operator: +
      269: literal: 1
    270: expr_stmt: 
     271: expr: 
      272: name: 
       273: name: vps
       274: operator: ->
       275: name: temporal_id_nesting
      276: operator: =
      277: call: 
       278: name: gf_bs_read_int_log
       279: argument_list: 
        280: argument: 
         281: expr: 
          282: name: bs
        283: argument: 
         284: expr: 
          285: literal: 1
        286: argument: 
         287: expr: 
          288: literal: "temporal_id_nesting"
    289: expr_stmt: 
     290: expr: 
      291: call: 
       292: name: gf_bs_read_int_log
       293: argument_list: 
        294: argument: 
         295: expr: 
          296: name: bs
        297: argument: 
         298: expr: 
          299: literal: 16
        300: argument: 
         301: expr: 
          302: literal: "vps_reserved_ffff_16bits"
    303: expr_stmt: 
     304: expr: 
      305: call: 
       306: name: hevc_profile_tier_level
       307: argument_list: 
        308: argument: 
         309: expr: 
          310: name: bs
        311: argument: 
         312: expr: 
          313: literal: 1
        314: argument: 
         315: expr: 
          316: name: 
           317: name: vps
           318: operator: ->
           319: name: max_sub_layers
          320: operator: -
          321: literal: 1
        322: argument: 
         323: expr: 
          324: operator: &
          325: name: 
           326: name: vps
           327: operator: ->
           328: name: ptl
        329: argument: 
         330: expr: 
          331: literal: 0
    332: expr_stmt: 
     333: expr: 
      334: name: vps_sub_layer_ordering_info_present_flag
      335: operator: =
      336: call: 
       337: name: gf_bs_read_int_log
       338: argument_list: 
        339: argument: 
         340: expr: 
          341: name: bs
        342: argument: 
         343: expr: 
          344: literal: 1
        345: argument: 
         346: expr: 
          347: literal: "vps_sub_layer_ordering_info_present_flag"
    348: for: 
     349: control: 
      350: init: 
       351: expr: 
        352: name: i
        353: operator: =
        354: operator: (
        355: ternary: 
         356: condition: 
          357: expr: 
           358: name: vps_sub_layer_ordering_info_present_flag
         359: then: 
          360: expr: 
           361: literal: 0
         362: else: 
          363: expr: 
           364: name: 
            365: name: vps
            366: operator: ->
            367: name: max_sub_layers
           368: operator: -
           369: literal: 1
        370: operator: )
      371: condition: 
       372: expr: 
        373: name: i
        374: operator: <
        375: name: 
         376: name: vps
         377: operator: ->
         378: name: max_sub_layers
      379: incr: 
       380: expr: 
        381: name: i
        382: operator: ++
     383: block: 
      384: block_content: 
       385: expr_stmt: 
        386: expr: 
         387: call: 
          388: name: gf_bs_read_ue_log_idx
          389: argument_list: 
           390: argument: 
            391: expr: 
             392: name: bs
           393: argument: 
            394: expr: 
             395: literal: "vps_max_dec_pic_buffering_minus1"
           396: argument: 
            397: expr: 
             398: name: i
       399: expr_stmt: 
        400: expr: 
         401: call: 
          402: name: gf_bs_read_ue_log_idx
          403: argument_list: 
           404: argument: 
            405: expr: 
             406: name: bs
           407: argument: 
            408: expr: 
             409: literal: "vps_max_num_reorder_pics"
           410: argument: 
            411: expr: 
             412: name: i
       413: expr_stmt: 
        414: expr: 
         415: call: 
          416: name: gf_bs_read_ue_log_idx
          417: argument_list: 
           418: argument: 
            419: expr: 
             420: name: bs
           421: argument: 
            422: expr: 
             423: literal: "vps_max_latency_increase_plus1"
           424: argument: 
            425: expr: 
             426: name: i
    427: expr_stmt: 
     428: expr: 
      429: name: 
       430: name: vps
       431: operator: ->
       432: name: max_layer_id
      433: operator: =
      434: call: 
       435: name: gf_bs_read_int_log
       436: argument_list: 
        437: argument: 
         438: expr: 
          439: name: bs
        440: argument: 
         441: expr: 
          442: literal: 6
        443: argument: 
         444: expr: 
          445: literal: "max_layer_id"
    446: if_stmt: 
     447: if: 
      448: condition: 
       449: expr: 
        450: name: 
         451: name: vps
         452: operator: ->
         453: name: max_layer_id
        454: operator: >
        455: name: MAX_LHVC_LAYERS
      456: block: 
       457: block_content: 
        458: expr_stmt: 
         459: expr: 
          460: call: 
           461: name: GF_LOG
           462: argument_list: 
            463: argument: 
             464: expr: 
              465: name: GF_LOG_ERROR
            466: argument: 
             467: expr: 
              468: name: GF_LOG_CODING
            469: argument: 
             470: expr: 
              471: operator: (
              472: literal: "[HEVC] VPS max layer ID %u but GPAC only supports %u\n"
              473: operator: ,
              474: name: 
               475: name: vps
               476: operator: ->
               477: name: max_layer_id
              478: operator: ,
              479: name: MAX_LHVC_LAYERS
              480: operator: )
        481: return: 
         482: expr: 
          483: operator: -
          484: literal: 1
    485: expr_stmt: 
     486: expr: 
      487: name: 
       488: name: vps
       489: operator: ->
       490: name: num_layer_sets
      491: operator: =
      492: call: 
       493: name: gf_bs_read_ue_log
       494: argument_list: 
        495: argument: 
         496: expr: 
          497: name: bs
        498: argument: 
         499: expr: 
          500: literal: "num_layer_sets_minus1"
      501: operator: +
      502: literal: 1
    503: if_stmt: 
     504: if: 
      505: condition: 
       506: expr: 
        507: name: 
         508: name: vps
         509: operator: ->
         510: name: num_layer_sets
        511: operator: >
        512: name: MAX_LHVC_LAYERS
      513: block: 
       514: block_content: 
        515: expr_stmt: 
         516: expr: 
          517: call: 
           518: name: GF_LOG
           519: argument_list: 
            520: argument: 
             521: expr: 
              522: name: GF_LOG_ERROR
            523: argument: 
             524: expr: 
              525: name: GF_LOG_CODING
            526: argument: 
             527: expr: 
              528: operator: (
              529: literal: "[HEVC] Wrong number of layer sets in VPS %d\n"
              530: operator: ,
              531: name: 
               532: name: vps
               533: operator: ->
               534: name: num_layer_sets
              535: operator: )
        536: return: 
         537: expr: 
          538: operator: -
          539: literal: 1
    540: for: 
     541: control: 
      542: init: 
       543: expr: 
        544: name: i
        545: operator: =
        546: literal: 1
      547: condition: 
       548: expr: 
        549: name: i
        550: operator: <
        551: name: 
         552: name: vps
         553: operator: ->
         554: name: num_layer_sets
      555: incr: 
       556: expr: 
        557: name: i
        558: operator: ++
     559: block: 
      560: block_content: 
       561: for: 
        562: control: 
         563: init: 
          564: expr: 
           565: name: j
           566: operator: =
           567: literal: 0
         568: condition: 
          569: expr: 
           570: name: j
           571: operator: <=
           572: name: 
            573: name: vps
            574: operator: ->
            575: name: max_layer_id
         576: incr: 
          577: expr: 
           578: name: j
           579: operator: ++
        580: block: 
         581: block_content: 
          582: expr_stmt: 
           583: expr: 
            584: name: 
             585: name: layer_id_included_flag
             586: index: 
              587: expr: 
               588: name: i
             589: index: 
              590: expr: 
               591: name: j
            592: operator: =
            593: call: 
             594: name: gf_bs_read_int_log_idx2
             595: argument_list: 
              596: argument: 
               597: expr: 
                598: name: bs
              599: argument: 
               600: expr: 
                601: literal: 1
              602: argument: 
               603: expr: 
                604: literal: "layer_id_included_flag"
              605: argument: 
               606: expr: 
                607: name: i
              608: argument: 
               609: expr: 
                610: name: j
    611: expr_stmt: 
     612: expr: 
      613: name: 
       614: name: vps
       615: operator: ->
       616: name: num_layers_in_id_list
       617: index: 
        618: expr: 
         619: literal: 0
      620: operator: =
      621: literal: 1
    622: for: 
     623: control: 
      624: init: 
       625: expr: 
        626: name: i
        627: operator: =
        628: literal: 1
      629: condition: 
       630: expr: 
        631: name: i
        632: operator: <
        633: name: 
         634: name: vps
         635: operator: ->
         636: name: num_layer_sets
      637: incr: 
       638: expr: 
        639: name: i
        640: operator: ++
     641: block: 
      642: block_content: 
       643: decl_stmt: 
        644: decl: 
         645: type: 
          646: name: u32
         647: name: n
        648: decl: 
         649: type: 
         650: name: m
       651: expr_stmt: 
        652: expr: 
         653: name: n
         654: operator: =
         655: literal: 0
       656: for: 
        657: control: 
         658: init: 
          659: expr: 
           660: name: m
           661: operator: =
           662: literal: 0
         663: condition: 
          664: expr: 
           665: name: m
           666: operator: <=
           667: name: 
            668: name: vps
            669: operator: ->
            670: name: max_layer_id
         671: incr: 
          672: expr: 
           673: name: m
           674: operator: ++
        675: block: 
         676: block_content: 
          677: if_stmt: 
           678: if: 
            679: condition: 
             680: expr: 
              681: name: 
               682: name: layer_id_included_flag
               683: index: 
                684: expr: 
                 685: name: i
               686: index: 
                687: expr: 
                 688: name: m
            689: block: 
             690: block_content: 
              691: expr_stmt: 
               692: expr: 
                693: name: 
                 694: name: vps
                 695: operator: ->
                 696: name: LayerSetLayerIdList
                 697: index: 
                  698: expr: 
                   699: name: i
                 700: index: 
                  701: expr: 
                   702: name: n
                   703: operator: ++
                704: operator: =
                705: name: m
              706: if_stmt: 
               707: if: 
                708: condition: 
                 709: expr: 
                  710: name: 
                   711: name: vps
                   712: operator: ->
                   713: name: LayerSetLayerIdListMax
                   714: index: 
                    715: expr: 
                     716: name: i
                  717: operator: <
                  718: name: m
                719: block: 
                 720: block_content: 
                  721: expr_stmt: 
                   722: expr: 
                    723: name: 
                     724: name: vps
                     725: operator: ->
                     726: name: LayerSetLayerIdListMax
                     727: index: 
                      728: expr: 
                       729: name: i
                    730: operator: =
                    731: name: m
       732: expr_stmt: 
        733: expr: 
         734: name: 
          735: name: vps
          736: operator: ->
          737: name: num_layers_in_id_list
          738: index: 
           739: expr: 
            740: name: i
         741: operator: =
         742: name: n
    743: if_stmt: 
     744: if: 
      745: condition: 
       746: expr: 
        747: call: 
         748: name: gf_bs_read_int_log
         749: argument_list: 
          750: argument: 
           751: expr: 
            752: name: bs
          753: argument: 
           754: expr: 
            755: literal: 1
          756: argument: 
           757: expr: 
            758: literal: "vps_timing_info_present_flag"
      759: block: 
       760: block_content: 
        761: decl_stmt: 
         762: decl: 
          763: type: 
           764: name: u32
          765: name: vps_num_hrd_parameters
        766: expr_stmt: 
         767: expr: 
          768: call: 
           769: name: gf_bs_read_int_log
           770: argument_list: 
            771: argument: 
             772: expr: 
              773: name: bs
            774: argument: 
             775: expr: 
              776: literal: 32
            777: argument: 
             778: expr: 
              779: literal: "vps_num_units_in_tick"
        780: expr_stmt: 
         781: expr: 
          782: call: 
           783: name: gf_bs_read_int_log
           784: argument_list: 
            785: argument: 
             786: expr: 
              787: name: bs
            788: argument: 
             789: expr: 
              790: literal: 32
            791: argument: 
             792: expr: 
              793: literal: "vps_time_scale"
        794: if_stmt: 
         795: if: 
          796: condition: 
           797: expr: 
            798: call: 
             799: name: gf_bs_read_int_log
             800: argument_list: 
              801: argument: 
               802: expr: 
                803: name: bs
              804: argument: 
               805: expr: 
                806: literal: 1
              807: argument: 
               808: expr: 
                809: literal: "vps_poc_proportional_to_timing_flag"
          810: block: 
           811: block_content: 
            812: expr_stmt: 
             813: expr: 
              814: call: 
               815: name: gf_bs_read_ue_log
               816: argument_list: 
                817: argument: 
                 818: expr: 
                  819: name: bs
                820: argument: 
                 821: expr: 
                  822: literal: "vps_num_ticks_poc_diff_one_minus1"
        823: expr_stmt: 
         824: expr: 
          825: name: vps_num_hrd_parameters
          826: operator: =
          827: call: 
           828: name: gf_bs_read_ue_log
           829: argument_list: 
            830: argument: 
             831: expr: 
              832: name: bs
            833: argument: 
             834: expr: 
              835: literal: "vps_num_hrd_parameters"
        836: for: 
         837: control: 
          838: init: 
           839: expr: 
            840: name: i
            841: operator: =
            842: literal: 0
          843: condition: 
           844: expr: 
            845: name: i
            846: operator: <
            847: name: vps_num_hrd_parameters
          848: incr: 
           849: expr: 
            850: name: i
            851: operator: ++
         852: block: 
          853: block_content: 
           854: decl_stmt: 
            855: decl: 
             856: type: 
              857: name: Bool
             858: name: cprms_present_flag
             859: init: 
              860: expr: 
               861: name: GF_TRUE
           862: expr_stmt: 
            863: expr: 
             864: call: 
              865: name: gf_bs_read_ue_log_idx
              866: argument_list: 
               867: argument: 
                868: expr: 
                 869: name: bs
               870: argument: 
                871: expr: 
                 872: literal: "hrd_layer_set_idx"
               873: argument: 
                874: expr: 
                 875: name: i
           876: if_stmt: 
            877: if: 
             878: condition: 
              879: expr: 
               880: name: i
               881: operator: >
               882: literal: 0
             883: block: 
              884: block_content: 
               885: expr_stmt: 
                886: expr: 
                 887: name: cprms_present_flag
                 888: operator: =
                 889: call: 
                  890: name: gf_bs_read_int_log
                  891: argument_list: 
                   892: argument: 
                    893: expr: 
                     894: name: bs
                   895: argument: 
                    896: expr: 
                     897: literal: 1
                   898: argument: 
                    899: expr: 
                     900: literal: "cprms_present_flag"
           901: expr_stmt: 
            902: expr: 
             903: call: 
              904: name: hevc_parse_hrd_parameters
              905: argument_list: 
               906: argument: 
                907: expr: 
                 908: name: bs
               909: argument: 
                910: expr: 
                 911: name: cprms_present_flag
               912: argument: 
                913: expr: 
                 914: name: 
                  915: name: vps
                  916: operator: ->
                  917: name: max_sub_layers
                 918: operator: -
                 919: literal: 1
               920: argument: 
                921: expr: 
                 922: name: i
    923: if_stmt: 
     924: if: 
      925: condition: 
       926: expr: 
        927: name: stop_at_vps_ext
      928: block: 
       929: block_content: 
        930: return: 
         931: expr: 
          932: name: vps_id
    933: expr_stmt: 
     934: expr: 
      935: name: vps_extension_flag
      936: operator: =
      937: call: 
       938: name: gf_bs_read_int_log
       939: argument_list: 
        940: argument: 
         941: expr: 
          942: name: bs
        943: argument: 
         944: expr: 
          945: literal: 1
        946: argument: 
         947: expr: 
          948: literal: "vps_extension_flag"
    949: if_stmt: 
     950: if: 
      951: condition: 
       952: expr: 
        953: name: vps_extension_flag
      954: block: 
       955: block_content: 
        956: decl_stmt: 
         957: decl: 
          958: type: 
           959: name: Bool
          960: name: res
        961: expr_stmt: 
         962: expr: 
          963: call: 
           964: name: gf_bs_align
           965: argument_list: 
            966: argument: 
             967: expr: 
              968: name: bs
        969: expr_stmt: 
         970: expr: 
          971: name: res
          972: operator: =
          973: call: 
           974: name: hevc_parse_vps_extension
           975: argument_list: 
            976: argument: 
             977: expr: 
              978: name: vps
            979: argument: 
             980: expr: 
              981: name: bs
        982: if_stmt: 
         983: if: 
          984: condition: 
           985: expr: 
            986: name: res
            987: operator: !=
            988: name: GF_TRUE
          989: block: 
           990: block_content: 
            991: expr_stmt: 
             992: expr: 
              993: call: 
               994: name: GF_LOG
               995: argument_list: 
                996: argument: 
                 997: expr: 
                  998: name: GF_LOG_ERROR
                999: argument: 
                 1000: expr: 
                  1001: name: GF_LOG_CODING
                1002: argument: 
                 1003: expr: 
                  1004: operator: (
                  1005: literal: "[HEVC] Failed to parse VPS extensions\n"
                  1006: operator: )
            1007: return: 
             1008: expr: 
              1009: operator: -
              1010: literal: 1
        1011: if_stmt: 
         1012: if: 
          1013: condition: 
           1014: expr: 
            1015: call: 
             1016: name: gf_bs_read_int_log
             1017: argument_list: 
              1018: argument: 
               1019: expr: 
                1020: name: bs
              1021: argument: 
               1022: expr: 
                1023: literal: 1
              1024: argument: 
               1025: expr: 
                1026: literal: "vps_extension2_flag"
          1027: block: 
           1028: block_content: 
            1029: if: 
             1030: directive: if
             1031: expr: 
              1032: literal: 0
            1033: comment: /*vps_extension_data_flag */
            1034: endif: 
             1035: directive: endif
    1036: return: 
     1037: expr: 
      1038: name: vps_id
=====
0: function: 
 1: type: 
  2: specifier: static
  3: name: s32
 4: name: gf_hevc_read_vps_bs_internal
 5: parameter_list: 
  6: parameter: 
   7: decl: 
    8: type: 
     9: name: GF_BitStream
     10: modifier: *
    11: name: bs
  12: parameter: 
   13: decl: 
    14: type: 
     15: name: HEVCState
     16: modifier: *
    17: name: hevc
  18: parameter: 
   19: decl: 
    20: type: 
     21: name: Bool
    22: name: stop_at_vps_ext
 23: block: 
  24: block_content: 
   25: decl_stmt: 
    26: decl: 
     27: type: 
      28: name: u8
     29: name: vps_sub_layer_ordering_info_present_flag
    30: decl: 
     31: type: 
     32: name: vps_extension_flag
   33: decl_stmt: 
    34: decl: 
     35: type: 
      36: name: u32
     37: name: i
    38: decl: 
     39: type: 
     40: name: j
   41: decl_stmt: 
    42: decl: 
     43: type: 
      44: name: s32
     45: name: vps_id
   46: decl_stmt: 
    47: decl: 
     48: type: 
      49: name: HEVC_VPS
      50: modifier: *
     51: name: vps
   52: decl_stmt: 
    53: decl: 
     54: type: 
      55: name: u8
     56: name: 
      57: name: layer_id_included_flag
      58: index: 
       59: expr: 
        60: name: MAX_LHVC_LAYERS
      61: index: 
       62: expr: 
        63: literal: 64
   64: comment: //nalu header already parsed
   65: expr_stmt: 
    66: expr: 
     67: name: vps_id
     68: operator: =
     69: call: 
      70: name: gf_bs_read_int_log
      71: argument_list: 
       72: argument: 
        73: expr: 
         74: name: bs
       75: argument: 
        76: expr: 
         77: literal: 4
       78: argument: 
        79: expr: 
         80: literal: "vps_id"
   81: if_stmt: 
    82: if: 
     83: condition: 
      84: expr: 
       85: name: vps_id
       86: operator: >=
       87: literal: 16
     88: block: 
      89: block_content: 
       90: return: 
        91: expr: 
         92: operator: -
         93: literal: 1
   94: expr_stmt: 
    95: expr: 
     96: name: vps
     97: operator: =
     98: operator: &
     99: name: 
      100: name: hevc
      101: operator: ->
      102: name: vps
      103: index: 
       104: expr: 
        105: name: vps_id
   106: expr_stmt: 
    107: expr: 
     108: name: 
      109: name: vps
      110: operator: ->
      111: name: bit_pos_vps_extensions
     112: operator: =
     113: operator: -
     114: literal: 1
   115: if_stmt: 
    116: if: 
     117: condition: 
      118: expr: 
       119: operator: !
       120: name: 
        121: name: vps
        122: operator: ->
        123: name: state
     124: block: 
      125: block_content: 
       126: expr_stmt: 
        127: expr: 
         128: name: 
          129: name: vps
          130: operator: ->
          131: name: id
         132: operator: =
         133: name: vps_id
       134: expr_stmt: 
        135: expr: 
         136: name: 
          137: name: vps
          138: operator: ->
          139: name: state
         140: operator: =
         141: literal: 1
   142: expr_stmt: 
    143: expr: 
     144: name: 
      145: name: vps
      146: operator: ->
      147: name: base_layer_internal_flag
     148: operator: =
     149: call: 
      150: name: gf_bs_read_int_log
      151: argument_list: 
       152: argument: 
        153: expr: 
         154: name: bs
       155: argument: 
        156: expr: 
         157: literal: 1
       158: argument: 
        159: expr: 
         160: literal: "base_layer_internal_flag"
   161: expr_stmt: 
    162: expr: 
     163: name: 
      164: name: vps
      165: operator: ->
      166: name: base_layer_available_flag
     167: operator: =
     168: call: 
      169: name: gf_bs_read_int_log
      170: argument_list: 
       171: argument: 
        172: expr: 
         173: name: bs
       174: argument: 
        175: expr: 
         176: literal: 1
       177: argument: 
        178: expr: 
         179: literal: "base_layer_available_flag"
   180: expr_stmt: 
    181: expr: 
     182: name: 
      183: name: vps
      184: operator: ->
      185: name: max_layers
     186: operator: =
     187: literal: 1
     188: operator: +
     189: call: 
      190: name: gf_bs_read_int_log
      191: argument_list: 
       192: argument: 
        193: expr: 
         194: name: bs
       195: argument: 
        196: expr: 
         197: literal: 6
       198: argument: 
        199: expr: 
         200: literal: "max_layers_minus1"
   201: if_stmt: 
    202: if: 
     203: condition: 
      204: expr: 
       205: name: 
        206: name: vps
        207: operator: ->
        208: name: max_layers
       209: operator: >
       210: name: MAX_LHVC_LAYERS
     211: block: 
      212: block_content: 
       213: expr_stmt: 
        214: expr: 
         215: call: 
          216: name: GF_LOG
          217: argument_list: 
           218: argument: 
            219: expr: 
             220: name: GF_LOG_ERROR
           221: argument: 
            222: expr: 
             223: name: GF_LOG_CODING
           224: argument: 
            225: expr: 
             226: operator: (
             227: literal: "[HEVC] sorry, %d layers in VPS but only %d supported\n"
             228: operator: ,
             229: name: 
              230: name: vps
              231: operator: ->
              232: name: max_layers
             233: operator: ,
             234: name: MAX_LHVC_LAYERS
             235: operator: )
       236: return: 
        237: expr: 
         238: operator: -
         239: literal: 1
   240: expr_stmt: 
    241: expr: 
     242: name: 
      243: name: vps
      244: operator: ->
      245: name: max_sub_layers
     246: operator: =
     247: call: 
      248: name: gf_bs_read_int_log
      249: argument_list: 
       250: argument: 
        251: expr: 
         252: name: bs
       253: argument: 
        254: expr: 
         255: literal: 3
       256: argument: 
        257: expr: 
         258: literal: "max_sub_layers_minus1"
     259: operator: +
     260: literal: 1
   261: expr_stmt: 
    262: expr: 
     263: name: 
      264: name: vps
      265: operator: ->
      266: name: temporal_id_nesting
     267: operator: =
     268: call: 
      269: name: gf_bs_read_int_log
      270: argument_list: 
       271: argument: 
        272: expr: 
         273: name: bs
       274: argument: 
        275: expr: 
         276: literal: 1
       277: argument: 
        278: expr: 
         279: literal: "temporal_id_nesting"
   280: expr_stmt: 
    281: expr: 
     282: call: 
      283: name: gf_bs_read_int_log
      284: argument_list: 
       285: argument: 
        286: expr: 
         287: name: bs
       288: argument: 
        289: expr: 
         290: literal: 16
       291: argument: 
        292: expr: 
         293: literal: "vps_reserved_ffff_16bits"
   294: expr_stmt: 
    295: expr: 
     296: call: 
      297: name: hevc_profile_tier_level
      298: argument_list: 
       299: argument: 
        300: expr: 
         301: name: bs
       302: argument: 
        303: expr: 
         304: literal: 1
       305: argument: 
        306: expr: 
         307: name: 
          308: name: vps
          309: operator: ->
          310: name: max_sub_layers
         311: operator: -
         312: literal: 1
       313: argument: 
        314: expr: 
         315: operator: &
         316: name: 
          317: name: vps
          318: operator: ->
          319: name: ptl
       320: argument: 
        321: expr: 
         322: literal: 0
   323: expr_stmt: 
    324: expr: 
     325: name: vps_sub_layer_ordering_info_present_flag
     326: operator: =
     327: call: 
      328: name: gf_bs_read_int_log
      329: argument_list: 
       330: argument: 
        331: expr: 
         332: name: bs
       333: argument: 
        334: expr: 
         335: literal: 1
       336: argument: 
        337: expr: 
         338: literal: "vps_sub_layer_ordering_info_present_flag"
   339: for: 
    340: control: 
     341: init: 
      342: expr: 
       343: name: i
       344: operator: =
       345: operator: (
       346: ternary: 
        347: condition: 
         348: expr: 
          349: name: vps_sub_layer_ordering_info_present_flag
        350: then: 
         351: expr: 
          352: literal: 0
        353: else: 
         354: expr: 
          355: name: 
           356: name: vps
           357: operator: ->
           358: name: max_sub_layers
          359: operator: -
          360: literal: 1
       361: operator: )
     362: condition: 
      363: expr: 
       364: name: i
       365: operator: <
       366: name: 
        367: name: vps
        368: operator: ->
        369: name: max_sub_layers
     370: incr: 
      371: expr: 
       372: name: i
       373: operator: ++
    374: block: 
     375: block_content: 
      376: expr_stmt: 
       377: expr: 
        378: call: 
         379: name: gf_bs_read_ue_log_idx
         380: argument_list: 
          381: argument: 
           382: expr: 
            383: name: bs
          384: argument: 
           385: expr: 
            386: literal: "vps_max_dec_pic_buffering_minus1"
          387: argument: 
           388: expr: 
            389: name: i
      390: expr_stmt: 
       391: expr: 
        392: call: 
         393: name: gf_bs_read_ue_log_idx
         394: argument_list: 
          395: argument: 
           396: expr: 
            397: name: bs
          398: argument: 
           399: expr: 
            400: literal: "vps_max_num_reorder_pics"
          401: argument: 
           402: expr: 
            403: name: i
      404: expr_stmt: 
       405: expr: 
        406: call: 
         407: name: gf_bs_read_ue_log_idx
         408: argument_list: 
          409: argument: 
           410: expr: 
            411: name: bs
          412: argument: 
           413: expr: 
            414: literal: "vps_max_latency_increase_plus1"
          415: argument: 
           416: expr: 
            417: name: i
   418: expr_stmt: 
    419: expr: 
     420: name: 
      421: name: vps
      422: operator: ->
      423: name: max_layer_id
     424: operator: =
     425: call: 
      426: name: gf_bs_read_int_log
      427: argument_list: 
       428: argument: 
        429: expr: 
         430: name: bs
       431: argument: 
        432: expr: 
         433: literal: 6
       434: argument: 
        435: expr: 
         436: literal: "max_layer_id"
   437: if_stmt: 
    438: if: 
     439: condition: 
      440: expr: 
       441: name: 
        442: name: vps
        443: operator: ->
        444: name: max_layer_id
       445: operator: >
       446: name: MAX_LHVC_LAYERS
     447: block: 
      448: block_content: 
       449: expr_stmt: 
        450: expr: 
         451: call: 
          452: name: GF_LOG
          453: argument_list: 
           454: argument: 
            455: expr: 
             456: name: GF_LOG_ERROR
           457: argument: 
            458: expr: 
             459: name: GF_LOG_CODING
           460: argument: 
            461: expr: 
             462: operator: (
             463: literal: "[HEVC] VPS max layer ID %u but GPAC only supports %u\n"
             464: operator: ,
             465: name: 
              466: name: vps
              467: operator: ->
              468: name: max_layer_id
             469: operator: ,
             470: name: MAX_LHVC_LAYERS
             471: operator: )
       472: return: 
        473: expr: 
         474: operator: -
         475: literal: 1
   476: expr_stmt: 
    477: expr: 
     478: name: 
      479: name: vps
      480: operator: ->
      481: name: num_layer_sets
     482: operator: =
     483: call: 
      484: name: gf_bs_read_ue_log
      485: argument_list: 
       486: argument: 
        487: expr: 
         488: name: bs
       489: argument: 
        490: expr: 
         491: literal: "num_layer_sets_minus1"
     492: operator: +
     493: literal: 1
   494: if_stmt: 
    495: if: 
     496: condition: 
      497: expr: 
       498: name: 
        499: name: vps
        500: operator: ->
        501: name: num_layer_sets
       502: operator: >
       503: name: MAX_LHVC_LAYERS
     504: block: 
      505: block_content: 
       506: expr_stmt: 
        507: expr: 
         508: call: 
          509: name: GF_LOG
          510: argument_list: 
           511: argument: 
            512: expr: 
             513: name: GF_LOG_ERROR
           514: argument: 
            515: expr: 
             516: name: GF_LOG_CODING
           517: argument: 
            518: expr: 
             519: operator: (
             520: literal: "[HEVC] Wrong number of layer sets in VPS %d\n"
             521: operator: ,
             522: name: 
              523: name: vps
              524: operator: ->
              525: name: num_layer_sets
             526: operator: )
       527: return: 
        528: expr: 
         529: operator: -
         530: literal: 1
   531: for: 
    532: control: 
     533: init: 
      534: expr: 
       535: name: i
       536: operator: =
       537: literal: 1
     538: condition: 
      539: expr: 
       540: name: i
       541: operator: <
       542: name: 
        543: name: vps
        544: operator: ->
        545: name: num_layer_sets
     546: incr: 
      547: expr: 
       548: name: i
       549: operator: ++
    550: block: 
     551: block_content: 
      552: for: 
       553: control: 
        554: init: 
         555: expr: 
          556: name: j
          557: operator: =
          558: literal: 0
        559: condition: 
         560: expr: 
          561: name: j
          562: operator: <=
          563: name: 
           564: name: vps
           565: operator: ->
           566: name: max_layer_id
        567: incr: 
         568: expr: 
          569: name: j
          570: operator: ++
       571: block: 
        572: block_content: 
         573: expr_stmt: 
          574: expr: 
           575: name: 
            576: name: layer_id_included_flag
            577: index: 
             578: expr: 
              579: name: i
            580: index: 
             581: expr: 
              582: name: j
           583: operator: =
           584: call: 
            585: name: gf_bs_read_int_log_idx2
            586: argument_list: 
             587: argument: 
              588: expr: 
               589: name: bs
             590: argument: 
              591: expr: 
               592: literal: 1
             593: argument: 
              594: expr: 
               595: literal: "layer_id_included_flag"
             596: argument: 
              597: expr: 
               598: name: i
             599: argument: 
              600: expr: 
               601: name: j
   602: expr_stmt: 
    603: expr: 
     604: name: 
      605: name: vps
      606: operator: ->
      607: name: num_layers_in_id_list
      608: index: 
       609: expr: 
        610: literal: 0
     611: operator: =
     612: literal: 1
   613: for: 
    614: control: 
     615: init: 
      616: expr: 
       617: name: i
       618: operator: =
       619: literal: 1
     620: condition: 
      621: expr: 
       622: name: i
       623: operator: <
       624: name: 
        625: name: vps
        626: operator: ->
        627: name: num_layer_sets
     628: incr: 
      629: expr: 
       630: name: i
       631: operator: ++
    632: block: 
     633: block_content: 
      634: decl_stmt: 
       635: decl: 
        636: type: 
         637: name: u32
        638: name: n
       639: decl: 
        640: type: 
        641: name: m
      642: expr_stmt: 
       643: expr: 
        644: name: n
        645: operator: =
        646: literal: 0
      647: for: 
       648: control: 
        649: init: 
         650: expr: 
          651: name: m
          652: operator: =
          653: literal: 0
        654: condition: 
         655: expr: 
          656: name: m
          657: operator: <=
          658: name: 
           659: name: vps
           660: operator: ->
           661: name: max_layer_id
        662: incr: 
         663: expr: 
          664: name: m
          665: operator: ++
       666: block: 
        667: block_content: 
         668: if_stmt: 
          669: if: 
           670: condition: 
            671: expr: 
             672: name: 
              673: name: layer_id_included_flag
              674: index: 
               675: expr: 
                676: name: i
              677: index: 
               678: expr: 
                679: name: m
           680: block: 
            681: block_content: 
             682: expr_stmt: 
              683: expr: 
               684: name: 
                685: name: vps
                686: operator: ->
                687: name: LayerSetLayerIdList
                688: index: 
                 689: expr: 
                  690: name: i
                691: index: 
                 692: expr: 
                  693: name: n
                  694: operator: ++
               695: operator: =
               696: name: m
             697: if_stmt: 
              698: if: 
               699: condition: 
                700: expr: 
                 701: name: 
                  702: name: vps
                  703: operator: ->
                  704: name: LayerSetLayerIdListMax
                  705: index: 
                   706: expr: 
                    707: name: i
                 708: operator: <
                 709: name: m
               710: block: 
                711: block_content: 
                 712: expr_stmt: 
                  713: expr: 
                   714: name: 
                    715: name: vps
                    716: operator: ->
                    717: name: LayerSetLayerIdListMax
                    718: index: 
                     719: expr: 
                      720: name: i
                   721: operator: =
                   722: name: m
      723: expr_stmt: 
       724: expr: 
        725: name: 
         726: name: vps
         727: operator: ->
         728: name: num_layers_in_id_list
         729: index: 
          730: expr: 
           731: name: i
        732: operator: =
        733: name: n
   734: if_stmt: 
    735: if: 
     736: condition: 
      737: expr: 
       738: call: 
        739: name: gf_bs_read_int_log
        740: argument_list: 
         741: argument: 
          742: expr: 
           743: name: bs
         744: argument: 
          745: expr: 
           746: literal: 1
         747: argument: 
          748: expr: 
           749: literal: "vps_timing_info_present_flag"
     750: block: 
      751: block_content: 
       752: decl_stmt: 
        753: decl: 
         754: type: 
          755: name: u32
         756: name: vps_num_hrd_parameters
       757: expr_stmt: 
        758: expr: 
         759: call: 
          760: name: gf_bs_read_int_log
          761: argument_list: 
           762: argument: 
            763: expr: 
             764: name: bs
           765: argument: 
            766: expr: 
             767: literal: 32
           768: argument: 
            769: expr: 
             770: literal: "vps_num_units_in_tick"
       771: expr_stmt: 
        772: expr: 
         773: call: 
          774: name: gf_bs_read_int_log
          775: argument_list: 
           776: argument: 
            777: expr: 
             778: name: bs
           779: argument: 
            780: expr: 
             781: literal: 32
           782: argument: 
            783: expr: 
             784: literal: "vps_time_scale"
       785: if_stmt: 
        786: if: 
         787: condition: 
          788: expr: 
           789: call: 
            790: name: gf_bs_read_int_log
            791: argument_list: 
             792: argument: 
              793: expr: 
               794: name: bs
             795: argument: 
              796: expr: 
               797: literal: 1
             798: argument: 
              799: expr: 
               800: literal: "vps_poc_proportional_to_timing_flag"
         801: block: 
          802: block_content: 
           803: expr_stmt: 
            804: expr: 
             805: call: 
              806: name: gf_bs_read_ue_log
              807: argument_list: 
               808: argument: 
                809: expr: 
                 810: name: bs
               811: argument: 
                812: expr: 
                 813: literal: "vps_num_ticks_poc_diff_one_minus1"
       814: expr_stmt: 
        815: expr: 
         816: name: vps_num_hrd_parameters
         817: operator: =
         818: call: 
          819: name: gf_bs_read_ue_log
          820: argument_list: 
           821: argument: 
            822: expr: 
             823: name: bs
           824: argument: 
            825: expr: 
             826: literal: "vps_num_hrd_parameters"
       827: for: 
        828: control: 
         829: init: 
          830: expr: 
           831: name: i
           832: operator: =
           833: literal: 0
         834: condition: 
          835: expr: 
           836: name: i
           837: operator: <
           838: name: vps_num_hrd_parameters
         839: incr: 
          840: expr: 
           841: name: i
           842: operator: ++
        843: block: 
         844: block_content: 
          845: decl_stmt: 
           846: decl: 
            847: type: 
             848: name: Bool
            849: name: cprms_present_flag
            850: init: 
             851: expr: 
              852: name: GF_TRUE
          853: expr_stmt: 
           854: expr: 
            855: call: 
             856: name: gf_bs_read_ue_log_idx
             857: argument_list: 
              858: argument: 
               859: expr: 
                860: name: bs
              861: argument: 
               862: expr: 
                863: literal: "hrd_layer_set_idx"
              864: argument: 
               865: expr: 
                866: name: i
          867: if_stmt: 
           868: if: 
            869: condition: 
             870: expr: 
              871: name: i
              872: operator: >
              873: literal: 0
            874: block: 
             875: block_content: 
              876: expr_stmt: 
               877: expr: 
                878: name: cprms_present_flag
                879: operator: =
                880: call: 
                 881: name: gf_bs_read_int_log
                 882: argument_list: 
                  883: argument: 
                   884: expr: 
                    885: name: bs
                  886: argument: 
                   887: expr: 
                    888: literal: 1
                  889: argument: 
                   890: expr: 
                    891: literal: "cprms_present_flag"
          892: expr_stmt: 
           893: expr: 
            894: call: 
             895: name: hevc_parse_hrd_parameters
             896: argument_list: 
              897: argument: 
               898: expr: 
                899: name: bs
              900: argument: 
               901: expr: 
                902: name: cprms_present_flag
              903: argument: 
               904: expr: 
                905: name: 
                 906: name: vps
                 907: operator: ->
                 908: name: max_sub_layers
                909: operator: -
                910: literal: 1
              911: argument: 
               912: expr: 
                913: name: i
   914: if_stmt: 
    915: if: 
     916: condition: 
      917: expr: 
       918: name: stop_at_vps_ext
     919: block: 
      920: block_content: 
       921: return: 
        922: expr: 
         923: name: vps_id
   924: expr_stmt: 
    925: expr: 
     926: name: vps_extension_flag
     927: operator: =
     928: call: 
      929: name: gf_bs_read_int_log
      930: argument_list: 
       931: argument: 
        932: expr: 
         933: name: bs
       934: argument: 
        935: expr: 
         936: literal: 1
       937: argument: 
        938: expr: 
         939: literal: "vps_extension_flag"
   940: if_stmt: 
    941: if: 
     942: condition: 
      943: expr: 
       944: name: vps_extension_flag
     945: block: 
      946: block_content: 
       947: decl_stmt: 
        948: decl: 
         949: type: 
          950: name: Bool
         951: name: res
       952: expr_stmt: 
        953: expr: 
         954: call: 
          955: name: gf_bs_align
          956: argument_list: 
           957: argument: 
            958: expr: 
             959: name: bs
       960: expr_stmt: 
        961: expr: 
         962: name: res
         963: operator: =
         964: call: 
          965: name: hevc_parse_vps_extension
          966: argument_list: 
           967: argument: 
            968: expr: 
             969: name: vps
           970: argument: 
            971: expr: 
             972: name: bs
       973: if_stmt: 
        974: if: 
         975: condition: 
          976: expr: 
           977: name: res
           978: operator: !=
           979: name: GF_TRUE
         980: block: 
          981: block_content: 
           982: expr_stmt: 
            983: expr: 
             984: call: 
              985: name: GF_LOG
              986: argument_list: 
               987: argument: 
                988: expr: 
                 989: name: GF_LOG_ERROR
               990: argument: 
                991: expr: 
                 992: name: GF_LOG_CODING
               993: argument: 
                994: expr: 
                 995: operator: (
                 996: literal: "[HEVC] Failed to parse VPS extensions\n"
                 997: operator: )
           998: return: 
            999: expr: 
             1000: operator: -
             1001: literal: 1
       1002: if_stmt: 
        1003: if: 
         1004: condition: 
          1005: expr: 
           1006: call: 
            1007: name: gf_bs_read_int_log
            1008: argument_list: 
             1009: argument: 
              1010: expr: 
               1011: name: bs
             1012: argument: 
              1013: expr: 
               1014: literal: 1
             1015: argument: 
              1016: expr: 
               1017: literal: "vps_extension2_flag"
         1018: block: 
          1019: block_content: 
           1020: if: 
            1021: directive: if
            1022: expr: 
             1023: literal: 0
           1024: comment: /*vps_extension_data_flag */
           1025: endif: 
            1026: directive: endif
   1027: return: 
    1028: expr: 
     1029: name: vps_id

----------------------------------------
0: function: 
 1: type: 
  2: specifier: static
  3: name: s32
 4: name: gf_hevc_read_vps_bs_internal
 5: parameter_list: 
  6: parameter: 
   7: decl: 
    8: type: 
     9: name: GF_BitStream
     10: modifier: *
    11: name: bs
  12: parameter: 
   13: decl: 
    14: type: 
     15: name: HEVCState
     16: modifier: *
    17: name: hevc
  18: parameter: 
   19: decl: 
    20: type: 
     21: name: Bool
    22: name: stop_at_vps_ext
 23: block: 
  24: block_content: 
   25: decl_stmt: 
    26: decl: 
     27: type: 
      28: name: u8
     29: name: vps_sub_layer_ordering_info_present_flag
    30: decl: 
     31: type: 
     32: name: vps_extension_flag
   33: decl_stmt: 
    34: decl: 
     35: type: 
      36: name: u32
     37: name: i
    38: decl: 
     39: type: 
     40: name: j
   41: decl_stmt: 
    42: decl: 
     43: type: 
      44: name: s32
     45: name: vps_id
   46: decl_stmt: 
    47: decl: 
     48: type: 
      49: name: HEVC_VPS
      50: modifier: *
     51: name: vps
   52: decl_stmt: 
    53: decl: 
     54: type: 
      55: name: u8
     56: name: 
      57: name: layer_id_included_flag
      58: index: 
       59: expr: 
        60: name: MAX_LHVC_LAYERS
      61: index: 
       62: expr: 
        63: literal: 64
   64: comment: //nalu header already parsed
   65: expr_stmt: 
    66: expr: 
     67: name: vps_id
     68: operator: =
     69: call: 
      70: name: gf_bs_read_int_log
      71: argument_list: 
       72: argument: 
        73: expr: 
         74: name: bs
       75: argument: 
        76: expr: 
         77: literal: 4
       78: argument: 
        79: expr: 
         80: literal: "vps_id"
   81: if_stmt: 
    82: if: 
     83: condition: 
      84: expr: 
       85: operator: (
       86: name: vps_id
       87: operator: <
       88: literal: 0
       89: operator: )
       90: operator: ||
       91: operator: (
       92: name: vps_id
       93: operator: >=
       94: literal: 16
       95: operator: )
     96: block: 
      97: block_content: 
       98: return: 
        99: expr: 
         100: operator: -
         101: literal: 1
   102: expr_stmt: 
    103: expr: 
     104: name: vps
     105: operator: =
     106: operator: &
     107: name: 
      108: name: hevc
      109: operator: ->
      110: name: vps
      111: index: 
       112: expr: 
        113: name: vps_id
   114: expr_stmt: 
    115: expr: 
     116: name: 
      117: name: vps
      118: operator: ->
      119: name: bit_pos_vps_extensions
     120: operator: =
     121: operator: -
     122: literal: 1
   123: if_stmt: 
    124: if: 
     125: condition: 
      126: expr: 
       127: operator: !
       128: name: 
        129: name: vps
        130: operator: ->
        131: name: state
     132: block: 
      133: block_content: 
       134: expr_stmt: 
        135: expr: 
         136: name: 
          137: name: vps
          138: operator: ->
          139: name: id
         140: operator: =
         141: name: vps_id
       142: expr_stmt: 
        143: expr: 
         144: name: 
          145: name: vps
          146: operator: ->
          147: name: state
         148: operator: =
         149: literal: 1
   150: expr_stmt: 
    151: expr: 
     152: name: 
      153: name: vps
      154: operator: ->
      155: name: base_layer_internal_flag
     156: operator: =
     157: call: 
      158: name: gf_bs_read_int_log
      159: argument_list: 
       160: argument: 
        161: expr: 
         162: name: bs
       163: argument: 
        164: expr: 
         165: literal: 1
       166: argument: 
        167: expr: 
         168: literal: "base_layer_internal_flag"
   169: expr_stmt: 
    170: expr: 
     171: name: 
      172: name: vps
      173: operator: ->
      174: name: base_layer_available_flag
     175: operator: =
     176: call: 
      177: name: gf_bs_read_int_log
      178: argument_list: 
       179: argument: 
        180: expr: 
         181: name: bs
       182: argument: 
        183: expr: 
         184: literal: 1
       185: argument: 
        186: expr: 
         187: literal: "base_layer_available_flag"
   188: expr_stmt: 
    189: expr: 
     190: name: 
      191: name: vps
      192: operator: ->
      193: name: max_layers
     194: operator: =
     195: literal: 1
     196: operator: +
     197: call: 
      198: name: gf_bs_read_int_log
      199: argument_list: 
       200: argument: 
        201: expr: 
         202: name: bs
       203: argument: 
        204: expr: 
         205: literal: 6
       206: argument: 
        207: expr: 
         208: literal: "max_layers_minus1"
   209: if_stmt: 
    210: if: 
     211: condition: 
      212: expr: 
       213: name: 
        214: name: vps
        215: operator: ->
        216: name: max_layers
       217: operator: >
       218: name: MAX_LHVC_LAYERS
     219: block: 
      220: block_content: 
       221: expr_stmt: 
        222: expr: 
         223: call: 
          224: name: GF_LOG
          225: argument_list: 
           226: argument: 
            227: expr: 
             228: name: GF_LOG_ERROR
           229: argument: 
            230: expr: 
             231: name: GF_LOG_CODING
           232: argument: 
            233: expr: 
             234: operator: (
             235: literal: "[HEVC] sorry, %d layers in VPS but only %d supported\n"
             236: operator: ,
             237: name: 
              238: name: vps
              239: operator: ->
              240: name: max_layers
             241: operator: ,
             242: name: MAX_LHVC_LAYERS
             243: operator: )
       244: return: 
        245: expr: 
         246: operator: -
         247: literal: 1
   248: expr_stmt: 
    249: expr: 
     250: name: 
      251: name: vps
      252: operator: ->
      253: name: max_sub_layers
     254: operator: =
     255: call: 
      256: name: gf_bs_read_int_log
      257: argument_list: 
       258: argument: 
        259: expr: 
         260: name: bs
       261: argument: 
        262: expr: 
         263: literal: 3
       264: argument: 
        265: expr: 
         266: literal: "max_sub_layers_minus1"
     267: operator: +
     268: literal: 1
   269: expr_stmt: 
    270: expr: 
     271: name: 
      272: name: vps
      273: operator: ->
      274: name: temporal_id_nesting
     275: operator: =
     276: call: 
      277: name: gf_bs_read_int_log
      278: argument_list: 
       279: argument: 
        280: expr: 
         281: name: bs
       282: argument: 
        283: expr: 
         284: literal: 1
       285: argument: 
        286: expr: 
         287: literal: "temporal_id_nesting"
   288: expr_stmt: 
    289: expr: 
     290: call: 
      291: name: gf_bs_read_int_log
      292: argument_list: 
       293: argument: 
        294: expr: 
         295: name: bs
       296: argument: 
        297: expr: 
         298: literal: 16
       299: argument: 
        300: expr: 
         301: literal: "vps_reserved_ffff_16bits"
   302: expr_stmt: 
    303: expr: 
     304: call: 
      305: name: hevc_profile_tier_level
      306: argument_list: 
       307: argument: 
        308: expr: 
         309: name: bs
       310: argument: 
        311: expr: 
         312: literal: 1
       313: argument: 
        314: expr: 
         315: name: 
          316: name: vps
          317: operator: ->
          318: name: max_sub_layers
         319: operator: -
         320: literal: 1
       321: argument: 
        322: expr: 
         323: operator: &
         324: name: 
          325: name: vps
          326: operator: ->
          327: name: ptl
       328: argument: 
        329: expr: 
         330: literal: 0
   331: expr_stmt: 
    332: expr: 
     333: name: vps_sub_layer_ordering_info_present_flag
     334: operator: =
     335: call: 
      336: name: gf_bs_read_int_log
      337: argument_list: 
       338: argument: 
        339: expr: 
         340: name: bs
       341: argument: 
        342: expr: 
         343: literal: 1
       344: argument: 
        345: expr: 
         346: literal: "vps_sub_layer_ordering_info_present_flag"
   347: for: 
    348: control: 
     349: init: 
      350: expr: 
       351: name: i
       352: operator: =
       353: operator: (
       354: ternary: 
        355: condition: 
         356: expr: 
          357: name: vps_sub_layer_ordering_info_present_flag
        358: then: 
         359: expr: 
          360: literal: 0
        361: else: 
         362: expr: 
          363: name: 
           364: name: vps
           365: operator: ->
           366: name: max_sub_layers
          367: operator: -
          368: literal: 1
       369: operator: )
     370: condition: 
      371: expr: 
       372: name: i
       373: operator: <
       374: name: 
        375: name: vps
        376: operator: ->
        377: name: max_sub_layers
     378: incr: 
      379: expr: 
       380: name: i
       381: operator: ++
    382: block: 
     383: block_content: 
      384: expr_stmt: 
       385: expr: 
        386: call: 
         387: name: gf_bs_read_ue_log_idx
         388: argument_list: 
          389: argument: 
           390: expr: 
            391: name: bs
          392: argument: 
           393: expr: 
            394: literal: "vps_max_dec_pic_buffering_minus1"
          395: argument: 
           396: expr: 
            397: name: i
      398: expr_stmt: 
       399: expr: 
        400: call: 
         401: name: gf_bs_read_ue_log_idx
         402: argument_list: 
          403: argument: 
           404: expr: 
            405: name: bs
          406: argument: 
           407: expr: 
            408: literal: "vps_max_num_reorder_pics"
          409: argument: 
           410: expr: 
            411: name: i
      412: expr_stmt: 
       413: expr: 
        414: call: 
         415: name: gf_bs_read_ue_log_idx
         416: argument_list: 
          417: argument: 
           418: expr: 
            419: name: bs
          420: argument: 
           421: expr: 
            422: literal: "vps_max_latency_increase_plus1"
          423: argument: 
           424: expr: 
            425: name: i
   426: expr_stmt: 
    427: expr: 
     428: name: 
      429: name: vps
      430: operator: ->
      431: name: max_layer_id
     432: operator: =
     433: call: 
      434: name: gf_bs_read_int_log
      435: argument_list: 
       436: argument: 
        437: expr: 
         438: name: bs
       439: argument: 
        440: expr: 
         441: literal: 6
       442: argument: 
        443: expr: 
         444: literal: "max_layer_id"
   445: if_stmt: 
    446: if: 
     447: condition: 
      448: expr: 
       449: name: 
        450: name: vps
        451: operator: ->
        452: name: max_layer_id
       453: operator: >
       454: name: MAX_LHVC_LAYERS
     455: block: 
      456: block_content: 
       457: expr_stmt: 
        458: expr: 
         459: call: 
          460: name: GF_LOG
          461: argument_list: 
           462: argument: 
            463: expr: 
             464: name: GF_LOG_ERROR
           465: argument: 
            466: expr: 
             467: name: GF_LOG_CODING
           468: argument: 
            469: expr: 
             470: operator: (
             471: literal: "[HEVC] VPS max layer ID %u but GPAC only supports %u\n"
             472: operator: ,
             473: name: 
              474: name: vps
              475: operator: ->
              476: name: max_layer_id
             477: operator: ,
             478: name: MAX_LHVC_LAYERS
             479: operator: )
       480: return: 
        481: expr: 
         482: operator: -
         483: literal: 1
   484: expr_stmt: 
    485: expr: 
     486: name: 
      487: name: vps
      488: operator: ->
      489: name: num_layer_sets
     490: operator: =
     491: call: 
      492: name: gf_bs_read_ue_log
      493: argument_list: 
       494: argument: 
        495: expr: 
         496: name: bs
       497: argument: 
        498: expr: 
         499: literal: "num_layer_sets_minus1"
     500: operator: +
     501: literal: 1
   502: if_stmt: 
    503: if: 
     504: condition: 
      505: expr: 
       506: name: 
        507: name: vps
        508: operator: ->
        509: name: num_layer_sets
       510: operator: >
       511: name: MAX_LHVC_LAYERS
     512: block: 
      513: block_content: 
       514: expr_stmt: 
        515: expr: 
         516: call: 
          517: name: GF_LOG
          518: argument_list: 
           519: argument: 
            520: expr: 
             521: name: GF_LOG_ERROR
           522: argument: 
            523: expr: 
             524: name: GF_LOG_CODING
           525: argument: 
            526: expr: 
             527: operator: (
             528: literal: "[HEVC] Wrong number of layer sets in VPS %d\n"
             529: operator: ,
             530: name: 
              531: name: vps
              532: operator: ->
              533: name: num_layer_sets
             534: operator: )
       535: return: 
        536: expr: 
         537: operator: -
         538: literal: 1
   539: for: 
    540: control: 
     541: init: 
      542: expr: 
       543: name: i
       544: operator: =
       545: literal: 1
     546: condition: 
      547: expr: 
       548: name: i
       549: operator: <
       550: name: 
        551: name: vps
        552: operator: ->
        553: name: num_layer_sets
     554: incr: 
      555: expr: 
       556: name: i
       557: operator: ++
    558: block: 
     559: block_content: 
      560: for: 
       561: control: 
        562: init: 
         563: expr: 
          564: name: j
          565: operator: =
          566: literal: 0
        567: condition: 
         568: expr: 
          569: name: j
          570: operator: <=
          571: name: 
           572: name: vps
           573: operator: ->
           574: name: max_layer_id
        575: incr: 
         576: expr: 
          577: name: j
          578: operator: ++
       579: block: 
        580: block_content: 
         581: expr_stmt: 
          582: expr: 
           583: name: 
            584: name: layer_id_included_flag
            585: index: 
             586: expr: 
              587: name: i
            588: index: 
             589: expr: 
              590: name: j
           591: operator: =
           592: call: 
            593: name: gf_bs_read_int_log_idx2
            594: argument_list: 
             595: argument: 
              596: expr: 
               597: name: bs
             598: argument: 
              599: expr: 
               600: literal: 1
             601: argument: 
              602: expr: 
               603: literal: "layer_id_included_flag"
             604: argument: 
              605: expr: 
               606: name: i
             607: argument: 
              608: expr: 
               609: name: j
   610: expr_stmt: 
    611: expr: 
     612: name: 
      613: name: vps
      614: operator: ->
      615: name: num_layers_in_id_list
      616: index: 
       617: expr: 
        618: literal: 0
     619: operator: =
     620: literal: 1
   621: for: 
    622: control: 
     623: init: 
      624: expr: 
       625: name: i
       626: operator: =
       627: literal: 1
     628: condition: 
      629: expr: 
       630: name: i
       631: operator: <
       632: name: 
        633: name: vps
        634: operator: ->
        635: name: num_layer_sets
     636: incr: 
      637: expr: 
       638: name: i
       639: operator: ++
    640: block: 
     641: block_content: 
      642: decl_stmt: 
       643: decl: 
        644: type: 
         645: name: u32
        646: name: n
       647: decl: 
        648: type: 
        649: name: m
      650: expr_stmt: 
       651: expr: 
        652: name: n
        653: operator: =
        654: literal: 0
      655: for: 
       656: control: 
        657: init: 
         658: expr: 
          659: name: m
          660: operator: =
          661: literal: 0
        662: condition: 
         663: expr: 
          664: name: m
          665: operator: <=
          666: name: 
           667: name: vps
           668: operator: ->
           669: name: max_layer_id
        670: incr: 
         671: expr: 
          672: name: m
          673: operator: ++
       674: block: 
        675: block_content: 
         676: if_stmt: 
          677: if: 
           678: condition: 
            679: expr: 
             680: name: 
              681: name: layer_id_included_flag
              682: index: 
               683: expr: 
                684: name: i
              685: index: 
               686: expr: 
                687: name: m
           688: block: 
            689: block_content: 
             690: expr_stmt: 
              691: expr: 
               692: name: 
                693: name: vps
                694: operator: ->
                695: name: LayerSetLayerIdList
                696: index: 
                 697: expr: 
                  698: name: i
                699: index: 
                 700: expr: 
                  701: name: n
                  702: operator: ++
               703: operator: =
               704: name: m
             705: if_stmt: 
              706: if: 
               707: condition: 
                708: expr: 
                 709: name: 
                  710: name: vps
                  711: operator: ->
                  712: name: LayerSetLayerIdListMax
                  713: index: 
                   714: expr: 
                    715: name: i
                 716: operator: <
                 717: name: m
               718: block: 
                719: block_content: 
                 720: expr_stmt: 
                  721: expr: 
                   722: name: 
                    723: name: vps
                    724: operator: ->
                    725: name: LayerSetLayerIdListMax
                    726: index: 
                     727: expr: 
                      728: name: i
                   729: operator: =
                   730: name: m
      731: expr_stmt: 
       732: expr: 
        733: name: 
         734: name: vps
         735: operator: ->
         736: name: num_layers_in_id_list
         737: index: 
          738: expr: 
           739: name: i
        740: operator: =
        741: name: n
   742: if_stmt: 
    743: if: 
     744: condition: 
      745: expr: 
       746: call: 
        747: name: gf_bs_read_int_log
        748: argument_list: 
         749: argument: 
          750: expr: 
           751: name: bs
         752: argument: 
          753: expr: 
           754: literal: 1
         755: argument: 
          756: expr: 
           757: literal: "vps_timing_info_present_flag"
     758: block: 
      759: block_content: 
       760: decl_stmt: 
        761: decl: 
         762: type: 
          763: name: u32
         764: name: vps_num_hrd_parameters
       765: expr_stmt: 
        766: expr: 
         767: call: 
          768: name: gf_bs_read_int_log
          769: argument_list: 
           770: argument: 
            771: expr: 
             772: name: bs
           773: argument: 
            774: expr: 
             775: literal: 32
           776: argument: 
            777: expr: 
             778: literal: "vps_num_units_in_tick"
       779: expr_stmt: 
        780: expr: 
         781: call: 
          782: name: gf_bs_read_int_log
          783: argument_list: 
           784: argument: 
            785: expr: 
             786: name: bs
           787: argument: 
            788: expr: 
             789: literal: 32
           790: argument: 
            791: expr: 
             792: literal: "vps_time_scale"
       793: if_stmt: 
        794: if: 
         795: condition: 
          796: expr: 
           797: call: 
            798: name: gf_bs_read_int_log
            799: argument_list: 
             800: argument: 
              801: expr: 
               802: name: bs
             803: argument: 
              804: expr: 
               805: literal: 1
             806: argument: 
              807: expr: 
               808: literal: "vps_poc_proportional_to_timing_flag"
         809: block: 
          810: block_content: 
           811: expr_stmt: 
            812: expr: 
             813: call: 
              814: name: gf_bs_read_ue_log
              815: argument_list: 
               816: argument: 
                817: expr: 
                 818: name: bs
               819: argument: 
                820: expr: 
                 821: literal: "vps_num_ticks_poc_diff_one_minus1"
       822: expr_stmt: 
        823: expr: 
         824: name: vps_num_hrd_parameters
         825: operator: =
         826: call: 
          827: name: gf_bs_read_ue_log
          828: argument_list: 
           829: argument: 
            830: expr: 
             831: name: bs
           832: argument: 
            833: expr: 
             834: literal: "vps_num_hrd_parameters"
       835: for: 
        836: control: 
         837: init: 
          838: expr: 
           839: name: i
           840: operator: =
           841: literal: 0
         842: condition: 
          843: expr: 
           844: name: i
           845: operator: <
           846: name: vps_num_hrd_parameters
         847: incr: 
          848: expr: 
           849: name: i
           850: operator: ++
        851: block: 
         852: block_content: 
          853: decl_stmt: 
           854: decl: 
            855: type: 
             856: name: Bool
            857: name: cprms_present_flag
            858: init: 
             859: expr: 
              860: name: GF_TRUE
          861: expr_stmt: 
           862: expr: 
            863: call: 
             864: name: gf_bs_read_ue_log_idx
             865: argument_list: 
              866: argument: 
               867: expr: 
                868: name: bs
              869: argument: 
               870: expr: 
                871: literal: "hrd_layer_set_idx"
              872: argument: 
               873: expr: 
                874: name: i
          875: if_stmt: 
           876: if: 
            877: condition: 
             878: expr: 
              879: name: i
              880: operator: >
              881: literal: 0
            882: block: 
             883: block_content: 
              884: expr_stmt: 
               885: expr: 
                886: name: cprms_present_flag
                887: operator: =
                888: call: 
                 889: name: gf_bs_read_int_log
                 890: argument_list: 
                  891: argument: 
                   892: expr: 
                    893: name: bs
                  894: argument: 
                   895: expr: 
                    896: literal: 1
                  897: argument: 
                   898: expr: 
                    899: literal: "cprms_present_flag"
          900: expr_stmt: 
           901: expr: 
            902: call: 
             903: name: hevc_parse_hrd_parameters
             904: argument_list: 
              905: argument: 
               906: expr: 
                907: name: bs
              908: argument: 
               909: expr: 
                910: name: cprms_present_flag
              911: argument: 
               912: expr: 
                913: name: 
                 914: name: vps
                 915: operator: ->
                 916: name: max_sub_layers
                917: operator: -
                918: literal: 1
              919: argument: 
               920: expr: 
                921: name: i
   922: if_stmt: 
    923: if: 
     924: condition: 
      925: expr: 
       926: name: stop_at_vps_ext
     927: block: 
      928: block_content: 
       929: return: 
        930: expr: 
         931: name: vps_id
   932: expr_stmt: 
    933: expr: 
     934: name: vps_extension_flag
     935: operator: =
     936: call: 
      937: name: gf_bs_read_int_log
      938: argument_list: 
       939: argument: 
        940: expr: 
         941: name: bs
       942: argument: 
        943: expr: 
         944: literal: 1
       945: argument: 
        946: expr: 
         947: literal: "vps_extension_flag"
   948: if_stmt: 
    949: if: 
     950: condition: 
      951: expr: 
       952: name: vps_extension_flag
     953: block: 
      954: block_content: 
       955: decl_stmt: 
        956: decl: 
         957: type: 
          958: name: Bool
         959: name: res
       960: expr_stmt: 
        961: expr: 
         962: call: 
          963: name: gf_bs_align
          964: argument_list: 
           965: argument: 
            966: expr: 
             967: name: bs
       968: expr_stmt: 
        969: expr: 
         970: name: res
         971: operator: =
         972: call: 
          973: name: hevc_parse_vps_extension
          974: argument_list: 
           975: argument: 
            976: expr: 
             977: name: vps
           978: argument: 
            979: expr: 
             980: name: bs
       981: if_stmt: 
        982: if: 
         983: condition: 
          984: expr: 
           985: name: res
           986: operator: !=
           987: name: GF_TRUE
         988: block: 
          989: block_content: 
           990: expr_stmt: 
            991: expr: 
             992: call: 
              993: name: GF_LOG
              994: argument_list: 
               995: argument: 
                996: expr: 
                 997: name: GF_LOG_ERROR
               998: argument: 
                999: expr: 
                 1000: name: GF_LOG_CODING
               1001: argument: 
                1002: expr: 
                 1003: operator: (
                 1004: literal: "[HEVC] Failed to parse VPS extensions\n"
                 1005: operator: )
           1006: return: 
            1007: expr: 
             1008: operator: -
             1009: literal: 1
       1010: if_stmt: 
        1011: if: 
         1012: condition: 
          1013: expr: 
           1014: call: 
            1015: name: gf_bs_read_int_log
            1016: argument_list: 
             1017: argument: 
              1018: expr: 
               1019: name: bs
             1020: argument: 
              1021: expr: 
               1022: literal: 1
             1023: argument: 
              1024: expr: 
               1025: literal: "vps_extension2_flag"
         1026: block: 
          1027: block_content: 
           1028: if: 
            1029: directive: if
            1030: expr: 
             1031: literal: 0
           1032: comment: /*vps_extension_data_flag */
           1033: endif: 
            1034: directive: endif
   1035: return: 
    1036: expr: 
     1037: name: vps_id
=====
0: name: gf_hevc_read_vps_bs_internal

----------------------------------------
=====
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: u8
    6: name: vps_sub_layer_ordering_info_present_flag
   7: decl: 
    8: type: 
    9: name: vps_extension_flag
  10: decl_stmt: 
   11: decl: 
    12: type: 
     13: name: u32
    14: name: i
   15: decl: 
    16: type: 
    17: name: j
  18: decl_stmt: 
   19: decl: 
    20: type: 
     21: name: s32
    22: name: vps_id
  23: decl_stmt: 
   24: decl: 
    25: type: 
     26: name: HEVC_VPS
     27: modifier: *
    28: name: vps
  29: decl_stmt: 
   30: decl: 
    31: type: 
     32: name: u8
    33: name: 
     34: name: layer_id_included_flag
     35: index: 
      36: expr: 
       37: name: MAX_LHVC_LAYERS
     38: index: 
      39: expr: 
       40: literal: 64
  41: comment: //nalu header already parsed
  42: expr_stmt: 
   43: expr: 
    44: name: vps_id
    45: operator: =
    46: call: 
     47: name: gf_bs_read_int_log
     48: argument_list: 
      49: argument: 
       50: expr: 
        51: name: bs
      52: argument: 
       53: expr: 
        54: literal: 4
      55: argument: 
       56: expr: 
        57: literal: "vps_id"
  58: if_stmt: 
   59: if: 
    60: condition: 
     61: expr: 
      62: name: vps_id
      63: operator: >=
      64: literal: 16
    65: block: 
     66: block_content: 
      67: return: 
       68: expr: 
        69: operator: -
        70: literal: 1
  71: expr_stmt: 
   72: expr: 
    73: name: vps
    74: operator: =
    75: operator: &
    76: name: 
     77: name: hevc
     78: operator: ->
     79: name: vps
     80: index: 
      81: expr: 
       82: name: vps_id
  83: expr_stmt: 
   84: expr: 
    85: name: 
     86: name: vps
     87: operator: ->
     88: name: bit_pos_vps_extensions
    89: operator: =
    90: operator: -
    91: literal: 1
  92: if_stmt: 
   93: if: 
    94: condition: 
     95: expr: 
      96: operator: !
      97: name: 
       98: name: vps
       99: operator: ->
       100: name: state
    101: block: 
     102: block_content: 
      103: expr_stmt: 
       104: expr: 
        105: name: 
         106: name: vps
         107: operator: ->
         108: name: id
        109: operator: =
        110: name: vps_id
      111: expr_stmt: 
       112: expr: 
        113: name: 
         114: name: vps
         115: operator: ->
         116: name: state
        117: operator: =
        118: literal: 1
  119: expr_stmt: 
   120: expr: 
    121: name: 
     122: name: vps
     123: operator: ->
     124: name: base_layer_internal_flag
    125: operator: =
    126: call: 
     127: name: gf_bs_read_int_log
     128: argument_list: 
      129: argument: 
       130: expr: 
        131: name: bs
      132: argument: 
       133: expr: 
        134: literal: 1
      135: argument: 
       136: expr: 
        137: literal: "base_layer_internal_flag"
  138: expr_stmt: 
   139: expr: 
    140: name: 
     141: name: vps
     142: operator: ->
     143: name: base_layer_available_flag
    144: operator: =
    145: call: 
     146: name: gf_bs_read_int_log
     147: argument_list: 
      148: argument: 
       149: expr: 
        150: name: bs
      151: argument: 
       152: expr: 
        153: literal: 1
      154: argument: 
       155: expr: 
        156: literal: "base_layer_available_flag"
  157: expr_stmt: 
   158: expr: 
    159: name: 
     160: name: vps
     161: operator: ->
     162: name: max_layers
    163: operator: =
    164: literal: 1
    165: operator: +
    166: call: 
     167: name: gf_bs_read_int_log
     168: argument_list: 
      169: argument: 
       170: expr: 
        171: name: bs
      172: argument: 
       173: expr: 
        174: literal: 6
      175: argument: 
       176: expr: 
        177: literal: "max_layers_minus1"
  178: if_stmt: 
   179: if: 
    180: condition: 
     181: expr: 
      182: name: 
       183: name: vps
       184: operator: ->
       185: name: max_layers
      186: operator: >
      187: name: MAX_LHVC_LAYERS
    188: block: 
     189: block_content: 
      190: expr_stmt: 
       191: expr: 
        192: call: 
         193: name: GF_LOG
         194: argument_list: 
          195: argument: 
           196: expr: 
            197: name: GF_LOG_ERROR
          198: argument: 
           199: expr: 
            200: name: GF_LOG_CODING
          201: argument: 
           202: expr: 
            203: operator: (
            204: literal: "[HEVC] sorry, %d layers in VPS but only %d supported\n"
            205: operator: ,
            206: name: 
             207: name: vps
             208: operator: ->
             209: name: max_layers
            210: operator: ,
            211: name: MAX_LHVC_LAYERS
            212: operator: )
      213: return: 
       214: expr: 
        215: operator: -
        216: literal: 1
  217: expr_stmt: 
   218: expr: 
    219: name: 
     220: name: vps
     221: operator: ->
     222: name: max_sub_layers
    223: operator: =
    224: call: 
     225: name: gf_bs_read_int_log
     226: argument_list: 
      227: argument: 
       228: expr: 
        229: name: bs
      230: argument: 
       231: expr: 
        232: literal: 3
      233: argument: 
       234: expr: 
        235: literal: "max_sub_layers_minus1"
    236: operator: +
    237: literal: 1
  238: expr_stmt: 
   239: expr: 
    240: name: 
     241: name: vps
     242: operator: ->
     243: name: temporal_id_nesting
    244: operator: =
    245: call: 
     246: name: gf_bs_read_int_log
     247: argument_list: 
      248: argument: 
       249: expr: 
        250: name: bs
      251: argument: 
       252: expr: 
        253: literal: 1
      254: argument: 
       255: expr: 
        256: literal: "temporal_id_nesting"
  257: expr_stmt: 
   258: expr: 
    259: call: 
     260: name: gf_bs_read_int_log
     261: argument_list: 
      262: argument: 
       263: expr: 
        264: name: bs
      265: argument: 
       266: expr: 
        267: literal: 16
      268: argument: 
       269: expr: 
        270: literal: "vps_reserved_ffff_16bits"
  271: expr_stmt: 
   272: expr: 
    273: call: 
     274: name: hevc_profile_tier_level
     275: argument_list: 
      276: argument: 
       277: expr: 
        278: name: bs
      279: argument: 
       280: expr: 
        281: literal: 1
      282: argument: 
       283: expr: 
        284: name: 
         285: name: vps
         286: operator: ->
         287: name: max_sub_layers
        288: operator: -
        289: literal: 1
      290: argument: 
       291: expr: 
        292: operator: &
        293: name: 
         294: name: vps
         295: operator: ->
         296: name: ptl
      297: argument: 
       298: expr: 
        299: literal: 0
  300: expr_stmt: 
   301: expr: 
    302: name: vps_sub_layer_ordering_info_present_flag
    303: operator: =
    304: call: 
     305: name: gf_bs_read_int_log
     306: argument_list: 
      307: argument: 
       308: expr: 
        309: name: bs
      310: argument: 
       311: expr: 
        312: literal: 1
      313: argument: 
       314: expr: 
        315: literal: "vps_sub_layer_ordering_info_present_flag"
  316: for: 
   317: control: 
    318: init: 
     319: expr: 
      320: name: i
      321: operator: =
      322: operator: (
      323: ternary: 
       324: condition: 
        325: expr: 
         326: name: vps_sub_layer_ordering_info_present_flag
       327: then: 
        328: expr: 
         329: literal: 0
       330: else: 
        331: expr: 
         332: name: 
          333: name: vps
          334: operator: ->
          335: name: max_sub_layers
         336: operator: -
         337: literal: 1
      338: operator: )
    339: condition: 
     340: expr: 
      341: name: i
      342: operator: <
      343: name: 
       344: name: vps
       345: operator: ->
       346: name: max_sub_layers
    347: incr: 
     348: expr: 
      349: name: i
      350: operator: ++
   351: block: 
    352: block_content: 
     353: expr_stmt: 
      354: expr: 
       355: call: 
        356: name: gf_bs_read_ue_log_idx
        357: argument_list: 
         358: argument: 
          359: expr: 
           360: name: bs
         361: argument: 
          362: expr: 
           363: literal: "vps_max_dec_pic_buffering_minus1"
         364: argument: 
          365: expr: 
           366: name: i
     367: expr_stmt: 
      368: expr: 
       369: call: 
        370: name: gf_bs_read_ue_log_idx
        371: argument_list: 
         372: argument: 
          373: expr: 
           374: name: bs
         375: argument: 
          376: expr: 
           377: literal: "vps_max_num_reorder_pics"
         378: argument: 
          379: expr: 
           380: name: i
     381: expr_stmt: 
      382: expr: 
       383: call: 
        384: name: gf_bs_read_ue_log_idx
        385: argument_list: 
         386: argument: 
          387: expr: 
           388: name: bs
         389: argument: 
          390: expr: 
           391: literal: "vps_max_latency_increase_plus1"
         392: argument: 
          393: expr: 
           394: name: i
  395: expr_stmt: 
   396: expr: 
    397: name: 
     398: name: vps
     399: operator: ->
     400: name: max_layer_id
    401: operator: =
    402: call: 
     403: name: gf_bs_read_int_log
     404: argument_list: 
      405: argument: 
       406: expr: 
        407: name: bs
      408: argument: 
       409: expr: 
        410: literal: 6
      411: argument: 
       412: expr: 
        413: literal: "max_layer_id"
  414: if_stmt: 
   415: if: 
    416: condition: 
     417: expr: 
      418: name: 
       419: name: vps
       420: operator: ->
       421: name: max_layer_id
      422: operator: >
      423: name: MAX_LHVC_LAYERS
    424: block: 
     425: block_content: 
      426: expr_stmt: 
       427: expr: 
        428: call: 
         429: name: GF_LOG
         430: argument_list: 
          431: argument: 
           432: expr: 
            433: name: GF_LOG_ERROR
          434: argument: 
           435: expr: 
            436: name: GF_LOG_CODING
          437: argument: 
           438: expr: 
            439: operator: (
            440: literal: "[HEVC] VPS max layer ID %u but GPAC only supports %u\n"
            441: operator: ,
            442: name: 
             443: name: vps
             444: operator: ->
             445: name: max_layer_id
            446: operator: ,
            447: name: MAX_LHVC_LAYERS
            448: operator: )
      449: return: 
       450: expr: 
        451: operator: -
        452: literal: 1
  453: expr_stmt: 
   454: expr: 
    455: name: 
     456: name: vps
     457: operator: ->
     458: name: num_layer_sets
    459: operator: =
    460: call: 
     461: name: gf_bs_read_ue_log
     462: argument_list: 
      463: argument: 
       464: expr: 
        465: name: bs
      466: argument: 
       467: expr: 
        468: literal: "num_layer_sets_minus1"
    469: operator: +
    470: literal: 1
  471: if_stmt: 
   472: if: 
    473: condition: 
     474: expr: 
      475: name: 
       476: name: vps
       477: operator: ->
       478: name: num_layer_sets
      479: operator: >
      480: name: MAX_LHVC_LAYERS
    481: block: 
     482: block_content: 
      483: expr_stmt: 
       484: expr: 
        485: call: 
         486: name: GF_LOG
         487: argument_list: 
          488: argument: 
           489: expr: 
            490: name: GF_LOG_ERROR
          491: argument: 
           492: expr: 
            493: name: GF_LOG_CODING
          494: argument: 
           495: expr: 
            496: operator: (
            497: literal: "[HEVC] Wrong number of layer sets in VPS %d\n"
            498: operator: ,
            499: name: 
             500: name: vps
             501: operator: ->
             502: name: num_layer_sets
            503: operator: )
      504: return: 
       505: expr: 
        506: operator: -
        507: literal: 1
  508: for: 
   509: control: 
    510: init: 
     511: expr: 
      512: name: i
      513: operator: =
      514: literal: 1
    515: condition: 
     516: expr: 
      517: name: i
      518: operator: <
      519: name: 
       520: name: vps
       521: operator: ->
       522: name: num_layer_sets
    523: incr: 
     524: expr: 
      525: name: i
      526: operator: ++
   527: block: 
    528: block_content: 
     529: for: 
      530: control: 
       531: init: 
        532: expr: 
         533: name: j
         534: operator: =
         535: literal: 0
       536: condition: 
        537: expr: 
         538: name: j
         539: operator: <=
         540: name: 
          541: name: vps
          542: operator: ->
          543: name: max_layer_id
       544: incr: 
        545: expr: 
         546: name: j
         547: operator: ++
      548: block: 
       549: block_content: 
        550: expr_stmt: 
         551: expr: 
          552: name: 
           553: name: layer_id_included_flag
           554: index: 
            555: expr: 
             556: name: i
           557: index: 
            558: expr: 
             559: name: j
          560: operator: =
          561: call: 
           562: name: gf_bs_read_int_log_idx2
           563: argument_list: 
            564: argument: 
             565: expr: 
              566: name: bs
            567: argument: 
             568: expr: 
              569: literal: 1
            570: argument: 
             571: expr: 
              572: literal: "layer_id_included_flag"
            573: argument: 
             574: expr: 
              575: name: i
            576: argument: 
             577: expr: 
              578: name: j
  579: expr_stmt: 
   580: expr: 
    581: name: 
     582: name: vps
     583: operator: ->
     584: name: num_layers_in_id_list
     585: index: 
      586: expr: 
       587: literal: 0
    588: operator: =
    589: literal: 1
  590: for: 
   591: control: 
    592: init: 
     593: expr: 
      594: name: i
      595: operator: =
      596: literal: 1
    597: condition: 
     598: expr: 
      599: name: i
      600: operator: <
      601: name: 
       602: name: vps
       603: operator: ->
       604: name: num_layer_sets
    605: incr: 
     606: expr: 
      607: name: i
      608: operator: ++
   609: block: 
    610: block_content: 
     611: decl_stmt: 
      612: decl: 
       613: type: 
        614: name: u32
       615: name: n
      616: decl: 
       617: type: 
       618: name: m
     619: expr_stmt: 
      620: expr: 
       621: name: n
       622: operator: =
       623: literal: 0
     624: for: 
      625: control: 
       626: init: 
        627: expr: 
         628: name: m
         629: operator: =
         630: literal: 0
       631: condition: 
        632: expr: 
         633: name: m
         634: operator: <=
         635: name: 
          636: name: vps
          637: operator: ->
          638: name: max_layer_id
       639: incr: 
        640: expr: 
         641: name: m
         642: operator: ++
      643: block: 
       644: block_content: 
        645: if_stmt: 
         646: if: 
          647: condition: 
           648: expr: 
            649: name: 
             650: name: layer_id_included_flag
             651: index: 
              652: expr: 
               653: name: i
             654: index: 
              655: expr: 
               656: name: m
          657: block: 
           658: block_content: 
            659: expr_stmt: 
             660: expr: 
              661: name: 
               662: name: vps
               663: operator: ->
               664: name: LayerSetLayerIdList
               665: index: 
                666: expr: 
                 667: name: i
               668: index: 
                669: expr: 
                 670: name: n
                 671: operator: ++
              672: operator: =
              673: name: m
            674: if_stmt: 
             675: if: 
              676: condition: 
               677: expr: 
                678: name: 
                 679: name: vps
                 680: operator: ->
                 681: name: LayerSetLayerIdListMax
                 682: index: 
                  683: expr: 
                   684: name: i
                685: operator: <
                686: name: m
              687: block: 
               688: block_content: 
                689: expr_stmt: 
                 690: expr: 
                  691: name: 
                   692: name: vps
                   693: operator: ->
                   694: name: LayerSetLayerIdListMax
                   695: index: 
                    696: expr: 
                     697: name: i
                  698: operator: =
                  699: name: m
     700: expr_stmt: 
      701: expr: 
       702: name: 
        703: name: vps
        704: operator: ->
        705: name: num_layers_in_id_list
        706: index: 
         707: expr: 
          708: name: i
       709: operator: =
       710: name: n
  711: if_stmt: 
   712: if: 
    713: condition: 
     714: expr: 
      715: call: 
       716: name: gf_bs_read_int_log
       717: argument_list: 
        718: argument: 
         719: expr: 
          720: name: bs
        721: argument: 
         722: expr: 
          723: literal: 1
        724: argument: 
         725: expr: 
          726: literal: "vps_timing_info_present_flag"
    727: block: 
     728: block_content: 
      729: decl_stmt: 
       730: decl: 
        731: type: 
         732: name: u32
        733: name: vps_num_hrd_parameters
      734: expr_stmt: 
       735: expr: 
        736: call: 
         737: name: gf_bs_read_int_log
         738: argument_list: 
          739: argument: 
           740: expr: 
            741: name: bs
          742: argument: 
           743: expr: 
            744: literal: 32
          745: argument: 
           746: expr: 
            747: literal: "vps_num_units_in_tick"
      748: expr_stmt: 
       749: expr: 
        750: call: 
         751: name: gf_bs_read_int_log
         752: argument_list: 
          753: argument: 
           754: expr: 
            755: name: bs
          756: argument: 
           757: expr: 
            758: literal: 32
          759: argument: 
           760: expr: 
            761: literal: "vps_time_scale"
      762: if_stmt: 
       763: if: 
        764: condition: 
         765: expr: 
          766: call: 
           767: name: gf_bs_read_int_log
           768: argument_list: 
            769: argument: 
             770: expr: 
              771: name: bs
            772: argument: 
             773: expr: 
              774: literal: 1
            775: argument: 
             776: expr: 
              777: literal: "vps_poc_proportional_to_timing_flag"
        778: block: 
         779: block_content: 
          780: expr_stmt: 
           781: expr: 
            782: call: 
             783: name: gf_bs_read_ue_log
             784: argument_list: 
              785: argument: 
               786: expr: 
                787: name: bs
              788: argument: 
               789: expr: 
                790: literal: "vps_num_ticks_poc_diff_one_minus1"
      791: expr_stmt: 
       792: expr: 
        793: name: vps_num_hrd_parameters
        794: operator: =
        795: call: 
         796: name: gf_bs_read_ue_log
         797: argument_list: 
          798: argument: 
           799: expr: 
            800: name: bs
          801: argument: 
           802: expr: 
            803: literal: "vps_num_hrd_parameters"
      804: for: 
       805: control: 
        806: init: 
         807: expr: 
          808: name: i
          809: operator: =
          810: literal: 0
        811: condition: 
         812: expr: 
          813: name: i
          814: operator: <
          815: name: vps_num_hrd_parameters
        816: incr: 
         817: expr: 
          818: name: i
          819: operator: ++
       820: block: 
        821: block_content: 
         822: decl_stmt: 
          823: decl: 
           824: type: 
            825: name: Bool
           826: name: cprms_present_flag
           827: init: 
            828: expr: 
             829: name: GF_TRUE
         830: expr_stmt: 
          831: expr: 
           832: call: 
            833: name: gf_bs_read_ue_log_idx
            834: argument_list: 
             835: argument: 
              836: expr: 
               837: name: bs
             838: argument: 
              839: expr: 
               840: literal: "hrd_layer_set_idx"
             841: argument: 
              842: expr: 
               843: name: i
         844: if_stmt: 
          845: if: 
           846: condition: 
            847: expr: 
             848: name: i
             849: operator: >
             850: literal: 0
           851: block: 
            852: block_content: 
             853: expr_stmt: 
              854: expr: 
               855: name: cprms_present_flag
               856: operator: =
               857: call: 
                858: name: gf_bs_read_int_log
                859: argument_list: 
                 860: argument: 
                  861: expr: 
                   862: name: bs
                 863: argument: 
                  864: expr: 
                   865: literal: 1
                 866: argument: 
                  867: expr: 
                   868: literal: "cprms_present_flag"
         869: expr_stmt: 
          870: expr: 
           871: call: 
            872: name: hevc_parse_hrd_parameters
            873: argument_list: 
             874: argument: 
              875: expr: 
               876: name: bs
             877: argument: 
              878: expr: 
               879: name: cprms_present_flag
             880: argument: 
              881: expr: 
               882: name: 
                883: name: vps
                884: operator: ->
                885: name: max_sub_layers
               886: operator: -
               887: literal: 1
             888: argument: 
              889: expr: 
               890: name: i
  891: if_stmt: 
   892: if: 
    893: condition: 
     894: expr: 
      895: name: stop_at_vps_ext
    896: block: 
     897: block_content: 
      898: return: 
       899: expr: 
        900: name: vps_id
  901: expr_stmt: 
   902: expr: 
    903: name: vps_extension_flag
    904: operator: =
    905: call: 
     906: name: gf_bs_read_int_log
     907: argument_list: 
      908: argument: 
       909: expr: 
        910: name: bs
      911: argument: 
       912: expr: 
        913: literal: 1
      914: argument: 
       915: expr: 
        916: literal: "vps_extension_flag"
  917: if_stmt: 
   918: if: 
    919: condition: 
     920: expr: 
      921: name: vps_extension_flag
    922: block: 
     923: block_content: 
      924: decl_stmt: 
       925: decl: 
        926: type: 
         927: name: Bool
        928: name: res
      929: expr_stmt: 
       930: expr: 
        931: call: 
         932: name: gf_bs_align
         933: argument_list: 
          934: argument: 
           935: expr: 
            936: name: bs
      937: expr_stmt: 
       938: expr: 
        939: name: res
        940: operator: =
        941: call: 
         942: name: hevc_parse_vps_extension
         943: argument_list: 
          944: argument: 
           945: expr: 
            946: name: vps
          947: argument: 
           948: expr: 
            949: name: bs
      950: if_stmt: 
       951: if: 
        952: condition: 
         953: expr: 
          954: name: res
          955: operator: !=
          956: name: GF_TRUE
        957: block: 
         958: block_content: 
          959: expr_stmt: 
           960: expr: 
            961: call: 
             962: name: GF_LOG
             963: argument_list: 
              964: argument: 
               965: expr: 
                966: name: GF_LOG_ERROR
              967: argument: 
               968: expr: 
                969: name: GF_LOG_CODING
              970: argument: 
               971: expr: 
                972: operator: (
                973: literal: "[HEVC] Failed to parse VPS extensions\n"
                974: operator: )
          975: return: 
           976: expr: 
            977: operator: -
            978: literal: 1
      979: if_stmt: 
       980: if: 
        981: condition: 
         982: expr: 
          983: call: 
           984: name: gf_bs_read_int_log
           985: argument_list: 
            986: argument: 
             987: expr: 
              988: name: bs
            989: argument: 
             990: expr: 
              991: literal: 1
            992: argument: 
             993: expr: 
              994: literal: "vps_extension2_flag"
        995: block: 
         996: block_content: 
          997: if: 
           998: directive: if
           999: expr: 
            1000: literal: 0
          1001: comment: /*vps_extension_data_flag */
          1002: endif: 
           1003: directive: endif
  1004: return: 
   1005: expr: 
    1006: name: vps_id

----------------------------------------
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: u8
    6: name: vps_sub_layer_ordering_info_present_flag
   7: decl: 
    8: type: 
    9: name: vps_extension_flag
  10: decl_stmt: 
   11: decl: 
    12: type: 
     13: name: u32
    14: name: i
   15: decl: 
    16: type: 
    17: name: j
  18: decl_stmt: 
   19: decl: 
    20: type: 
     21: name: s32
    22: name: vps_id
  23: decl_stmt: 
   24: decl: 
    25: type: 
     26: name: HEVC_VPS
     27: modifier: *
    28: name: vps
  29: decl_stmt: 
   30: decl: 
    31: type: 
     32: name: u8
    33: name: 
     34: name: layer_id_included_flag
     35: index: 
      36: expr: 
       37: name: MAX_LHVC_LAYERS
     38: index: 
      39: expr: 
       40: literal: 64
  41: comment: //nalu header already parsed
  42: expr_stmt: 
   43: expr: 
    44: name: vps_id
    45: operator: =
    46: call: 
     47: name: gf_bs_read_int_log
     48: argument_list: 
      49: argument: 
       50: expr: 
        51: name: bs
      52: argument: 
       53: expr: 
        54: literal: 4
      55: argument: 
       56: expr: 
        57: literal: "vps_id"
  58: if_stmt: 
   59: if: 
    60: condition: 
     61: expr: 
      62: operator: (
      63: name: vps_id
      64: operator: <
      65: literal: 0
      66: operator: )
      67: operator: ||
      68: operator: (
      69: name: vps_id
      70: operator: >=
      71: literal: 16
      72: operator: )
    73: block: 
     74: block_content: 
      75: return: 
       76: expr: 
        77: operator: -
        78: literal: 1
  79: expr_stmt: 
   80: expr: 
    81: name: vps
    82: operator: =
    83: operator: &
    84: name: 
     85: name: hevc
     86: operator: ->
     87: name: vps
     88: index: 
      89: expr: 
       90: name: vps_id
  91: expr_stmt: 
   92: expr: 
    93: name: 
     94: name: vps
     95: operator: ->
     96: name: bit_pos_vps_extensions
    97: operator: =
    98: operator: -
    99: literal: 1
  100: if_stmt: 
   101: if: 
    102: condition: 
     103: expr: 
      104: operator: !
      105: name: 
       106: name: vps
       107: operator: ->
       108: name: state
    109: block: 
     110: block_content: 
      111: expr_stmt: 
       112: expr: 
        113: name: 
         114: name: vps
         115: operator: ->
         116: name: id
        117: operator: =
        118: name: vps_id
      119: expr_stmt: 
       120: expr: 
        121: name: 
         122: name: vps
         123: operator: ->
         124: name: state
        125: operator: =
        126: literal: 1
  127: expr_stmt: 
   128: expr: 
    129: name: 
     130: name: vps
     131: operator: ->
     132: name: base_layer_internal_flag
    133: operator: =
    134: call: 
     135: name: gf_bs_read_int_log
     136: argument_list: 
      137: argument: 
       138: expr: 
        139: name: bs
      140: argument: 
       141: expr: 
        142: literal: 1
      143: argument: 
       144: expr: 
        145: literal: "base_layer_internal_flag"
  146: expr_stmt: 
   147: expr: 
    148: name: 
     149: name: vps
     150: operator: ->
     151: name: base_layer_available_flag
    152: operator: =
    153: call: 
     154: name: gf_bs_read_int_log
     155: argument_list: 
      156: argument: 
       157: expr: 
        158: name: bs
      159: argument: 
       160: expr: 
        161: literal: 1
      162: argument: 
       163: expr: 
        164: literal: "base_layer_available_flag"
  165: expr_stmt: 
   166: expr: 
    167: name: 
     168: name: vps
     169: operator: ->
     170: name: max_layers
    171: operator: =
    172: literal: 1
    173: operator: +
    174: call: 
     175: name: gf_bs_read_int_log
     176: argument_list: 
      177: argument: 
       178: expr: 
        179: name: bs
      180: argument: 
       181: expr: 
        182: literal: 6
      183: argument: 
       184: expr: 
        185: literal: "max_layers_minus1"
  186: if_stmt: 
   187: if: 
    188: condition: 
     189: expr: 
      190: name: 
       191: name: vps
       192: operator: ->
       193: name: max_layers
      194: operator: >
      195: name: MAX_LHVC_LAYERS
    196: block: 
     197: block_content: 
      198: expr_stmt: 
       199: expr: 
        200: call: 
         201: name: GF_LOG
         202: argument_list: 
          203: argument: 
           204: expr: 
            205: name: GF_LOG_ERROR
          206: argument: 
           207: expr: 
            208: name: GF_LOG_CODING
          209: argument: 
           210: expr: 
            211: operator: (
            212: literal: "[HEVC] sorry, %d layers in VPS but only %d supported\n"
            213: operator: ,
            214: name: 
             215: name: vps
             216: operator: ->
             217: name: max_layers
            218: operator: ,
            219: name: MAX_LHVC_LAYERS
            220: operator: )
      221: return: 
       222: expr: 
        223: operator: -
        224: literal: 1
  225: expr_stmt: 
   226: expr: 
    227: name: 
     228: name: vps
     229: operator: ->
     230: name: max_sub_layers
    231: operator: =
    232: call: 
     233: name: gf_bs_read_int_log
     234: argument_list: 
      235: argument: 
       236: expr: 
        237: name: bs
      238: argument: 
       239: expr: 
        240: literal: 3
      241: argument: 
       242: expr: 
        243: literal: "max_sub_layers_minus1"
    244: operator: +
    245: literal: 1
  246: expr_stmt: 
   247: expr: 
    248: name: 
     249: name: vps
     250: operator: ->
     251: name: temporal_id_nesting
    252: operator: =
    253: call: 
     254: name: gf_bs_read_int_log
     255: argument_list: 
      256: argument: 
       257: expr: 
        258: name: bs
      259: argument: 
       260: expr: 
        261: literal: 1
      262: argument: 
       263: expr: 
        264: literal: "temporal_id_nesting"
  265: expr_stmt: 
   266: expr: 
    267: call: 
     268: name: gf_bs_read_int_log
     269: argument_list: 
      270: argument: 
       271: expr: 
        272: name: bs
      273: argument: 
       274: expr: 
        275: literal: 16
      276: argument: 
       277: expr: 
        278: literal: "vps_reserved_ffff_16bits"
  279: expr_stmt: 
   280: expr: 
    281: call: 
     282: name: hevc_profile_tier_level
     283: argument_list: 
      284: argument: 
       285: expr: 
        286: name: bs
      287: argument: 
       288: expr: 
        289: literal: 1
      290: argument: 
       291: expr: 
        292: name: 
         293: name: vps
         294: operator: ->
         295: name: max_sub_layers
        296: operator: -
        297: literal: 1
      298: argument: 
       299: expr: 
        300: operator: &
        301: name: 
         302: name: vps
         303: operator: ->
         304: name: ptl
      305: argument: 
       306: expr: 
        307: literal: 0
  308: expr_stmt: 
   309: expr: 
    310: name: vps_sub_layer_ordering_info_present_flag
    311: operator: =
    312: call: 
     313: name: gf_bs_read_int_log
     314: argument_list: 
      315: argument: 
       316: expr: 
        317: name: bs
      318: argument: 
       319: expr: 
        320: literal: 1
      321: argument: 
       322: expr: 
        323: literal: "vps_sub_layer_ordering_info_present_flag"
  324: for: 
   325: control: 
    326: init: 
     327: expr: 
      328: name: i
      329: operator: =
      330: operator: (
      331: ternary: 
       332: condition: 
        333: expr: 
         334: name: vps_sub_layer_ordering_info_present_flag
       335: then: 
        336: expr: 
         337: literal: 0
       338: else: 
        339: expr: 
         340: name: 
          341: name: vps
          342: operator: ->
          343: name: max_sub_layers
         344: operator: -
         345: literal: 1
      346: operator: )
    347: condition: 
     348: expr: 
      349: name: i
      350: operator: <
      351: name: 
       352: name: vps
       353: operator: ->
       354: name: max_sub_layers
    355: incr: 
     356: expr: 
      357: name: i
      358: operator: ++
   359: block: 
    360: block_content: 
     361: expr_stmt: 
      362: expr: 
       363: call: 
        364: name: gf_bs_read_ue_log_idx
        365: argument_list: 
         366: argument: 
          367: expr: 
           368: name: bs
         369: argument: 
          370: expr: 
           371: literal: "vps_max_dec_pic_buffering_minus1"
         372: argument: 
          373: expr: 
           374: name: i
     375: expr_stmt: 
      376: expr: 
       377: call: 
        378: name: gf_bs_read_ue_log_idx
        379: argument_list: 
         380: argument: 
          381: expr: 
           382: name: bs
         383: argument: 
          384: expr: 
           385: literal: "vps_max_num_reorder_pics"
         386: argument: 
          387: expr: 
           388: name: i
     389: expr_stmt: 
      390: expr: 
       391: call: 
        392: name: gf_bs_read_ue_log_idx
        393: argument_list: 
         394: argument: 
          395: expr: 
           396: name: bs
         397: argument: 
          398: expr: 
           399: literal: "vps_max_latency_increase_plus1"
         400: argument: 
          401: expr: 
           402: name: i
  403: expr_stmt: 
   404: expr: 
    405: name: 
     406: name: vps
     407: operator: ->
     408: name: max_layer_id
    409: operator: =
    410: call: 
     411: name: gf_bs_read_int_log
     412: argument_list: 
      413: argument: 
       414: expr: 
        415: name: bs
      416: argument: 
       417: expr: 
        418: literal: 6
      419: argument: 
       420: expr: 
        421: literal: "max_layer_id"
  422: if_stmt: 
   423: if: 
    424: condition: 
     425: expr: 
      426: name: 
       427: name: vps
       428: operator: ->
       429: name: max_layer_id
      430: operator: >
      431: name: MAX_LHVC_LAYERS
    432: block: 
     433: block_content: 
      434: expr_stmt: 
       435: expr: 
        436: call: 
         437: name: GF_LOG
         438: argument_list: 
          439: argument: 
           440: expr: 
            441: name: GF_LOG_ERROR
          442: argument: 
           443: expr: 
            444: name: GF_LOG_CODING
          445: argument: 
           446: expr: 
            447: operator: (
            448: literal: "[HEVC] VPS max layer ID %u but GPAC only supports %u\n"
            449: operator: ,
            450: name: 
             451: name: vps
             452: operator: ->
             453: name: max_layer_id
            454: operator: ,
            455: name: MAX_LHVC_LAYERS
            456: operator: )
      457: return: 
       458: expr: 
        459: operator: -
        460: literal: 1
  461: expr_stmt: 
   462: expr: 
    463: name: 
     464: name: vps
     465: operator: ->
     466: name: num_layer_sets
    467: operator: =
    468: call: 
     469: name: gf_bs_read_ue_log
     470: argument_list: 
      471: argument: 
       472: expr: 
        473: name: bs
      474: argument: 
       475: expr: 
        476: literal: "num_layer_sets_minus1"
    477: operator: +
    478: literal: 1
  479: if_stmt: 
   480: if: 
    481: condition: 
     482: expr: 
      483: name: 
       484: name: vps
       485: operator: ->
       486: name: num_layer_sets
      487: operator: >
      488: name: MAX_LHVC_LAYERS
    489: block: 
     490: block_content: 
      491: expr_stmt: 
       492: expr: 
        493: call: 
         494: name: GF_LOG
         495: argument_list: 
          496: argument: 
           497: expr: 
            498: name: GF_LOG_ERROR
          499: argument: 
           500: expr: 
            501: name: GF_LOG_CODING
          502: argument: 
           503: expr: 
            504: operator: (
            505: literal: "[HEVC] Wrong number of layer sets in VPS %d\n"
            506: operator: ,
            507: name: 
             508: name: vps
             509: operator: ->
             510: name: num_layer_sets
            511: operator: )
      512: return: 
       513: expr: 
        514: operator: -
        515: literal: 1
  516: for: 
   517: control: 
    518: init: 
     519: expr: 
      520: name: i
      521: operator: =
      522: literal: 1
    523: condition: 
     524: expr: 
      525: name: i
      526: operator: <
      527: name: 
       528: name: vps
       529: operator: ->
       530: name: num_layer_sets
    531: incr: 
     532: expr: 
      533: name: i
      534: operator: ++
   535: block: 
    536: block_content: 
     537: for: 
      538: control: 
       539: init: 
        540: expr: 
         541: name: j
         542: operator: =
         543: literal: 0
       544: condition: 
        545: expr: 
         546: name: j
         547: operator: <=
         548: name: 
          549: name: vps
          550: operator: ->
          551: name: max_layer_id
       552: incr: 
        553: expr: 
         554: name: j
         555: operator: ++
      556: block: 
       557: block_content: 
        558: expr_stmt: 
         559: expr: 
          560: name: 
           561: name: layer_id_included_flag
           562: index: 
            563: expr: 
             564: name: i
           565: index: 
            566: expr: 
             567: name: j
          568: operator: =
          569: call: 
           570: name: gf_bs_read_int_log_idx2
           571: argument_list: 
            572: argument: 
             573: expr: 
              574: name: bs
            575: argument: 
             576: expr: 
              577: literal: 1
            578: argument: 
             579: expr: 
              580: literal: "layer_id_included_flag"
            581: argument: 
             582: expr: 
              583: name: i
            584: argument: 
             585: expr: 
              586: name: j
  587: expr_stmt: 
   588: expr: 
    589: name: 
     590: name: vps
     591: operator: ->
     592: name: num_layers_in_id_list
     593: index: 
      594: expr: 
       595: literal: 0
    596: operator: =
    597: literal: 1
  598: for: 
   599: control: 
    600: init: 
     601: expr: 
      602: name: i
      603: operator: =
      604: literal: 1
    605: condition: 
     606: expr: 
      607: name: i
      608: operator: <
      609: name: 
       610: name: vps
       611: operator: ->
       612: name: num_layer_sets
    613: incr: 
     614: expr: 
      615: name: i
      616: operator: ++
   617: block: 
    618: block_content: 
     619: decl_stmt: 
      620: decl: 
       621: type: 
        622: name: u32
       623: name: n
      624: decl: 
       625: type: 
       626: name: m
     627: expr_stmt: 
      628: expr: 
       629: name: n
       630: operator: =
       631: literal: 0
     632: for: 
      633: control: 
       634: init: 
        635: expr: 
         636: name: m
         637: operator: =
         638: literal: 0
       639: condition: 
        640: expr: 
         641: name: m
         642: operator: <=
         643: name: 
          644: name: vps
          645: operator: ->
          646: name: max_layer_id
       647: incr: 
        648: expr: 
         649: name: m
         650: operator: ++
      651: block: 
       652: block_content: 
        653: if_stmt: 
         654: if: 
          655: condition: 
           656: expr: 
            657: name: 
             658: name: layer_id_included_flag
             659: index: 
              660: expr: 
               661: name: i
             662: index: 
              663: expr: 
               664: name: m
          665: block: 
           666: block_content: 
            667: expr_stmt: 
             668: expr: 
              669: name: 
               670: name: vps
               671: operator: ->
               672: name: LayerSetLayerIdList
               673: index: 
                674: expr: 
                 675: name: i
               676: index: 
                677: expr: 
                 678: name: n
                 679: operator: ++
              680: operator: =
              681: name: m
            682: if_stmt: 
             683: if: 
              684: condition: 
               685: expr: 
                686: name: 
                 687: name: vps
                 688: operator: ->
                 689: name: LayerSetLayerIdListMax
                 690: index: 
                  691: expr: 
                   692: name: i
                693: operator: <
                694: name: m
              695: block: 
               696: block_content: 
                697: expr_stmt: 
                 698: expr: 
                  699: name: 
                   700: name: vps
                   701: operator: ->
                   702: name: LayerSetLayerIdListMax
                   703: index: 
                    704: expr: 
                     705: name: i
                  706: operator: =
                  707: name: m
     708: expr_stmt: 
      709: expr: 
       710: name: 
        711: name: vps
        712: operator: ->
        713: name: num_layers_in_id_list
        714: index: 
         715: expr: 
          716: name: i
       717: operator: =
       718: name: n
  719: if_stmt: 
   720: if: 
    721: condition: 
     722: expr: 
      723: call: 
       724: name: gf_bs_read_int_log
       725: argument_list: 
        726: argument: 
         727: expr: 
          728: name: bs
        729: argument: 
         730: expr: 
          731: literal: 1
        732: argument: 
         733: expr: 
          734: literal: "vps_timing_info_present_flag"
    735: block: 
     736: block_content: 
      737: decl_stmt: 
       738: decl: 
        739: type: 
         740: name: u32
        741: name: vps_num_hrd_parameters
      742: expr_stmt: 
       743: expr: 
        744: call: 
         745: name: gf_bs_read_int_log
         746: argument_list: 
          747: argument: 
           748: expr: 
            749: name: bs
          750: argument: 
           751: expr: 
            752: literal: 32
          753: argument: 
           754: expr: 
            755: literal: "vps_num_units_in_tick"
      756: expr_stmt: 
       757: expr: 
        758: call: 
         759: name: gf_bs_read_int_log
         760: argument_list: 
          761: argument: 
           762: expr: 
            763: name: bs
          764: argument: 
           765: expr: 
            766: literal: 32
          767: argument: 
           768: expr: 
            769: literal: "vps_time_scale"
      770: if_stmt: 
       771: if: 
        772: condition: 
         773: expr: 
          774: call: 
           775: name: gf_bs_read_int_log
           776: argument_list: 
            777: argument: 
             778: expr: 
              779: name: bs
            780: argument: 
             781: expr: 
              782: literal: 1
            783: argument: 
             784: expr: 
              785: literal: "vps_poc_proportional_to_timing_flag"
        786: block: 
         787: block_content: 
          788: expr_stmt: 
           789: expr: 
            790: call: 
             791: name: gf_bs_read_ue_log
             792: argument_list: 
              793: argument: 
               794: expr: 
                795: name: bs
              796: argument: 
               797: expr: 
                798: literal: "vps_num_ticks_poc_diff_one_minus1"
      799: expr_stmt: 
       800: expr: 
        801: name: vps_num_hrd_parameters
        802: operator: =
        803: call: 
         804: name: gf_bs_read_ue_log
         805: argument_list: 
          806: argument: 
           807: expr: 
            808: name: bs
          809: argument: 
           810: expr: 
            811: literal: "vps_num_hrd_parameters"
      812: for: 
       813: control: 
        814: init: 
         815: expr: 
          816: name: i
          817: operator: =
          818: literal: 0
        819: condition: 
         820: expr: 
          821: name: i
          822: operator: <
          823: name: vps_num_hrd_parameters
        824: incr: 
         825: expr: 
          826: name: i
          827: operator: ++
       828: block: 
        829: block_content: 
         830: decl_stmt: 
          831: decl: 
           832: type: 
            833: name: Bool
           834: name: cprms_present_flag
           835: init: 
            836: expr: 
             837: name: GF_TRUE
         838: expr_stmt: 
          839: expr: 
           840: call: 
            841: name: gf_bs_read_ue_log_idx
            842: argument_list: 
             843: argument: 
              844: expr: 
               845: name: bs
             846: argument: 
              847: expr: 
               848: literal: "hrd_layer_set_idx"
             849: argument: 
              850: expr: 
               851: name: i
         852: if_stmt: 
          853: if: 
           854: condition: 
            855: expr: 
             856: name: i
             857: operator: >
             858: literal: 0
           859: block: 
            860: block_content: 
             861: expr_stmt: 
              862: expr: 
               863: name: cprms_present_flag
               864: operator: =
               865: call: 
                866: name: gf_bs_read_int_log
                867: argument_list: 
                 868: argument: 
                  869: expr: 
                   870: name: bs
                 871: argument: 
                  872: expr: 
                   873: literal: 1
                 874: argument: 
                  875: expr: 
                   876: literal: "cprms_present_flag"
         877: expr_stmt: 
          878: expr: 
           879: call: 
            880: name: hevc_parse_hrd_parameters
            881: argument_list: 
             882: argument: 
              883: expr: 
               884: name: bs
             885: argument: 
              886: expr: 
               887: name: cprms_present_flag
             888: argument: 
              889: expr: 
               890: name: 
                891: name: vps
                892: operator: ->
                893: name: max_sub_layers
               894: operator: -
               895: literal: 1
             896: argument: 
              897: expr: 
               898: name: i
  899: if_stmt: 
   900: if: 
    901: condition: 
     902: expr: 
      903: name: stop_at_vps_ext
    904: block: 
     905: block_content: 
      906: return: 
       907: expr: 
        908: name: vps_id
  909: expr_stmt: 
   910: expr: 
    911: name: vps_extension_flag
    912: operator: =
    913: call: 
     914: name: gf_bs_read_int_log
     915: argument_list: 
      916: argument: 
       917: expr: 
        918: name: bs
      919: argument: 
       920: expr: 
        921: literal: 1
      922: argument: 
       923: expr: 
        924: literal: "vps_extension_flag"
  925: if_stmt: 
   926: if: 
    927: condition: 
     928: expr: 
      929: name: vps_extension_flag
    930: block: 
     931: block_content: 
      932: decl_stmt: 
       933: decl: 
        934: type: 
         935: name: Bool
        936: name: res
      937: expr_stmt: 
       938: expr: 
        939: call: 
         940: name: gf_bs_align
         941: argument_list: 
          942: argument: 
           943: expr: 
            944: name: bs
      945: expr_stmt: 
       946: expr: 
        947: name: res
        948: operator: =
        949: call: 
         950: name: hevc_parse_vps_extension
         951: argument_list: 
          952: argument: 
           953: expr: 
            954: name: vps
          955: argument: 
           956: expr: 
            957: name: bs
      958: if_stmt: 
       959: if: 
        960: condition: 
         961: expr: 
          962: name: res
          963: operator: !=
          964: name: GF_TRUE
        965: block: 
         966: block_content: 
          967: expr_stmt: 
           968: expr: 
            969: call: 
             970: name: GF_LOG
             971: argument_list: 
              972: argument: 
               973: expr: 
                974: name: GF_LOG_ERROR
              975: argument: 
               976: expr: 
                977: name: GF_LOG_CODING
              978: argument: 
               979: expr: 
                980: operator: (
                981: literal: "[HEVC] Failed to parse VPS extensions\n"
                982: operator: )
          983: return: 
           984: expr: 
            985: operator: -
            986: literal: 1
      987: if_stmt: 
       988: if: 
        989: condition: 
         990: expr: 
          991: call: 
           992: name: gf_bs_read_int_log
           993: argument_list: 
            994: argument: 
             995: expr: 
              996: name: bs
            997: argument: 
             998: expr: 
              999: literal: 1
            1000: argument: 
             1001: expr: 
              1002: literal: "vps_extension2_flag"
        1003: block: 
         1004: block_content: 
          1005: if: 
           1006: directive: if
           1007: expr: 
            1008: literal: 0
          1009: comment: /*vps_extension_data_flag */
          1010: endif: 
           1011: directive: endif
  1012: return: 
   1013: expr: 
    1014: name: vps_id
=====
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: u8
   5: name: vps_sub_layer_ordering_info_present_flag
  6: decl: 
   7: type: 
   8: name: vps_extension_flag
 9: decl_stmt: 
  10: decl: 
   11: type: 
    12: name: u32
   13: name: i
  14: decl: 
   15: type: 
   16: name: j
 17: decl_stmt: 
  18: decl: 
   19: type: 
    20: name: s32
   21: name: vps_id
 22: decl_stmt: 
  23: decl: 
   24: type: 
    25: name: HEVC_VPS
    26: modifier: *
   27: name: vps
 28: decl_stmt: 
  29: decl: 
   30: type: 
    31: name: u8
   32: name: 
    33: name: layer_id_included_flag
    34: index: 
     35: expr: 
      36: name: MAX_LHVC_LAYERS
    37: index: 
     38: expr: 
      39: literal: 64
 40: comment: //nalu header already parsed
 41: expr_stmt: 
  42: expr: 
   43: name: vps_id
   44: operator: =
   45: call: 
    46: name: gf_bs_read_int_log
    47: argument_list: 
     48: argument: 
      49: expr: 
       50: name: bs
     51: argument: 
      52: expr: 
       53: literal: 4
     54: argument: 
      55: expr: 
       56: literal: "vps_id"
 57: if_stmt: 
  58: if: 
   59: condition: 
    60: expr: 
     61: name: vps_id
     62: operator: >=
     63: literal: 16
   64: block: 
    65: block_content: 
     66: return: 
      67: expr: 
       68: operator: -
       69: literal: 1
 70: expr_stmt: 
  71: expr: 
   72: name: vps
   73: operator: =
   74: operator: &
   75: name: 
    76: name: hevc
    77: operator: ->
    78: name: vps
    79: index: 
     80: expr: 
      81: name: vps_id
 82: expr_stmt: 
  83: expr: 
   84: name: 
    85: name: vps
    86: operator: ->
    87: name: bit_pos_vps_extensions
   88: operator: =
   89: operator: -
   90: literal: 1
 91: if_stmt: 
  92: if: 
   93: condition: 
    94: expr: 
     95: operator: !
     96: name: 
      97: name: vps
      98: operator: ->
      99: name: state
   100: block: 
    101: block_content: 
     102: expr_stmt: 
      103: expr: 
       104: name: 
        105: name: vps
        106: operator: ->
        107: name: id
       108: operator: =
       109: name: vps_id
     110: expr_stmt: 
      111: expr: 
       112: name: 
        113: name: vps
        114: operator: ->
        115: name: state
       116: operator: =
       117: literal: 1
 118: expr_stmt: 
  119: expr: 
   120: name: 
    121: name: vps
    122: operator: ->
    123: name: base_layer_internal_flag
   124: operator: =
   125: call: 
    126: name: gf_bs_read_int_log
    127: argument_list: 
     128: argument: 
      129: expr: 
       130: name: bs
     131: argument: 
      132: expr: 
       133: literal: 1
     134: argument: 
      135: expr: 
       136: literal: "base_layer_internal_flag"
 137: expr_stmt: 
  138: expr: 
   139: name: 
    140: name: vps
    141: operator: ->
    142: name: base_layer_available_flag
   143: operator: =
   144: call: 
    145: name: gf_bs_read_int_log
    146: argument_list: 
     147: argument: 
      148: expr: 
       149: name: bs
     150: argument: 
      151: expr: 
       152: literal: 1
     153: argument: 
      154: expr: 
       155: literal: "base_layer_available_flag"
 156: expr_stmt: 
  157: expr: 
   158: name: 
    159: name: vps
    160: operator: ->
    161: name: max_layers
   162: operator: =
   163: literal: 1
   164: operator: +
   165: call: 
    166: name: gf_bs_read_int_log
    167: argument_list: 
     168: argument: 
      169: expr: 
       170: name: bs
     171: argument: 
      172: expr: 
       173: literal: 6
     174: argument: 
      175: expr: 
       176: literal: "max_layers_minus1"
 177: if_stmt: 
  178: if: 
   179: condition: 
    180: expr: 
     181: name: 
      182: name: vps
      183: operator: ->
      184: name: max_layers
     185: operator: >
     186: name: MAX_LHVC_LAYERS
   187: block: 
    188: block_content: 
     189: expr_stmt: 
      190: expr: 
       191: call: 
        192: name: GF_LOG
        193: argument_list: 
         194: argument: 
          195: expr: 
           196: name: GF_LOG_ERROR
         197: argument: 
          198: expr: 
           199: name: GF_LOG_CODING
         200: argument: 
          201: expr: 
           202: operator: (
           203: literal: "[HEVC] sorry, %d layers in VPS but only %d supported\n"
           204: operator: ,
           205: name: 
            206: name: vps
            207: operator: ->
            208: name: max_layers
           209: operator: ,
           210: name: MAX_LHVC_LAYERS
           211: operator: )
     212: return: 
      213: expr: 
       214: operator: -
       215: literal: 1
 216: expr_stmt: 
  217: expr: 
   218: name: 
    219: name: vps
    220: operator: ->
    221: name: max_sub_layers
   222: operator: =
   223: call: 
    224: name: gf_bs_read_int_log
    225: argument_list: 
     226: argument: 
      227: expr: 
       228: name: bs
     229: argument: 
      230: expr: 
       231: literal: 3
     232: argument: 
      233: expr: 
       234: literal: "max_sub_layers_minus1"
   235: operator: +
   236: literal: 1
 237: expr_stmt: 
  238: expr: 
   239: name: 
    240: name: vps
    241: operator: ->
    242: name: temporal_id_nesting
   243: operator: =
   244: call: 
    245: name: gf_bs_read_int_log
    246: argument_list: 
     247: argument: 
      248: expr: 
       249: name: bs
     250: argument: 
      251: expr: 
       252: literal: 1
     253: argument: 
      254: expr: 
       255: literal: "temporal_id_nesting"
 256: expr_stmt: 
  257: expr: 
   258: call: 
    259: name: gf_bs_read_int_log
    260: argument_list: 
     261: argument: 
      262: expr: 
       263: name: bs
     264: argument: 
      265: expr: 
       266: literal: 16
     267: argument: 
      268: expr: 
       269: literal: "vps_reserved_ffff_16bits"
 270: expr_stmt: 
  271: expr: 
   272: call: 
    273: name: hevc_profile_tier_level
    274: argument_list: 
     275: argument: 
      276: expr: 
       277: name: bs
     278: argument: 
      279: expr: 
       280: literal: 1
     281: argument: 
      282: expr: 
       283: name: 
        284: name: vps
        285: operator: ->
        286: name: max_sub_layers
       287: operator: -
       288: literal: 1
     289: argument: 
      290: expr: 
       291: operator: &
       292: name: 
        293: name: vps
        294: operator: ->
        295: name: ptl
     296: argument: 
      297: expr: 
       298: literal: 0
 299: expr_stmt: 
  300: expr: 
   301: name: vps_sub_layer_ordering_info_present_flag
   302: operator: =
   303: call: 
    304: name: gf_bs_read_int_log
    305: argument_list: 
     306: argument: 
      307: expr: 
       308: name: bs
     309: argument: 
      310: expr: 
       311: literal: 1
     312: argument: 
      313: expr: 
       314: literal: "vps_sub_layer_ordering_info_present_flag"
 315: for: 
  316: control: 
   317: init: 
    318: expr: 
     319: name: i
     320: operator: =
     321: operator: (
     322: ternary: 
      323: condition: 
       324: expr: 
        325: name: vps_sub_layer_ordering_info_present_flag
      326: then: 
       327: expr: 
        328: literal: 0
      329: else: 
       330: expr: 
        331: name: 
         332: name: vps
         333: operator: ->
         334: name: max_sub_layers
        335: operator: -
        336: literal: 1
     337: operator: )
   338: condition: 
    339: expr: 
     340: name: i
     341: operator: <
     342: name: 
      343: name: vps
      344: operator: ->
      345: name: max_sub_layers
   346: incr: 
    347: expr: 
     348: name: i
     349: operator: ++
  350: block: 
   351: block_content: 
    352: expr_stmt: 
     353: expr: 
      354: call: 
       355: name: gf_bs_read_ue_log_idx
       356: argument_list: 
        357: argument: 
         358: expr: 
          359: name: bs
        360: argument: 
         361: expr: 
          362: literal: "vps_max_dec_pic_buffering_minus1"
        363: argument: 
         364: expr: 
          365: name: i
    366: expr_stmt: 
     367: expr: 
      368: call: 
       369: name: gf_bs_read_ue_log_idx
       370: argument_list: 
        371: argument: 
         372: expr: 
          373: name: bs
        374: argument: 
         375: expr: 
          376: literal: "vps_max_num_reorder_pics"
        377: argument: 
         378: expr: 
          379: name: i
    380: expr_stmt: 
     381: expr: 
      382: call: 
       383: name: gf_bs_read_ue_log_idx
       384: argument_list: 
        385: argument: 
         386: expr: 
          387: name: bs
        388: argument: 
         389: expr: 
          390: literal: "vps_max_latency_increase_plus1"
        391: argument: 
         392: expr: 
          393: name: i
 394: expr_stmt: 
  395: expr: 
   396: name: 
    397: name: vps
    398: operator: ->
    399: name: max_layer_id
   400: operator: =
   401: call: 
    402: name: gf_bs_read_int_log
    403: argument_list: 
     404: argument: 
      405: expr: 
       406: name: bs
     407: argument: 
      408: expr: 
       409: literal: 6
     410: argument: 
      411: expr: 
       412: literal: "max_layer_id"
 413: if_stmt: 
  414: if: 
   415: condition: 
    416: expr: 
     417: name: 
      418: name: vps
      419: operator: ->
      420: name: max_layer_id
     421: operator: >
     422: name: MAX_LHVC_LAYERS
   423: block: 
    424: block_content: 
     425: expr_stmt: 
      426: expr: 
       427: call: 
        428: name: GF_LOG
        429: argument_list: 
         430: argument: 
          431: expr: 
           432: name: GF_LOG_ERROR
         433: argument: 
          434: expr: 
           435: name: GF_LOG_CODING
         436: argument: 
          437: expr: 
           438: operator: (
           439: literal: "[HEVC] VPS max layer ID %u but GPAC only supports %u\n"
           440: operator: ,
           441: name: 
            442: name: vps
            443: operator: ->
            444: name: max_layer_id
           445: operator: ,
           446: name: MAX_LHVC_LAYERS
           447: operator: )
     448: return: 
      449: expr: 
       450: operator: -
       451: literal: 1
 452: expr_stmt: 
  453: expr: 
   454: name: 
    455: name: vps
    456: operator: ->
    457: name: num_layer_sets
   458: operator: =
   459: call: 
    460: name: gf_bs_read_ue_log
    461: argument_list: 
     462: argument: 
      463: expr: 
       464: name: bs
     465: argument: 
      466: expr: 
       467: literal: "num_layer_sets_minus1"
   468: operator: +
   469: literal: 1
 470: if_stmt: 
  471: if: 
   472: condition: 
    473: expr: 
     474: name: 
      475: name: vps
      476: operator: ->
      477: name: num_layer_sets
     478: operator: >
     479: name: MAX_LHVC_LAYERS
   480: block: 
    481: block_content: 
     482: expr_stmt: 
      483: expr: 
       484: call: 
        485: name: GF_LOG
        486: argument_list: 
         487: argument: 
          488: expr: 
           489: name: GF_LOG_ERROR
         490: argument: 
          491: expr: 
           492: name: GF_LOG_CODING
         493: argument: 
          494: expr: 
           495: operator: (
           496: literal: "[HEVC] Wrong number of layer sets in VPS %d\n"
           497: operator: ,
           498: name: 
            499: name: vps
            500: operator: ->
            501: name: num_layer_sets
           502: operator: )
     503: return: 
      504: expr: 
       505: operator: -
       506: literal: 1
 507: for: 
  508: control: 
   509: init: 
    510: expr: 
     511: name: i
     512: operator: =
     513: literal: 1
   514: condition: 
    515: expr: 
     516: name: i
     517: operator: <
     518: name: 
      519: name: vps
      520: operator: ->
      521: name: num_layer_sets
   522: incr: 
    523: expr: 
     524: name: i
     525: operator: ++
  526: block: 
   527: block_content: 
    528: for: 
     529: control: 
      530: init: 
       531: expr: 
        532: name: j
        533: operator: =
        534: literal: 0
      535: condition: 
       536: expr: 
        537: name: j
        538: operator: <=
        539: name: 
         540: name: vps
         541: operator: ->
         542: name: max_layer_id
      543: incr: 
       544: expr: 
        545: name: j
        546: operator: ++
     547: block: 
      548: block_content: 
       549: expr_stmt: 
        550: expr: 
         551: name: 
          552: name: layer_id_included_flag
          553: index: 
           554: expr: 
            555: name: i
          556: index: 
           557: expr: 
            558: name: j
         559: operator: =
         560: call: 
          561: name: gf_bs_read_int_log_idx2
          562: argument_list: 
           563: argument: 
            564: expr: 
             565: name: bs
           566: argument: 
            567: expr: 
             568: literal: 1
           569: argument: 
            570: expr: 
             571: literal: "layer_id_included_flag"
           572: argument: 
            573: expr: 
             574: name: i
           575: argument: 
            576: expr: 
             577: name: j
 578: expr_stmt: 
  579: expr: 
   580: name: 
    581: name: vps
    582: operator: ->
    583: name: num_layers_in_id_list
    584: index: 
     585: expr: 
      586: literal: 0
   587: operator: =
   588: literal: 1
 589: for: 
  590: control: 
   591: init: 
    592: expr: 
     593: name: i
     594: operator: =
     595: literal: 1
   596: condition: 
    597: expr: 
     598: name: i
     599: operator: <
     600: name: 
      601: name: vps
      602: operator: ->
      603: name: num_layer_sets
   604: incr: 
    605: expr: 
     606: name: i
     607: operator: ++
  608: block: 
   609: block_content: 
    610: decl_stmt: 
     611: decl: 
      612: type: 
       613: name: u32
      614: name: n
     615: decl: 
      616: type: 
      617: name: m
    618: expr_stmt: 
     619: expr: 
      620: name: n
      621: operator: =
      622: literal: 0
    623: for: 
     624: control: 
      625: init: 
       626: expr: 
        627: name: m
        628: operator: =
        629: literal: 0
      630: condition: 
       631: expr: 
        632: name: m
        633: operator: <=
        634: name: 
         635: name: vps
         636: operator: ->
         637: name: max_layer_id
      638: incr: 
       639: expr: 
        640: name: m
        641: operator: ++
     642: block: 
      643: block_content: 
       644: if_stmt: 
        645: if: 
         646: condition: 
          647: expr: 
           648: name: 
            649: name: layer_id_included_flag
            650: index: 
             651: expr: 
              652: name: i
            653: index: 
             654: expr: 
              655: name: m
         656: block: 
          657: block_content: 
           658: expr_stmt: 
            659: expr: 
             660: name: 
              661: name: vps
              662: operator: ->
              663: name: LayerSetLayerIdList
              664: index: 
               665: expr: 
                666: name: i
              667: index: 
               668: expr: 
                669: name: n
                670: operator: ++
             671: operator: =
             672: name: m
           673: if_stmt: 
            674: if: 
             675: condition: 
              676: expr: 
               677: name: 
                678: name: vps
                679: operator: ->
                680: name: LayerSetLayerIdListMax
                681: index: 
                 682: expr: 
                  683: name: i
               684: operator: <
               685: name: m
             686: block: 
              687: block_content: 
               688: expr_stmt: 
                689: expr: 
                 690: name: 
                  691: name: vps
                  692: operator: ->
                  693: name: LayerSetLayerIdListMax
                  694: index: 
                   695: expr: 
                    696: name: i
                 697: operator: =
                 698: name: m
    699: expr_stmt: 
     700: expr: 
      701: name: 
       702: name: vps
       703: operator: ->
       704: name: num_layers_in_id_list
       705: index: 
        706: expr: 
         707: name: i
      708: operator: =
      709: name: n
 710: if_stmt: 
  711: if: 
   712: condition: 
    713: expr: 
     714: call: 
      715: name: gf_bs_read_int_log
      716: argument_list: 
       717: argument: 
        718: expr: 
         719: name: bs
       720: argument: 
        721: expr: 
         722: literal: 1
       723: argument: 
        724: expr: 
         725: literal: "vps_timing_info_present_flag"
   726: block: 
    727: block_content: 
     728: decl_stmt: 
      729: decl: 
       730: type: 
        731: name: u32
       732: name: vps_num_hrd_parameters
     733: expr_stmt: 
      734: expr: 
       735: call: 
        736: name: gf_bs_read_int_log
        737: argument_list: 
         738: argument: 
          739: expr: 
           740: name: bs
         741: argument: 
          742: expr: 
           743: literal: 32
         744: argument: 
          745: expr: 
           746: literal: "vps_num_units_in_tick"
     747: expr_stmt: 
      748: expr: 
       749: call: 
        750: name: gf_bs_read_int_log
        751: argument_list: 
         752: argument: 
          753: expr: 
           754: name: bs
         755: argument: 
          756: expr: 
           757: literal: 32
         758: argument: 
          759: expr: 
           760: literal: "vps_time_scale"
     761: if_stmt: 
      762: if: 
       763: condition: 
        764: expr: 
         765: call: 
          766: name: gf_bs_read_int_log
          767: argument_list: 
           768: argument: 
            769: expr: 
             770: name: bs
           771: argument: 
            772: expr: 
             773: literal: 1
           774: argument: 
            775: expr: 
             776: literal: "vps_poc_proportional_to_timing_flag"
       777: block: 
        778: block_content: 
         779: expr_stmt: 
          780: expr: 
           781: call: 
            782: name: gf_bs_read_ue_log
            783: argument_list: 
             784: argument: 
              785: expr: 
               786: name: bs
             787: argument: 
              788: expr: 
               789: literal: "vps_num_ticks_poc_diff_one_minus1"
     790: expr_stmt: 
      791: expr: 
       792: name: vps_num_hrd_parameters
       793: operator: =
       794: call: 
        795: name: gf_bs_read_ue_log
        796: argument_list: 
         797: argument: 
          798: expr: 
           799: name: bs
         800: argument: 
          801: expr: 
           802: literal: "vps_num_hrd_parameters"
     803: for: 
      804: control: 
       805: init: 
        806: expr: 
         807: name: i
         808: operator: =
         809: literal: 0
       810: condition: 
        811: expr: 
         812: name: i
         813: operator: <
         814: name: vps_num_hrd_parameters
       815: incr: 
        816: expr: 
         817: name: i
         818: operator: ++
      819: block: 
       820: block_content: 
        821: decl_stmt: 
         822: decl: 
          823: type: 
           824: name: Bool
          825: name: cprms_present_flag
          826: init: 
           827: expr: 
            828: name: GF_TRUE
        829: expr_stmt: 
         830: expr: 
          831: call: 
           832: name: gf_bs_read_ue_log_idx
           833: argument_list: 
            834: argument: 
             835: expr: 
              836: name: bs
            837: argument: 
             838: expr: 
              839: literal: "hrd_layer_set_idx"
            840: argument: 
             841: expr: 
              842: name: i
        843: if_stmt: 
         844: if: 
          845: condition: 
           846: expr: 
            847: name: i
            848: operator: >
            849: literal: 0
          850: block: 
           851: block_content: 
            852: expr_stmt: 
             853: expr: 
              854: name: cprms_present_flag
              855: operator: =
              856: call: 
               857: name: gf_bs_read_int_log
               858: argument_list: 
                859: argument: 
                 860: expr: 
                  861: name: bs
                862: argument: 
                 863: expr: 
                  864: literal: 1
                865: argument: 
                 866: expr: 
                  867: literal: "cprms_present_flag"
        868: expr_stmt: 
         869: expr: 
          870: call: 
           871: name: hevc_parse_hrd_parameters
           872: argument_list: 
            873: argument: 
             874: expr: 
              875: name: bs
            876: argument: 
             877: expr: 
              878: name: cprms_present_flag
            879: argument: 
             880: expr: 
              881: name: 
               882: name: vps
               883: operator: ->
               884: name: max_sub_layers
              885: operator: -
              886: literal: 1
            887: argument: 
             888: expr: 
              889: name: i
 890: if_stmt: 
  891: if: 
   892: condition: 
    893: expr: 
     894: name: stop_at_vps_ext
   895: block: 
    896: block_content: 
     897: return: 
      898: expr: 
       899: name: vps_id
 900: expr_stmt: 
  901: expr: 
   902: name: vps_extension_flag
   903: operator: =
   904: call: 
    905: name: gf_bs_read_int_log
    906: argument_list: 
     907: argument: 
      908: expr: 
       909: name: bs
     910: argument: 
      911: expr: 
       912: literal: 1
     913: argument: 
      914: expr: 
       915: literal: "vps_extension_flag"
 916: if_stmt: 
  917: if: 
   918: condition: 
    919: expr: 
     920: name: vps_extension_flag
   921: block: 
    922: block_content: 
     923: decl_stmt: 
      924: decl: 
       925: type: 
        926: name: Bool
       927: name: res
     928: expr_stmt: 
      929: expr: 
       930: call: 
        931: name: gf_bs_align
        932: argument_list: 
         933: argument: 
          934: expr: 
           935: name: bs
     936: expr_stmt: 
      937: expr: 
       938: name: res
       939: operator: =
       940: call: 
        941: name: hevc_parse_vps_extension
        942: argument_list: 
         943: argument: 
          944: expr: 
           945: name: vps
         946: argument: 
          947: expr: 
           948: name: bs
     949: if_stmt: 
      950: if: 
       951: condition: 
        952: expr: 
         953: name: res
         954: operator: !=
         955: name: GF_TRUE
       956: block: 
        957: block_content: 
         958: expr_stmt: 
          959: expr: 
           960: call: 
            961: name: GF_LOG
            962: argument_list: 
             963: argument: 
              964: expr: 
               965: name: GF_LOG_ERROR
             966: argument: 
              967: expr: 
               968: name: GF_LOG_CODING
             969: argument: 
              970: expr: 
               971: operator: (
               972: literal: "[HEVC] Failed to parse VPS extensions\n"
               973: operator: )
         974: return: 
          975: expr: 
           976: operator: -
           977: literal: 1
     978: if_stmt: 
      979: if: 
       980: condition: 
        981: expr: 
         982: call: 
          983: name: gf_bs_read_int_log
          984: argument_list: 
           985: argument: 
            986: expr: 
             987: name: bs
           988: argument: 
            989: expr: 
             990: literal: 1
           991: argument: 
            992: expr: 
             993: literal: "vps_extension2_flag"
       994: block: 
        995: block_content: 
         996: if: 
          997: directive: if
          998: expr: 
           999: literal: 0
         1000: comment: /*vps_extension_data_flag */
         1001: endif: 
          1002: directive: endif
 1003: return: 
  1004: expr: 
   1005: name: vps_id

----------------------------------------
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: u8
   5: name: vps_sub_layer_ordering_info_present_flag
  6: decl: 
   7: type: 
   8: name: vps_extension_flag
 9: decl_stmt: 
  10: decl: 
   11: type: 
    12: name: u32
   13: name: i
  14: decl: 
   15: type: 
   16: name: j
 17: decl_stmt: 
  18: decl: 
   19: type: 
    20: name: s32
   21: name: vps_id
 22: decl_stmt: 
  23: decl: 
   24: type: 
    25: name: HEVC_VPS
    26: modifier: *
   27: name: vps
 28: decl_stmt: 
  29: decl: 
   30: type: 
    31: name: u8
   32: name: 
    33: name: layer_id_included_flag
    34: index: 
     35: expr: 
      36: name: MAX_LHVC_LAYERS
    37: index: 
     38: expr: 
      39: literal: 64
 40: comment: //nalu header already parsed
 41: expr_stmt: 
  42: expr: 
   43: name: vps_id
   44: operator: =
   45: call: 
    46: name: gf_bs_read_int_log
    47: argument_list: 
     48: argument: 
      49: expr: 
       50: name: bs
     51: argument: 
      52: expr: 
       53: literal: 4
     54: argument: 
      55: expr: 
       56: literal: "vps_id"
 57: if_stmt: 
  58: if: 
   59: condition: 
    60: expr: 
     61: operator: (
     62: name: vps_id
     63: operator: <
     64: literal: 0
     65: operator: )
     66: operator: ||
     67: operator: (
     68: name: vps_id
     69: operator: >=
     70: literal: 16
     71: operator: )
   72: block: 
    73: block_content: 
     74: return: 
      75: expr: 
       76: operator: -
       77: literal: 1
 78: expr_stmt: 
  79: expr: 
   80: name: vps
   81: operator: =
   82: operator: &
   83: name: 
    84: name: hevc
    85: operator: ->
    86: name: vps
    87: index: 
     88: expr: 
      89: name: vps_id
 90: expr_stmt: 
  91: expr: 
   92: name: 
    93: name: vps
    94: operator: ->
    95: name: bit_pos_vps_extensions
   96: operator: =
   97: operator: -
   98: literal: 1
 99: if_stmt: 
  100: if: 
   101: condition: 
    102: expr: 
     103: operator: !
     104: name: 
      105: name: vps
      106: operator: ->
      107: name: state
   108: block: 
    109: block_content: 
     110: expr_stmt: 
      111: expr: 
       112: name: 
        113: name: vps
        114: operator: ->
        115: name: id
       116: operator: =
       117: name: vps_id
     118: expr_stmt: 
      119: expr: 
       120: name: 
        121: name: vps
        122: operator: ->
        123: name: state
       124: operator: =
       125: literal: 1
 126: expr_stmt: 
  127: expr: 
   128: name: 
    129: name: vps
    130: operator: ->
    131: name: base_layer_internal_flag
   132: operator: =
   133: call: 
    134: name: gf_bs_read_int_log
    135: argument_list: 
     136: argument: 
      137: expr: 
       138: name: bs
     139: argument: 
      140: expr: 
       141: literal: 1
     142: argument: 
      143: expr: 
       144: literal: "base_layer_internal_flag"
 145: expr_stmt: 
  146: expr: 
   147: name: 
    148: name: vps
    149: operator: ->
    150: name: base_layer_available_flag
   151: operator: =
   152: call: 
    153: name: gf_bs_read_int_log
    154: argument_list: 
     155: argument: 
      156: expr: 
       157: name: bs
     158: argument: 
      159: expr: 
       160: literal: 1
     161: argument: 
      162: expr: 
       163: literal: "base_layer_available_flag"
 164: expr_stmt: 
  165: expr: 
   166: name: 
    167: name: vps
    168: operator: ->
    169: name: max_layers
   170: operator: =
   171: literal: 1
   172: operator: +
   173: call: 
    174: name: gf_bs_read_int_log
    175: argument_list: 
     176: argument: 
      177: expr: 
       178: name: bs
     179: argument: 
      180: expr: 
       181: literal: 6
     182: argument: 
      183: expr: 
       184: literal: "max_layers_minus1"
 185: if_stmt: 
  186: if: 
   187: condition: 
    188: expr: 
     189: name: 
      190: name: vps
      191: operator: ->
      192: name: max_layers
     193: operator: >
     194: name: MAX_LHVC_LAYERS
   195: block: 
    196: block_content: 
     197: expr_stmt: 
      198: expr: 
       199: call: 
        200: name: GF_LOG
        201: argument_list: 
         202: argument: 
          203: expr: 
           204: name: GF_LOG_ERROR
         205: argument: 
          206: expr: 
           207: name: GF_LOG_CODING
         208: argument: 
          209: expr: 
           210: operator: (
           211: literal: "[HEVC] sorry, %d layers in VPS but only %d supported\n"
           212: operator: ,
           213: name: 
            214: name: vps
            215: operator: ->
            216: name: max_layers
           217: operator: ,
           218: name: MAX_LHVC_LAYERS
           219: operator: )
     220: return: 
      221: expr: 
       222: operator: -
       223: literal: 1
 224: expr_stmt: 
  225: expr: 
   226: name: 
    227: name: vps
    228: operator: ->
    229: name: max_sub_layers
   230: operator: =
   231: call: 
    232: name: gf_bs_read_int_log
    233: argument_list: 
     234: argument: 
      235: expr: 
       236: name: bs
     237: argument: 
      238: expr: 
       239: literal: 3
     240: argument: 
      241: expr: 
       242: literal: "max_sub_layers_minus1"
   243: operator: +
   244: literal: 1
 245: expr_stmt: 
  246: expr: 
   247: name: 
    248: name: vps
    249: operator: ->
    250: name: temporal_id_nesting
   251: operator: =
   252: call: 
    253: name: gf_bs_read_int_log
    254: argument_list: 
     255: argument: 
      256: expr: 
       257: name: bs
     258: argument: 
      259: expr: 
       260: literal: 1
     261: argument: 
      262: expr: 
       263: literal: "temporal_id_nesting"
 264: expr_stmt: 
  265: expr: 
   266: call: 
    267: name: gf_bs_read_int_log
    268: argument_list: 
     269: argument: 
      270: expr: 
       271: name: bs
     272: argument: 
      273: expr: 
       274: literal: 16
     275: argument: 
      276: expr: 
       277: literal: "vps_reserved_ffff_16bits"
 278: expr_stmt: 
  279: expr: 
   280: call: 
    281: name: hevc_profile_tier_level
    282: argument_list: 
     283: argument: 
      284: expr: 
       285: name: bs
     286: argument: 
      287: expr: 
       288: literal: 1
     289: argument: 
      290: expr: 
       291: name: 
        292: name: vps
        293: operator: ->
        294: name: max_sub_layers
       295: operator: -
       296: literal: 1
     297: argument: 
      298: expr: 
       299: operator: &
       300: name: 
        301: name: vps
        302: operator: ->
        303: name: ptl
     304: argument: 
      305: expr: 
       306: literal: 0
 307: expr_stmt: 
  308: expr: 
   309: name: vps_sub_layer_ordering_info_present_flag
   310: operator: =
   311: call: 
    312: name: gf_bs_read_int_log
    313: argument_list: 
     314: argument: 
      315: expr: 
       316: name: bs
     317: argument: 
      318: expr: 
       319: literal: 1
     320: argument: 
      321: expr: 
       322: literal: "vps_sub_layer_ordering_info_present_flag"
 323: for: 
  324: control: 
   325: init: 
    326: expr: 
     327: name: i
     328: operator: =
     329: operator: (
     330: ternary: 
      331: condition: 
       332: expr: 
        333: name: vps_sub_layer_ordering_info_present_flag
      334: then: 
       335: expr: 
        336: literal: 0
      337: else: 
       338: expr: 
        339: name: 
         340: name: vps
         341: operator: ->
         342: name: max_sub_layers
        343: operator: -
        344: literal: 1
     345: operator: )
   346: condition: 
    347: expr: 
     348: name: i
     349: operator: <
     350: name: 
      351: name: vps
      352: operator: ->
      353: name: max_sub_layers
   354: incr: 
    355: expr: 
     356: name: i
     357: operator: ++
  358: block: 
   359: block_content: 
    360: expr_stmt: 
     361: expr: 
      362: call: 
       363: name: gf_bs_read_ue_log_idx
       364: argument_list: 
        365: argument: 
         366: expr: 
          367: name: bs
        368: argument: 
         369: expr: 
          370: literal: "vps_max_dec_pic_buffering_minus1"
        371: argument: 
         372: expr: 
          373: name: i
    374: expr_stmt: 
     375: expr: 
      376: call: 
       377: name: gf_bs_read_ue_log_idx
       378: argument_list: 
        379: argument: 
         380: expr: 
          381: name: bs
        382: argument: 
         383: expr: 
          384: literal: "vps_max_num_reorder_pics"
        385: argument: 
         386: expr: 
          387: name: i
    388: expr_stmt: 
     389: expr: 
      390: call: 
       391: name: gf_bs_read_ue_log_idx
       392: argument_list: 
        393: argument: 
         394: expr: 
          395: name: bs
        396: argument: 
         397: expr: 
          398: literal: "vps_max_latency_increase_plus1"
        399: argument: 
         400: expr: 
          401: name: i
 402: expr_stmt: 
  403: expr: 
   404: name: 
    405: name: vps
    406: operator: ->
    407: name: max_layer_id
   408: operator: =
   409: call: 
    410: name: gf_bs_read_int_log
    411: argument_list: 
     412: argument: 
      413: expr: 
       414: name: bs
     415: argument: 
      416: expr: 
       417: literal: 6
     418: argument: 
      419: expr: 
       420: literal: "max_layer_id"
 421: if_stmt: 
  422: if: 
   423: condition: 
    424: expr: 
     425: name: 
      426: name: vps
      427: operator: ->
      428: name: max_layer_id
     429: operator: >
     430: name: MAX_LHVC_LAYERS
   431: block: 
    432: block_content: 
     433: expr_stmt: 
      434: expr: 
       435: call: 
        436: name: GF_LOG
        437: argument_list: 
         438: argument: 
          439: expr: 
           440: name: GF_LOG_ERROR
         441: argument: 
          442: expr: 
           443: name: GF_LOG_CODING
         444: argument: 
          445: expr: 
           446: operator: (
           447: literal: "[HEVC] VPS max layer ID %u but GPAC only supports %u\n"
           448: operator: ,
           449: name: 
            450: name: vps
            451: operator: ->
            452: name: max_layer_id
           453: operator: ,
           454: name: MAX_LHVC_LAYERS
           455: operator: )
     456: return: 
      457: expr: 
       458: operator: -
       459: literal: 1
 460: expr_stmt: 
  461: expr: 
   462: name: 
    463: name: vps
    464: operator: ->
    465: name: num_layer_sets
   466: operator: =
   467: call: 
    468: name: gf_bs_read_ue_log
    469: argument_list: 
     470: argument: 
      471: expr: 
       472: name: bs
     473: argument: 
      474: expr: 
       475: literal: "num_layer_sets_minus1"
   476: operator: +
   477: literal: 1
 478: if_stmt: 
  479: if: 
   480: condition: 
    481: expr: 
     482: name: 
      483: name: vps
      484: operator: ->
      485: name: num_layer_sets
     486: operator: >
     487: name: MAX_LHVC_LAYERS
   488: block: 
    489: block_content: 
     490: expr_stmt: 
      491: expr: 
       492: call: 
        493: name: GF_LOG
        494: argument_list: 
         495: argument: 
          496: expr: 
           497: name: GF_LOG_ERROR
         498: argument: 
          499: expr: 
           500: name: GF_LOG_CODING
         501: argument: 
          502: expr: 
           503: operator: (
           504: literal: "[HEVC] Wrong number of layer sets in VPS %d\n"
           505: operator: ,
           506: name: 
            507: name: vps
            508: operator: ->
            509: name: num_layer_sets
           510: operator: )
     511: return: 
      512: expr: 
       513: operator: -
       514: literal: 1
 515: for: 
  516: control: 
   517: init: 
    518: expr: 
     519: name: i
     520: operator: =
     521: literal: 1
   522: condition: 
    523: expr: 
     524: name: i
     525: operator: <
     526: name: 
      527: name: vps
      528: operator: ->
      529: name: num_layer_sets
   530: incr: 
    531: expr: 
     532: name: i
     533: operator: ++
  534: block: 
   535: block_content: 
    536: for: 
     537: control: 
      538: init: 
       539: expr: 
        540: name: j
        541: operator: =
        542: literal: 0
      543: condition: 
       544: expr: 
        545: name: j
        546: operator: <=
        547: name: 
         548: name: vps
         549: operator: ->
         550: name: max_layer_id
      551: incr: 
       552: expr: 
        553: name: j
        554: operator: ++
     555: block: 
      556: block_content: 
       557: expr_stmt: 
        558: expr: 
         559: name: 
          560: name: layer_id_included_flag
          561: index: 
           562: expr: 
            563: name: i
          564: index: 
           565: expr: 
            566: name: j
         567: operator: =
         568: call: 
          569: name: gf_bs_read_int_log_idx2
          570: argument_list: 
           571: argument: 
            572: expr: 
             573: name: bs
           574: argument: 
            575: expr: 
             576: literal: 1
           577: argument: 
            578: expr: 
             579: literal: "layer_id_included_flag"
           580: argument: 
            581: expr: 
             582: name: i
           583: argument: 
            584: expr: 
             585: name: j
 586: expr_stmt: 
  587: expr: 
   588: name: 
    589: name: vps
    590: operator: ->
    591: name: num_layers_in_id_list
    592: index: 
     593: expr: 
      594: literal: 0
   595: operator: =
   596: literal: 1
 597: for: 
  598: control: 
   599: init: 
    600: expr: 
     601: name: i
     602: operator: =
     603: literal: 1
   604: condition: 
    605: expr: 
     606: name: i
     607: operator: <
     608: name: 
      609: name: vps
      610: operator: ->
      611: name: num_layer_sets
   612: incr: 
    613: expr: 
     614: name: i
     615: operator: ++
  616: block: 
   617: block_content: 
    618: decl_stmt: 
     619: decl: 
      620: type: 
       621: name: u32
      622: name: n
     623: decl: 
      624: type: 
      625: name: m
    626: expr_stmt: 
     627: expr: 
      628: name: n
      629: operator: =
      630: literal: 0
    631: for: 
     632: control: 
      633: init: 
       634: expr: 
        635: name: m
        636: operator: =
        637: literal: 0
      638: condition: 
       639: expr: 
        640: name: m
        641: operator: <=
        642: name: 
         643: name: vps
         644: operator: ->
         645: name: max_layer_id
      646: incr: 
       647: expr: 
        648: name: m
        649: operator: ++
     650: block: 
      651: block_content: 
       652: if_stmt: 
        653: if: 
         654: condition: 
          655: expr: 
           656: name: 
            657: name: layer_id_included_flag
            658: index: 
             659: expr: 
              660: name: i
            661: index: 
             662: expr: 
              663: name: m
         664: block: 
          665: block_content: 
           666: expr_stmt: 
            667: expr: 
             668: name: 
              669: name: vps
              670: operator: ->
              671: name: LayerSetLayerIdList
              672: index: 
               673: expr: 
                674: name: i
              675: index: 
               676: expr: 
                677: name: n
                678: operator: ++
             679: operator: =
             680: name: m
           681: if_stmt: 
            682: if: 
             683: condition: 
              684: expr: 
               685: name: 
                686: name: vps
                687: operator: ->
                688: name: LayerSetLayerIdListMax
                689: index: 
                 690: expr: 
                  691: name: i
               692: operator: <
               693: name: m
             694: block: 
              695: block_content: 
               696: expr_stmt: 
                697: expr: 
                 698: name: 
                  699: name: vps
                  700: operator: ->
                  701: name: LayerSetLayerIdListMax
                  702: index: 
                   703: expr: 
                    704: name: i
                 705: operator: =
                 706: name: m
    707: expr_stmt: 
     708: expr: 
      709: name: 
       710: name: vps
       711: operator: ->
       712: name: num_layers_in_id_list
       713: index: 
        714: expr: 
         715: name: i
      716: operator: =
      717: name: n
 718: if_stmt: 
  719: if: 
   720: condition: 
    721: expr: 
     722: call: 
      723: name: gf_bs_read_int_log
      724: argument_list: 
       725: argument: 
        726: expr: 
         727: name: bs
       728: argument: 
        729: expr: 
         730: literal: 1
       731: argument: 
        732: expr: 
         733: literal: "vps_timing_info_present_flag"
   734: block: 
    735: block_content: 
     736: decl_stmt: 
      737: decl: 
       738: type: 
        739: name: u32
       740: name: vps_num_hrd_parameters
     741: expr_stmt: 
      742: expr: 
       743: call: 
        744: name: gf_bs_read_int_log
        745: argument_list: 
         746: argument: 
          747: expr: 
           748: name: bs
         749: argument: 
          750: expr: 
           751: literal: 32
         752: argument: 
          753: expr: 
           754: literal: "vps_num_units_in_tick"
     755: expr_stmt: 
      756: expr: 
       757: call: 
        758: name: gf_bs_read_int_log
        759: argument_list: 
         760: argument: 
          761: expr: 
           762: name: bs
         763: argument: 
          764: expr: 
           765: literal: 32
         766: argument: 
          767: expr: 
           768: literal: "vps_time_scale"
     769: if_stmt: 
      770: if: 
       771: condition: 
        772: expr: 
         773: call: 
          774: name: gf_bs_read_int_log
          775: argument_list: 
           776: argument: 
            777: expr: 
             778: name: bs
           779: argument: 
            780: expr: 
             781: literal: 1
           782: argument: 
            783: expr: 
             784: literal: "vps_poc_proportional_to_timing_flag"
       785: block: 
        786: block_content: 
         787: expr_stmt: 
          788: expr: 
           789: call: 
            790: name: gf_bs_read_ue_log
            791: argument_list: 
             792: argument: 
              793: expr: 
               794: name: bs
             795: argument: 
              796: expr: 
               797: literal: "vps_num_ticks_poc_diff_one_minus1"
     798: expr_stmt: 
      799: expr: 
       800: name: vps_num_hrd_parameters
       801: operator: =
       802: call: 
        803: name: gf_bs_read_ue_log
        804: argument_list: 
         805: argument: 
          806: expr: 
           807: name: bs
         808: argument: 
          809: expr: 
           810: literal: "vps_num_hrd_parameters"
     811: for: 
      812: control: 
       813: init: 
        814: expr: 
         815: name: i
         816: operator: =
         817: literal: 0
       818: condition: 
        819: expr: 
         820: name: i
         821: operator: <
         822: name: vps_num_hrd_parameters
       823: incr: 
        824: expr: 
         825: name: i
         826: operator: ++
      827: block: 
       828: block_content: 
        829: decl_stmt: 
         830: decl: 
          831: type: 
           832: name: Bool
          833: name: cprms_present_flag
          834: init: 
           835: expr: 
            836: name: GF_TRUE
        837: expr_stmt: 
         838: expr: 
          839: call: 
           840: name: gf_bs_read_ue_log_idx
           841: argument_list: 
            842: argument: 
             843: expr: 
              844: name: bs
            845: argument: 
             846: expr: 
              847: literal: "hrd_layer_set_idx"
            848: argument: 
             849: expr: 
              850: name: i
        851: if_stmt: 
         852: if: 
          853: condition: 
           854: expr: 
            855: name: i
            856: operator: >
            857: literal: 0
          858: block: 
           859: block_content: 
            860: expr_stmt: 
             861: expr: 
              862: name: cprms_present_flag
              863: operator: =
              864: call: 
               865: name: gf_bs_read_int_log
               866: argument_list: 
                867: argument: 
                 868: expr: 
                  869: name: bs
                870: argument: 
                 871: expr: 
                  872: literal: 1
                873: argument: 
                 874: expr: 
                  875: literal: "cprms_present_flag"
        876: expr_stmt: 
         877: expr: 
          878: call: 
           879: name: hevc_parse_hrd_parameters
           880: argument_list: 
            881: argument: 
             882: expr: 
              883: name: bs
            884: argument: 
             885: expr: 
              886: name: cprms_present_flag
            887: argument: 
             888: expr: 
              889: name: 
               890: name: vps
               891: operator: ->
               892: name: max_sub_layers
              893: operator: -
              894: literal: 1
            895: argument: 
             896: expr: 
              897: name: i
 898: if_stmt: 
  899: if: 
   900: condition: 
    901: expr: 
     902: name: stop_at_vps_ext
   903: block: 
    904: block_content: 
     905: return: 
      906: expr: 
       907: name: vps_id
 908: expr_stmt: 
  909: expr: 
   910: name: vps_extension_flag
   911: operator: =
   912: call: 
    913: name: gf_bs_read_int_log
    914: argument_list: 
     915: argument: 
      916: expr: 
       917: name: bs
     918: argument: 
      919: expr: 
       920: literal: 1
     921: argument: 
      922: expr: 
       923: literal: "vps_extension_flag"
 924: if_stmt: 
  925: if: 
   926: condition: 
    927: expr: 
     928: name: vps_extension_flag
   929: block: 
    930: block_content: 
     931: decl_stmt: 
      932: decl: 
       933: type: 
        934: name: Bool
       935: name: res
     936: expr_stmt: 
      937: expr: 
       938: call: 
        939: name: gf_bs_align
        940: argument_list: 
         941: argument: 
          942: expr: 
           943: name: bs
     944: expr_stmt: 
      945: expr: 
       946: name: res
       947: operator: =
       948: call: 
        949: name: hevc_parse_vps_extension
        950: argument_list: 
         951: argument: 
          952: expr: 
           953: name: vps
         954: argument: 
          955: expr: 
           956: name: bs
     957: if_stmt: 
      958: if: 
       959: condition: 
        960: expr: 
         961: name: res
         962: operator: !=
         963: name: GF_TRUE
       964: block: 
        965: block_content: 
         966: expr_stmt: 
          967: expr: 
           968: call: 
            969: name: GF_LOG
            970: argument_list: 
             971: argument: 
              972: expr: 
               973: name: GF_LOG_ERROR
             974: argument: 
              975: expr: 
               976: name: GF_LOG_CODING
             977: argument: 
              978: expr: 
               979: operator: (
               980: literal: "[HEVC] Failed to parse VPS extensions\n"
               981: operator: )
         982: return: 
          983: expr: 
           984: operator: -
           985: literal: 1
     986: if_stmt: 
      987: if: 
       988: condition: 
        989: expr: 
         990: call: 
          991: name: gf_bs_read_int_log
          992: argument_list: 
           993: argument: 
            994: expr: 
             995: name: bs
           996: argument: 
            997: expr: 
             998: literal: 1
           999: argument: 
            1000: expr: 
             1001: literal: "vps_extension2_flag"
       1002: block: 
        1003: block_content: 
         1004: if: 
          1005: directive: if
          1006: expr: 
           1007: literal: 0
         1008: comment: /*vps_extension_data_flag */
         1009: endif: 
          1010: directive: endif
 1011: return: 
  1012: expr: 
   1013: name: vps_id
=====
0: comment: //nalu header already parsed

----------------------------------------
=====
0: condition: 
 1: expr: 
  2: name: vps_id
  3: operator: >=
  4: literal: 16

----------------------------------------
=====
