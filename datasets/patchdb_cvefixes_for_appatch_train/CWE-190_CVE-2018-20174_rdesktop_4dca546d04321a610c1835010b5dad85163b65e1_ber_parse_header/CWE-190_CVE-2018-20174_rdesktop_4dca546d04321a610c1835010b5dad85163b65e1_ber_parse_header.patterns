0: unit: 
 1: function: 
  2: type: 
   3: name: void
  4: name: next_be
  5: parameter_list: 
   6: parameter: 
    7: decl: 
     8: type: 
      9: name: STREAM
     10: name: s
   11: parameter: 
    12: decl: 
     13: type: 
      14: name: uint32
     15: name: v
  16: block: 
   17: block_content: 
    18: expr_stmt: 
     19: expr: 
      20: call: 
       21: name: s_assert_r
       22: argument_list: 
        23: argument: 
         24: expr: 
          25: name: s
        26: argument: 
         27: expr: 
          28: literal: 1
    29: expr_stmt: 
     30: expr: 
      31: name: v
      32: operator: =
      33: operator: (
      34: operator: (
      35: name: v
      36: operator: )
      37: operator: <<
      38: literal: 8
      39: operator: )
      40: operator: +
      41: operator: *
      42: operator: (
      43: operator: (
      44: name: s
      45: operator: )
      46: operator: ->
      47: name: p
      48: operator: ++
      49: operator: )
 50: function: 
  51: type: 
   52: name: int
  53: name: ber_parse_header
  54: parameter_list: 
   55: parameter: 
    56: decl: 
     57: type: 
      58: name: STREAM
     59: name: s
   60: parameter: 
    61: decl: 
     62: type: 
      63: name: int
     64: name: tagval
   65: parameter: 
    66: decl: 
     67: type: 
      68: name: int
      69: modifier: *
     70: name: length
  71: block: 
   72: block_content: 
    73: decl_stmt: 
     74: decl: 
      75: type: 
       76: name: int
      77: name: tag
     78: decl: 
      79: type: 
      80: name: len
    81: if_stmt: 
     82: if: 
      83: condition: 
       84: expr: 
        85: name: tagval
        86: operator: >
        87: literal: 0xff
      88: block: 
       89: block_content: 
        90: expr_stmt: 
         91: expr: 
          92: call: 
           93: name: in_uint16_be
           94: argument_list: 
            95: argument: 
             96: expr: 
              97: name: s
            98: argument: 
             99: expr: 
              100: name: tag
     101: else: 
      102: block: 
       103: block_content: 
        104: expr_stmt: 
         105: expr: 
          106: call: 
           107: name: in_uint8
           108: argument_list: 
            109: argument: 
             110: expr: 
              111: name: s
            112: argument: 
             113: expr: 
              114: name: tag
    115: if_stmt: 
     116: if: 
      117: condition: 
       118: expr: 
        119: name: tag
        120: operator: !=
        121: name: tagval
      122: block: 
       123: block_content: 
        124: expr_stmt: 
         125: expr: 
          126: call: 
           127: name: logger
           128: argument_list: 
            129: argument: 
             130: expr: 
              131: name: Core
            132: argument: 
             133: expr: 
              134: name: Error
            135: argument: 
             136: expr: 
              137: literal: "ber_parse_header(), expected tag %d, got %d"
            138: argument: 
             139: expr: 
              140: name: tagval
            141: argument: 
             142: expr: 
              143: name: tag
        144: return: 
         145: expr: 
          146: name: False
    147: expr_stmt: 
     148: expr: 
      149: call: 
       150: name: in_uint8
       151: argument_list: 
        152: argument: 
         153: expr: 
          154: name: s
        155: argument: 
         156: expr: 
          157: name: len
    158: if_stmt: 
     159: if: 
      160: condition: 
       161: expr: 
        162: name: len
        163: operator: &
        164: literal: 0x80
      165: block: 
       166: block_content: 
        167: expr_stmt: 
         168: expr: 
          169: name: len
          170: operator: &=
          171: operator: ~
          172: literal: 0x80
        173: expr_stmt: 
         174: expr: 
          175: operator: *
          176: name: length
          177: operator: =
          178: literal: 0
        179: while: 
         180: condition: 
          181: expr: 
           182: name: len
           183: operator: --
         184: block: 
          185: block_content: 
           186: expr_stmt: 
            187: expr: 
             188: call: 
              189: name: next_be
              190: argument_list: 
               191: argument: 
                192: expr: 
                 193: name: s
               194: argument: 
                195: expr: 
                 196: operator: *
                 197: name: length
     198: else: 
      199: block: 
       200: block_content: 
        201: expr_stmt: 
         202: expr: 
          203: operator: *
          204: name: length
          205: operator: =
          206: name: len
    207: return: 
     208: expr: 
      209: call: 
       210: name: s_check
       211: argument_list: 
        212: argument: 
         213: expr: 
          214: name: s

----------------------------------------
0: unit: 
 1: function: 
  2: type: 
   3: name: void
  4: name: next_be
  5: parameter_list: 
   6: parameter: 
    7: decl: 
     8: type: 
      9: name: STREAM
     10: name: s
   11: parameter: 
    12: decl: 
     13: type: 
      14: name: uint32
     15: name: v
  16: block: 
   17: block_content: 
    18: expr_stmt: 
     19: expr: 
      20: call: 
       21: name: s_assert_r
       22: argument_list: 
        23: argument: 
         24: expr: 
          25: name: s
        26: argument: 
         27: expr: 
          28: literal: 1
    29: expr_stmt: 
     30: expr: 
      31: name: v
      32: operator: =
      33: operator: (
      34: operator: (
      35: name: v
      36: operator: )
      37: operator: <<
      38: literal: 8
      39: operator: )
      40: operator: +
      41: operator: *
      42: operator: (
      43: operator: (
      44: name: s
      45: operator: )
      46: operator: ->
      47: name: p
      48: operator: ++
      49: operator: )
 50: function: 
  51: type: 
   52: name: int
  53: name: ber_parse_header
  54: parameter_list: 
   55: parameter: 
    56: decl: 
     57: type: 
      58: name: STREAM
     59: name: s
   60: parameter: 
    61: decl: 
     62: type: 
      63: name: int
     64: name: tagval
   65: parameter: 
    66: decl: 
     67: type: 
      68: name: uint32
      69: modifier: *
     70: name: length
  71: block: 
   72: block_content: 
    73: decl_stmt: 
     74: decl: 
      75: type: 
       76: name: int
      77: name: tag
     78: decl: 
      79: type: 
      80: name: len
    81: if_stmt: 
     82: if: 
      83: condition: 
       84: expr: 
        85: name: tagval
        86: operator: >
        87: literal: 0xff
      88: block: 
       89: block_content: 
        90: expr_stmt: 
         91: expr: 
          92: call: 
           93: name: in_uint16_be
           94: argument_list: 
            95: argument: 
             96: expr: 
              97: name: s
            98: argument: 
             99: expr: 
              100: name: tag
     101: else: 
      102: block: 
       103: block_content: 
        104: expr_stmt: 
         105: expr: 
          106: call: 
           107: name: in_uint8
           108: argument_list: 
            109: argument: 
             110: expr: 
              111: name: s
            112: argument: 
             113: expr: 
              114: name: tag
    115: if_stmt: 
     116: if: 
      117: condition: 
       118: expr: 
        119: name: tag
        120: operator: !=
        121: name: tagval
      122: block: 
       123: block_content: 
        124: expr_stmt: 
         125: expr: 
          126: call: 
           127: name: logger
           128: argument_list: 
            129: argument: 
             130: expr: 
              131: name: Core
            132: argument: 
             133: expr: 
              134: name: Error
            135: argument: 
             136: expr: 
              137: literal: "ber_parse_header(), expected tag %d, got %d"
            138: argument: 
             139: expr: 
              140: name: tagval
            141: argument: 
             142: expr: 
              143: name: tag
        144: return: 
         145: expr: 
          146: name: False
    147: expr_stmt: 
     148: expr: 
      149: call: 
       150: name: in_uint8
       151: argument_list: 
        152: argument: 
         153: expr: 
          154: name: s
        155: argument: 
         156: expr: 
          157: name: len
    158: if_stmt: 
     159: if: 
      160: condition: 
       161: expr: 
        162: name: len
        163: operator: &
        164: literal: 0x80
      165: block: 
       166: block_content: 
        167: expr_stmt: 
         168: expr: 
          169: name: len
          170: operator: &=
          171: operator: ~
          172: literal: 0x80
        173: expr_stmt: 
         174: expr: 
          175: operator: *
          176: name: length
          177: operator: =
          178: literal: 0
        179: while: 
         180: condition: 
          181: expr: 
           182: name: len
           183: operator: --
         184: block: 
          185: block_content: 
           186: expr_stmt: 
            187: expr: 
             188: call: 
              189: name: next_be
              190: argument_list: 
               191: argument: 
                192: expr: 
                 193: name: s
               194: argument: 
                195: expr: 
                 196: operator: *
                 197: name: length
     198: else: 
      199: block: 
       200: block_content: 
        201: expr_stmt: 
         202: expr: 
          203: operator: *
          204: name: length
          205: operator: =
          206: name: len
    207: return: 
     208: expr: 
      209: call: 
       210: name: s_check
       211: argument_list: 
        212: argument: 
         213: expr: 
          214: name: s
=====
0: function: 
 1: type: 
  2: name: int
 3: name: ber_parse_header
 4: parameter_list: 
  5: parameter: 
   6: decl: 
    7: type: 
     8: name: STREAM
    9: name: s
  10: parameter: 
   11: decl: 
    12: type: 
     13: name: int
    14: name: tagval
  15: parameter: 
   16: decl: 
    17: type: 
     18: name: int
     19: modifier: *
    20: name: length
 21: block: 
  22: block_content: 
   23: decl_stmt: 
    24: decl: 
     25: type: 
      26: name: int
     27: name: tag
    28: decl: 
     29: type: 
     30: name: len
   31: if_stmt: 
    32: if: 
     33: condition: 
      34: expr: 
       35: name: tagval
       36: operator: >
       37: literal: 0xff
     38: block: 
      39: block_content: 
       40: expr_stmt: 
        41: expr: 
         42: call: 
          43: name: in_uint16_be
          44: argument_list: 
           45: argument: 
            46: expr: 
             47: name: s
           48: argument: 
            49: expr: 
             50: name: tag
    51: else: 
     52: block: 
      53: block_content: 
       54: expr_stmt: 
        55: expr: 
         56: call: 
          57: name: in_uint8
          58: argument_list: 
           59: argument: 
            60: expr: 
             61: name: s
           62: argument: 
            63: expr: 
             64: name: tag
   65: if_stmt: 
    66: if: 
     67: condition: 
      68: expr: 
       69: name: tag
       70: operator: !=
       71: name: tagval
     72: block: 
      73: block_content: 
       74: expr_stmt: 
        75: expr: 
         76: call: 
          77: name: logger
          78: argument_list: 
           79: argument: 
            80: expr: 
             81: name: Core
           82: argument: 
            83: expr: 
             84: name: Error
           85: argument: 
            86: expr: 
             87: literal: "ber_parse_header(), expected tag %d, got %d"
           88: argument: 
            89: expr: 
             90: name: tagval
           91: argument: 
            92: expr: 
             93: name: tag
       94: return: 
        95: expr: 
         96: name: False
   97: expr_stmt: 
    98: expr: 
     99: call: 
      100: name: in_uint8
      101: argument_list: 
       102: argument: 
        103: expr: 
         104: name: s
       105: argument: 
        106: expr: 
         107: name: len
   108: if_stmt: 
    109: if: 
     110: condition: 
      111: expr: 
       112: name: len
       113: operator: &
       114: literal: 0x80
     115: block: 
      116: block_content: 
       117: expr_stmt: 
        118: expr: 
         119: name: len
         120: operator: &=
         121: operator: ~
         122: literal: 0x80
       123: expr_stmt: 
        124: expr: 
         125: operator: *
         126: name: length
         127: operator: =
         128: literal: 0
       129: while: 
        130: condition: 
         131: expr: 
          132: name: len
          133: operator: --
        134: block: 
         135: block_content: 
          136: expr_stmt: 
           137: expr: 
            138: call: 
             139: name: next_be
             140: argument_list: 
              141: argument: 
               142: expr: 
                143: name: s
              144: argument: 
               145: expr: 
                146: operator: *
                147: name: length
    148: else: 
     149: block: 
      150: block_content: 
       151: expr_stmt: 
        152: expr: 
         153: operator: *
         154: name: length
         155: operator: =
         156: name: len
   157: return: 
    158: expr: 
     159: call: 
      160: name: s_check
      161: argument_list: 
       162: argument: 
        163: expr: 
         164: name: s

----------------------------------------
0: function: 
 1: type: 
  2: name: int
 3: name: ber_parse_header
 4: parameter_list: 
  5: parameter: 
   6: decl: 
    7: type: 
     8: name: STREAM
    9: name: s
  10: parameter: 
   11: decl: 
    12: type: 
     13: name: int
    14: name: tagval
  15: parameter: 
   16: decl: 
    17: type: 
     18: name: uint32
     19: modifier: *
    20: name: length
 21: block: 
  22: block_content: 
   23: decl_stmt: 
    24: decl: 
     25: type: 
      26: name: int
     27: name: tag
    28: decl: 
     29: type: 
     30: name: len
   31: if_stmt: 
    32: if: 
     33: condition: 
      34: expr: 
       35: name: tagval
       36: operator: >
       37: literal: 0xff
     38: block: 
      39: block_content: 
       40: expr_stmt: 
        41: expr: 
         42: call: 
          43: name: in_uint16_be
          44: argument_list: 
           45: argument: 
            46: expr: 
             47: name: s
           48: argument: 
            49: expr: 
             50: name: tag
    51: else: 
     52: block: 
      53: block_content: 
       54: expr_stmt: 
        55: expr: 
         56: call: 
          57: name: in_uint8
          58: argument_list: 
           59: argument: 
            60: expr: 
             61: name: s
           62: argument: 
            63: expr: 
             64: name: tag
   65: if_stmt: 
    66: if: 
     67: condition: 
      68: expr: 
       69: name: tag
       70: operator: !=
       71: name: tagval
     72: block: 
      73: block_content: 
       74: expr_stmt: 
        75: expr: 
         76: call: 
          77: name: logger
          78: argument_list: 
           79: argument: 
            80: expr: 
             81: name: Core
           82: argument: 
            83: expr: 
             84: name: Error
           85: argument: 
            86: expr: 
             87: literal: "ber_parse_header(), expected tag %d, got %d"
           88: argument: 
            89: expr: 
             90: name: tagval
           91: argument: 
            92: expr: 
             93: name: tag
       94: return: 
        95: expr: 
         96: name: False
   97: expr_stmt: 
    98: expr: 
     99: call: 
      100: name: in_uint8
      101: argument_list: 
       102: argument: 
        103: expr: 
         104: name: s
       105: argument: 
        106: expr: 
         107: name: len
   108: if_stmt: 
    109: if: 
     110: condition: 
      111: expr: 
       112: name: len
       113: operator: &
       114: literal: 0x80
     115: block: 
      116: block_content: 
       117: expr_stmt: 
        118: expr: 
         119: name: len
         120: operator: &=
         121: operator: ~
         122: literal: 0x80
       123: expr_stmt: 
        124: expr: 
         125: operator: *
         126: name: length
         127: operator: =
         128: literal: 0
       129: while: 
        130: condition: 
         131: expr: 
          132: name: len
          133: operator: --
        134: block: 
         135: block_content: 
          136: expr_stmt: 
           137: expr: 
            138: call: 
             139: name: next_be
             140: argument_list: 
              141: argument: 
               142: expr: 
                143: name: s
              144: argument: 
               145: expr: 
                146: operator: *
                147: name: length
    148: else: 
     149: block: 
      150: block_content: 
       151: expr_stmt: 
        152: expr: 
         153: operator: *
         154: name: length
         155: operator: =
         156: name: len
   157: return: 
    158: expr: 
     159: call: 
      160: name: s_check
      161: argument_list: 
       162: argument: 
        163: expr: 
         164: name: s
=====
0: parameter_list: 
 1: parameter: 
  2: decl: 
   3: type: 
    4: name: STREAM
   5: name: s
 6: parameter: 
  7: decl: 
   8: type: 
    9: name: int
   10: name: tagval
 11: parameter: 
  12: decl: 
   13: type: 
    14: name: int
    15: modifier: *
   16: name: length

----------------------------------------
0: parameter_list: 
 1: parameter: 
  2: decl: 
   3: type: 
    4: name: STREAM
   5: name: s
 6: parameter: 
  7: decl: 
   8: type: 
    9: name: int
   10: name: tagval
 11: parameter: 
  12: decl: 
   13: type: 
    14: name: uint32
    15: modifier: *
   16: name: length
=====
0: parameter: 
 1: decl: 
  2: type: 
   3: name: int
   4: modifier: *
  5: name: length

----------------------------------------
0: parameter: 
 1: decl: 
  2: type: 
   3: name: uint32
   4: modifier: *
  5: name: length
=====
0: decl: 
 1: type: 
  2: name: int
  3: modifier: *
 4: name: length

----------------------------------------
0: decl: 
 1: type: 
  2: name: uint32
  3: modifier: *
 4: name: length
=====
0: type: 
 1: name: int
 2: modifier: *

----------------------------------------
0: type: 
 1: name: uint32
 2: modifier: *
=====
0: name: int

----------------------------------------
0: name: uint32
=====
