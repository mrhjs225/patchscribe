0: expr: 
 1: ?: !@#$holes0
 2: operator: -
 3: literal: 1
 4: ?: !@#$holes1

----------------------------------------
0: expr: 
 1: ?: !@#$holes0
 2: operator: -
 3: literal: 1
 4: ?: !@#$holes1
=====
0: unit: 
 1: function: 
  2: type: 
   3: specifier: static
   4: name: s32
  5: name: gf_hevc_read_sps_bs_internal
  6: parameter_list: 
   7: parameter: 
    8: decl: 
     9: type: 
      10: name: GF_BitStream
      11: modifier: *
     12: name: bs
   13: parameter: 
    14: decl: 
     15: type: 
      16: name: HEVCState
      17: modifier: *
     18: name: hevc
   19: parameter: 
    20: decl: 
     21: type: 
      22: name: u8
     23: name: layer_id
   24: parameter: 
    25: decl: 
     26: type: 
      27: name: u32
      28: modifier: *
     29: name: vui_flag_pos
  30: block: 
   31: block_content: 
    32: decl_stmt: 
     33: decl: 
      34: type: 
       35: name: s32
      36: name: vps_id
     37: decl: 
      38: type: 
      39: name: sps_id
      40: init: 
       41: expr: 
        42: operator: -
        43: literal: 1
    44: decl_stmt: 
     45: decl: 
      46: type: 
       47: name: u32
      48: name: i
     49: decl: 
      50: type: 
      51: name: nb_CTUs
     52: decl: 
      53: type: 
      54: name: depth
    55: decl_stmt: 
     56: decl: 
      57: type: 
       58: name: HEVC_SPS
       59: modifier: *
      60: name: sps
    61: decl_stmt: 
     62: decl: 
      63: type: 
       64: name: HEVC_VPS
       65: modifier: *
      66: name: vps
    67: decl_stmt: 
     68: decl: 
      69: type: 
       70: name: HEVC_ProfileTierLevel
      71: name: ptl
    72: decl_stmt: 
     73: decl: 
      74: type: 
       75: name: Bool
      76: name: multiLayerExtSpsFlag
    77: decl_stmt: 
     78: decl: 
      79: type: 
       80: name: u8
      81: name: sps_ext_or_max_sub_layers_minus1
     82: decl: 
      83: type: 
      84: name: max_sub_layers_minus1
    85: if_stmt: 
     86: if: 
      87: condition: 
       88: expr: 
        89: name: vui_flag_pos
      90: block: 
       91: block_content: 
        92: expr_stmt: 
         93: expr: 
          94: operator: *
          95: name: vui_flag_pos
          96: operator: =
          97: literal: 0
    98: comment: //nalu header already parsed
    99: expr_stmt: 
     100: expr: 
      101: name: vps_id
      102: operator: =
      103: call: 
       104: name: gf_bs_read_int_log
       105: argument_list: 
        106: argument: 
         107: expr: 
          108: name: bs
        109: argument: 
         110: expr: 
          111: literal: 4
        112: argument: 
         113: expr: 
          114: literal: "vps_id"
    115: if_stmt: 
     116: if: 
      117: condition: 
       118: expr: 
        119: name: vps_id
        120: operator: >=
        121: literal: 16
      122: block: 
       123: block_content: 
        124: return: 
         125: expr: 
          126: operator: -
          127: literal: 1
    128: expr_stmt: 
     129: expr: 
      130: call: 
       131: name: memset
       132: argument_list: 
        133: argument: 
         134: expr: 
          135: operator: &
          136: name: ptl
        137: argument: 
         138: expr: 
          139: literal: 0
        140: argument: 
         141: expr: 
          142: sizeof: 
           143: argument_list: 
            144: argument: 
             145: expr: 
              146: name: ptl
    147: expr_stmt: 
     148: expr: 
      149: name: max_sub_layers_minus1
      150: operator: =
      151: literal: 0
    152: expr_stmt: 
     153: expr: 
      154: name: sps_ext_or_max_sub_layers_minus1
      155: operator: =
      156: literal: 0
    157: if_stmt: 
     158: if: 
      159: condition: 
       160: expr: 
        161: name: layer_id
        162: operator: ==
        163: literal: 0
      164: block: 
       165: block_content: 
        166: expr_stmt: 
         167: expr: 
          168: name: max_sub_layers_minus1
          169: operator: =
          170: call: 
           171: name: gf_bs_read_int_log
           172: argument_list: 
            173: argument: 
             174: expr: 
              175: name: bs
            176: argument: 
             177: expr: 
              178: literal: 3
            179: argument: 
             180: expr: 
              181: literal: "max_sub_layers_minus1"
     182: else: 
      183: block: 
       184: block_content: 
        185: expr_stmt: 
         186: expr: 
          187: name: sps_ext_or_max_sub_layers_minus1
          188: operator: =
          189: call: 
           190: name: gf_bs_read_int_log
           191: argument_list: 
            192: argument: 
             193: expr: 
              194: name: bs
            195: argument: 
             196: expr: 
              197: literal: 3
            198: argument: 
             199: expr: 
              200: literal: "sps_ext_or_max_sub_layers_minus1"
    201: expr_stmt: 
     202: expr: 
      203: name: multiLayerExtSpsFlag
      204: operator: =
      205: operator: (
      206: name: layer_id
      207: operator: !=
      208: literal: 0
      209: operator: )
      210: operator: &&
      211: operator: (
      212: name: sps_ext_or_max_sub_layers_minus1
      213: operator: ==
      214: literal: 7
      215: operator: )
    216: if_stmt: 
     217: if: 
      218: condition: 
       219: expr: 
        220: operator: !
        221: name: multiLayerExtSpsFlag
      222: block: 
       223: block_content: 
        224: expr_stmt: 
         225: expr: 
          226: call: 
           227: name: gf_bs_read_int_log
           228: argument_list: 
            229: argument: 
             230: expr: 
              231: name: bs
            232: argument: 
             233: expr: 
              234: literal: 1
            235: argument: 
             236: expr: 
              237: literal: "temporal_id_nesting_flag"
        238: expr_stmt: 
         239: expr: 
          240: call: 
           241: name: hevc_profile_tier_level
           242: argument_list: 
            243: argument: 
             244: expr: 
              245: name: bs
            246: argument: 
             247: expr: 
              248: literal: 1
            249: argument: 
             250: expr: 
              251: name: max_sub_layers_minus1
            252: argument: 
             253: expr: 
              254: operator: &
              255: name: ptl
            256: argument: 
             257: expr: 
              258: literal: 0
    259: expr_stmt: 
     260: expr: 
      261: name: sps_id
      262: operator: =
      263: call: 
       264: name: gf_bs_read_ue_log
       265: argument_list: 
        266: argument: 
         267: expr: 
          268: name: bs
        269: argument: 
         270: expr: 
          271: literal: "sps_id"
    272: if_stmt: 
     273: if: 
      274: condition: 
       275: expr: 
        276: operator: (
        277: name: sps_id
        278: operator: <
        279: literal: 0
        280: operator: )
        281: operator: ||
        282: operator: (
        283: name: sps_id
        284: operator: >=
        285: literal: 16
        286: operator: )
      287: block: 
       288: block_content: 
        289: return: 
         290: expr: 
          291: operator: -
          292: literal: 1
    293: expr_stmt: 
     294: expr: 
      295: name: sps
      296: operator: =
      297: operator: &
      298: name: 
       299: name: hevc
       300: operator: ->
       301: name: sps
       302: index: 
        303: expr: 
         304: name: sps_id
    305: if_stmt: 
     306: if: 
      307: condition: 
       308: expr: 
        309: operator: !
        310: name: 
         311: name: sps
         312: operator: ->
         313: name: state
      314: block: 
       315: block_content: 
        316: expr_stmt: 
         317: expr: 
          318: name: 
           319: name: sps
           320: operator: ->
           321: name: state
          322: operator: =
          323: literal: 1
        324: expr_stmt: 
         325: expr: 
          326: name: 
           327: name: sps
           328: operator: ->
           329: name: id
          330: operator: =
          331: name: sps_id
        332: expr_stmt: 
         333: expr: 
          334: name: 
           335: name: sps
           336: operator: ->
           337: name: vps_id
          338: operator: =
          339: name: vps_id
    340: expr_stmt: 
     341: expr: 
      342: name: 
       343: name: sps
       344: operator: ->
       345: name: ptl
      346: operator: =
      347: name: ptl
    348: expr_stmt: 
     349: expr: 
      350: name: vps
      351: operator: =
      352: operator: &
      353: name: 
       354: name: hevc
       355: operator: ->
       356: name: vps
       357: index: 
        358: expr: 
         359: name: vps_id
    360: expr_stmt: 
     361: expr: 
      362: name: 
       363: name: sps
       364: operator: ->
       365: name: max_sub_layers_minus1
      366: operator: =
      367: literal: 0
    368: expr_stmt: 
     369: expr: 
      370: name: 
       371: name: sps
       372: operator: ->
       373: name: sps_ext_or_max_sub_layers_minus1
      374: operator: =
      375: literal: 0
    376: comment: /* default values */
    377: expr_stmt: 
     378: expr: 
      379: name: 
       380: name: sps
       381: operator: ->
       382: name: colour_primaries
      383: operator: =
      384: literal: 2
    385: expr_stmt: 
     386: expr: 
      387: name: 
       388: name: sps
       389: operator: ->
       390: name: transfer_characteristic
      391: operator: =
      392: literal: 2
    393: expr_stmt: 
     394: expr: 
      395: name: 
       396: name: sps
       397: operator: ->
       398: name: matrix_coeffs
      399: operator: =
      400: literal: 2
    401: comment: //sps_rep_format_idx = 0;
    402: if_stmt: 
     403: if: 
      404: condition: 
       405: expr: 
        406: name: multiLayerExtSpsFlag
      407: block: 
       408: block_content: 
        409: expr_stmt: 
         410: expr: 
          411: name: 
           412: name: sps
           413: operator: ->
           414: name: update_rep_format_flag
          415: operator: =
          416: call: 
           417: name: gf_bs_read_int_log
           418: argument_list: 
            419: argument: 
             420: expr: 
              421: name: bs
            422: argument: 
             423: expr: 
              424: literal: 1
            425: argument: 
             426: expr: 
              427: literal: "update_rep_format_flag"
        428: if_stmt: 
         429: if: 
          430: condition: 
           431: expr: 
            432: name: 
             433: name: sps
             434: operator: ->
             435: name: update_rep_format_flag
          436: block: 
           437: block_content: 
            438: expr_stmt: 
             439: expr: 
              440: name: 
               441: name: sps
               442: operator: ->
               443: name: rep_format_idx
              444: operator: =
              445: call: 
               446: name: gf_bs_read_int_log
               447: argument_list: 
                448: argument: 
                 449: expr: 
                  450: name: bs
                451: argument: 
                 452: expr: 
                  453: literal: 8
                454: argument: 
                 455: expr: 
                  456: literal: "rep_format_idx"
         457: else: 
          458: block: 
           459: block_content: 
            460: expr_stmt: 
             461: expr: 
              462: name: 
               463: name: sps
               464: operator: ->
               465: name: rep_format_idx
              466: operator: =
              467: name: 
               468: name: vps
               469: operator: ->
               470: name: rep_format_idx
               471: index: 
                472: expr: 
                 473: name: layer_id
        474: expr_stmt: 
         475: expr: 
          476: name: 
           477: name: sps
           478: operator: ->
           479: name: width
          480: operator: =
          481: name: 
           482: name: vps
           483: operator: ->
           484: name: rep_formats
           485: index: 
            486: expr: 
             487: name: 
              488: name: sps
              489: operator: ->
              490: name: rep_format_idx
          491: operator: .
          492: name: pic_width_luma_samples
        493: expr_stmt: 
         494: expr: 
          495: name: 
           496: name: sps
           497: operator: ->
           498: name: height
          499: operator: =
          500: name: 
           501: name: vps
           502: operator: ->
           503: name: rep_formats
           504: index: 
            505: expr: 
             506: name: 
              507: name: sps
              508: operator: ->
              509: name: rep_format_idx
          510: operator: .
          511: name: pic_height_luma_samples
        512: expr_stmt: 
         513: expr: 
          514: name: 
           515: name: sps
           516: operator: ->
           517: name: chroma_format_idc
          518: operator: =
          519: name: 
           520: name: vps
           521: operator: ->
           522: name: rep_formats
           523: index: 
            524: expr: 
             525: name: 
              526: name: sps
              527: operator: ->
              528: name: rep_format_idx
          529: operator: .
          530: name: chroma_format_idc
        531: expr_stmt: 
         532: expr: 
          533: name: 
           534: name: sps
           535: operator: ->
           536: name: bit_depth_luma
          537: operator: =
          538: name: 
           539: name: vps
           540: operator: ->
           541: name: rep_formats
           542: index: 
            543: expr: 
             544: name: 
              545: name: sps
              546: operator: ->
              547: name: rep_format_idx
          548: operator: .
          549: name: bit_depth_luma
        550: expr_stmt: 
         551: expr: 
          552: name: 
           553: name: sps
           554: operator: ->
           555: name: bit_depth_chroma
          556: operator: =
          557: name: 
           558: name: vps
           559: operator: ->
           560: name: rep_formats
           561: index: 
            562: expr: 
             563: name: 
              564: name: sps
              565: operator: ->
              566: name: rep_format_idx
          567: operator: .
          568: name: bit_depth_chroma
        569: expr_stmt: 
         570: expr: 
          571: name: 
           572: name: sps
           573: operator: ->
           574: name: separate_colour_plane_flag
          575: operator: =
          576: name: 
           577: name: vps
           578: operator: ->
           579: name: rep_formats
           580: index: 
            581: expr: 
             582: name: 
              583: name: sps
              584: operator: ->
              585: name: rep_format_idx
          586: operator: .
          587: name: separate_colour_plane_flag
        588: comment: //TODO this is crude ...
        589: expr_stmt: 
         590: expr: 
          591: name: 
           592: name: sps
           593: operator: ->
           594: name: ptl
          595: operator: =
          596: name: 
           597: name: vps
           598: operator: ->
           599: name: ext_ptl
           600: index: 
            601: expr: 
             602: literal: 0
     603: else: 
      604: block: 
       605: block_content: 
        606: expr_stmt: 
         607: expr: 
          608: name: 
           609: name: sps
           610: operator: ->
           611: name: chroma_format_idc
          612: operator: =
          613: call: 
           614: name: gf_bs_read_ue_log
           615: argument_list: 
            616: argument: 
             617: expr: 
              618: name: bs
            619: argument: 
             620: expr: 
              621: literal: "chroma_format_idc"
        622: if_stmt: 
         623: if: 
          624: condition: 
           625: expr: 
            626: name: 
             627: name: sps
             628: operator: ->
             629: name: chroma_format_idc
            630: operator: ==
            631: literal: 3
          632: block: 
           633: block_content: 
            634: expr_stmt: 
             635: expr: 
              636: name: 
               637: name: sps
               638: operator: ->
               639: name: separate_colour_plane_flag
              640: operator: =
              641: call: 
               642: name: gf_bs_read_int_log
               643: argument_list: 
                644: argument: 
                 645: expr: 
                  646: name: bs
                647: argument: 
                 648: expr: 
                  649: literal: 1
                650: argument: 
                 651: expr: 
                  652: literal: "separate_colour_plane_flag"
        653: expr_stmt: 
         654: expr: 
          655: name: 
           656: name: sps
           657: operator: ->
           658: name: width
          659: operator: =
          660: call: 
           661: name: gf_bs_read_ue_log
           662: argument_list: 
            663: argument: 
             664: expr: 
              665: name: bs
            666: argument: 
             667: expr: 
              668: literal: "width"
        669: expr_stmt: 
         670: expr: 
          671: name: 
           672: name: sps
           673: operator: ->
           674: name: height
          675: operator: =
          676: call: 
           677: name: gf_bs_read_ue_log
           678: argument_list: 
            679: argument: 
             680: expr: 
              681: name: bs
            682: argument: 
             683: expr: 
              684: literal: "height"
        685: if_stmt: 
         686: if: 
          687: condition: 
           688: expr: 
            689: operator: (
            690: name: 
             691: name: sps
             692: operator: ->
             693: name: cw_flag
            694: operator: =
            695: call: 
             696: name: gf_bs_read_int_log
             697: argument_list: 
              698: argument: 
               699: expr: 
                700: name: bs
              701: argument: 
               702: expr: 
                703: literal: 1
              704: argument: 
               705: expr: 
                706: literal: "conformance_window_flag"
            707: operator: )
          708: block: 
           709: block_content: 
            710: decl_stmt: 
             711: decl: 
              712: type: 
               713: name: u32
              714: name: SubWidthC
             715: decl: 
              716: type: 
              717: name: SubHeightC
            718: if_stmt: 
             719: if: 
              720: condition: 
               721: expr: 
                722: name: 
                 723: name: sps
                 724: operator: ->
                 725: name: chroma_format_idc
                726: operator: ==
                727: literal: 1
              728: block: 
               729: block_content: 
                730: expr_stmt: 
                 731: expr: 
                  732: name: SubWidthC
                  733: operator: =
                  734: name: SubHeightC
                  735: operator: =
                  736: literal: 2
             737: if: 
              738: condition: 
               739: expr: 
                740: name: 
                 741: name: sps
                 742: operator: ->
                 743: name: chroma_format_idc
                744: operator: ==
                745: literal: 2
              746: block: 
               747: block_content: 
                748: expr_stmt: 
                 749: expr: 
                  750: name: SubWidthC
                  751: operator: =
                  752: literal: 2
                753: expr_stmt: 
                 754: expr: 
                  755: name: SubHeightC
                  756: operator: =
                  757: literal: 1
             758: else: 
              759: block: 
               760: block_content: 
                761: expr_stmt: 
                 762: expr: 
                  763: name: SubWidthC
                  764: operator: =
                  765: name: SubHeightC
                  766: operator: =
                  767: literal: 1
            768: expr_stmt: 
             769: expr: 
              770: name: 
               771: name: sps
               772: operator: ->
               773: name: cw_left
              774: operator: =
              775: call: 
               776: name: gf_bs_read_ue_log
               777: argument_list: 
                778: argument: 
                 779: expr: 
                  780: name: bs
                781: argument: 
                 782: expr: 
                  783: literal: "conformance_window_left"
            784: expr_stmt: 
             785: expr: 
              786: name: 
               787: name: sps
               788: operator: ->
               789: name: cw_right
              790: operator: =
              791: call: 
               792: name: gf_bs_read_ue_log
               793: argument_list: 
                794: argument: 
                 795: expr: 
                  796: name: bs
                797: argument: 
                 798: expr: 
                  799: literal: "conformance_window_right"
            800: expr_stmt: 
             801: expr: 
              802: name: 
               803: name: sps
               804: operator: ->
               805: name: cw_top
              806: operator: =
              807: call: 
               808: name: gf_bs_read_ue_log
               809: argument_list: 
                810: argument: 
                 811: expr: 
                  812: name: bs
                813: argument: 
                 814: expr: 
                  815: literal: "conformance_window_top"
            816: expr_stmt: 
             817: expr: 
              818: name: 
               819: name: sps
               820: operator: ->
               821: name: cw_bottom
              822: operator: =
              823: call: 
               824: name: gf_bs_read_ue_log
               825: argument_list: 
                826: argument: 
                 827: expr: 
                  828: name: bs
                829: argument: 
                 830: expr: 
                  831: literal: "conformance_window_bottom"
            832: expr_stmt: 
             833: expr: 
              834: name: 
               835: name: sps
               836: operator: ->
               837: name: width
              838: operator: -=
              839: name: SubWidthC
              840: operator: *
              841: operator: (
              842: name: 
               843: name: sps
               844: operator: ->
               845: name: cw_left
              846: operator: +
              847: name: 
               848: name: sps
               849: operator: ->
               850: name: cw_right
              851: operator: )
            852: expr_stmt: 
             853: expr: 
              854: name: 
               855: name: sps
               856: operator: ->
               857: name: height
              858: operator: -=
              859: name: SubHeightC
              860: operator: *
              861: operator: (
              862: name: 
               863: name: sps
               864: operator: ->
               865: name: cw_top
              866: operator: +
              867: name: 
               868: name: sps
               869: operator: ->
               870: name: cw_bottom
              871: operator: )
        872: expr_stmt: 
         873: expr: 
          874: name: 
           875: name: sps
           876: operator: ->
           877: name: bit_depth_luma
          878: operator: =
          879: literal: 8
          880: operator: +
          881: call: 
           882: name: gf_bs_read_ue_log
           883: argument_list: 
            884: argument: 
             885: expr: 
              886: name: bs
            887: argument: 
             888: expr: 
              889: literal: "bit_depth_luma_minus8"
        890: expr_stmt: 
         891: expr: 
          892: name: 
           893: name: sps
           894: operator: ->
           895: name: bit_depth_chroma
          896: operator: =
          897: literal: 8
          898: operator: +
          899: call: 
           900: name: gf_bs_read_ue_log
           901: argument_list: 
            902: argument: 
             903: expr: 
              904: name: bs
            905: argument: 
             906: expr: 
              907: literal: "bit_depth_chroma_minus8"
    908: expr_stmt: 
     909: expr: 
      910: name: 
       911: name: sps
       912: operator: ->
       913: name: log2_max_pic_order_cnt_lsb
      914: operator: =
      915: literal: 4
      916: operator: +
      917: call: 
       918: name: gf_bs_read_ue_log
       919: argument_list: 
        920: argument: 
         921: expr: 
          922: name: bs
        923: argument: 
         924: expr: 
          925: literal: "log2_max_pic_order_cnt_lsb_minus4"
    926: if_stmt: 
     927: if: 
      928: condition: 
       929: expr: 
        930: operator: !
        931: name: multiLayerExtSpsFlag
      932: block: 
       933: block_content: 
        934: expr_stmt: 
         935: expr: 
          936: name: 
           937: name: sps
           938: operator: ->
           939: name: sub_layer_ordering_info_present_flag
          940: operator: =
          941: call: 
           942: name: gf_bs_read_int_log
           943: argument_list: 
            944: argument: 
             945: expr: 
              946: name: bs
            947: argument: 
             948: expr: 
              949: literal: 1
            950: argument: 
             951: expr: 
              952: literal: "sub_layer_ordering_info_present_flag"
        953: for: 
         954: control: 
          955: init: 
           956: expr: 
            957: name: i
            958: operator: =
            959: ternary: 
             960: condition: 
              961: expr: 
               962: name: 
                963: name: sps
                964: operator: ->
                965: name: sub_layer_ordering_info_present_flag
             966: then: 
              967: expr: 
               968: literal: 0
             969: else: 
              970: expr: 
               971: name: 
                972: name: sps
                973: operator: ->
                974: name: max_sub_layers_minus1
          975: condition: 
           976: expr: 
            977: name: i
            978: operator: <=
            979: name: 
             980: name: sps
             981: operator: ->
             982: name: max_sub_layers_minus1
          983: incr: 
           984: expr: 
            985: name: i
            986: operator: ++
         987: block: 
          988: block_content: 
           989: expr_stmt: 
            990: expr: 
             991: call: 
              992: name: gf_bs_read_ue_log_idx
              993: argument_list: 
               994: argument: 
                995: expr: 
                 996: name: bs
               997: argument: 
                998: expr: 
                 999: literal: "max_dec_pic_buffering"
               1000: argument: 
                1001: expr: 
                 1002: name: i
           1003: expr_stmt: 
            1004: expr: 
             1005: call: 
              1006: name: gf_bs_read_ue_log_idx
              1007: argument_list: 
               1008: argument: 
                1009: expr: 
                 1010: name: bs
               1011: argument: 
                1012: expr: 
                 1013: literal: "num_reorder_pics"
               1014: argument: 
                1015: expr: 
                 1016: name: i
           1017: expr_stmt: 
            1018: expr: 
             1019: call: 
              1020: name: gf_bs_read_ue_log_idx
              1021: argument_list: 
               1022: argument: 
                1023: expr: 
                 1024: name: bs
               1025: argument: 
                1026: expr: 
                 1027: literal: "max_latency_increase"
               1028: argument: 
                1029: expr: 
                 1030: name: i
    1031: expr_stmt: 
     1032: expr: 
      1033: name: 
       1034: name: sps
       1035: operator: ->
       1036: name: log2_min_luma_coding_block_size
      1037: operator: =
      1038: literal: 3
      1039: operator: +
      1040: call: 
       1041: name: gf_bs_read_ue_log
       1042: argument_list: 
        1043: argument: 
         1044: expr: 
          1045: name: bs
        1046: argument: 
         1047: expr: 
          1048: literal: "log2_min_luma_coding_block_size_minus3"
    1049: expr_stmt: 
     1050: expr: 
      1051: name: 
       1052: name: sps
       1053: operator: ->
       1054: name: log2_diff_max_min_luma_coding_block_size
      1055: operator: =
      1056: call: 
       1057: name: gf_bs_read_ue_log
       1058: argument_list: 
        1059: argument: 
         1060: expr: 
          1061: name: bs
        1062: argument: 
         1063: expr: 
          1064: literal: "log2_diff_max_min_luma_coding_block_size"
    1065: expr_stmt: 
     1066: expr: 
      1067: name: 
       1068: name: sps
       1069: operator: ->
       1070: name: max_CU_width
      1071: operator: =
      1072: operator: (
      1073: literal: 1
      1074: operator: <<
      1075: operator: (
      1076: name: 
       1077: name: sps
       1078: operator: ->
       1079: name: log2_min_luma_coding_block_size
      1080: operator: +
      1081: name: 
       1082: name: sps
       1083: operator: ->
       1084: name: log2_diff_max_min_luma_coding_block_size
      1085: operator: )
      1086: operator: )
    1087: expr_stmt: 
     1088: expr: 
      1089: name: 
       1090: name: sps
       1091: operator: ->
       1092: name: max_CU_height
      1093: operator: =
      1094: operator: (
      1095: literal: 1
      1096: operator: <<
      1097: operator: (
      1098: name: 
       1099: name: sps
       1100: operator: ->
       1101: name: log2_min_luma_coding_block_size
      1102: operator: +
      1103: name: 
       1104: name: sps
       1105: operator: ->
       1106: name: log2_diff_max_min_luma_coding_block_size
      1107: operator: )
      1108: operator: )
    1109: expr_stmt: 
     1110: expr: 
      1111: name: 
       1112: name: sps
       1113: operator: ->
       1114: name: log2_min_transform_block_size
      1115: operator: =
      1116: literal: 2
      1117: operator: +
      1118: call: 
       1119: name: gf_bs_read_ue_log
       1120: argument_list: 
        1121: argument: 
         1122: expr: 
          1123: name: bs
        1124: argument: 
         1125: expr: 
          1126: literal: "log2_min_transform_block_size_minus2"
    1127: expr_stmt: 
     1128: expr: 
      1129: name: 
       1130: name: sps
       1131: operator: ->
       1132: name: log2_max_transform_block_size
      1133: operator: =
      1134: name: 
       1135: name: sps
       1136: operator: ->
       1137: name: log2_min_transform_block_size
      1138: operator: +
      1139: call: 
       1140: name: gf_bs_read_ue_log
       1141: argument_list: 
        1142: argument: 
         1143: expr: 
          1144: name: bs
        1145: argument: 
         1146: expr: 
          1147: literal: "log2_max_transform_block_size"
    1148: expr_stmt: 
     1149: expr: 
      1150: name: depth
      1151: operator: =
      1152: literal: 0
    1153: expr_stmt: 
     1154: expr: 
      1155: name: 
       1156: name: sps
       1157: operator: ->
       1158: name: max_transform_hierarchy_depth_inter
      1159: operator: =
      1160: call: 
       1161: name: gf_bs_read_ue_log
       1162: argument_list: 
        1163: argument: 
         1164: expr: 
          1165: name: bs
        1166: argument: 
         1167: expr: 
          1168: literal: "max_transform_hierarchy_depth_inter"
    1169: expr_stmt: 
     1170: expr: 
      1171: name: 
       1172: name: sps
       1173: operator: ->
       1174: name: max_transform_hierarchy_depth_intra
      1175: operator: =
      1176: call: 
       1177: name: gf_bs_read_ue_log
       1178: argument_list: 
        1179: argument: 
         1180: expr: 
          1181: name: bs
        1182: argument: 
         1183: expr: 
          1184: literal: "max_transform_hierarchy_depth_intra"
    1185: while: 
     1186: condition: 
      1187: expr: 
       1188: operator: (
       1189: name: u32
       1190: operator: )
       1191: operator: (
       1192: name: 
        1193: name: sps
        1194: operator: ->
        1195: name: max_CU_width
       1196: operator: >>
       1197: name: 
        1198: name: sps
        1199: operator: ->
        1200: name: log2_diff_max_min_luma_coding_block_size
       1201: operator: )
       1202: operator: >
       1203: operator: (
       1204: name: u32
       1205: operator: )
       1206: operator: (
       1207: literal: 1
       1208: operator: <<
       1209: operator: (
       1210: name: 
        1211: name: sps
        1212: operator: ->
        1213: name: log2_min_transform_block_size
       1214: operator: +
       1215: name: depth
       1216: operator: )
       1217: operator: )
     1218: block: 
      1219: block_content: 
       1220: expr_stmt: 
        1221: expr: 
         1222: name: depth
         1223: operator: ++
    1224: expr_stmt: 
     1225: expr: 
      1226: name: 
       1227: name: sps
       1228: operator: ->
       1229: name: max_CU_depth
      1230: operator: =
      1231: name: 
       1232: name: sps
       1233: operator: ->
       1234: name: log2_diff_max_min_luma_coding_block_size
      1235: operator: +
      1236: name: depth
    1237: expr_stmt: 
     1238: expr: 
      1239: name: nb_CTUs
      1240: operator: =
      1241: operator: (
      1242: operator: (
      1243: name: 
       1244: name: sps
       1245: operator: ->
       1246: name: width
      1247: operator: +
      1248: name: 
       1249: name: sps
       1250: operator: ->
       1251: name: max_CU_width
      1252: operator: -
      1253: literal: 1
      1254: operator: )
      1255: operator: /
      1256: name: 
       1257: name: sps
       1258: operator: ->
       1259: name: max_CU_width
      1260: operator: )
      1261: operator: *
      1262: operator: (
      1263: operator: (
      1264: name: 
       1265: name: sps
       1266: operator: ->
       1267: name: height
      1268: operator: +
      1269: name: 
       1270: name: sps
       1271: operator: ->
       1272: name: max_CU_height
      1273: operator: -
      1274: literal: 1
      1275: operator: )
      1276: operator: /
      1277: name: 
       1278: name: sps
       1279: operator: ->
       1280: name: max_CU_height
      1281: operator: )
    1282: expr_stmt: 
     1283: expr: 
      1284: name: 
       1285: name: sps
       1286: operator: ->
       1287: name: bitsSliceSegmentAddress
      1288: operator: =
      1289: literal: 0
    1290: while: 
     1291: condition: 
      1292: expr: 
       1293: name: nb_CTUs
       1294: operator: >
       1295: operator: (
       1296: name: u32
       1297: operator: )
       1298: operator: (
       1299: literal: 1
       1300: operator: <<
       1301: name: 
        1302: name: sps
        1303: operator: ->
        1304: name: bitsSliceSegmentAddress
       1305: operator: )
     1306: block: 
      1307: block_content: 
       1308: expr_stmt: 
        1309: expr: 
         1310: name: 
          1311: name: sps
          1312: operator: ->
          1313: name: bitsSliceSegmentAddress
         1314: operator: ++
    1315: expr_stmt: 
     1316: expr: 
      1317: name: 
       1318: name: sps
       1319: operator: ->
       1320: name: scaling_list_enable_flag
      1321: operator: =
      1322: call: 
       1323: name: gf_bs_read_int_log
       1324: argument_list: 
        1325: argument: 
         1326: expr: 
          1327: name: bs
        1328: argument: 
         1329: expr: 
          1330: literal: 1
        1331: argument: 
         1332: expr: 
          1333: literal: "scaling_list_enable_flag"
    1334: if_stmt: 
     1335: if: 
      1336: condition: 
       1337: expr: 
        1338: name: 
         1339: name: sps
         1340: operator: ->
         1341: name: scaling_list_enable_flag
      1342: block: 
       1343: block_content: 
        1344: expr_stmt: 
         1345: expr: 
          1346: name: 
           1347: name: sps
           1348: operator: ->
           1349: name: infer_scaling_list_flag
          1350: operator: =
          1351: literal: 0
        1352: expr_stmt: 
         1353: expr: 
          1354: name: 
           1355: name: sps
           1356: operator: ->
           1357: name: scaling_list_ref_layer_id
          1358: operator: =
          1359: literal: 0
        1360: if_stmt: 
         1361: if: 
          1362: condition: 
           1363: expr: 
            1364: name: multiLayerExtSpsFlag
          1365: block: 
           1366: block_content: 
            1367: expr_stmt: 
             1368: expr: 
              1369: name: 
               1370: name: sps
               1371: operator: ->
               1372: name: infer_scaling_list_flag
              1373: operator: =
              1374: call: 
               1375: name: gf_bs_read_int_log
               1376: argument_list: 
                1377: argument: 
                 1378: expr: 
                  1379: name: bs
                1380: argument: 
                 1381: expr: 
                  1382: literal: 1
                1383: argument: 
                 1384: expr: 
                  1385: literal: "infer_scaling_list_flag"
        1386: if_stmt: 
         1387: if: 
          1388: condition: 
           1389: expr: 
            1390: name: 
             1391: name: sps
             1392: operator: ->
             1393: name: infer_scaling_list_flag
          1394: block: 
           1395: block_content: 
            1396: expr_stmt: 
             1397: expr: 
              1398: name: 
               1399: name: sps
               1400: operator: ->
               1401: name: scaling_list_ref_layer_id
              1402: operator: =
              1403: call: 
               1404: name: gf_bs_read_int_log
               1405: argument_list: 
                1406: argument: 
                 1407: expr: 
                  1408: name: bs
                1409: argument: 
                 1410: expr: 
                  1411: literal: 6
                1412: argument: 
                 1413: expr: 
                  1414: literal: "scaling_list_ref_layer_id"
         1415: else: 
          1416: block: 
           1417: block_content: 
            1418: expr_stmt: 
             1419: expr: 
              1420: name: 
               1421: name: sps
               1422: operator: ->
               1423: name: scaling_list_data_present_flag
              1424: operator: =
              1425: call: 
               1426: name: gf_bs_read_int_log
               1427: argument_list: 
                1428: argument: 
                 1429: expr: 
                  1430: name: bs
                1431: argument: 
                 1432: expr: 
                  1433: literal: 1
                1434: argument: 
                 1435: expr: 
                  1436: literal: "scaling_list_data_present_flag"
            1437: if_stmt: 
             1438: if: 
              1439: condition: 
               1440: expr: 
                1441: name: 
                 1442: name: sps
                 1443: operator: ->
                 1444: name: scaling_list_data_present_flag
              1445: block: 
               1446: block_content: 
                1447: expr_stmt: 
                 1448: expr: 
                  1449: call: 
                   1450: name: hevc_scaling_list_data
                   1451: argument_list: 
                    1452: argument: 
                     1453: expr: 
                      1454: name: bs
    1455: expr_stmt: 
     1456: expr: 
      1457: name: 
       1458: name: sps
       1459: operator: ->
       1460: name: asymmetric_motion_partitions_enabled_flag
      1461: operator: =
      1462: call: 
       1463: name: gf_bs_read_int_log
       1464: argument_list: 
        1465: argument: 
         1466: expr: 
          1467: name: bs
        1468: argument: 
         1469: expr: 
          1470: literal: 1
        1471: argument: 
         1472: expr: 
          1473: literal: "asymmetric_motion_partitions_enabled_flag"
    1474: expr_stmt: 
     1475: expr: 
      1476: name: 
       1477: name: sps
       1478: operator: ->
       1479: name: sample_adaptive_offset_enabled_flag
      1480: operator: =
      1481: call: 
       1482: name: gf_bs_read_int_log
       1483: argument_list: 
        1484: argument: 
         1485: expr: 
          1486: name: bs
        1487: argument: 
         1488: expr: 
          1489: literal: 1
        1490: argument: 
         1491: expr: 
          1492: literal: "sample_adaptive_offset_enabled_flag"
    1493: if_stmt: 
     1494: if: 
      1495: condition: 
       1496: expr: 
        1497: operator: (
        1498: name: 
         1499: name: sps
         1500: operator: ->
         1501: name: pcm_enabled_flag
        1502: operator: =
        1503: call: 
         1504: name: gf_bs_read_int_log
         1505: argument_list: 
          1506: argument: 
           1507: expr: 
            1508: name: bs
          1509: argument: 
           1510: expr: 
            1511: literal: 1
          1512: argument: 
           1513: expr: 
            1514: literal: "pcm_enabled_flag"
        1515: operator: )
      1516: block: 
       1517: block_content: 
        1518: expr_stmt: 
         1519: expr: 
          1520: name: 
           1521: name: sps
           1522: operator: ->
           1523: name: pcm_sample_bit_depth_luma_minus1
          1524: operator: =
          1525: call: 
           1526: name: gf_bs_read_int_log
           1527: argument_list: 
            1528: argument: 
             1529: expr: 
              1530: name: bs
            1531: argument: 
             1532: expr: 
              1533: literal: 4
            1534: argument: 
             1535: expr: 
              1536: literal: "pcm_sample_bit_depth_luma_minus1"
        1537: expr_stmt: 
         1538: expr: 
          1539: name: 
           1540: name: sps
           1541: operator: ->
           1542: name: pcm_sample_bit_depth_chroma_minus1
          1543: operator: =
          1544: call: 
           1545: name: gf_bs_read_int_log
           1546: argument_list: 
            1547: argument: 
             1548: expr: 
              1549: name: bs
            1550: argument: 
             1551: expr: 
              1552: literal: 4
            1553: argument: 
             1554: expr: 
              1555: literal: "pcm_sample_bit_depth_chroma_minus1"
        1556: expr_stmt: 
         1557: expr: 
          1558: name: 
           1559: name: sps
           1560: operator: ->
           1561: name: log2_min_pcm_luma_coding_block_size_minus3
          1562: operator: =
          1563: call: 
           1564: name: gf_bs_read_ue_log
           1565: argument_list: 
            1566: argument: 
             1567: expr: 
              1568: name: bs
            1569: argument: 
             1570: expr: 
              1571: literal: "log2_min_pcm_luma_coding_block_size_minus3"
        1572: expr_stmt: 
         1573: expr: 
          1574: name: 
           1575: name: sps
           1576: operator: ->
           1577: name: log2_diff_max_min_pcm_luma_coding_block_size
          1578: operator: =
          1579: call: 
           1580: name: gf_bs_read_ue_log
           1581: argument_list: 
            1582: argument: 
             1583: expr: 
              1584: name: bs
            1585: argument: 
             1586: expr: 
              1587: literal: "log2_diff_max_min_pcm_luma_coding_block_size"
        1588: expr_stmt: 
         1589: expr: 
          1590: name: 
           1591: name: sps
           1592: operator: ->
           1593: name: pcm_loop_filter_disable_flag
          1594: operator: =
          1595: call: 
           1596: name: gf_bs_read_int_log
           1597: argument_list: 
            1598: argument: 
             1599: expr: 
              1600: name: bs
            1601: argument: 
             1602: expr: 
              1603: literal: 1
            1604: argument: 
             1605: expr: 
              1606: literal: "pcm_loop_filter_disable_flag"
    1607: expr_stmt: 
     1608: expr: 
      1609: name: 
       1610: name: sps
       1611: operator: ->
       1612: name: num_short_term_ref_pic_sets
      1613: operator: =
      1614: call: 
       1615: name: gf_bs_read_ue_log
       1616: argument_list: 
        1617: argument: 
         1618: expr: 
          1619: name: bs
        1620: argument: 
         1621: expr: 
          1622: literal: "num_short_term_ref_pic_sets"
    1623: if_stmt: 
     1624: if: 
      1625: condition: 
       1626: expr: 
        1627: name: 
         1628: name: sps
         1629: operator: ->
         1630: name: num_short_term_ref_pic_sets
        1631: operator: >
        1632: literal: 64
      1633: block: 
       1634: block_content: 
        1635: expr_stmt: 
         1636: expr: 
          1637: call: 
           1638: name: GF_LOG
           1639: argument_list: 
            1640: argument: 
             1641: expr: 
              1642: name: GF_LOG_ERROR
            1643: argument: 
             1644: expr: 
              1645: name: GF_LOG_CODING
            1646: argument: 
             1647: expr: 
              1648: operator: (
              1649: literal: "[HEVC] Invalid number of short term reference picture sets %d\n"
              1650: operator: ,
              1651: name: 
               1652: name: sps
               1653: operator: ->
               1654: name: num_short_term_ref_pic_sets
              1655: operator: )
        1656: return: 
         1657: expr: 
          1658: operator: -
          1659: literal: 1
    1660: for: 
     1661: control: 
      1662: init: 
       1663: expr: 
        1664: name: i
        1665: operator: =
        1666: literal: 0
      1667: condition: 
       1668: expr: 
        1669: name: i
        1670: operator: <
        1671: name: 
         1672: name: sps
         1673: operator: ->
         1674: name: num_short_term_ref_pic_sets
      1675: incr: 
       1676: expr: 
        1677: name: i
        1678: operator: ++
     1679: block: 
      1680: block_content: 
       1681: decl_stmt: 
        1682: decl: 
         1683: type: 
          1684: name: Bool
         1685: name: ret
         1686: init: 
          1687: expr: 
           1688: call: 
            1689: name: hevc_parse_short_term_ref_pic_set
            1690: argument_list: 
             1691: argument: 
              1692: expr: 
               1693: name: bs
             1694: argument: 
              1695: expr: 
               1696: name: sps
             1697: argument: 
              1698: expr: 
               1699: name: i
       1700: comment: /*cannot parse short_term_ref_pic_set, skip VUI parsing*/
       1701: if_stmt: 
        1702: if: 
         1703: condition: 
          1704: expr: 
           1705: operator: !
           1706: name: ret
         1707: block: 
          1708: block_content: 
           1709: expr_stmt: 
            1710: expr: 
             1711: call: 
              1712: name: GF_LOG
              1713: argument_list: 
               1714: argument: 
                1715: expr: 
                 1716: name: GF_LOG_ERROR
               1717: argument: 
                1718: expr: 
                 1719: name: GF_LOG_CODING
               1720: argument: 
                1721: expr: 
                 1722: operator: (
                 1723: literal: "[HEVC] Invalid short_term_ref_pic_set\n"
                 1724: operator: )
           1725: return: 
            1726: expr: 
             1727: operator: -
             1728: literal: 1
    1729: expr_stmt: 
     1730: expr: 
      1731: name: 
       1732: name: sps
       1733: operator: ->
       1734: name: long_term_ref_pics_present_flag
      1735: operator: =
      1736: call: 
       1737: name: gf_bs_read_int_log
       1738: argument_list: 
        1739: argument: 
         1740: expr: 
          1741: name: bs
        1742: argument: 
         1743: expr: 
          1744: literal: 1
        1745: argument: 
         1746: expr: 
          1747: literal: "long_term_ref_pics_present_flag"
    1748: if_stmt: 
     1749: if: 
      1750: condition: 
       1751: expr: 
        1752: name: 
         1753: name: sps
         1754: operator: ->
         1755: name: long_term_ref_pics_present_flag
      1756: block: 
       1757: block_content: 
        1758: expr_stmt: 
         1759: expr: 
          1760: name: 
           1761: name: sps
           1762: operator: ->
           1763: name: num_long_term_ref_pic_sps
          1764: operator: =
          1765: call: 
           1766: name: gf_bs_read_ue_log
           1767: argument_list: 
            1768: argument: 
             1769: expr: 
              1770: name: bs
            1771: argument: 
             1772: expr: 
              1773: literal: "num_long_term_ref_pic_sps"
        1774: for: 
         1775: control: 
          1776: init: 
           1777: expr: 
            1778: name: i
            1779: operator: =
            1780: literal: 0
          1781: condition: 
           1782: expr: 
            1783: name: i
            1784: operator: <
            1785: name: 
             1786: name: sps
             1787: operator: ->
             1788: name: num_long_term_ref_pic_sps
          1789: incr: 
           1790: expr: 
            1791: name: i
            1792: operator: ++
         1793: block: 
          1794: block_content: 
           1795: expr_stmt: 
            1796: expr: 
             1797: call: 
              1798: name: gf_bs_read_int_log_idx
              1799: argument_list: 
               1800: argument: 
                1801: expr: 
                 1802: name: bs
               1803: argument: 
                1804: expr: 
                 1805: name: 
                  1806: name: sps
                  1807: operator: ->
                  1808: name: log2_max_pic_order_cnt_lsb
               1809: argument: 
                1810: expr: 
                 1811: literal: "lt_ref_pic_poc_lsb_sps"
               1812: argument: 
                1813: expr: 
                 1814: name: i
           1815: expr_stmt: 
            1816: expr: 
             1817: call: 
              1818: name: gf_bs_read_int_log_idx
              1819: argument_list: 
               1820: argument: 
                1821: expr: 
                 1822: name: bs
               1823: argument: 
                1824: expr: 
                 1825: literal: 1
               1826: argument: 
                1827: expr: 
                 1828: literal: "used_by_curr_pic_lt_sps_flag"
               1829: argument: 
                1830: expr: 
                 1831: name: i
    1832: expr_stmt: 
     1833: expr: 
      1834: name: 
       1835: name: sps
       1836: operator: ->
       1837: name: temporal_mvp_enable_flag
      1838: operator: =
      1839: call: 
       1840: name: gf_bs_read_int_log
       1841: argument_list: 
        1842: argument: 
         1843: expr: 
          1844: name: bs
        1845: argument: 
         1846: expr: 
          1847: literal: 1
        1848: argument: 
         1849: expr: 
          1850: literal: "temporal_mvp_enable_flag"
    1851: expr_stmt: 
     1852: expr: 
      1853: name: 
       1854: name: sps
       1855: operator: ->
       1856: name: strong_intra_smoothing_enable_flag
      1857: operator: =
      1858: call: 
       1859: name: gf_bs_read_int_log
       1860: argument_list: 
        1861: argument: 
         1862: expr: 
          1863: name: bs
        1864: argument: 
         1865: expr: 
          1866: literal: 1
        1867: argument: 
         1868: expr: 
          1869: literal: "strong_intra_smoothing_enable_flag"
    1870: if_stmt: 
     1871: if: 
      1872: condition: 
       1873: expr: 
        1874: name: vui_flag_pos
      1875: block: 
       1876: block_content: 
        1877: expr_stmt: 
         1878: expr: 
          1879: operator: *
          1880: name: vui_flag_pos
          1881: operator: =
          1882: operator: (
          1883: name: u32
          1884: operator: )
          1885: call: 
           1886: name: gf_bs_get_bit_offset
           1887: argument_list: 
            1888: argument: 
             1889: expr: 
              1890: name: bs
    1891: if_stmt: 
     1892: if: 
      1893: condition: 
       1894: expr: 
        1895: operator: (
        1896: name: 
         1897: name: sps
         1898: operator: ->
         1899: name: vui_parameters_present_flag
        1900: operator: =
        1901: call: 
         1902: name: gf_bs_read_int_log
         1903: argument_list: 
          1904: argument: 
           1905: expr: 
            1906: name: bs
          1907: argument: 
           1908: expr: 
            1909: literal: 1
          1910: argument: 
           1911: expr: 
            1912: literal: "vui_parameters_present_flag"
        1913: operator: )
      1914: block: 
       1915: block_content: 
        1916: expr_stmt: 
         1917: expr: 
          1918: name: 
           1919: name: sps
           1920: operator: ->
           1921: name: aspect_ratio_info_present_flag
          1922: operator: =
          1923: call: 
           1924: name: gf_bs_read_int_log
           1925: argument_list: 
            1926: argument: 
             1927: expr: 
              1928: name: bs
            1929: argument: 
             1930: expr: 
              1931: literal: 1
            1932: argument: 
             1933: expr: 
              1934: literal: "aspect_ratio_info_present_flag"
        1935: if_stmt: 
         1936: if: 
          1937: condition: 
           1938: expr: 
            1939: name: 
             1940: name: sps
             1941: operator: ->
             1942: name: aspect_ratio_info_present_flag
          1943: block: 
           1944: block_content: 
            1945: expr_stmt: 
             1946: expr: 
              1947: name: 
               1948: name: sps
               1949: operator: ->
               1950: name: sar_idc
              1951: operator: =
              1952: call: 
               1953: name: gf_bs_read_int_log
               1954: argument_list: 
                1955: argument: 
                 1956: expr: 
                  1957: name: bs
                1958: argument: 
                 1959: expr: 
                  1960: literal: 8
                1961: argument: 
                 1962: expr: 
                  1963: literal: "aspect_ratio_idc"
            1964: if_stmt: 
             1965: if: 
              1966: condition: 
               1967: expr: 
                1968: name: 
                 1969: name: sps
                 1970: operator: ->
                 1971: name: sar_idc
                1972: operator: ==
                1973: literal: 255
              1974: block: 
               1975: block_content: 
                1976: expr_stmt: 
                 1977: expr: 
                  1978: name: 
                   1979: name: sps
                   1980: operator: ->
                   1981: name: sar_width
                  1982: operator: =
                  1983: call: 
                   1984: name: gf_bs_read_int_log
                   1985: argument_list: 
                    1986: argument: 
                     1987: expr: 
                      1988: name: bs
                    1989: argument: 
                     1990: expr: 
                      1991: literal: 16
                    1992: argument: 
                     1993: expr: 
                      1994: literal: "aspect_ratio_width"
                1995: expr_stmt: 
                 1996: expr: 
                  1997: name: 
                   1998: name: sps
                   1999: operator: ->
                   2000: name: sar_height
                  2001: operator: =
                  2002: call: 
                   2003: name: gf_bs_read_int_log
                   2004: argument_list: 
                    2005: argument: 
                     2006: expr: 
                      2007: name: bs
                    2008: argument: 
                     2009: expr: 
                      2010: literal: 16
                    2011: argument: 
                     2012: expr: 
                      2013: literal: "aspect_ratio_height"
             2014: if: 
              2015: condition: 
               2016: expr: 
                2017: name: 
                 2018: name: sps
                 2019: operator: ->
                 2020: name: sar_idc
                2021: operator: <
                2022: literal: 17
              2023: block: 
               2024: block_content: 
                2025: expr_stmt: 
                 2026: expr: 
                  2027: name: 
                   2028: name: sps
                   2029: operator: ->
                   2030: name: sar_width
                  2031: operator: =
                  2032: name: 
                   2033: name: hevc_sar
                   2034: index: 
                    2035: expr: 
                     2036: name: 
                      2037: name: sps
                      2038: operator: ->
                      2039: name: sar_idc
                  2040: operator: .
                  2041: name: w
                2042: expr_stmt: 
                 2043: expr: 
                  2044: name: 
                   2045: name: sps
                   2046: operator: ->
                   2047: name: sar_height
                  2048: operator: =
                  2049: name: 
                   2050: name: hevc_sar
                   2051: index: 
                    2052: expr: 
                     2053: name: 
                      2054: name: sps
                      2055: operator: ->
                      2056: name: sar_idc
                  2057: operator: .
                  2058: name: h
        2059: if_stmt: 
         2060: if: 
          2061: condition: 
           2062: expr: 
            2063: operator: (
            2064: name: 
             2065: name: sps
             2066: operator: ->
             2067: name: overscan_info_present
            2068: operator: =
            2069: call: 
             2070: name: gf_bs_read_int_log
             2071: argument_list: 
              2072: argument: 
               2073: expr: 
                2074: name: bs
              2075: argument: 
               2076: expr: 
                2077: literal: 1
              2078: argument: 
               2079: expr: 
                2080: literal: "overscan_info_present"
            2081: operator: )
          2082: block: 
           2083: block_content: 
            2084: expr_stmt: 
             2085: expr: 
              2086: name: 
               2087: name: sps
               2088: operator: ->
               2089: name: overscan_appropriate
              2090: operator: =
              2091: call: 
               2092: name: gf_bs_read_int_log
               2093: argument_list: 
                2094: argument: 
                 2095: expr: 
                  2096: name: bs
                2097: argument: 
                 2098: expr: 
                  2099: literal: 1
                2100: argument: 
                 2101: expr: 
                  2102: literal: "overscan_appropriate"
        2103: expr_stmt: 
         2104: expr: 
          2105: name: 
           2106: name: sps
           2107: operator: ->
           2108: name: video_signal_type_present_flag
          2109: operator: =
          2110: call: 
           2111: name: gf_bs_read_int_log
           2112: argument_list: 
            2113: argument: 
             2114: expr: 
              2115: name: bs
            2116: argument: 
             2117: expr: 
              2118: literal: 1
            2119: argument: 
             2120: expr: 
              2121: literal: "video_signal_type_present_flag"
        2122: if_stmt: 
         2123: if: 
          2124: condition: 
           2125: expr: 
            2126: name: 
             2127: name: sps
             2128: operator: ->
             2129: name: video_signal_type_present_flag
          2130: block: 
           2131: block_content: 
            2132: expr_stmt: 
             2133: expr: 
              2134: name: 
               2135: name: sps
               2136: operator: ->
               2137: name: video_format
              2138: operator: =
              2139: call: 
               2140: name: gf_bs_read_int_log
               2141: argument_list: 
                2142: argument: 
                 2143: expr: 
                  2144: name: bs
                2145: argument: 
                 2146: expr: 
                  2147: literal: 3
                2148: argument: 
                 2149: expr: 
                  2150: literal: "video_format"
            2151: expr_stmt: 
             2152: expr: 
              2153: name: 
               2154: name: sps
               2155: operator: ->
               2156: name: video_full_range_flag
              2157: operator: =
              2158: call: 
               2159: name: gf_bs_read_int_log
               2160: argument_list: 
                2161: argument: 
                 2162: expr: 
                  2163: name: bs
                2164: argument: 
                 2165: expr: 
                  2166: literal: 1
                2167: argument: 
                 2168: expr: 
                  2169: literal: "video_full_range_flag"
            2170: if_stmt: 
             2171: if: 
              2172: condition: 
               2173: expr: 
                2174: operator: (
                2175: name: 
                 2176: name: sps
                 2177: operator: ->
                 2178: name: colour_description_present_flag
                2179: operator: =
                2180: call: 
                 2181: name: gf_bs_read_int_log
                 2182: argument_list: 
                  2183: argument: 
                   2184: expr: 
                    2185: name: bs
                  2186: argument: 
                   2187: expr: 
                    2188: literal: 1
                  2189: argument: 
                   2190: expr: 
                    2191: literal: "colour_description_present_flag"
                2192: operator: )
              2193: block: 
               2194: block_content: 
                2195: expr_stmt: 
                 2196: expr: 
                  2197: name: 
                   2198: name: sps
                   2199: operator: ->
                   2200: name: colour_primaries
                  2201: operator: =
                  2202: call: 
                   2203: name: gf_bs_read_int_log
                   2204: argument_list: 
                    2205: argument: 
                     2206: expr: 
                      2207: name: bs
                    2208: argument: 
                     2209: expr: 
                      2210: literal: 8
                    2211: argument: 
                     2212: expr: 
                      2213: literal: "colour_primaries"
                2214: expr_stmt: 
                 2215: expr: 
                  2216: name: 
                   2217: name: sps
                   2218: operator: ->
                   2219: name: transfer_characteristic
                  2220: operator: =
                  2221: call: 
                   2222: name: gf_bs_read_int_log
                   2223: argument_list: 
                    2224: argument: 
                     2225: expr: 
                      2226: name: bs
                    2227: argument: 
                     2228: expr: 
                      2229: literal: 8
                    2230: argument: 
                     2231: expr: 
                      2232: literal: "transfer_characteristic"
                2233: expr_stmt: 
                 2234: expr: 
                  2235: name: 
                   2236: name: sps
                   2237: operator: ->
                   2238: name: matrix_coeffs
                  2239: operator: =
                  2240: call: 
                   2241: name: gf_bs_read_int_log
                   2242: argument_list: 
                    2243: argument: 
                     2244: expr: 
                      2245: name: bs
                    2246: argument: 
                     2247: expr: 
                      2248: literal: 8
                    2249: argument: 
                     2250: expr: 
                      2251: literal: "matrix_coefficients"
        2252: if_stmt: 
         2253: if: 
          2254: condition: 
           2255: expr: 
            2256: operator: (
            2257: name: 
             2258: name: sps
             2259: operator: ->
             2260: name: chroma_loc_info_present_flag
            2261: operator: =
            2262: call: 
             2263: name: gf_bs_read_int_log
             2264: argument_list: 
              2265: argument: 
               2266: expr: 
                2267: name: bs
              2268: argument: 
               2269: expr: 
                2270: literal: 1
              2271: argument: 
               2272: expr: 
                2273: literal: "chroma_loc_info_present_flag"
            2274: operator: )
          2275: block: 
           2276: block_content: 
            2277: expr_stmt: 
             2278: expr: 
              2279: name: 
               2280: name: sps
               2281: operator: ->
               2282: name: chroma_sample_loc_type_top_field
              2283: operator: =
              2284: call: 
               2285: name: gf_bs_read_ue_log
               2286: argument_list: 
                2287: argument: 
                 2288: expr: 
                  2289: name: bs
                2290: argument: 
                 2291: expr: 
                  2292: literal: "chroma_sample_loc_type_top_field"
            2293: expr_stmt: 
             2294: expr: 
              2295: name: 
               2296: name: sps
               2297: operator: ->
               2298: name: chroma_sample_loc_type_bottom_field
              2299: operator: =
              2300: call: 
               2301: name: gf_bs_read_ue_log
               2302: argument_list: 
                2303: argument: 
                 2304: expr: 
                  2305: name: bs
                2306: argument: 
                 2307: expr: 
                  2308: literal: "chroma_sample_loc_type_bottom_field"
        2309: expr_stmt: 
         2310: expr: 
          2311: name: 
           2312: name: sps
           2313: operator: ->
           2314: name: neutra_chroma_indication_flag
          2315: operator: =
          2316: call: 
           2317: name: gf_bs_read_int_log
           2318: argument_list: 
            2319: argument: 
             2320: expr: 
              2321: name: bs
            2322: argument: 
             2323: expr: 
              2324: literal: 1
            2325: argument: 
             2326: expr: 
              2327: literal: "neutra_chroma_indication_flag"
        2328: expr_stmt: 
         2329: expr: 
          2330: name: 
           2331: name: sps
           2332: operator: ->
           2333: name: field_seq_flag
          2334: operator: =
          2335: call: 
           2336: name: gf_bs_read_int_log
           2337: argument_list: 
            2338: argument: 
             2339: expr: 
              2340: name: bs
            2341: argument: 
             2342: expr: 
              2343: literal: 1
            2344: argument: 
             2345: expr: 
              2346: literal: "field_seq_flag"
        2347: expr_stmt: 
         2348: expr: 
          2349: name: 
           2350: name: sps
           2351: operator: ->
           2352: name: frame_field_info_present_flag
          2353: operator: =
          2354: call: 
           2355: name: gf_bs_read_int_log
           2356: argument_list: 
            2357: argument: 
             2358: expr: 
              2359: name: bs
            2360: argument: 
             2361: expr: 
              2362: literal: 1
            2363: argument: 
             2364: expr: 
              2365: literal: "frame_field_info_present_flag"
        2366: if_stmt: 
         2367: if: 
          2368: condition: 
           2369: expr: 
            2370: operator: (
            2371: name: 
             2372: name: sps
             2373: operator: ->
             2374: name: default_display_window_flag
            2375: operator: =
            2376: call: 
             2377: name: gf_bs_read_int_log
             2378: argument_list: 
              2379: argument: 
               2380: expr: 
                2381: name: bs
              2382: argument: 
               2383: expr: 
                2384: literal: 1
              2385: argument: 
               2386: expr: 
                2387: literal: "default_display_window_flag"
            2388: operator: )
          2389: block: 
           2390: block_content: 
            2391: expr_stmt: 
             2392: expr: 
              2393: name: 
               2394: name: sps
               2395: operator: ->
               2396: name: left_offset
              2397: operator: =
              2398: call: 
               2399: name: gf_bs_read_ue_log
               2400: argument_list: 
                2401: argument: 
                 2402: expr: 
                  2403: name: bs
                2404: argument: 
                 2405: expr: 
                  2406: literal: "display_window_left_offset"
            2407: expr_stmt: 
             2408: expr: 
              2409: name: 
               2410: name: sps
               2411: operator: ->
               2412: name: right_offset
              2413: operator: =
              2414: call: 
               2415: name: gf_bs_read_ue_log
               2416: argument_list: 
                2417: argument: 
                 2418: expr: 
                  2419: name: bs
                2420: argument: 
                 2421: expr: 
                  2422: literal: "display_window_right_offset"
            2423: expr_stmt: 
             2424: expr: 
              2425: name: 
               2426: name: sps
               2427: operator: ->
               2428: name: top_offset
              2429: operator: =
              2430: call: 
               2431: name: gf_bs_read_ue_log
               2432: argument_list: 
                2433: argument: 
                 2434: expr: 
                  2435: name: bs
                2436: argument: 
                 2437: expr: 
                  2438: literal: "display_window_top_offset"
            2439: expr_stmt: 
             2440: expr: 
              2441: name: 
               2442: name: sps
               2443: operator: ->
               2444: name: bottom_offset
              2445: operator: =
              2446: call: 
               2447: name: gf_bs_read_ue_log
               2448: argument_list: 
                2449: argument: 
                 2450: expr: 
                  2451: name: bs
                2452: argument: 
                 2453: expr: 
                  2454: literal: "display_window_bottom_offset"
        2455: expr_stmt: 
         2456: expr: 
          2457: name: 
           2458: name: sps
           2459: operator: ->
           2460: name: has_timing_info
          2461: operator: =
          2462: call: 
           2463: name: gf_bs_read_int_log
           2464: argument_list: 
            2465: argument: 
             2466: expr: 
              2467: name: bs
            2468: argument: 
             2469: expr: 
              2470: literal: 1
            2471: argument: 
             2472: expr: 
              2473: literal: "has_timing_info"
        2474: if_stmt: 
         2475: if: 
          2476: condition: 
           2477: expr: 
            2478: name: 
             2479: name: sps
             2480: operator: ->
             2481: name: has_timing_info
          2482: block: 
           2483: block_content: 
            2484: expr_stmt: 
             2485: expr: 
              2486: name: 
               2487: name: sps
               2488: operator: ->
               2489: name: num_units_in_tick
              2490: operator: =
              2491: call: 
               2492: name: gf_bs_read_int_log
               2493: argument_list: 
                2494: argument: 
                 2495: expr: 
                  2496: name: bs
                2497: argument: 
                 2498: expr: 
                  2499: literal: 32
                2500: argument: 
                 2501: expr: 
                  2502: literal: "num_units_in_tick"
            2503: expr_stmt: 
             2504: expr: 
              2505: name: 
               2506: name: sps
               2507: operator: ->
               2508: name: time_scale
              2509: operator: =
              2510: call: 
               2511: name: gf_bs_read_int_log
               2512: argument_list: 
                2513: argument: 
                 2514: expr: 
                  2515: name: bs
                2516: argument: 
                 2517: expr: 
                  2518: literal: 32
                2519: argument: 
                 2520: expr: 
                  2521: literal: "time_scale"
            2522: expr_stmt: 
             2523: expr: 
              2524: name: 
               2525: name: sps
               2526: operator: ->
               2527: name: poc_proportional_to_timing_flag
              2528: operator: =
              2529: call: 
               2530: name: gf_bs_read_int_log
               2531: argument_list: 
                2532: argument: 
                 2533: expr: 
                  2534: name: bs
                2535: argument: 
                 2536: expr: 
                  2537: literal: 1
                2538: argument: 
                 2539: expr: 
                  2540: literal: "poc_proportional_to_timing_flag"
            2541: if_stmt: 
             2542: if: 
              2543: condition: 
               2544: expr: 
                2545: name: 
                 2546: name: sps
                 2547: operator: ->
                 2548: name: poc_proportional_to_timing_flag
              2549: block: 
               2550: block_content: 
                2551: expr_stmt: 
                 2552: expr: 
                  2553: name: 
                   2554: name: sps
                   2555: operator: ->
                   2556: name: num_ticks_poc_diff_one_minus1
                  2557: operator: =
                  2558: call: 
                   2559: name: gf_bs_read_ue_log
                   2560: argument_list: 
                    2561: argument: 
                     2562: expr: 
                      2563: name: bs
                    2564: argument: 
                     2565: expr: 
                      2566: literal: "num_ticks_poc_diff_one_minus1"
            2567: if_stmt: 
             2568: if: 
              2569: condition: 
               2570: expr: 
                2571: operator: (
                2572: name: 
                 2573: name: sps
                 2574: operator: ->
                 2575: name: hrd_parameters_present_flag
                2576: operator: =
                2577: call: 
                 2578: name: gf_bs_read_int_log
                 2579: argument_list: 
                  2580: argument: 
                   2581: expr: 
                    2582: name: bs
                  2583: argument: 
                   2584: expr: 
                    2585: literal: 1
                  2586: argument: 
                   2587: expr: 
                    2588: literal: "hrd_parameters_present_flag"
                2589: operator: )
              2590: block: 
               2591: block_content: 
                2592: comment: //				GF_LOG(GF_LOG_INFO, GF_LOG_CODING, ("[HEVC] HRD param parsing not implemented\n"));
                2593: return: 
                 2594: expr: 
                  2595: name: sps_id
        2596: if_stmt: 
         2597: if: 
          2598: condition: 
           2599: expr: 
            2600: call: 
             2601: name: gf_bs_read_int_log
             2602: argument_list: 
              2603: argument: 
               2604: expr: 
                2605: name: bs
              2606: argument: 
               2607: expr: 
                2608: literal: 1
              2609: argument: 
               2610: expr: 
                2611: literal: "bitstream_restriction_flag"
          2612: block: 
           2613: block_content: 
            2614: expr_stmt: 
             2615: expr: 
              2616: call: 
               2617: name: gf_bs_read_int_log
               2618: argument_list: 
                2619: argument: 
                 2620: expr: 
                  2621: name: bs
                2622: argument: 
                 2623: expr: 
                  2624: literal: 1
                2625: argument: 
                 2626: expr: 
                  2627: literal: "tiles_fixed_structure_flag"
            2628: expr_stmt: 
             2629: expr: 
              2630: call: 
               2631: name: gf_bs_read_int_log
               2632: argument_list: 
                2633: argument: 
                 2634: expr: 
                  2635: name: bs
                2636: argument: 
                 2637: expr: 
                  2638: literal: 1
                2639: argument: 
                 2640: expr: 
                  2641: literal: "motion_vectors_over_pic_boundaries_flag"
            2642: expr_stmt: 
             2643: expr: 
              2644: call: 
               2645: name: gf_bs_read_int_log
               2646: argument_list: 
                2647: argument: 
                 2648: expr: 
                  2649: name: bs
                2650: argument: 
                 2651: expr: 
                  2652: literal: 1
                2653: argument: 
                 2654: expr: 
                  2655: literal: "restricted_ref_pic_lists_flag"
            2656: expr_stmt: 
             2657: expr: 
              2658: call: 
               2659: name: gf_bs_read_ue_log
               2660: argument_list: 
                2661: argument: 
                 2662: expr: 
                  2663: name: bs
                2664: argument: 
                 2665: expr: 
                  2666: literal: "min_spatial_segmentation_idc"
            2667: expr_stmt: 
             2668: expr: 
              2669: call: 
               2670: name: gf_bs_read_ue_log
               2671: argument_list: 
                2672: argument: 
                 2673: expr: 
                  2674: name: bs
                2675: argument: 
                 2676: expr: 
                  2677: literal: "max_bytes_per_pic_denom"
            2678: expr_stmt: 
             2679: expr: 
              2680: call: 
               2681: name: gf_bs_read_ue_log
               2682: argument_list: 
                2683: argument: 
                 2684: expr: 
                  2685: name: bs
                2686: argument: 
                 2687: expr: 
                  2688: literal: "max_bits_per_min_cu_denom"
            2689: expr_stmt: 
             2690: expr: 
              2691: call: 
               2692: name: gf_bs_read_ue_log
               2693: argument_list: 
                2694: argument: 
                 2695: expr: 
                  2696: name: bs
                2697: argument: 
                 2698: expr: 
                  2699: literal: "log2_max_mv_length_horizontal"
            2700: expr_stmt: 
             2701: expr: 
              2702: call: 
               2703: name: gf_bs_read_ue_log
               2704: argument_list: 
                2705: argument: 
                 2706: expr: 
                  2707: name: bs
                2708: argument: 
                 2709: expr: 
                  2710: literal: "log2_max_mv_length_vertical"
    2711: if_stmt: 
     2712: if: 
      2713: condition: 
       2714: expr: 
        2715: call: 
         2716: name: gf_bs_read_int_log
         2717: argument_list: 
          2718: argument: 
           2719: expr: 
            2720: name: bs
          2721: argument: 
           2722: expr: 
            2723: literal: 1
          2724: argument: 
           2725: expr: 
            2726: literal: "sps_extension_flag"
      2727: block: 
       2728: block_content: 
        2729: if: 
         2730: directive: if
         2731: expr: 
          2732: literal: 0
        2733: comment: /*sps_extension_data_flag */
        2734: endif: 
         2735: directive: endif
    2736: return: 
     2737: expr: 
      2738: name: sps_id

----------------------------------------
0: unit: 
 1: function: 
  2: type: 
   3: specifier: static
   4: name: s32
  5: name: gf_hevc_read_sps_bs_internal
  6: parameter_list: 
   7: parameter: 
    8: decl: 
     9: type: 
      10: name: GF_BitStream
      11: modifier: *
     12: name: bs
   13: parameter: 
    14: decl: 
     15: type: 
      16: name: HEVCState
      17: modifier: *
     18: name: hevc
   19: parameter: 
    20: decl: 
     21: type: 
      22: name: u8
     23: name: layer_id
   24: parameter: 
    25: decl: 
     26: type: 
      27: name: u32
      28: modifier: *
     29: name: vui_flag_pos
  30: block: 
   31: block_content: 
    32: decl_stmt: 
     33: decl: 
      34: type: 
       35: name: s32
      36: name: vps_id
     37: decl: 
      38: type: 
      39: name: sps_id
      40: init: 
       41: expr: 
        42: operator: -
        43: literal: 1
    44: decl_stmt: 
     45: decl: 
      46: type: 
       47: name: u32
      48: name: i
     49: decl: 
      50: type: 
      51: name: nb_CTUs
     52: decl: 
      53: type: 
      54: name: depth
    55: decl_stmt: 
     56: decl: 
      57: type: 
       58: name: HEVC_SPS
       59: modifier: *
      60: name: sps
    61: decl_stmt: 
     62: decl: 
      63: type: 
       64: name: HEVC_VPS
       65: modifier: *
      66: name: vps
    67: decl_stmt: 
     68: decl: 
      69: type: 
       70: name: HEVC_ProfileTierLevel
      71: name: ptl
    72: decl_stmt: 
     73: decl: 
      74: type: 
       75: name: Bool
      76: name: multiLayerExtSpsFlag
    77: decl_stmt: 
     78: decl: 
      79: type: 
       80: name: u8
      81: name: sps_ext_or_max_sub_layers_minus1
     82: decl: 
      83: type: 
      84: name: max_sub_layers_minus1
    85: if_stmt: 
     86: if: 
      87: condition: 
       88: expr: 
        89: name: vui_flag_pos
      90: block: 
       91: block_content: 
        92: expr_stmt: 
         93: expr: 
          94: operator: *
          95: name: vui_flag_pos
          96: operator: =
          97: literal: 0
    98: comment: //nalu header already parsed
    99: expr_stmt: 
     100: expr: 
      101: name: vps_id
      102: operator: =
      103: call: 
       104: name: gf_bs_read_int_log
       105: argument_list: 
        106: argument: 
         107: expr: 
          108: name: bs
        109: argument: 
         110: expr: 
          111: literal: 4
        112: argument: 
         113: expr: 
          114: literal: "vps_id"
    115: if_stmt: 
     116: if: 
      117: condition: 
       118: expr: 
        119: operator: (
        120: name: vps_id
        121: operator: <
        122: literal: 0
        123: operator: )
        124: operator: ||
        125: operator: (
        126: name: vps_id
        127: operator: >=
        128: literal: 16
        129: operator: )
      130: block: 
       131: block_content: 
        132: return: 
         133: expr: 
          134: operator: -
          135: literal: 1
    136: expr_stmt: 
     137: expr: 
      138: call: 
       139: name: memset
       140: argument_list: 
        141: argument: 
         142: expr: 
          143: operator: &
          144: name: ptl
        145: argument: 
         146: expr: 
          147: literal: 0
        148: argument: 
         149: expr: 
          150: sizeof: 
           151: argument_list: 
            152: argument: 
             153: expr: 
              154: name: ptl
    155: expr_stmt: 
     156: expr: 
      157: name: max_sub_layers_minus1
      158: operator: =
      159: literal: 0
    160: expr_stmt: 
     161: expr: 
      162: name: sps_ext_or_max_sub_layers_minus1
      163: operator: =
      164: literal: 0
    165: if_stmt: 
     166: if: 
      167: condition: 
       168: expr: 
        169: name: layer_id
        170: operator: ==
        171: literal: 0
      172: block: 
       173: block_content: 
        174: expr_stmt: 
         175: expr: 
          176: name: max_sub_layers_minus1
          177: operator: =
          178: call: 
           179: name: gf_bs_read_int_log
           180: argument_list: 
            181: argument: 
             182: expr: 
              183: name: bs
            184: argument: 
             185: expr: 
              186: literal: 3
            187: argument: 
             188: expr: 
              189: literal: "max_sub_layers_minus1"
     190: else: 
      191: block: 
       192: block_content: 
        193: expr_stmt: 
         194: expr: 
          195: name: sps_ext_or_max_sub_layers_minus1
          196: operator: =
          197: call: 
           198: name: gf_bs_read_int_log
           199: argument_list: 
            200: argument: 
             201: expr: 
              202: name: bs
            203: argument: 
             204: expr: 
              205: literal: 3
            206: argument: 
             207: expr: 
              208: literal: "sps_ext_or_max_sub_layers_minus1"
    209: expr_stmt: 
     210: expr: 
      211: name: multiLayerExtSpsFlag
      212: operator: =
      213: operator: (
      214: name: layer_id
      215: operator: !=
      216: literal: 0
      217: operator: )
      218: operator: &&
      219: operator: (
      220: name: sps_ext_or_max_sub_layers_minus1
      221: operator: ==
      222: literal: 7
      223: operator: )
    224: if_stmt: 
     225: if: 
      226: condition: 
       227: expr: 
        228: operator: !
        229: name: multiLayerExtSpsFlag
      230: block: 
       231: block_content: 
        232: expr_stmt: 
         233: expr: 
          234: call: 
           235: name: gf_bs_read_int_log
           236: argument_list: 
            237: argument: 
             238: expr: 
              239: name: bs
            240: argument: 
             241: expr: 
              242: literal: 1
            243: argument: 
             244: expr: 
              245: literal: "temporal_id_nesting_flag"
        246: expr_stmt: 
         247: expr: 
          248: call: 
           249: name: hevc_profile_tier_level
           250: argument_list: 
            251: argument: 
             252: expr: 
              253: name: bs
            254: argument: 
             255: expr: 
              256: literal: 1
            257: argument: 
             258: expr: 
              259: name: max_sub_layers_minus1
            260: argument: 
             261: expr: 
              262: operator: &
              263: name: ptl
            264: argument: 
             265: expr: 
              266: literal: 0
    267: expr_stmt: 
     268: expr: 
      269: name: sps_id
      270: operator: =
      271: call: 
       272: name: gf_bs_read_ue_log
       273: argument_list: 
        274: argument: 
         275: expr: 
          276: name: bs
        277: argument: 
         278: expr: 
          279: literal: "sps_id"
    280: if_stmt: 
     281: if: 
      282: condition: 
       283: expr: 
        284: operator: (
        285: name: sps_id
        286: operator: <
        287: literal: 0
        288: operator: )
        289: operator: ||
        290: operator: (
        291: name: sps_id
        292: operator: >=
        293: literal: 16
        294: operator: )
      295: block: 
       296: block_content: 
        297: return: 
         298: expr: 
          299: operator: -
          300: literal: 1
    301: expr_stmt: 
     302: expr: 
      303: name: sps
      304: operator: =
      305: operator: &
      306: name: 
       307: name: hevc
       308: operator: ->
       309: name: sps
       310: index: 
        311: expr: 
         312: name: sps_id
    313: if_stmt: 
     314: if: 
      315: condition: 
       316: expr: 
        317: operator: !
        318: name: 
         319: name: sps
         320: operator: ->
         321: name: state
      322: block: 
       323: block_content: 
        324: expr_stmt: 
         325: expr: 
          326: name: 
           327: name: sps
           328: operator: ->
           329: name: state
          330: operator: =
          331: literal: 1
        332: expr_stmt: 
         333: expr: 
          334: name: 
           335: name: sps
           336: operator: ->
           337: name: id
          338: operator: =
          339: name: sps_id
        340: expr_stmt: 
         341: expr: 
          342: name: 
           343: name: sps
           344: operator: ->
           345: name: vps_id
          346: operator: =
          347: name: vps_id
    348: expr_stmt: 
     349: expr: 
      350: name: 
       351: name: sps
       352: operator: ->
       353: name: ptl
      354: operator: =
      355: name: ptl
    356: expr_stmt: 
     357: expr: 
      358: name: vps
      359: operator: =
      360: operator: &
      361: name: 
       362: name: hevc
       363: operator: ->
       364: name: vps
       365: index: 
        366: expr: 
         367: name: vps_id
    368: expr_stmt: 
     369: expr: 
      370: name: 
       371: name: sps
       372: operator: ->
       373: name: max_sub_layers_minus1
      374: operator: =
      375: literal: 0
    376: expr_stmt: 
     377: expr: 
      378: name: 
       379: name: sps
       380: operator: ->
       381: name: sps_ext_or_max_sub_layers_minus1
      382: operator: =
      383: literal: 0
    384: comment: /* default values */
    385: expr_stmt: 
     386: expr: 
      387: name: 
       388: name: sps
       389: operator: ->
       390: name: colour_primaries
      391: operator: =
      392: literal: 2
    393: expr_stmt: 
     394: expr: 
      395: name: 
       396: name: sps
       397: operator: ->
       398: name: transfer_characteristic
      399: operator: =
      400: literal: 2
    401: expr_stmt: 
     402: expr: 
      403: name: 
       404: name: sps
       405: operator: ->
       406: name: matrix_coeffs
      407: operator: =
      408: literal: 2
    409: comment: //sps_rep_format_idx = 0;
    410: if_stmt: 
     411: if: 
      412: condition: 
       413: expr: 
        414: name: multiLayerExtSpsFlag
      415: block: 
       416: block_content: 
        417: expr_stmt: 
         418: expr: 
          419: name: 
           420: name: sps
           421: operator: ->
           422: name: update_rep_format_flag
          423: operator: =
          424: call: 
           425: name: gf_bs_read_int_log
           426: argument_list: 
            427: argument: 
             428: expr: 
              429: name: bs
            430: argument: 
             431: expr: 
              432: literal: 1
            433: argument: 
             434: expr: 
              435: literal: "update_rep_format_flag"
        436: if_stmt: 
         437: if: 
          438: condition: 
           439: expr: 
            440: name: 
             441: name: sps
             442: operator: ->
             443: name: update_rep_format_flag
          444: block: 
           445: block_content: 
            446: expr_stmt: 
             447: expr: 
              448: name: 
               449: name: sps
               450: operator: ->
               451: name: rep_format_idx
              452: operator: =
              453: call: 
               454: name: gf_bs_read_int_log
               455: argument_list: 
                456: argument: 
                 457: expr: 
                  458: name: bs
                459: argument: 
                 460: expr: 
                  461: literal: 8
                462: argument: 
                 463: expr: 
                  464: literal: "rep_format_idx"
         465: else: 
          466: block: 
           467: block_content: 
            468: expr_stmt: 
             469: expr: 
              470: name: 
               471: name: sps
               472: operator: ->
               473: name: rep_format_idx
              474: operator: =
              475: name: 
               476: name: vps
               477: operator: ->
               478: name: rep_format_idx
               479: index: 
                480: expr: 
                 481: name: layer_id
        482: expr_stmt: 
         483: expr: 
          484: name: 
           485: name: sps
           486: operator: ->
           487: name: width
          488: operator: =
          489: name: 
           490: name: vps
           491: operator: ->
           492: name: rep_formats
           493: index: 
            494: expr: 
             495: name: 
              496: name: sps
              497: operator: ->
              498: name: rep_format_idx
          499: operator: .
          500: name: pic_width_luma_samples
        501: expr_stmt: 
         502: expr: 
          503: name: 
           504: name: sps
           505: operator: ->
           506: name: height
          507: operator: =
          508: name: 
           509: name: vps
           510: operator: ->
           511: name: rep_formats
           512: index: 
            513: expr: 
             514: name: 
              515: name: sps
              516: operator: ->
              517: name: rep_format_idx
          518: operator: .
          519: name: pic_height_luma_samples
        520: expr_stmt: 
         521: expr: 
          522: name: 
           523: name: sps
           524: operator: ->
           525: name: chroma_format_idc
          526: operator: =
          527: name: 
           528: name: vps
           529: operator: ->
           530: name: rep_formats
           531: index: 
            532: expr: 
             533: name: 
              534: name: sps
              535: operator: ->
              536: name: rep_format_idx
          537: operator: .
          538: name: chroma_format_idc
        539: expr_stmt: 
         540: expr: 
          541: name: 
           542: name: sps
           543: operator: ->
           544: name: bit_depth_luma
          545: operator: =
          546: name: 
           547: name: vps
           548: operator: ->
           549: name: rep_formats
           550: index: 
            551: expr: 
             552: name: 
              553: name: sps
              554: operator: ->
              555: name: rep_format_idx
          556: operator: .
          557: name: bit_depth_luma
        558: expr_stmt: 
         559: expr: 
          560: name: 
           561: name: sps
           562: operator: ->
           563: name: bit_depth_chroma
          564: operator: =
          565: name: 
           566: name: vps
           567: operator: ->
           568: name: rep_formats
           569: index: 
            570: expr: 
             571: name: 
              572: name: sps
              573: operator: ->
              574: name: rep_format_idx
          575: operator: .
          576: name: bit_depth_chroma
        577: expr_stmt: 
         578: expr: 
          579: name: 
           580: name: sps
           581: operator: ->
           582: name: separate_colour_plane_flag
          583: operator: =
          584: name: 
           585: name: vps
           586: operator: ->
           587: name: rep_formats
           588: index: 
            589: expr: 
             590: name: 
              591: name: sps
              592: operator: ->
              593: name: rep_format_idx
          594: operator: .
          595: name: separate_colour_plane_flag
        596: comment: //TODO this is crude ...
        597: expr_stmt: 
         598: expr: 
          599: name: 
           600: name: sps
           601: operator: ->
           602: name: ptl
          603: operator: =
          604: name: 
           605: name: vps
           606: operator: ->
           607: name: ext_ptl
           608: index: 
            609: expr: 
             610: literal: 0
     611: else: 
      612: block: 
       613: block_content: 
        614: expr_stmt: 
         615: expr: 
          616: name: 
           617: name: sps
           618: operator: ->
           619: name: chroma_format_idc
          620: operator: =
          621: call: 
           622: name: gf_bs_read_ue_log
           623: argument_list: 
            624: argument: 
             625: expr: 
              626: name: bs
            627: argument: 
             628: expr: 
              629: literal: "chroma_format_idc"
        630: if_stmt: 
         631: if: 
          632: condition: 
           633: expr: 
            634: name: 
             635: name: sps
             636: operator: ->
             637: name: chroma_format_idc
            638: operator: ==
            639: literal: 3
          640: block: 
           641: block_content: 
            642: expr_stmt: 
             643: expr: 
              644: name: 
               645: name: sps
               646: operator: ->
               647: name: separate_colour_plane_flag
              648: operator: =
              649: call: 
               650: name: gf_bs_read_int_log
               651: argument_list: 
                652: argument: 
                 653: expr: 
                  654: name: bs
                655: argument: 
                 656: expr: 
                  657: literal: 1
                658: argument: 
                 659: expr: 
                  660: literal: "separate_colour_plane_flag"
        661: expr_stmt: 
         662: expr: 
          663: name: 
           664: name: sps
           665: operator: ->
           666: name: width
          667: operator: =
          668: call: 
           669: name: gf_bs_read_ue_log
           670: argument_list: 
            671: argument: 
             672: expr: 
              673: name: bs
            674: argument: 
             675: expr: 
              676: literal: "width"
        677: expr_stmt: 
         678: expr: 
          679: name: 
           680: name: sps
           681: operator: ->
           682: name: height
          683: operator: =
          684: call: 
           685: name: gf_bs_read_ue_log
           686: argument_list: 
            687: argument: 
             688: expr: 
              689: name: bs
            690: argument: 
             691: expr: 
              692: literal: "height"
        693: if_stmt: 
         694: if: 
          695: condition: 
           696: expr: 
            697: operator: (
            698: name: 
             699: name: sps
             700: operator: ->
             701: name: cw_flag
            702: operator: =
            703: call: 
             704: name: gf_bs_read_int_log
             705: argument_list: 
              706: argument: 
               707: expr: 
                708: name: bs
              709: argument: 
               710: expr: 
                711: literal: 1
              712: argument: 
               713: expr: 
                714: literal: "conformance_window_flag"
            715: operator: )
          716: block: 
           717: block_content: 
            718: decl_stmt: 
             719: decl: 
              720: type: 
               721: name: u32
              722: name: SubWidthC
             723: decl: 
              724: type: 
              725: name: SubHeightC
            726: if_stmt: 
             727: if: 
              728: condition: 
               729: expr: 
                730: name: 
                 731: name: sps
                 732: operator: ->
                 733: name: chroma_format_idc
                734: operator: ==
                735: literal: 1
              736: block: 
               737: block_content: 
                738: expr_stmt: 
                 739: expr: 
                  740: name: SubWidthC
                  741: operator: =
                  742: name: SubHeightC
                  743: operator: =
                  744: literal: 2
             745: if: 
              746: condition: 
               747: expr: 
                748: name: 
                 749: name: sps
                 750: operator: ->
                 751: name: chroma_format_idc
                752: operator: ==
                753: literal: 2
              754: block: 
               755: block_content: 
                756: expr_stmt: 
                 757: expr: 
                  758: name: SubWidthC
                  759: operator: =
                  760: literal: 2
                761: expr_stmt: 
                 762: expr: 
                  763: name: SubHeightC
                  764: operator: =
                  765: literal: 1
             766: else: 
              767: block: 
               768: block_content: 
                769: expr_stmt: 
                 770: expr: 
                  771: name: SubWidthC
                  772: operator: =
                  773: name: SubHeightC
                  774: operator: =
                  775: literal: 1
            776: expr_stmt: 
             777: expr: 
              778: name: 
               779: name: sps
               780: operator: ->
               781: name: cw_left
              782: operator: =
              783: call: 
               784: name: gf_bs_read_ue_log
               785: argument_list: 
                786: argument: 
                 787: expr: 
                  788: name: bs
                789: argument: 
                 790: expr: 
                  791: literal: "conformance_window_left"
            792: expr_stmt: 
             793: expr: 
              794: name: 
               795: name: sps
               796: operator: ->
               797: name: cw_right
              798: operator: =
              799: call: 
               800: name: gf_bs_read_ue_log
               801: argument_list: 
                802: argument: 
                 803: expr: 
                  804: name: bs
                805: argument: 
                 806: expr: 
                  807: literal: "conformance_window_right"
            808: expr_stmt: 
             809: expr: 
              810: name: 
               811: name: sps
               812: operator: ->
               813: name: cw_top
              814: operator: =
              815: call: 
               816: name: gf_bs_read_ue_log
               817: argument_list: 
                818: argument: 
                 819: expr: 
                  820: name: bs
                821: argument: 
                 822: expr: 
                  823: literal: "conformance_window_top"
            824: expr_stmt: 
             825: expr: 
              826: name: 
               827: name: sps
               828: operator: ->
               829: name: cw_bottom
              830: operator: =
              831: call: 
               832: name: gf_bs_read_ue_log
               833: argument_list: 
                834: argument: 
                 835: expr: 
                  836: name: bs
                837: argument: 
                 838: expr: 
                  839: literal: "conformance_window_bottom"
            840: expr_stmt: 
             841: expr: 
              842: name: 
               843: name: sps
               844: operator: ->
               845: name: width
              846: operator: -=
              847: name: SubWidthC
              848: operator: *
              849: operator: (
              850: name: 
               851: name: sps
               852: operator: ->
               853: name: cw_left
              854: operator: +
              855: name: 
               856: name: sps
               857: operator: ->
               858: name: cw_right
              859: operator: )
            860: expr_stmt: 
             861: expr: 
              862: name: 
               863: name: sps
               864: operator: ->
               865: name: height
              866: operator: -=
              867: name: SubHeightC
              868: operator: *
              869: operator: (
              870: name: 
               871: name: sps
               872: operator: ->
               873: name: cw_top
              874: operator: +
              875: name: 
               876: name: sps
               877: operator: ->
               878: name: cw_bottom
              879: operator: )
        880: expr_stmt: 
         881: expr: 
          882: name: 
           883: name: sps
           884: operator: ->
           885: name: bit_depth_luma
          886: operator: =
          887: literal: 8
          888: operator: +
          889: call: 
           890: name: gf_bs_read_ue_log
           891: argument_list: 
            892: argument: 
             893: expr: 
              894: name: bs
            895: argument: 
             896: expr: 
              897: literal: "bit_depth_luma_minus8"
        898: expr_stmt: 
         899: expr: 
          900: name: 
           901: name: sps
           902: operator: ->
           903: name: bit_depth_chroma
          904: operator: =
          905: literal: 8
          906: operator: +
          907: call: 
           908: name: gf_bs_read_ue_log
           909: argument_list: 
            910: argument: 
             911: expr: 
              912: name: bs
            913: argument: 
             914: expr: 
              915: literal: "bit_depth_chroma_minus8"
    916: expr_stmt: 
     917: expr: 
      918: name: 
       919: name: sps
       920: operator: ->
       921: name: log2_max_pic_order_cnt_lsb
      922: operator: =
      923: literal: 4
      924: operator: +
      925: call: 
       926: name: gf_bs_read_ue_log
       927: argument_list: 
        928: argument: 
         929: expr: 
          930: name: bs
        931: argument: 
         932: expr: 
          933: literal: "log2_max_pic_order_cnt_lsb_minus4"
    934: if_stmt: 
     935: if: 
      936: condition: 
       937: expr: 
        938: operator: !
        939: name: multiLayerExtSpsFlag
      940: block: 
       941: block_content: 
        942: expr_stmt: 
         943: expr: 
          944: name: 
           945: name: sps
           946: operator: ->
           947: name: sub_layer_ordering_info_present_flag
          948: operator: =
          949: call: 
           950: name: gf_bs_read_int_log
           951: argument_list: 
            952: argument: 
             953: expr: 
              954: name: bs
            955: argument: 
             956: expr: 
              957: literal: 1
            958: argument: 
             959: expr: 
              960: literal: "sub_layer_ordering_info_present_flag"
        961: for: 
         962: control: 
          963: init: 
           964: expr: 
            965: name: i
            966: operator: =
            967: ternary: 
             968: condition: 
              969: expr: 
               970: name: 
                971: name: sps
                972: operator: ->
                973: name: sub_layer_ordering_info_present_flag
             974: then: 
              975: expr: 
               976: literal: 0
             977: else: 
              978: expr: 
               979: name: 
                980: name: sps
                981: operator: ->
                982: name: max_sub_layers_minus1
          983: condition: 
           984: expr: 
            985: name: i
            986: operator: <=
            987: name: 
             988: name: sps
             989: operator: ->
             990: name: max_sub_layers_minus1
          991: incr: 
           992: expr: 
            993: name: i
            994: operator: ++
         995: block: 
          996: block_content: 
           997: expr_stmt: 
            998: expr: 
             999: call: 
              1000: name: gf_bs_read_ue_log_idx
              1001: argument_list: 
               1002: argument: 
                1003: expr: 
                 1004: name: bs
               1005: argument: 
                1006: expr: 
                 1007: literal: "max_dec_pic_buffering"
               1008: argument: 
                1009: expr: 
                 1010: name: i
           1011: expr_stmt: 
            1012: expr: 
             1013: call: 
              1014: name: gf_bs_read_ue_log_idx
              1015: argument_list: 
               1016: argument: 
                1017: expr: 
                 1018: name: bs
               1019: argument: 
                1020: expr: 
                 1021: literal: "num_reorder_pics"
               1022: argument: 
                1023: expr: 
                 1024: name: i
           1025: expr_stmt: 
            1026: expr: 
             1027: call: 
              1028: name: gf_bs_read_ue_log_idx
              1029: argument_list: 
               1030: argument: 
                1031: expr: 
                 1032: name: bs
               1033: argument: 
                1034: expr: 
                 1035: literal: "max_latency_increase"
               1036: argument: 
                1037: expr: 
                 1038: name: i
    1039: expr_stmt: 
     1040: expr: 
      1041: name: 
       1042: name: sps
       1043: operator: ->
       1044: name: log2_min_luma_coding_block_size
      1045: operator: =
      1046: literal: 3
      1047: operator: +
      1048: call: 
       1049: name: gf_bs_read_ue_log
       1050: argument_list: 
        1051: argument: 
         1052: expr: 
          1053: name: bs
        1054: argument: 
         1055: expr: 
          1056: literal: "log2_min_luma_coding_block_size_minus3"
    1057: expr_stmt: 
     1058: expr: 
      1059: name: 
       1060: name: sps
       1061: operator: ->
       1062: name: log2_diff_max_min_luma_coding_block_size
      1063: operator: =
      1064: call: 
       1065: name: gf_bs_read_ue_log
       1066: argument_list: 
        1067: argument: 
         1068: expr: 
          1069: name: bs
        1070: argument: 
         1071: expr: 
          1072: literal: "log2_diff_max_min_luma_coding_block_size"
    1073: expr_stmt: 
     1074: expr: 
      1075: name: 
       1076: name: sps
       1077: operator: ->
       1078: name: max_CU_width
      1079: operator: =
      1080: operator: (
      1081: literal: 1
      1082: operator: <<
      1083: operator: (
      1084: name: 
       1085: name: sps
       1086: operator: ->
       1087: name: log2_min_luma_coding_block_size
      1088: operator: +
      1089: name: 
       1090: name: sps
       1091: operator: ->
       1092: name: log2_diff_max_min_luma_coding_block_size
      1093: operator: )
      1094: operator: )
    1095: expr_stmt: 
     1096: expr: 
      1097: name: 
       1098: name: sps
       1099: operator: ->
       1100: name: max_CU_height
      1101: operator: =
      1102: operator: (
      1103: literal: 1
      1104: operator: <<
      1105: operator: (
      1106: name: 
       1107: name: sps
       1108: operator: ->
       1109: name: log2_min_luma_coding_block_size
      1110: operator: +
      1111: name: 
       1112: name: sps
       1113: operator: ->
       1114: name: log2_diff_max_min_luma_coding_block_size
      1115: operator: )
      1116: operator: )
    1117: expr_stmt: 
     1118: expr: 
      1119: name: 
       1120: name: sps
       1121: operator: ->
       1122: name: log2_min_transform_block_size
      1123: operator: =
      1124: literal: 2
      1125: operator: +
      1126: call: 
       1127: name: gf_bs_read_ue_log
       1128: argument_list: 
        1129: argument: 
         1130: expr: 
          1131: name: bs
        1132: argument: 
         1133: expr: 
          1134: literal: "log2_min_transform_block_size_minus2"
    1135: expr_stmt: 
     1136: expr: 
      1137: name: 
       1138: name: sps
       1139: operator: ->
       1140: name: log2_max_transform_block_size
      1141: operator: =
      1142: name: 
       1143: name: sps
       1144: operator: ->
       1145: name: log2_min_transform_block_size
      1146: operator: +
      1147: call: 
       1148: name: gf_bs_read_ue_log
       1149: argument_list: 
        1150: argument: 
         1151: expr: 
          1152: name: bs
        1153: argument: 
         1154: expr: 
          1155: literal: "log2_max_transform_block_size"
    1156: expr_stmt: 
     1157: expr: 
      1158: name: depth
      1159: operator: =
      1160: literal: 0
    1161: expr_stmt: 
     1162: expr: 
      1163: name: 
       1164: name: sps
       1165: operator: ->
       1166: name: max_transform_hierarchy_depth_inter
      1167: operator: =
      1168: call: 
       1169: name: gf_bs_read_ue_log
       1170: argument_list: 
        1171: argument: 
         1172: expr: 
          1173: name: bs
        1174: argument: 
         1175: expr: 
          1176: literal: "max_transform_hierarchy_depth_inter"
    1177: expr_stmt: 
     1178: expr: 
      1179: name: 
       1180: name: sps
       1181: operator: ->
       1182: name: max_transform_hierarchy_depth_intra
      1183: operator: =
      1184: call: 
       1185: name: gf_bs_read_ue_log
       1186: argument_list: 
        1187: argument: 
         1188: expr: 
          1189: name: bs
        1190: argument: 
         1191: expr: 
          1192: literal: "max_transform_hierarchy_depth_intra"
    1193: while: 
     1194: condition: 
      1195: expr: 
       1196: operator: (
       1197: name: u32
       1198: operator: )
       1199: operator: (
       1200: name: 
        1201: name: sps
        1202: operator: ->
        1203: name: max_CU_width
       1204: operator: >>
       1205: name: 
        1206: name: sps
        1207: operator: ->
        1208: name: log2_diff_max_min_luma_coding_block_size
       1209: operator: )
       1210: operator: >
       1211: operator: (
       1212: name: u32
       1213: operator: )
       1214: operator: (
       1215: literal: 1
       1216: operator: <<
       1217: operator: (
       1218: name: 
        1219: name: sps
        1220: operator: ->
        1221: name: log2_min_transform_block_size
       1222: operator: +
       1223: name: depth
       1224: operator: )
       1225: operator: )
     1226: block: 
      1227: block_content: 
       1228: expr_stmt: 
        1229: expr: 
         1230: name: depth
         1231: operator: ++
    1232: expr_stmt: 
     1233: expr: 
      1234: name: 
       1235: name: sps
       1236: operator: ->
       1237: name: max_CU_depth
      1238: operator: =
      1239: name: 
       1240: name: sps
       1241: operator: ->
       1242: name: log2_diff_max_min_luma_coding_block_size
      1243: operator: +
      1244: name: depth
    1245: expr_stmt: 
     1246: expr: 
      1247: name: nb_CTUs
      1248: operator: =
      1249: operator: (
      1250: operator: (
      1251: name: 
       1252: name: sps
       1253: operator: ->
       1254: name: width
      1255: operator: +
      1256: name: 
       1257: name: sps
       1258: operator: ->
       1259: name: max_CU_width
      1260: operator: -
      1261: literal: 1
      1262: operator: )
      1263: operator: /
      1264: name: 
       1265: name: sps
       1266: operator: ->
       1267: name: max_CU_width
      1268: operator: )
      1269: operator: *
      1270: operator: (
      1271: operator: (
      1272: name: 
       1273: name: sps
       1274: operator: ->
       1275: name: height
      1276: operator: +
      1277: name: 
       1278: name: sps
       1279: operator: ->
       1280: name: max_CU_height
      1281: operator: -
      1282: literal: 1
      1283: operator: )
      1284: operator: /
      1285: name: 
       1286: name: sps
       1287: operator: ->
       1288: name: max_CU_height
      1289: operator: )
    1290: expr_stmt: 
     1291: expr: 
      1292: name: 
       1293: name: sps
       1294: operator: ->
       1295: name: bitsSliceSegmentAddress
      1296: operator: =
      1297: literal: 0
    1298: while: 
     1299: condition: 
      1300: expr: 
       1301: name: nb_CTUs
       1302: operator: >
       1303: operator: (
       1304: name: u32
       1305: operator: )
       1306: operator: (
       1307: literal: 1
       1308: operator: <<
       1309: name: 
        1310: name: sps
        1311: operator: ->
        1312: name: bitsSliceSegmentAddress
       1313: operator: )
     1314: block: 
      1315: block_content: 
       1316: expr_stmt: 
        1317: expr: 
         1318: name: 
          1319: name: sps
          1320: operator: ->
          1321: name: bitsSliceSegmentAddress
         1322: operator: ++
    1323: expr_stmt: 
     1324: expr: 
      1325: name: 
       1326: name: sps
       1327: operator: ->
       1328: name: scaling_list_enable_flag
      1329: operator: =
      1330: call: 
       1331: name: gf_bs_read_int_log
       1332: argument_list: 
        1333: argument: 
         1334: expr: 
          1335: name: bs
        1336: argument: 
         1337: expr: 
          1338: literal: 1
        1339: argument: 
         1340: expr: 
          1341: literal: "scaling_list_enable_flag"
    1342: if_stmt: 
     1343: if: 
      1344: condition: 
       1345: expr: 
        1346: name: 
         1347: name: sps
         1348: operator: ->
         1349: name: scaling_list_enable_flag
      1350: block: 
       1351: block_content: 
        1352: expr_stmt: 
         1353: expr: 
          1354: name: 
           1355: name: sps
           1356: operator: ->
           1357: name: infer_scaling_list_flag
          1358: operator: =
          1359: literal: 0
        1360: expr_stmt: 
         1361: expr: 
          1362: name: 
           1363: name: sps
           1364: operator: ->
           1365: name: scaling_list_ref_layer_id
          1366: operator: =
          1367: literal: 0
        1368: if_stmt: 
         1369: if: 
          1370: condition: 
           1371: expr: 
            1372: name: multiLayerExtSpsFlag
          1373: block: 
           1374: block_content: 
            1375: expr_stmt: 
             1376: expr: 
              1377: name: 
               1378: name: sps
               1379: operator: ->
               1380: name: infer_scaling_list_flag
              1381: operator: =
              1382: call: 
               1383: name: gf_bs_read_int_log
               1384: argument_list: 
                1385: argument: 
                 1386: expr: 
                  1387: name: bs
                1388: argument: 
                 1389: expr: 
                  1390: literal: 1
                1391: argument: 
                 1392: expr: 
                  1393: literal: "infer_scaling_list_flag"
        1394: if_stmt: 
         1395: if: 
          1396: condition: 
           1397: expr: 
            1398: name: 
             1399: name: sps
             1400: operator: ->
             1401: name: infer_scaling_list_flag
          1402: block: 
           1403: block_content: 
            1404: expr_stmt: 
             1405: expr: 
              1406: name: 
               1407: name: sps
               1408: operator: ->
               1409: name: scaling_list_ref_layer_id
              1410: operator: =
              1411: call: 
               1412: name: gf_bs_read_int_log
               1413: argument_list: 
                1414: argument: 
                 1415: expr: 
                  1416: name: bs
                1417: argument: 
                 1418: expr: 
                  1419: literal: 6
                1420: argument: 
                 1421: expr: 
                  1422: literal: "scaling_list_ref_layer_id"
         1423: else: 
          1424: block: 
           1425: block_content: 
            1426: expr_stmt: 
             1427: expr: 
              1428: name: 
               1429: name: sps
               1430: operator: ->
               1431: name: scaling_list_data_present_flag
              1432: operator: =
              1433: call: 
               1434: name: gf_bs_read_int_log
               1435: argument_list: 
                1436: argument: 
                 1437: expr: 
                  1438: name: bs
                1439: argument: 
                 1440: expr: 
                  1441: literal: 1
                1442: argument: 
                 1443: expr: 
                  1444: literal: "scaling_list_data_present_flag"
            1445: if_stmt: 
             1446: if: 
              1447: condition: 
               1448: expr: 
                1449: name: 
                 1450: name: sps
                 1451: operator: ->
                 1452: name: scaling_list_data_present_flag
              1453: block: 
               1454: block_content: 
                1455: expr_stmt: 
                 1456: expr: 
                  1457: call: 
                   1458: name: hevc_scaling_list_data
                   1459: argument_list: 
                    1460: argument: 
                     1461: expr: 
                      1462: name: bs
    1463: expr_stmt: 
     1464: expr: 
      1465: name: 
       1466: name: sps
       1467: operator: ->
       1468: name: asymmetric_motion_partitions_enabled_flag
      1469: operator: =
      1470: call: 
       1471: name: gf_bs_read_int_log
       1472: argument_list: 
        1473: argument: 
         1474: expr: 
          1475: name: bs
        1476: argument: 
         1477: expr: 
          1478: literal: 1
        1479: argument: 
         1480: expr: 
          1481: literal: "asymmetric_motion_partitions_enabled_flag"
    1482: expr_stmt: 
     1483: expr: 
      1484: name: 
       1485: name: sps
       1486: operator: ->
       1487: name: sample_adaptive_offset_enabled_flag
      1488: operator: =
      1489: call: 
       1490: name: gf_bs_read_int_log
       1491: argument_list: 
        1492: argument: 
         1493: expr: 
          1494: name: bs
        1495: argument: 
         1496: expr: 
          1497: literal: 1
        1498: argument: 
         1499: expr: 
          1500: literal: "sample_adaptive_offset_enabled_flag"
    1501: if_stmt: 
     1502: if: 
      1503: condition: 
       1504: expr: 
        1505: operator: (
        1506: name: 
         1507: name: sps
         1508: operator: ->
         1509: name: pcm_enabled_flag
        1510: operator: =
        1511: call: 
         1512: name: gf_bs_read_int_log
         1513: argument_list: 
          1514: argument: 
           1515: expr: 
            1516: name: bs
          1517: argument: 
           1518: expr: 
            1519: literal: 1
          1520: argument: 
           1521: expr: 
            1522: literal: "pcm_enabled_flag"
        1523: operator: )
      1524: block: 
       1525: block_content: 
        1526: expr_stmt: 
         1527: expr: 
          1528: name: 
           1529: name: sps
           1530: operator: ->
           1531: name: pcm_sample_bit_depth_luma_minus1
          1532: operator: =
          1533: call: 
           1534: name: gf_bs_read_int_log
           1535: argument_list: 
            1536: argument: 
             1537: expr: 
              1538: name: bs
            1539: argument: 
             1540: expr: 
              1541: literal: 4
            1542: argument: 
             1543: expr: 
              1544: literal: "pcm_sample_bit_depth_luma_minus1"
        1545: expr_stmt: 
         1546: expr: 
          1547: name: 
           1548: name: sps
           1549: operator: ->
           1550: name: pcm_sample_bit_depth_chroma_minus1
          1551: operator: =
          1552: call: 
           1553: name: gf_bs_read_int_log
           1554: argument_list: 
            1555: argument: 
             1556: expr: 
              1557: name: bs
            1558: argument: 
             1559: expr: 
              1560: literal: 4
            1561: argument: 
             1562: expr: 
              1563: literal: "pcm_sample_bit_depth_chroma_minus1"
        1564: expr_stmt: 
         1565: expr: 
          1566: name: 
           1567: name: sps
           1568: operator: ->
           1569: name: log2_min_pcm_luma_coding_block_size_minus3
          1570: operator: =
          1571: call: 
           1572: name: gf_bs_read_ue_log
           1573: argument_list: 
            1574: argument: 
             1575: expr: 
              1576: name: bs
            1577: argument: 
             1578: expr: 
              1579: literal: "log2_min_pcm_luma_coding_block_size_minus3"
        1580: expr_stmt: 
         1581: expr: 
          1582: name: 
           1583: name: sps
           1584: operator: ->
           1585: name: log2_diff_max_min_pcm_luma_coding_block_size
          1586: operator: =
          1587: call: 
           1588: name: gf_bs_read_ue_log
           1589: argument_list: 
            1590: argument: 
             1591: expr: 
              1592: name: bs
            1593: argument: 
             1594: expr: 
              1595: literal: "log2_diff_max_min_pcm_luma_coding_block_size"
        1596: expr_stmt: 
         1597: expr: 
          1598: name: 
           1599: name: sps
           1600: operator: ->
           1601: name: pcm_loop_filter_disable_flag
          1602: operator: =
          1603: call: 
           1604: name: gf_bs_read_int_log
           1605: argument_list: 
            1606: argument: 
             1607: expr: 
              1608: name: bs
            1609: argument: 
             1610: expr: 
              1611: literal: 1
            1612: argument: 
             1613: expr: 
              1614: literal: "pcm_loop_filter_disable_flag"
    1615: expr_stmt: 
     1616: expr: 
      1617: name: 
       1618: name: sps
       1619: operator: ->
       1620: name: num_short_term_ref_pic_sets
      1621: operator: =
      1622: call: 
       1623: name: gf_bs_read_ue_log
       1624: argument_list: 
        1625: argument: 
         1626: expr: 
          1627: name: bs
        1628: argument: 
         1629: expr: 
          1630: literal: "num_short_term_ref_pic_sets"
    1631: if_stmt: 
     1632: if: 
      1633: condition: 
       1634: expr: 
        1635: name: 
         1636: name: sps
         1637: operator: ->
         1638: name: num_short_term_ref_pic_sets
        1639: operator: >
        1640: literal: 64
      1641: block: 
       1642: block_content: 
        1643: expr_stmt: 
         1644: expr: 
          1645: call: 
           1646: name: GF_LOG
           1647: argument_list: 
            1648: argument: 
             1649: expr: 
              1650: name: GF_LOG_ERROR
            1651: argument: 
             1652: expr: 
              1653: name: GF_LOG_CODING
            1654: argument: 
             1655: expr: 
              1656: operator: (
              1657: literal: "[HEVC] Invalid number of short term reference picture sets %d\n"
              1658: operator: ,
              1659: name: 
               1660: name: sps
               1661: operator: ->
               1662: name: num_short_term_ref_pic_sets
              1663: operator: )
        1664: return: 
         1665: expr: 
          1666: operator: -
          1667: literal: 1
    1668: for: 
     1669: control: 
      1670: init: 
       1671: expr: 
        1672: name: i
        1673: operator: =
        1674: literal: 0
      1675: condition: 
       1676: expr: 
        1677: name: i
        1678: operator: <
        1679: name: 
         1680: name: sps
         1681: operator: ->
         1682: name: num_short_term_ref_pic_sets
      1683: incr: 
       1684: expr: 
        1685: name: i
        1686: operator: ++
     1687: block: 
      1688: block_content: 
       1689: decl_stmt: 
        1690: decl: 
         1691: type: 
          1692: name: Bool
         1693: name: ret
         1694: init: 
          1695: expr: 
           1696: call: 
            1697: name: hevc_parse_short_term_ref_pic_set
            1698: argument_list: 
             1699: argument: 
              1700: expr: 
               1701: name: bs
             1702: argument: 
              1703: expr: 
               1704: name: sps
             1705: argument: 
              1706: expr: 
               1707: name: i
       1708: comment: /*cannot parse short_term_ref_pic_set, skip VUI parsing*/
       1709: if_stmt: 
        1710: if: 
         1711: condition: 
          1712: expr: 
           1713: operator: !
           1714: name: ret
         1715: block: 
          1716: block_content: 
           1717: expr_stmt: 
            1718: expr: 
             1719: call: 
              1720: name: GF_LOG
              1721: argument_list: 
               1722: argument: 
                1723: expr: 
                 1724: name: GF_LOG_ERROR
               1725: argument: 
                1726: expr: 
                 1727: name: GF_LOG_CODING
               1728: argument: 
                1729: expr: 
                 1730: operator: (
                 1731: literal: "[HEVC] Invalid short_term_ref_pic_set\n"
                 1732: operator: )
           1733: return: 
            1734: expr: 
             1735: operator: -
             1736: literal: 1
    1737: expr_stmt: 
     1738: expr: 
      1739: name: 
       1740: name: sps
       1741: operator: ->
       1742: name: long_term_ref_pics_present_flag
      1743: operator: =
      1744: call: 
       1745: name: gf_bs_read_int_log
       1746: argument_list: 
        1747: argument: 
         1748: expr: 
          1749: name: bs
        1750: argument: 
         1751: expr: 
          1752: literal: 1
        1753: argument: 
         1754: expr: 
          1755: literal: "long_term_ref_pics_present_flag"
    1756: if_stmt: 
     1757: if: 
      1758: condition: 
       1759: expr: 
        1760: name: 
         1761: name: sps
         1762: operator: ->
         1763: name: long_term_ref_pics_present_flag
      1764: block: 
       1765: block_content: 
        1766: expr_stmt: 
         1767: expr: 
          1768: name: 
           1769: name: sps
           1770: operator: ->
           1771: name: num_long_term_ref_pic_sps
          1772: operator: =
          1773: call: 
           1774: name: gf_bs_read_ue_log
           1775: argument_list: 
            1776: argument: 
             1777: expr: 
              1778: name: bs
            1779: argument: 
             1780: expr: 
              1781: literal: "num_long_term_ref_pic_sps"
        1782: for: 
         1783: control: 
          1784: init: 
           1785: expr: 
            1786: name: i
            1787: operator: =
            1788: literal: 0
          1789: condition: 
           1790: expr: 
            1791: name: i
            1792: operator: <
            1793: name: 
             1794: name: sps
             1795: operator: ->
             1796: name: num_long_term_ref_pic_sps
          1797: incr: 
           1798: expr: 
            1799: name: i
            1800: operator: ++
         1801: block: 
          1802: block_content: 
           1803: expr_stmt: 
            1804: expr: 
             1805: call: 
              1806: name: gf_bs_read_int_log_idx
              1807: argument_list: 
               1808: argument: 
                1809: expr: 
                 1810: name: bs
               1811: argument: 
                1812: expr: 
                 1813: name: 
                  1814: name: sps
                  1815: operator: ->
                  1816: name: log2_max_pic_order_cnt_lsb
               1817: argument: 
                1818: expr: 
                 1819: literal: "lt_ref_pic_poc_lsb_sps"
               1820: argument: 
                1821: expr: 
                 1822: name: i
           1823: expr_stmt: 
            1824: expr: 
             1825: call: 
              1826: name: gf_bs_read_int_log_idx
              1827: argument_list: 
               1828: argument: 
                1829: expr: 
                 1830: name: bs
               1831: argument: 
                1832: expr: 
                 1833: literal: 1
               1834: argument: 
                1835: expr: 
                 1836: literal: "used_by_curr_pic_lt_sps_flag"
               1837: argument: 
                1838: expr: 
                 1839: name: i
    1840: expr_stmt: 
     1841: expr: 
      1842: name: 
       1843: name: sps
       1844: operator: ->
       1845: name: temporal_mvp_enable_flag
      1846: operator: =
      1847: call: 
       1848: name: gf_bs_read_int_log
       1849: argument_list: 
        1850: argument: 
         1851: expr: 
          1852: name: bs
        1853: argument: 
         1854: expr: 
          1855: literal: 1
        1856: argument: 
         1857: expr: 
          1858: literal: "temporal_mvp_enable_flag"
    1859: expr_stmt: 
     1860: expr: 
      1861: name: 
       1862: name: sps
       1863: operator: ->
       1864: name: strong_intra_smoothing_enable_flag
      1865: operator: =
      1866: call: 
       1867: name: gf_bs_read_int_log
       1868: argument_list: 
        1869: argument: 
         1870: expr: 
          1871: name: bs
        1872: argument: 
         1873: expr: 
          1874: literal: 1
        1875: argument: 
         1876: expr: 
          1877: literal: "strong_intra_smoothing_enable_flag"
    1878: if_stmt: 
     1879: if: 
      1880: condition: 
       1881: expr: 
        1882: name: vui_flag_pos
      1883: block: 
       1884: block_content: 
        1885: expr_stmt: 
         1886: expr: 
          1887: operator: *
          1888: name: vui_flag_pos
          1889: operator: =
          1890: operator: (
          1891: name: u32
          1892: operator: )
          1893: call: 
           1894: name: gf_bs_get_bit_offset
           1895: argument_list: 
            1896: argument: 
             1897: expr: 
              1898: name: bs
    1899: if_stmt: 
     1900: if: 
      1901: condition: 
       1902: expr: 
        1903: operator: (
        1904: name: 
         1905: name: sps
         1906: operator: ->
         1907: name: vui_parameters_present_flag
        1908: operator: =
        1909: call: 
         1910: name: gf_bs_read_int_log
         1911: argument_list: 
          1912: argument: 
           1913: expr: 
            1914: name: bs
          1915: argument: 
           1916: expr: 
            1917: literal: 1
          1918: argument: 
           1919: expr: 
            1920: literal: "vui_parameters_present_flag"
        1921: operator: )
      1922: block: 
       1923: block_content: 
        1924: expr_stmt: 
         1925: expr: 
          1926: name: 
           1927: name: sps
           1928: operator: ->
           1929: name: aspect_ratio_info_present_flag
          1930: operator: =
          1931: call: 
           1932: name: gf_bs_read_int_log
           1933: argument_list: 
            1934: argument: 
             1935: expr: 
              1936: name: bs
            1937: argument: 
             1938: expr: 
              1939: literal: 1
            1940: argument: 
             1941: expr: 
              1942: literal: "aspect_ratio_info_present_flag"
        1943: if_stmt: 
         1944: if: 
          1945: condition: 
           1946: expr: 
            1947: name: 
             1948: name: sps
             1949: operator: ->
             1950: name: aspect_ratio_info_present_flag
          1951: block: 
           1952: block_content: 
            1953: expr_stmt: 
             1954: expr: 
              1955: name: 
               1956: name: sps
               1957: operator: ->
               1958: name: sar_idc
              1959: operator: =
              1960: call: 
               1961: name: gf_bs_read_int_log
               1962: argument_list: 
                1963: argument: 
                 1964: expr: 
                  1965: name: bs
                1966: argument: 
                 1967: expr: 
                  1968: literal: 8
                1969: argument: 
                 1970: expr: 
                  1971: literal: "aspect_ratio_idc"
            1972: if_stmt: 
             1973: if: 
              1974: condition: 
               1975: expr: 
                1976: name: 
                 1977: name: sps
                 1978: operator: ->
                 1979: name: sar_idc
                1980: operator: ==
                1981: literal: 255
              1982: block: 
               1983: block_content: 
                1984: expr_stmt: 
                 1985: expr: 
                  1986: name: 
                   1987: name: sps
                   1988: operator: ->
                   1989: name: sar_width
                  1990: operator: =
                  1991: call: 
                   1992: name: gf_bs_read_int_log
                   1993: argument_list: 
                    1994: argument: 
                     1995: expr: 
                      1996: name: bs
                    1997: argument: 
                     1998: expr: 
                      1999: literal: 16
                    2000: argument: 
                     2001: expr: 
                      2002: literal: "aspect_ratio_width"
                2003: expr_stmt: 
                 2004: expr: 
                  2005: name: 
                   2006: name: sps
                   2007: operator: ->
                   2008: name: sar_height
                  2009: operator: =
                  2010: call: 
                   2011: name: gf_bs_read_int_log
                   2012: argument_list: 
                    2013: argument: 
                     2014: expr: 
                      2015: name: bs
                    2016: argument: 
                     2017: expr: 
                      2018: literal: 16
                    2019: argument: 
                     2020: expr: 
                      2021: literal: "aspect_ratio_height"
             2022: if: 
              2023: condition: 
               2024: expr: 
                2025: name: 
                 2026: name: sps
                 2027: operator: ->
                 2028: name: sar_idc
                2029: operator: <
                2030: literal: 17
              2031: block: 
               2032: block_content: 
                2033: expr_stmt: 
                 2034: expr: 
                  2035: name: 
                   2036: name: sps
                   2037: operator: ->
                   2038: name: sar_width
                  2039: operator: =
                  2040: name: 
                   2041: name: hevc_sar
                   2042: index: 
                    2043: expr: 
                     2044: name: 
                      2045: name: sps
                      2046: operator: ->
                      2047: name: sar_idc
                  2048: operator: .
                  2049: name: w
                2050: expr_stmt: 
                 2051: expr: 
                  2052: name: 
                   2053: name: sps
                   2054: operator: ->
                   2055: name: sar_height
                  2056: operator: =
                  2057: name: 
                   2058: name: hevc_sar
                   2059: index: 
                    2060: expr: 
                     2061: name: 
                      2062: name: sps
                      2063: operator: ->
                      2064: name: sar_idc
                  2065: operator: .
                  2066: name: h
        2067: if_stmt: 
         2068: if: 
          2069: condition: 
           2070: expr: 
            2071: operator: (
            2072: name: 
             2073: name: sps
             2074: operator: ->
             2075: name: overscan_info_present
            2076: operator: =
            2077: call: 
             2078: name: gf_bs_read_int_log
             2079: argument_list: 
              2080: argument: 
               2081: expr: 
                2082: name: bs
              2083: argument: 
               2084: expr: 
                2085: literal: 1
              2086: argument: 
               2087: expr: 
                2088: literal: "overscan_info_present"
            2089: operator: )
          2090: block: 
           2091: block_content: 
            2092: expr_stmt: 
             2093: expr: 
              2094: name: 
               2095: name: sps
               2096: operator: ->
               2097: name: overscan_appropriate
              2098: operator: =
              2099: call: 
               2100: name: gf_bs_read_int_log
               2101: argument_list: 
                2102: argument: 
                 2103: expr: 
                  2104: name: bs
                2105: argument: 
                 2106: expr: 
                  2107: literal: 1
                2108: argument: 
                 2109: expr: 
                  2110: literal: "overscan_appropriate"
        2111: expr_stmt: 
         2112: expr: 
          2113: name: 
           2114: name: sps
           2115: operator: ->
           2116: name: video_signal_type_present_flag
          2117: operator: =
          2118: call: 
           2119: name: gf_bs_read_int_log
           2120: argument_list: 
            2121: argument: 
             2122: expr: 
              2123: name: bs
            2124: argument: 
             2125: expr: 
              2126: literal: 1
            2127: argument: 
             2128: expr: 
              2129: literal: "video_signal_type_present_flag"
        2130: if_stmt: 
         2131: if: 
          2132: condition: 
           2133: expr: 
            2134: name: 
             2135: name: sps
             2136: operator: ->
             2137: name: video_signal_type_present_flag
          2138: block: 
           2139: block_content: 
            2140: expr_stmt: 
             2141: expr: 
              2142: name: 
               2143: name: sps
               2144: operator: ->
               2145: name: video_format
              2146: operator: =
              2147: call: 
               2148: name: gf_bs_read_int_log
               2149: argument_list: 
                2150: argument: 
                 2151: expr: 
                  2152: name: bs
                2153: argument: 
                 2154: expr: 
                  2155: literal: 3
                2156: argument: 
                 2157: expr: 
                  2158: literal: "video_format"
            2159: expr_stmt: 
             2160: expr: 
              2161: name: 
               2162: name: sps
               2163: operator: ->
               2164: name: video_full_range_flag
              2165: operator: =
              2166: call: 
               2167: name: gf_bs_read_int_log
               2168: argument_list: 
                2169: argument: 
                 2170: expr: 
                  2171: name: bs
                2172: argument: 
                 2173: expr: 
                  2174: literal: 1
                2175: argument: 
                 2176: expr: 
                  2177: literal: "video_full_range_flag"
            2178: if_stmt: 
             2179: if: 
              2180: condition: 
               2181: expr: 
                2182: operator: (
                2183: name: 
                 2184: name: sps
                 2185: operator: ->
                 2186: name: colour_description_present_flag
                2187: operator: =
                2188: call: 
                 2189: name: gf_bs_read_int_log
                 2190: argument_list: 
                  2191: argument: 
                   2192: expr: 
                    2193: name: bs
                  2194: argument: 
                   2195: expr: 
                    2196: literal: 1
                  2197: argument: 
                   2198: expr: 
                    2199: literal: "colour_description_present_flag"
                2200: operator: )
              2201: block: 
               2202: block_content: 
                2203: expr_stmt: 
                 2204: expr: 
                  2205: name: 
                   2206: name: sps
                   2207: operator: ->
                   2208: name: colour_primaries
                  2209: operator: =
                  2210: call: 
                   2211: name: gf_bs_read_int_log
                   2212: argument_list: 
                    2213: argument: 
                     2214: expr: 
                      2215: name: bs
                    2216: argument: 
                     2217: expr: 
                      2218: literal: 8
                    2219: argument: 
                     2220: expr: 
                      2221: literal: "colour_primaries"
                2222: expr_stmt: 
                 2223: expr: 
                  2224: name: 
                   2225: name: sps
                   2226: operator: ->
                   2227: name: transfer_characteristic
                  2228: operator: =
                  2229: call: 
                   2230: name: gf_bs_read_int_log
                   2231: argument_list: 
                    2232: argument: 
                     2233: expr: 
                      2234: name: bs
                    2235: argument: 
                     2236: expr: 
                      2237: literal: 8
                    2238: argument: 
                     2239: expr: 
                      2240: literal: "transfer_characteristic"
                2241: expr_stmt: 
                 2242: expr: 
                  2243: name: 
                   2244: name: sps
                   2245: operator: ->
                   2246: name: matrix_coeffs
                  2247: operator: =
                  2248: call: 
                   2249: name: gf_bs_read_int_log
                   2250: argument_list: 
                    2251: argument: 
                     2252: expr: 
                      2253: name: bs
                    2254: argument: 
                     2255: expr: 
                      2256: literal: 8
                    2257: argument: 
                     2258: expr: 
                      2259: literal: "matrix_coefficients"
        2260: if_stmt: 
         2261: if: 
          2262: condition: 
           2263: expr: 
            2264: operator: (
            2265: name: 
             2266: name: sps
             2267: operator: ->
             2268: name: chroma_loc_info_present_flag
            2269: operator: =
            2270: call: 
             2271: name: gf_bs_read_int_log
             2272: argument_list: 
              2273: argument: 
               2274: expr: 
                2275: name: bs
              2276: argument: 
               2277: expr: 
                2278: literal: 1
              2279: argument: 
               2280: expr: 
                2281: literal: "chroma_loc_info_present_flag"
            2282: operator: )
          2283: block: 
           2284: block_content: 
            2285: expr_stmt: 
             2286: expr: 
              2287: name: 
               2288: name: sps
               2289: operator: ->
               2290: name: chroma_sample_loc_type_top_field
              2291: operator: =
              2292: call: 
               2293: name: gf_bs_read_ue_log
               2294: argument_list: 
                2295: argument: 
                 2296: expr: 
                  2297: name: bs
                2298: argument: 
                 2299: expr: 
                  2300: literal: "chroma_sample_loc_type_top_field"
            2301: expr_stmt: 
             2302: expr: 
              2303: name: 
               2304: name: sps
               2305: operator: ->
               2306: name: chroma_sample_loc_type_bottom_field
              2307: operator: =
              2308: call: 
               2309: name: gf_bs_read_ue_log
               2310: argument_list: 
                2311: argument: 
                 2312: expr: 
                  2313: name: bs
                2314: argument: 
                 2315: expr: 
                  2316: literal: "chroma_sample_loc_type_bottom_field"
        2317: expr_stmt: 
         2318: expr: 
          2319: name: 
           2320: name: sps
           2321: operator: ->
           2322: name: neutra_chroma_indication_flag
          2323: operator: =
          2324: call: 
           2325: name: gf_bs_read_int_log
           2326: argument_list: 
            2327: argument: 
             2328: expr: 
              2329: name: bs
            2330: argument: 
             2331: expr: 
              2332: literal: 1
            2333: argument: 
             2334: expr: 
              2335: literal: "neutra_chroma_indication_flag"
        2336: expr_stmt: 
         2337: expr: 
          2338: name: 
           2339: name: sps
           2340: operator: ->
           2341: name: field_seq_flag
          2342: operator: =
          2343: call: 
           2344: name: gf_bs_read_int_log
           2345: argument_list: 
            2346: argument: 
             2347: expr: 
              2348: name: bs
            2349: argument: 
             2350: expr: 
              2351: literal: 1
            2352: argument: 
             2353: expr: 
              2354: literal: "field_seq_flag"
        2355: expr_stmt: 
         2356: expr: 
          2357: name: 
           2358: name: sps
           2359: operator: ->
           2360: name: frame_field_info_present_flag
          2361: operator: =
          2362: call: 
           2363: name: gf_bs_read_int_log
           2364: argument_list: 
            2365: argument: 
             2366: expr: 
              2367: name: bs
            2368: argument: 
             2369: expr: 
              2370: literal: 1
            2371: argument: 
             2372: expr: 
              2373: literal: "frame_field_info_present_flag"
        2374: if_stmt: 
         2375: if: 
          2376: condition: 
           2377: expr: 
            2378: operator: (
            2379: name: 
             2380: name: sps
             2381: operator: ->
             2382: name: default_display_window_flag
            2383: operator: =
            2384: call: 
             2385: name: gf_bs_read_int_log
             2386: argument_list: 
              2387: argument: 
               2388: expr: 
                2389: name: bs
              2390: argument: 
               2391: expr: 
                2392: literal: 1
              2393: argument: 
               2394: expr: 
                2395: literal: "default_display_window_flag"
            2396: operator: )
          2397: block: 
           2398: block_content: 
            2399: expr_stmt: 
             2400: expr: 
              2401: name: 
               2402: name: sps
               2403: operator: ->
               2404: name: left_offset
              2405: operator: =
              2406: call: 
               2407: name: gf_bs_read_ue_log
               2408: argument_list: 
                2409: argument: 
                 2410: expr: 
                  2411: name: bs
                2412: argument: 
                 2413: expr: 
                  2414: literal: "display_window_left_offset"
            2415: expr_stmt: 
             2416: expr: 
              2417: name: 
               2418: name: sps
               2419: operator: ->
               2420: name: right_offset
              2421: operator: =
              2422: call: 
               2423: name: gf_bs_read_ue_log
               2424: argument_list: 
                2425: argument: 
                 2426: expr: 
                  2427: name: bs
                2428: argument: 
                 2429: expr: 
                  2430: literal: "display_window_right_offset"
            2431: expr_stmt: 
             2432: expr: 
              2433: name: 
               2434: name: sps
               2435: operator: ->
               2436: name: top_offset
              2437: operator: =
              2438: call: 
               2439: name: gf_bs_read_ue_log
               2440: argument_list: 
                2441: argument: 
                 2442: expr: 
                  2443: name: bs
                2444: argument: 
                 2445: expr: 
                  2446: literal: "display_window_top_offset"
            2447: expr_stmt: 
             2448: expr: 
              2449: name: 
               2450: name: sps
               2451: operator: ->
               2452: name: bottom_offset
              2453: operator: =
              2454: call: 
               2455: name: gf_bs_read_ue_log
               2456: argument_list: 
                2457: argument: 
                 2458: expr: 
                  2459: name: bs
                2460: argument: 
                 2461: expr: 
                  2462: literal: "display_window_bottom_offset"
        2463: expr_stmt: 
         2464: expr: 
          2465: name: 
           2466: name: sps
           2467: operator: ->
           2468: name: has_timing_info
          2469: operator: =
          2470: call: 
           2471: name: gf_bs_read_int_log
           2472: argument_list: 
            2473: argument: 
             2474: expr: 
              2475: name: bs
            2476: argument: 
             2477: expr: 
              2478: literal: 1
            2479: argument: 
             2480: expr: 
              2481: literal: "has_timing_info"
        2482: if_stmt: 
         2483: if: 
          2484: condition: 
           2485: expr: 
            2486: name: 
             2487: name: sps
             2488: operator: ->
             2489: name: has_timing_info
          2490: block: 
           2491: block_content: 
            2492: expr_stmt: 
             2493: expr: 
              2494: name: 
               2495: name: sps
               2496: operator: ->
               2497: name: num_units_in_tick
              2498: operator: =
              2499: call: 
               2500: name: gf_bs_read_int_log
               2501: argument_list: 
                2502: argument: 
                 2503: expr: 
                  2504: name: bs
                2505: argument: 
                 2506: expr: 
                  2507: literal: 32
                2508: argument: 
                 2509: expr: 
                  2510: literal: "num_units_in_tick"
            2511: expr_stmt: 
             2512: expr: 
              2513: name: 
               2514: name: sps
               2515: operator: ->
               2516: name: time_scale
              2517: operator: =
              2518: call: 
               2519: name: gf_bs_read_int_log
               2520: argument_list: 
                2521: argument: 
                 2522: expr: 
                  2523: name: bs
                2524: argument: 
                 2525: expr: 
                  2526: literal: 32
                2527: argument: 
                 2528: expr: 
                  2529: literal: "time_scale"
            2530: expr_stmt: 
             2531: expr: 
              2532: name: 
               2533: name: sps
               2534: operator: ->
               2535: name: poc_proportional_to_timing_flag
              2536: operator: =
              2537: call: 
               2538: name: gf_bs_read_int_log
               2539: argument_list: 
                2540: argument: 
                 2541: expr: 
                  2542: name: bs
                2543: argument: 
                 2544: expr: 
                  2545: literal: 1
                2546: argument: 
                 2547: expr: 
                  2548: literal: "poc_proportional_to_timing_flag"
            2549: if_stmt: 
             2550: if: 
              2551: condition: 
               2552: expr: 
                2553: name: 
                 2554: name: sps
                 2555: operator: ->
                 2556: name: poc_proportional_to_timing_flag
              2557: block: 
               2558: block_content: 
                2559: expr_stmt: 
                 2560: expr: 
                  2561: name: 
                   2562: name: sps
                   2563: operator: ->
                   2564: name: num_ticks_poc_diff_one_minus1
                  2565: operator: =
                  2566: call: 
                   2567: name: gf_bs_read_ue_log
                   2568: argument_list: 
                    2569: argument: 
                     2570: expr: 
                      2571: name: bs
                    2572: argument: 
                     2573: expr: 
                      2574: literal: "num_ticks_poc_diff_one_minus1"
            2575: if_stmt: 
             2576: if: 
              2577: condition: 
               2578: expr: 
                2579: operator: (
                2580: name: 
                 2581: name: sps
                 2582: operator: ->
                 2583: name: hrd_parameters_present_flag
                2584: operator: =
                2585: call: 
                 2586: name: gf_bs_read_int_log
                 2587: argument_list: 
                  2588: argument: 
                   2589: expr: 
                    2590: name: bs
                  2591: argument: 
                   2592: expr: 
                    2593: literal: 1
                  2594: argument: 
                   2595: expr: 
                    2596: literal: "hrd_parameters_present_flag"
                2597: operator: )
              2598: block: 
               2599: block_content: 
                2600: comment: //				GF_LOG(GF_LOG_INFO, GF_LOG_CODING, ("[HEVC] HRD param parsing not implemented\n"));
                2601: return: 
                 2602: expr: 
                  2603: name: sps_id
        2604: if_stmt: 
         2605: if: 
          2606: condition: 
           2607: expr: 
            2608: call: 
             2609: name: gf_bs_read_int_log
             2610: argument_list: 
              2611: argument: 
               2612: expr: 
                2613: name: bs
              2614: argument: 
               2615: expr: 
                2616: literal: 1
              2617: argument: 
               2618: expr: 
                2619: literal: "bitstream_restriction_flag"
          2620: block: 
           2621: block_content: 
            2622: expr_stmt: 
             2623: expr: 
              2624: call: 
               2625: name: gf_bs_read_int_log
               2626: argument_list: 
                2627: argument: 
                 2628: expr: 
                  2629: name: bs
                2630: argument: 
                 2631: expr: 
                  2632: literal: 1
                2633: argument: 
                 2634: expr: 
                  2635: literal: "tiles_fixed_structure_flag"
            2636: expr_stmt: 
             2637: expr: 
              2638: call: 
               2639: name: gf_bs_read_int_log
               2640: argument_list: 
                2641: argument: 
                 2642: expr: 
                  2643: name: bs
                2644: argument: 
                 2645: expr: 
                  2646: literal: 1
                2647: argument: 
                 2648: expr: 
                  2649: literal: "motion_vectors_over_pic_boundaries_flag"
            2650: expr_stmt: 
             2651: expr: 
              2652: call: 
               2653: name: gf_bs_read_int_log
               2654: argument_list: 
                2655: argument: 
                 2656: expr: 
                  2657: name: bs
                2658: argument: 
                 2659: expr: 
                  2660: literal: 1
                2661: argument: 
                 2662: expr: 
                  2663: literal: "restricted_ref_pic_lists_flag"
            2664: expr_stmt: 
             2665: expr: 
              2666: call: 
               2667: name: gf_bs_read_ue_log
               2668: argument_list: 
                2669: argument: 
                 2670: expr: 
                  2671: name: bs
                2672: argument: 
                 2673: expr: 
                  2674: literal: "min_spatial_segmentation_idc"
            2675: expr_stmt: 
             2676: expr: 
              2677: call: 
               2678: name: gf_bs_read_ue_log
               2679: argument_list: 
                2680: argument: 
                 2681: expr: 
                  2682: name: bs
                2683: argument: 
                 2684: expr: 
                  2685: literal: "max_bytes_per_pic_denom"
            2686: expr_stmt: 
             2687: expr: 
              2688: call: 
               2689: name: gf_bs_read_ue_log
               2690: argument_list: 
                2691: argument: 
                 2692: expr: 
                  2693: name: bs
                2694: argument: 
                 2695: expr: 
                  2696: literal: "max_bits_per_min_cu_denom"
            2697: expr_stmt: 
             2698: expr: 
              2699: call: 
               2700: name: gf_bs_read_ue_log
               2701: argument_list: 
                2702: argument: 
                 2703: expr: 
                  2704: name: bs
                2705: argument: 
                 2706: expr: 
                  2707: literal: "log2_max_mv_length_horizontal"
            2708: expr_stmt: 
             2709: expr: 
              2710: call: 
               2711: name: gf_bs_read_ue_log
               2712: argument_list: 
                2713: argument: 
                 2714: expr: 
                  2715: name: bs
                2716: argument: 
                 2717: expr: 
                  2718: literal: "log2_max_mv_length_vertical"
    2719: if_stmt: 
     2720: if: 
      2721: condition: 
       2722: expr: 
        2723: call: 
         2724: name: gf_bs_read_int_log
         2725: argument_list: 
          2726: argument: 
           2727: expr: 
            2728: name: bs
          2729: argument: 
           2730: expr: 
            2731: literal: 1
          2732: argument: 
           2733: expr: 
            2734: literal: "sps_extension_flag"
      2735: block: 
       2736: block_content: 
        2737: if: 
         2738: directive: if
         2739: expr: 
          2740: literal: 0
        2741: comment: /*sps_extension_data_flag */
        2742: endif: 
         2743: directive: endif
    2744: return: 
     2745: expr: 
      2746: name: sps_id
=====
0: function: 
 1: type: 
  2: specifier: static
  3: name: s32
 4: name: gf_hevc_read_sps_bs_internal
 5: parameter_list: 
  6: parameter: 
   7: decl: 
    8: type: 
     9: name: GF_BitStream
     10: modifier: *
    11: name: bs
  12: parameter: 
   13: decl: 
    14: type: 
     15: name: HEVCState
     16: modifier: *
    17: name: hevc
  18: parameter: 
   19: decl: 
    20: type: 
     21: name: u8
    22: name: layer_id
  23: parameter: 
   24: decl: 
    25: type: 
     26: name: u32
     27: modifier: *
    28: name: vui_flag_pos
 29: block: 
  30: block_content: 
   31: decl_stmt: 
    32: decl: 
     33: type: 
      34: name: s32
     35: name: vps_id
    36: decl: 
     37: type: 
     38: name: sps_id
     39: init: 
      40: expr: 
       41: operator: -
       42: literal: 1
   43: decl_stmt: 
    44: decl: 
     45: type: 
      46: name: u32
     47: name: i
    48: decl: 
     49: type: 
     50: name: nb_CTUs
    51: decl: 
     52: type: 
     53: name: depth
   54: decl_stmt: 
    55: decl: 
     56: type: 
      57: name: HEVC_SPS
      58: modifier: *
     59: name: sps
   60: decl_stmt: 
    61: decl: 
     62: type: 
      63: name: HEVC_VPS
      64: modifier: *
     65: name: vps
   66: decl_stmt: 
    67: decl: 
     68: type: 
      69: name: HEVC_ProfileTierLevel
     70: name: ptl
   71: decl_stmt: 
    72: decl: 
     73: type: 
      74: name: Bool
     75: name: multiLayerExtSpsFlag
   76: decl_stmt: 
    77: decl: 
     78: type: 
      79: name: u8
     80: name: sps_ext_or_max_sub_layers_minus1
    81: decl: 
     82: type: 
     83: name: max_sub_layers_minus1
   84: if_stmt: 
    85: if: 
     86: condition: 
      87: expr: 
       88: name: vui_flag_pos
     89: block: 
      90: block_content: 
       91: expr_stmt: 
        92: expr: 
         93: operator: *
         94: name: vui_flag_pos
         95: operator: =
         96: literal: 0
   97: comment: //nalu header already parsed
   98: expr_stmt: 
    99: expr: 
     100: name: vps_id
     101: operator: =
     102: call: 
      103: name: gf_bs_read_int_log
      104: argument_list: 
       105: argument: 
        106: expr: 
         107: name: bs
       108: argument: 
        109: expr: 
         110: literal: 4
       111: argument: 
        112: expr: 
         113: literal: "vps_id"
   114: if_stmt: 
    115: if: 
     116: condition: 
      117: expr: 
       118: name: vps_id
       119: operator: >=
       120: literal: 16
     121: block: 
      122: block_content: 
       123: return: 
        124: expr: 
         125: operator: -
         126: literal: 1
   127: expr_stmt: 
    128: expr: 
     129: call: 
      130: name: memset
      131: argument_list: 
       132: argument: 
        133: expr: 
         134: operator: &
         135: name: ptl
       136: argument: 
        137: expr: 
         138: literal: 0
       139: argument: 
        140: expr: 
         141: sizeof: 
          142: argument_list: 
           143: argument: 
            144: expr: 
             145: name: ptl
   146: expr_stmt: 
    147: expr: 
     148: name: max_sub_layers_minus1
     149: operator: =
     150: literal: 0
   151: expr_stmt: 
    152: expr: 
     153: name: sps_ext_or_max_sub_layers_minus1
     154: operator: =
     155: literal: 0
   156: if_stmt: 
    157: if: 
     158: condition: 
      159: expr: 
       160: name: layer_id
       161: operator: ==
       162: literal: 0
     163: block: 
      164: block_content: 
       165: expr_stmt: 
        166: expr: 
         167: name: max_sub_layers_minus1
         168: operator: =
         169: call: 
          170: name: gf_bs_read_int_log
          171: argument_list: 
           172: argument: 
            173: expr: 
             174: name: bs
           175: argument: 
            176: expr: 
             177: literal: 3
           178: argument: 
            179: expr: 
             180: literal: "max_sub_layers_minus1"
    181: else: 
     182: block: 
      183: block_content: 
       184: expr_stmt: 
        185: expr: 
         186: name: sps_ext_or_max_sub_layers_minus1
         187: operator: =
         188: call: 
          189: name: gf_bs_read_int_log
          190: argument_list: 
           191: argument: 
            192: expr: 
             193: name: bs
           194: argument: 
            195: expr: 
             196: literal: 3
           197: argument: 
            198: expr: 
             199: literal: "sps_ext_or_max_sub_layers_minus1"
   200: expr_stmt: 
    201: expr: 
     202: name: multiLayerExtSpsFlag
     203: operator: =
     204: operator: (
     205: name: layer_id
     206: operator: !=
     207: literal: 0
     208: operator: )
     209: operator: &&
     210: operator: (
     211: name: sps_ext_or_max_sub_layers_minus1
     212: operator: ==
     213: literal: 7
     214: operator: )
   215: if_stmt: 
    216: if: 
     217: condition: 
      218: expr: 
       219: operator: !
       220: name: multiLayerExtSpsFlag
     221: block: 
      222: block_content: 
       223: expr_stmt: 
        224: expr: 
         225: call: 
          226: name: gf_bs_read_int_log
          227: argument_list: 
           228: argument: 
            229: expr: 
             230: name: bs
           231: argument: 
            232: expr: 
             233: literal: 1
           234: argument: 
            235: expr: 
             236: literal: "temporal_id_nesting_flag"
       237: expr_stmt: 
        238: expr: 
         239: call: 
          240: name: hevc_profile_tier_level
          241: argument_list: 
           242: argument: 
            243: expr: 
             244: name: bs
           245: argument: 
            246: expr: 
             247: literal: 1
           248: argument: 
            249: expr: 
             250: name: max_sub_layers_minus1
           251: argument: 
            252: expr: 
             253: operator: &
             254: name: ptl
           255: argument: 
            256: expr: 
             257: literal: 0
   258: expr_stmt: 
    259: expr: 
     260: name: sps_id
     261: operator: =
     262: call: 
      263: name: gf_bs_read_ue_log
      264: argument_list: 
       265: argument: 
        266: expr: 
         267: name: bs
       268: argument: 
        269: expr: 
         270: literal: "sps_id"
   271: if_stmt: 
    272: if: 
     273: condition: 
      274: expr: 
       275: operator: (
       276: name: sps_id
       277: operator: <
       278: literal: 0
       279: operator: )
       280: operator: ||
       281: operator: (
       282: name: sps_id
       283: operator: >=
       284: literal: 16
       285: operator: )
     286: block: 
      287: block_content: 
       288: return: 
        289: expr: 
         290: operator: -
         291: literal: 1
   292: expr_stmt: 
    293: expr: 
     294: name: sps
     295: operator: =
     296: operator: &
     297: name: 
      298: name: hevc
      299: operator: ->
      300: name: sps
      301: index: 
       302: expr: 
        303: name: sps_id
   304: if_stmt: 
    305: if: 
     306: condition: 
      307: expr: 
       308: operator: !
       309: name: 
        310: name: sps
        311: operator: ->
        312: name: state
     313: block: 
      314: block_content: 
       315: expr_stmt: 
        316: expr: 
         317: name: 
          318: name: sps
          319: operator: ->
          320: name: state
         321: operator: =
         322: literal: 1
       323: expr_stmt: 
        324: expr: 
         325: name: 
          326: name: sps
          327: operator: ->
          328: name: id
         329: operator: =
         330: name: sps_id
       331: expr_stmt: 
        332: expr: 
         333: name: 
          334: name: sps
          335: operator: ->
          336: name: vps_id
         337: operator: =
         338: name: vps_id
   339: expr_stmt: 
    340: expr: 
     341: name: 
      342: name: sps
      343: operator: ->
      344: name: ptl
     345: operator: =
     346: name: ptl
   347: expr_stmt: 
    348: expr: 
     349: name: vps
     350: operator: =
     351: operator: &
     352: name: 
      353: name: hevc
      354: operator: ->
      355: name: vps
      356: index: 
       357: expr: 
        358: name: vps_id
   359: expr_stmt: 
    360: expr: 
     361: name: 
      362: name: sps
      363: operator: ->
      364: name: max_sub_layers_minus1
     365: operator: =
     366: literal: 0
   367: expr_stmt: 
    368: expr: 
     369: name: 
      370: name: sps
      371: operator: ->
      372: name: sps_ext_or_max_sub_layers_minus1
     373: operator: =
     374: literal: 0
   375: comment: /* default values */
   376: expr_stmt: 
    377: expr: 
     378: name: 
      379: name: sps
      380: operator: ->
      381: name: colour_primaries
     382: operator: =
     383: literal: 2
   384: expr_stmt: 
    385: expr: 
     386: name: 
      387: name: sps
      388: operator: ->
      389: name: transfer_characteristic
     390: operator: =
     391: literal: 2
   392: expr_stmt: 
    393: expr: 
     394: name: 
      395: name: sps
      396: operator: ->
      397: name: matrix_coeffs
     398: operator: =
     399: literal: 2
   400: comment: //sps_rep_format_idx = 0;
   401: if_stmt: 
    402: if: 
     403: condition: 
      404: expr: 
       405: name: multiLayerExtSpsFlag
     406: block: 
      407: block_content: 
       408: expr_stmt: 
        409: expr: 
         410: name: 
          411: name: sps
          412: operator: ->
          413: name: update_rep_format_flag
         414: operator: =
         415: call: 
          416: name: gf_bs_read_int_log
          417: argument_list: 
           418: argument: 
            419: expr: 
             420: name: bs
           421: argument: 
            422: expr: 
             423: literal: 1
           424: argument: 
            425: expr: 
             426: literal: "update_rep_format_flag"
       427: if_stmt: 
        428: if: 
         429: condition: 
          430: expr: 
           431: name: 
            432: name: sps
            433: operator: ->
            434: name: update_rep_format_flag
         435: block: 
          436: block_content: 
           437: expr_stmt: 
            438: expr: 
             439: name: 
              440: name: sps
              441: operator: ->
              442: name: rep_format_idx
             443: operator: =
             444: call: 
              445: name: gf_bs_read_int_log
              446: argument_list: 
               447: argument: 
                448: expr: 
                 449: name: bs
               450: argument: 
                451: expr: 
                 452: literal: 8
               453: argument: 
                454: expr: 
                 455: literal: "rep_format_idx"
        456: else: 
         457: block: 
          458: block_content: 
           459: expr_stmt: 
            460: expr: 
             461: name: 
              462: name: sps
              463: operator: ->
              464: name: rep_format_idx
             465: operator: =
             466: name: 
              467: name: vps
              468: operator: ->
              469: name: rep_format_idx
              470: index: 
               471: expr: 
                472: name: layer_id
       473: expr_stmt: 
        474: expr: 
         475: name: 
          476: name: sps
          477: operator: ->
          478: name: width
         479: operator: =
         480: name: 
          481: name: vps
          482: operator: ->
          483: name: rep_formats
          484: index: 
           485: expr: 
            486: name: 
             487: name: sps
             488: operator: ->
             489: name: rep_format_idx
         490: operator: .
         491: name: pic_width_luma_samples
       492: expr_stmt: 
        493: expr: 
         494: name: 
          495: name: sps
          496: operator: ->
          497: name: height
         498: operator: =
         499: name: 
          500: name: vps
          501: operator: ->
          502: name: rep_formats
          503: index: 
           504: expr: 
            505: name: 
             506: name: sps
             507: operator: ->
             508: name: rep_format_idx
         509: operator: .
         510: name: pic_height_luma_samples
       511: expr_stmt: 
        512: expr: 
         513: name: 
          514: name: sps
          515: operator: ->
          516: name: chroma_format_idc
         517: operator: =
         518: name: 
          519: name: vps
          520: operator: ->
          521: name: rep_formats
          522: index: 
           523: expr: 
            524: name: 
             525: name: sps
             526: operator: ->
             527: name: rep_format_idx
         528: operator: .
         529: name: chroma_format_idc
       530: expr_stmt: 
        531: expr: 
         532: name: 
          533: name: sps
          534: operator: ->
          535: name: bit_depth_luma
         536: operator: =
         537: name: 
          538: name: vps
          539: operator: ->
          540: name: rep_formats
          541: index: 
           542: expr: 
            543: name: 
             544: name: sps
             545: operator: ->
             546: name: rep_format_idx
         547: operator: .
         548: name: bit_depth_luma
       549: expr_stmt: 
        550: expr: 
         551: name: 
          552: name: sps
          553: operator: ->
          554: name: bit_depth_chroma
         555: operator: =
         556: name: 
          557: name: vps
          558: operator: ->
          559: name: rep_formats
          560: index: 
           561: expr: 
            562: name: 
             563: name: sps
             564: operator: ->
             565: name: rep_format_idx
         566: operator: .
         567: name: bit_depth_chroma
       568: expr_stmt: 
        569: expr: 
         570: name: 
          571: name: sps
          572: operator: ->
          573: name: separate_colour_plane_flag
         574: operator: =
         575: name: 
          576: name: vps
          577: operator: ->
          578: name: rep_formats
          579: index: 
           580: expr: 
            581: name: 
             582: name: sps
             583: operator: ->
             584: name: rep_format_idx
         585: operator: .
         586: name: separate_colour_plane_flag
       587: comment: //TODO this is crude ...
       588: expr_stmt: 
        589: expr: 
         590: name: 
          591: name: sps
          592: operator: ->
          593: name: ptl
         594: operator: =
         595: name: 
          596: name: vps
          597: operator: ->
          598: name: ext_ptl
          599: index: 
           600: expr: 
            601: literal: 0
    602: else: 
     603: block: 
      604: block_content: 
       605: expr_stmt: 
        606: expr: 
         607: name: 
          608: name: sps
          609: operator: ->
          610: name: chroma_format_idc
         611: operator: =
         612: call: 
          613: name: gf_bs_read_ue_log
          614: argument_list: 
           615: argument: 
            616: expr: 
             617: name: bs
           618: argument: 
            619: expr: 
             620: literal: "chroma_format_idc"
       621: if_stmt: 
        622: if: 
         623: condition: 
          624: expr: 
           625: name: 
            626: name: sps
            627: operator: ->
            628: name: chroma_format_idc
           629: operator: ==
           630: literal: 3
         631: block: 
          632: block_content: 
           633: expr_stmt: 
            634: expr: 
             635: name: 
              636: name: sps
              637: operator: ->
              638: name: separate_colour_plane_flag
             639: operator: =
             640: call: 
              641: name: gf_bs_read_int_log
              642: argument_list: 
               643: argument: 
                644: expr: 
                 645: name: bs
               646: argument: 
                647: expr: 
                 648: literal: 1
               649: argument: 
                650: expr: 
                 651: literal: "separate_colour_plane_flag"
       652: expr_stmt: 
        653: expr: 
         654: name: 
          655: name: sps
          656: operator: ->
          657: name: width
         658: operator: =
         659: call: 
          660: name: gf_bs_read_ue_log
          661: argument_list: 
           662: argument: 
            663: expr: 
             664: name: bs
           665: argument: 
            666: expr: 
             667: literal: "width"
       668: expr_stmt: 
        669: expr: 
         670: name: 
          671: name: sps
          672: operator: ->
          673: name: height
         674: operator: =
         675: call: 
          676: name: gf_bs_read_ue_log
          677: argument_list: 
           678: argument: 
            679: expr: 
             680: name: bs
           681: argument: 
            682: expr: 
             683: literal: "height"
       684: if_stmt: 
        685: if: 
         686: condition: 
          687: expr: 
           688: operator: (
           689: name: 
            690: name: sps
            691: operator: ->
            692: name: cw_flag
           693: operator: =
           694: call: 
            695: name: gf_bs_read_int_log
            696: argument_list: 
             697: argument: 
              698: expr: 
               699: name: bs
             700: argument: 
              701: expr: 
               702: literal: 1
             703: argument: 
              704: expr: 
               705: literal: "conformance_window_flag"
           706: operator: )
         707: block: 
          708: block_content: 
           709: decl_stmt: 
            710: decl: 
             711: type: 
              712: name: u32
             713: name: SubWidthC
            714: decl: 
             715: type: 
             716: name: SubHeightC
           717: if_stmt: 
            718: if: 
             719: condition: 
              720: expr: 
               721: name: 
                722: name: sps
                723: operator: ->
                724: name: chroma_format_idc
               725: operator: ==
               726: literal: 1
             727: block: 
              728: block_content: 
               729: expr_stmt: 
                730: expr: 
                 731: name: SubWidthC
                 732: operator: =
                 733: name: SubHeightC
                 734: operator: =
                 735: literal: 2
            736: if: 
             737: condition: 
              738: expr: 
               739: name: 
                740: name: sps
                741: operator: ->
                742: name: chroma_format_idc
               743: operator: ==
               744: literal: 2
             745: block: 
              746: block_content: 
               747: expr_stmt: 
                748: expr: 
                 749: name: SubWidthC
                 750: operator: =
                 751: literal: 2
               752: expr_stmt: 
                753: expr: 
                 754: name: SubHeightC
                 755: operator: =
                 756: literal: 1
            757: else: 
             758: block: 
              759: block_content: 
               760: expr_stmt: 
                761: expr: 
                 762: name: SubWidthC
                 763: operator: =
                 764: name: SubHeightC
                 765: operator: =
                 766: literal: 1
           767: expr_stmt: 
            768: expr: 
             769: name: 
              770: name: sps
              771: operator: ->
              772: name: cw_left
             773: operator: =
             774: call: 
              775: name: gf_bs_read_ue_log
              776: argument_list: 
               777: argument: 
                778: expr: 
                 779: name: bs
               780: argument: 
                781: expr: 
                 782: literal: "conformance_window_left"
           783: expr_stmt: 
            784: expr: 
             785: name: 
              786: name: sps
              787: operator: ->
              788: name: cw_right
             789: operator: =
             790: call: 
              791: name: gf_bs_read_ue_log
              792: argument_list: 
               793: argument: 
                794: expr: 
                 795: name: bs
               796: argument: 
                797: expr: 
                 798: literal: "conformance_window_right"
           799: expr_stmt: 
            800: expr: 
             801: name: 
              802: name: sps
              803: operator: ->
              804: name: cw_top
             805: operator: =
             806: call: 
              807: name: gf_bs_read_ue_log
              808: argument_list: 
               809: argument: 
                810: expr: 
                 811: name: bs
               812: argument: 
                813: expr: 
                 814: literal: "conformance_window_top"
           815: expr_stmt: 
            816: expr: 
             817: name: 
              818: name: sps
              819: operator: ->
              820: name: cw_bottom
             821: operator: =
             822: call: 
              823: name: gf_bs_read_ue_log
              824: argument_list: 
               825: argument: 
                826: expr: 
                 827: name: bs
               828: argument: 
                829: expr: 
                 830: literal: "conformance_window_bottom"
           831: expr_stmt: 
            832: expr: 
             833: name: 
              834: name: sps
              835: operator: ->
              836: name: width
             837: operator: -=
             838: name: SubWidthC
             839: operator: *
             840: operator: (
             841: name: 
              842: name: sps
              843: operator: ->
              844: name: cw_left
             845: operator: +
             846: name: 
              847: name: sps
              848: operator: ->
              849: name: cw_right
             850: operator: )
           851: expr_stmt: 
            852: expr: 
             853: name: 
              854: name: sps
              855: operator: ->
              856: name: height
             857: operator: -=
             858: name: SubHeightC
             859: operator: *
             860: operator: (
             861: name: 
              862: name: sps
              863: operator: ->
              864: name: cw_top
             865: operator: +
             866: name: 
              867: name: sps
              868: operator: ->
              869: name: cw_bottom
             870: operator: )
       871: expr_stmt: 
        872: expr: 
         873: name: 
          874: name: sps
          875: operator: ->
          876: name: bit_depth_luma
         877: operator: =
         878: literal: 8
         879: operator: +
         880: call: 
          881: name: gf_bs_read_ue_log
          882: argument_list: 
           883: argument: 
            884: expr: 
             885: name: bs
           886: argument: 
            887: expr: 
             888: literal: "bit_depth_luma_minus8"
       889: expr_stmt: 
        890: expr: 
         891: name: 
          892: name: sps
          893: operator: ->
          894: name: bit_depth_chroma
         895: operator: =
         896: literal: 8
         897: operator: +
         898: call: 
          899: name: gf_bs_read_ue_log
          900: argument_list: 
           901: argument: 
            902: expr: 
             903: name: bs
           904: argument: 
            905: expr: 
             906: literal: "bit_depth_chroma_minus8"
   907: expr_stmt: 
    908: expr: 
     909: name: 
      910: name: sps
      911: operator: ->
      912: name: log2_max_pic_order_cnt_lsb
     913: operator: =
     914: literal: 4
     915: operator: +
     916: call: 
      917: name: gf_bs_read_ue_log
      918: argument_list: 
       919: argument: 
        920: expr: 
         921: name: bs
       922: argument: 
        923: expr: 
         924: literal: "log2_max_pic_order_cnt_lsb_minus4"
   925: if_stmt: 
    926: if: 
     927: condition: 
      928: expr: 
       929: operator: !
       930: name: multiLayerExtSpsFlag
     931: block: 
      932: block_content: 
       933: expr_stmt: 
        934: expr: 
         935: name: 
          936: name: sps
          937: operator: ->
          938: name: sub_layer_ordering_info_present_flag
         939: operator: =
         940: call: 
          941: name: gf_bs_read_int_log
          942: argument_list: 
           943: argument: 
            944: expr: 
             945: name: bs
           946: argument: 
            947: expr: 
             948: literal: 1
           949: argument: 
            950: expr: 
             951: literal: "sub_layer_ordering_info_present_flag"
       952: for: 
        953: control: 
         954: init: 
          955: expr: 
           956: name: i
           957: operator: =
           958: ternary: 
            959: condition: 
             960: expr: 
              961: name: 
               962: name: sps
               963: operator: ->
               964: name: sub_layer_ordering_info_present_flag
            965: then: 
             966: expr: 
              967: literal: 0
            968: else: 
             969: expr: 
              970: name: 
               971: name: sps
               972: operator: ->
               973: name: max_sub_layers_minus1
         974: condition: 
          975: expr: 
           976: name: i
           977: operator: <=
           978: name: 
            979: name: sps
            980: operator: ->
            981: name: max_sub_layers_minus1
         982: incr: 
          983: expr: 
           984: name: i
           985: operator: ++
        986: block: 
         987: block_content: 
          988: expr_stmt: 
           989: expr: 
            990: call: 
             991: name: gf_bs_read_ue_log_idx
             992: argument_list: 
              993: argument: 
               994: expr: 
                995: name: bs
              996: argument: 
               997: expr: 
                998: literal: "max_dec_pic_buffering"
              999: argument: 
               1000: expr: 
                1001: name: i
          1002: expr_stmt: 
           1003: expr: 
            1004: call: 
             1005: name: gf_bs_read_ue_log_idx
             1006: argument_list: 
              1007: argument: 
               1008: expr: 
                1009: name: bs
              1010: argument: 
               1011: expr: 
                1012: literal: "num_reorder_pics"
              1013: argument: 
               1014: expr: 
                1015: name: i
          1016: expr_stmt: 
           1017: expr: 
            1018: call: 
             1019: name: gf_bs_read_ue_log_idx
             1020: argument_list: 
              1021: argument: 
               1022: expr: 
                1023: name: bs
              1024: argument: 
               1025: expr: 
                1026: literal: "max_latency_increase"
              1027: argument: 
               1028: expr: 
                1029: name: i
   1030: expr_stmt: 
    1031: expr: 
     1032: name: 
      1033: name: sps
      1034: operator: ->
      1035: name: log2_min_luma_coding_block_size
     1036: operator: =
     1037: literal: 3
     1038: operator: +
     1039: call: 
      1040: name: gf_bs_read_ue_log
      1041: argument_list: 
       1042: argument: 
        1043: expr: 
         1044: name: bs
       1045: argument: 
        1046: expr: 
         1047: literal: "log2_min_luma_coding_block_size_minus3"
   1048: expr_stmt: 
    1049: expr: 
     1050: name: 
      1051: name: sps
      1052: operator: ->
      1053: name: log2_diff_max_min_luma_coding_block_size
     1054: operator: =
     1055: call: 
      1056: name: gf_bs_read_ue_log
      1057: argument_list: 
       1058: argument: 
        1059: expr: 
         1060: name: bs
       1061: argument: 
        1062: expr: 
         1063: literal: "log2_diff_max_min_luma_coding_block_size"
   1064: expr_stmt: 
    1065: expr: 
     1066: name: 
      1067: name: sps
      1068: operator: ->
      1069: name: max_CU_width
     1070: operator: =
     1071: operator: (
     1072: literal: 1
     1073: operator: <<
     1074: operator: (
     1075: name: 
      1076: name: sps
      1077: operator: ->
      1078: name: log2_min_luma_coding_block_size
     1079: operator: +
     1080: name: 
      1081: name: sps
      1082: operator: ->
      1083: name: log2_diff_max_min_luma_coding_block_size
     1084: operator: )
     1085: operator: )
   1086: expr_stmt: 
    1087: expr: 
     1088: name: 
      1089: name: sps
      1090: operator: ->
      1091: name: max_CU_height
     1092: operator: =
     1093: operator: (
     1094: literal: 1
     1095: operator: <<
     1096: operator: (
     1097: name: 
      1098: name: sps
      1099: operator: ->
      1100: name: log2_min_luma_coding_block_size
     1101: operator: +
     1102: name: 
      1103: name: sps
      1104: operator: ->
      1105: name: log2_diff_max_min_luma_coding_block_size
     1106: operator: )
     1107: operator: )
   1108: expr_stmt: 
    1109: expr: 
     1110: name: 
      1111: name: sps
      1112: operator: ->
      1113: name: log2_min_transform_block_size
     1114: operator: =
     1115: literal: 2
     1116: operator: +
     1117: call: 
      1118: name: gf_bs_read_ue_log
      1119: argument_list: 
       1120: argument: 
        1121: expr: 
         1122: name: bs
       1123: argument: 
        1124: expr: 
         1125: literal: "log2_min_transform_block_size_minus2"
   1126: expr_stmt: 
    1127: expr: 
     1128: name: 
      1129: name: sps
      1130: operator: ->
      1131: name: log2_max_transform_block_size
     1132: operator: =
     1133: name: 
      1134: name: sps
      1135: operator: ->
      1136: name: log2_min_transform_block_size
     1137: operator: +
     1138: call: 
      1139: name: gf_bs_read_ue_log
      1140: argument_list: 
       1141: argument: 
        1142: expr: 
         1143: name: bs
       1144: argument: 
        1145: expr: 
         1146: literal: "log2_max_transform_block_size"
   1147: expr_stmt: 
    1148: expr: 
     1149: name: depth
     1150: operator: =
     1151: literal: 0
   1152: expr_stmt: 
    1153: expr: 
     1154: name: 
      1155: name: sps
      1156: operator: ->
      1157: name: max_transform_hierarchy_depth_inter
     1158: operator: =
     1159: call: 
      1160: name: gf_bs_read_ue_log
      1161: argument_list: 
       1162: argument: 
        1163: expr: 
         1164: name: bs
       1165: argument: 
        1166: expr: 
         1167: literal: "max_transform_hierarchy_depth_inter"
   1168: expr_stmt: 
    1169: expr: 
     1170: name: 
      1171: name: sps
      1172: operator: ->
      1173: name: max_transform_hierarchy_depth_intra
     1174: operator: =
     1175: call: 
      1176: name: gf_bs_read_ue_log
      1177: argument_list: 
       1178: argument: 
        1179: expr: 
         1180: name: bs
       1181: argument: 
        1182: expr: 
         1183: literal: "max_transform_hierarchy_depth_intra"
   1184: while: 
    1185: condition: 
     1186: expr: 
      1187: operator: (
      1188: name: u32
      1189: operator: )
      1190: operator: (
      1191: name: 
       1192: name: sps
       1193: operator: ->
       1194: name: max_CU_width
      1195: operator: >>
      1196: name: 
       1197: name: sps
       1198: operator: ->
       1199: name: log2_diff_max_min_luma_coding_block_size
      1200: operator: )
      1201: operator: >
      1202: operator: (
      1203: name: u32
      1204: operator: )
      1205: operator: (
      1206: literal: 1
      1207: operator: <<
      1208: operator: (
      1209: name: 
       1210: name: sps
       1211: operator: ->
       1212: name: log2_min_transform_block_size
      1213: operator: +
      1214: name: depth
      1215: operator: )
      1216: operator: )
    1217: block: 
     1218: block_content: 
      1219: expr_stmt: 
       1220: expr: 
        1221: name: depth
        1222: operator: ++
   1223: expr_stmt: 
    1224: expr: 
     1225: name: 
      1226: name: sps
      1227: operator: ->
      1228: name: max_CU_depth
     1229: operator: =
     1230: name: 
      1231: name: sps
      1232: operator: ->
      1233: name: log2_diff_max_min_luma_coding_block_size
     1234: operator: +
     1235: name: depth
   1236: expr_stmt: 
    1237: expr: 
     1238: name: nb_CTUs
     1239: operator: =
     1240: operator: (
     1241: operator: (
     1242: name: 
      1243: name: sps
      1244: operator: ->
      1245: name: width
     1246: operator: +
     1247: name: 
      1248: name: sps
      1249: operator: ->
      1250: name: max_CU_width
     1251: operator: -
     1252: literal: 1
     1253: operator: )
     1254: operator: /
     1255: name: 
      1256: name: sps
      1257: operator: ->
      1258: name: max_CU_width
     1259: operator: )
     1260: operator: *
     1261: operator: (
     1262: operator: (
     1263: name: 
      1264: name: sps
      1265: operator: ->
      1266: name: height
     1267: operator: +
     1268: name: 
      1269: name: sps
      1270: operator: ->
      1271: name: max_CU_height
     1272: operator: -
     1273: literal: 1
     1274: operator: )
     1275: operator: /
     1276: name: 
      1277: name: sps
      1278: operator: ->
      1279: name: max_CU_height
     1280: operator: )
   1281: expr_stmt: 
    1282: expr: 
     1283: name: 
      1284: name: sps
      1285: operator: ->
      1286: name: bitsSliceSegmentAddress
     1287: operator: =
     1288: literal: 0
   1289: while: 
    1290: condition: 
     1291: expr: 
      1292: name: nb_CTUs
      1293: operator: >
      1294: operator: (
      1295: name: u32
      1296: operator: )
      1297: operator: (
      1298: literal: 1
      1299: operator: <<
      1300: name: 
       1301: name: sps
       1302: operator: ->
       1303: name: bitsSliceSegmentAddress
      1304: operator: )
    1305: block: 
     1306: block_content: 
      1307: expr_stmt: 
       1308: expr: 
        1309: name: 
         1310: name: sps
         1311: operator: ->
         1312: name: bitsSliceSegmentAddress
        1313: operator: ++
   1314: expr_stmt: 
    1315: expr: 
     1316: name: 
      1317: name: sps
      1318: operator: ->
      1319: name: scaling_list_enable_flag
     1320: operator: =
     1321: call: 
      1322: name: gf_bs_read_int_log
      1323: argument_list: 
       1324: argument: 
        1325: expr: 
         1326: name: bs
       1327: argument: 
        1328: expr: 
         1329: literal: 1
       1330: argument: 
        1331: expr: 
         1332: literal: "scaling_list_enable_flag"
   1333: if_stmt: 
    1334: if: 
     1335: condition: 
      1336: expr: 
       1337: name: 
        1338: name: sps
        1339: operator: ->
        1340: name: scaling_list_enable_flag
     1341: block: 
      1342: block_content: 
       1343: expr_stmt: 
        1344: expr: 
         1345: name: 
          1346: name: sps
          1347: operator: ->
          1348: name: infer_scaling_list_flag
         1349: operator: =
         1350: literal: 0
       1351: expr_stmt: 
        1352: expr: 
         1353: name: 
          1354: name: sps
          1355: operator: ->
          1356: name: scaling_list_ref_layer_id
         1357: operator: =
         1358: literal: 0
       1359: if_stmt: 
        1360: if: 
         1361: condition: 
          1362: expr: 
           1363: name: multiLayerExtSpsFlag
         1364: block: 
          1365: block_content: 
           1366: expr_stmt: 
            1367: expr: 
             1368: name: 
              1369: name: sps
              1370: operator: ->
              1371: name: infer_scaling_list_flag
             1372: operator: =
             1373: call: 
              1374: name: gf_bs_read_int_log
              1375: argument_list: 
               1376: argument: 
                1377: expr: 
                 1378: name: bs
               1379: argument: 
                1380: expr: 
                 1381: literal: 1
               1382: argument: 
                1383: expr: 
                 1384: literal: "infer_scaling_list_flag"
       1385: if_stmt: 
        1386: if: 
         1387: condition: 
          1388: expr: 
           1389: name: 
            1390: name: sps
            1391: operator: ->
            1392: name: infer_scaling_list_flag
         1393: block: 
          1394: block_content: 
           1395: expr_stmt: 
            1396: expr: 
             1397: name: 
              1398: name: sps
              1399: operator: ->
              1400: name: scaling_list_ref_layer_id
             1401: operator: =
             1402: call: 
              1403: name: gf_bs_read_int_log
              1404: argument_list: 
               1405: argument: 
                1406: expr: 
                 1407: name: bs
               1408: argument: 
                1409: expr: 
                 1410: literal: 6
               1411: argument: 
                1412: expr: 
                 1413: literal: "scaling_list_ref_layer_id"
        1414: else: 
         1415: block: 
          1416: block_content: 
           1417: expr_stmt: 
            1418: expr: 
             1419: name: 
              1420: name: sps
              1421: operator: ->
              1422: name: scaling_list_data_present_flag
             1423: operator: =
             1424: call: 
              1425: name: gf_bs_read_int_log
              1426: argument_list: 
               1427: argument: 
                1428: expr: 
                 1429: name: bs
               1430: argument: 
                1431: expr: 
                 1432: literal: 1
               1433: argument: 
                1434: expr: 
                 1435: literal: "scaling_list_data_present_flag"
           1436: if_stmt: 
            1437: if: 
             1438: condition: 
              1439: expr: 
               1440: name: 
                1441: name: sps
                1442: operator: ->
                1443: name: scaling_list_data_present_flag
             1444: block: 
              1445: block_content: 
               1446: expr_stmt: 
                1447: expr: 
                 1448: call: 
                  1449: name: hevc_scaling_list_data
                  1450: argument_list: 
                   1451: argument: 
                    1452: expr: 
                     1453: name: bs
   1454: expr_stmt: 
    1455: expr: 
     1456: name: 
      1457: name: sps
      1458: operator: ->
      1459: name: asymmetric_motion_partitions_enabled_flag
     1460: operator: =
     1461: call: 
      1462: name: gf_bs_read_int_log
      1463: argument_list: 
       1464: argument: 
        1465: expr: 
         1466: name: bs
       1467: argument: 
        1468: expr: 
         1469: literal: 1
       1470: argument: 
        1471: expr: 
         1472: literal: "asymmetric_motion_partitions_enabled_flag"
   1473: expr_stmt: 
    1474: expr: 
     1475: name: 
      1476: name: sps
      1477: operator: ->
      1478: name: sample_adaptive_offset_enabled_flag
     1479: operator: =
     1480: call: 
      1481: name: gf_bs_read_int_log
      1482: argument_list: 
       1483: argument: 
        1484: expr: 
         1485: name: bs
       1486: argument: 
        1487: expr: 
         1488: literal: 1
       1489: argument: 
        1490: expr: 
         1491: literal: "sample_adaptive_offset_enabled_flag"
   1492: if_stmt: 
    1493: if: 
     1494: condition: 
      1495: expr: 
       1496: operator: (
       1497: name: 
        1498: name: sps
        1499: operator: ->
        1500: name: pcm_enabled_flag
       1501: operator: =
       1502: call: 
        1503: name: gf_bs_read_int_log
        1504: argument_list: 
         1505: argument: 
          1506: expr: 
           1507: name: bs
         1508: argument: 
          1509: expr: 
           1510: literal: 1
         1511: argument: 
          1512: expr: 
           1513: literal: "pcm_enabled_flag"
       1514: operator: )
     1515: block: 
      1516: block_content: 
       1517: expr_stmt: 
        1518: expr: 
         1519: name: 
          1520: name: sps
          1521: operator: ->
          1522: name: pcm_sample_bit_depth_luma_minus1
         1523: operator: =
         1524: call: 
          1525: name: gf_bs_read_int_log
          1526: argument_list: 
           1527: argument: 
            1528: expr: 
             1529: name: bs
           1530: argument: 
            1531: expr: 
             1532: literal: 4
           1533: argument: 
            1534: expr: 
             1535: literal: "pcm_sample_bit_depth_luma_minus1"
       1536: expr_stmt: 
        1537: expr: 
         1538: name: 
          1539: name: sps
          1540: operator: ->
          1541: name: pcm_sample_bit_depth_chroma_minus1
         1542: operator: =
         1543: call: 
          1544: name: gf_bs_read_int_log
          1545: argument_list: 
           1546: argument: 
            1547: expr: 
             1548: name: bs
           1549: argument: 
            1550: expr: 
             1551: literal: 4
           1552: argument: 
            1553: expr: 
             1554: literal: "pcm_sample_bit_depth_chroma_minus1"
       1555: expr_stmt: 
        1556: expr: 
         1557: name: 
          1558: name: sps
          1559: operator: ->
          1560: name: log2_min_pcm_luma_coding_block_size_minus3
         1561: operator: =
         1562: call: 
          1563: name: gf_bs_read_ue_log
          1564: argument_list: 
           1565: argument: 
            1566: expr: 
             1567: name: bs
           1568: argument: 
            1569: expr: 
             1570: literal: "log2_min_pcm_luma_coding_block_size_minus3"
       1571: expr_stmt: 
        1572: expr: 
         1573: name: 
          1574: name: sps
          1575: operator: ->
          1576: name: log2_diff_max_min_pcm_luma_coding_block_size
         1577: operator: =
         1578: call: 
          1579: name: gf_bs_read_ue_log
          1580: argument_list: 
           1581: argument: 
            1582: expr: 
             1583: name: bs
           1584: argument: 
            1585: expr: 
             1586: literal: "log2_diff_max_min_pcm_luma_coding_block_size"
       1587: expr_stmt: 
        1588: expr: 
         1589: name: 
          1590: name: sps
          1591: operator: ->
          1592: name: pcm_loop_filter_disable_flag
         1593: operator: =
         1594: call: 
          1595: name: gf_bs_read_int_log
          1596: argument_list: 
           1597: argument: 
            1598: expr: 
             1599: name: bs
           1600: argument: 
            1601: expr: 
             1602: literal: 1
           1603: argument: 
            1604: expr: 
             1605: literal: "pcm_loop_filter_disable_flag"
   1606: expr_stmt: 
    1607: expr: 
     1608: name: 
      1609: name: sps
      1610: operator: ->
      1611: name: num_short_term_ref_pic_sets
     1612: operator: =
     1613: call: 
      1614: name: gf_bs_read_ue_log
      1615: argument_list: 
       1616: argument: 
        1617: expr: 
         1618: name: bs
       1619: argument: 
        1620: expr: 
         1621: literal: "num_short_term_ref_pic_sets"
   1622: if_stmt: 
    1623: if: 
     1624: condition: 
      1625: expr: 
       1626: name: 
        1627: name: sps
        1628: operator: ->
        1629: name: num_short_term_ref_pic_sets
       1630: operator: >
       1631: literal: 64
     1632: block: 
      1633: block_content: 
       1634: expr_stmt: 
        1635: expr: 
         1636: call: 
          1637: name: GF_LOG
          1638: argument_list: 
           1639: argument: 
            1640: expr: 
             1641: name: GF_LOG_ERROR
           1642: argument: 
            1643: expr: 
             1644: name: GF_LOG_CODING
           1645: argument: 
            1646: expr: 
             1647: operator: (
             1648: literal: "[HEVC] Invalid number of short term reference picture sets %d\n"
             1649: operator: ,
             1650: name: 
              1651: name: sps
              1652: operator: ->
              1653: name: num_short_term_ref_pic_sets
             1654: operator: )
       1655: return: 
        1656: expr: 
         1657: operator: -
         1658: literal: 1
   1659: for: 
    1660: control: 
     1661: init: 
      1662: expr: 
       1663: name: i
       1664: operator: =
       1665: literal: 0
     1666: condition: 
      1667: expr: 
       1668: name: i
       1669: operator: <
       1670: name: 
        1671: name: sps
        1672: operator: ->
        1673: name: num_short_term_ref_pic_sets
     1674: incr: 
      1675: expr: 
       1676: name: i
       1677: operator: ++
    1678: block: 
     1679: block_content: 
      1680: decl_stmt: 
       1681: decl: 
        1682: type: 
         1683: name: Bool
        1684: name: ret
        1685: init: 
         1686: expr: 
          1687: call: 
           1688: name: hevc_parse_short_term_ref_pic_set
           1689: argument_list: 
            1690: argument: 
             1691: expr: 
              1692: name: bs
            1693: argument: 
             1694: expr: 
              1695: name: sps
            1696: argument: 
             1697: expr: 
              1698: name: i
      1699: comment: /*cannot parse short_term_ref_pic_set, skip VUI parsing*/
      1700: if_stmt: 
       1701: if: 
        1702: condition: 
         1703: expr: 
          1704: operator: !
          1705: name: ret
        1706: block: 
         1707: block_content: 
          1708: expr_stmt: 
           1709: expr: 
            1710: call: 
             1711: name: GF_LOG
             1712: argument_list: 
              1713: argument: 
               1714: expr: 
                1715: name: GF_LOG_ERROR
              1716: argument: 
               1717: expr: 
                1718: name: GF_LOG_CODING
              1719: argument: 
               1720: expr: 
                1721: operator: (
                1722: literal: "[HEVC] Invalid short_term_ref_pic_set\n"
                1723: operator: )
          1724: return: 
           1725: expr: 
            1726: operator: -
            1727: literal: 1
   1728: expr_stmt: 
    1729: expr: 
     1730: name: 
      1731: name: sps
      1732: operator: ->
      1733: name: long_term_ref_pics_present_flag
     1734: operator: =
     1735: call: 
      1736: name: gf_bs_read_int_log
      1737: argument_list: 
       1738: argument: 
        1739: expr: 
         1740: name: bs
       1741: argument: 
        1742: expr: 
         1743: literal: 1
       1744: argument: 
        1745: expr: 
         1746: literal: "long_term_ref_pics_present_flag"
   1747: if_stmt: 
    1748: if: 
     1749: condition: 
      1750: expr: 
       1751: name: 
        1752: name: sps
        1753: operator: ->
        1754: name: long_term_ref_pics_present_flag
     1755: block: 
      1756: block_content: 
       1757: expr_stmt: 
        1758: expr: 
         1759: name: 
          1760: name: sps
          1761: operator: ->
          1762: name: num_long_term_ref_pic_sps
         1763: operator: =
         1764: call: 
          1765: name: gf_bs_read_ue_log
          1766: argument_list: 
           1767: argument: 
            1768: expr: 
             1769: name: bs
           1770: argument: 
            1771: expr: 
             1772: literal: "num_long_term_ref_pic_sps"
       1773: for: 
        1774: control: 
         1775: init: 
          1776: expr: 
           1777: name: i
           1778: operator: =
           1779: literal: 0
         1780: condition: 
          1781: expr: 
           1782: name: i
           1783: operator: <
           1784: name: 
            1785: name: sps
            1786: operator: ->
            1787: name: num_long_term_ref_pic_sps
         1788: incr: 
          1789: expr: 
           1790: name: i
           1791: operator: ++
        1792: block: 
         1793: block_content: 
          1794: expr_stmt: 
           1795: expr: 
            1796: call: 
             1797: name: gf_bs_read_int_log_idx
             1798: argument_list: 
              1799: argument: 
               1800: expr: 
                1801: name: bs
              1802: argument: 
               1803: expr: 
                1804: name: 
                 1805: name: sps
                 1806: operator: ->
                 1807: name: log2_max_pic_order_cnt_lsb
              1808: argument: 
               1809: expr: 
                1810: literal: "lt_ref_pic_poc_lsb_sps"
              1811: argument: 
               1812: expr: 
                1813: name: i
          1814: expr_stmt: 
           1815: expr: 
            1816: call: 
             1817: name: gf_bs_read_int_log_idx
             1818: argument_list: 
              1819: argument: 
               1820: expr: 
                1821: name: bs
              1822: argument: 
               1823: expr: 
                1824: literal: 1
              1825: argument: 
               1826: expr: 
                1827: literal: "used_by_curr_pic_lt_sps_flag"
              1828: argument: 
               1829: expr: 
                1830: name: i
   1831: expr_stmt: 
    1832: expr: 
     1833: name: 
      1834: name: sps
      1835: operator: ->
      1836: name: temporal_mvp_enable_flag
     1837: operator: =
     1838: call: 
      1839: name: gf_bs_read_int_log
      1840: argument_list: 
       1841: argument: 
        1842: expr: 
         1843: name: bs
       1844: argument: 
        1845: expr: 
         1846: literal: 1
       1847: argument: 
        1848: expr: 
         1849: literal: "temporal_mvp_enable_flag"
   1850: expr_stmt: 
    1851: expr: 
     1852: name: 
      1853: name: sps
      1854: operator: ->
      1855: name: strong_intra_smoothing_enable_flag
     1856: operator: =
     1857: call: 
      1858: name: gf_bs_read_int_log
      1859: argument_list: 
       1860: argument: 
        1861: expr: 
         1862: name: bs
       1863: argument: 
        1864: expr: 
         1865: literal: 1
       1866: argument: 
        1867: expr: 
         1868: literal: "strong_intra_smoothing_enable_flag"
   1869: if_stmt: 
    1870: if: 
     1871: condition: 
      1872: expr: 
       1873: name: vui_flag_pos
     1874: block: 
      1875: block_content: 
       1876: expr_stmt: 
        1877: expr: 
         1878: operator: *
         1879: name: vui_flag_pos
         1880: operator: =
         1881: operator: (
         1882: name: u32
         1883: operator: )
         1884: call: 
          1885: name: gf_bs_get_bit_offset
          1886: argument_list: 
           1887: argument: 
            1888: expr: 
             1889: name: bs
   1890: if_stmt: 
    1891: if: 
     1892: condition: 
      1893: expr: 
       1894: operator: (
       1895: name: 
        1896: name: sps
        1897: operator: ->
        1898: name: vui_parameters_present_flag
       1899: operator: =
       1900: call: 
        1901: name: gf_bs_read_int_log
        1902: argument_list: 
         1903: argument: 
          1904: expr: 
           1905: name: bs
         1906: argument: 
          1907: expr: 
           1908: literal: 1
         1909: argument: 
          1910: expr: 
           1911: literal: "vui_parameters_present_flag"
       1912: operator: )
     1913: block: 
      1914: block_content: 
       1915: expr_stmt: 
        1916: expr: 
         1917: name: 
          1918: name: sps
          1919: operator: ->
          1920: name: aspect_ratio_info_present_flag
         1921: operator: =
         1922: call: 
          1923: name: gf_bs_read_int_log
          1924: argument_list: 
           1925: argument: 
            1926: expr: 
             1927: name: bs
           1928: argument: 
            1929: expr: 
             1930: literal: 1
           1931: argument: 
            1932: expr: 
             1933: literal: "aspect_ratio_info_present_flag"
       1934: if_stmt: 
        1935: if: 
         1936: condition: 
          1937: expr: 
           1938: name: 
            1939: name: sps
            1940: operator: ->
            1941: name: aspect_ratio_info_present_flag
         1942: block: 
          1943: block_content: 
           1944: expr_stmt: 
            1945: expr: 
             1946: name: 
              1947: name: sps
              1948: operator: ->
              1949: name: sar_idc
             1950: operator: =
             1951: call: 
              1952: name: gf_bs_read_int_log
              1953: argument_list: 
               1954: argument: 
                1955: expr: 
                 1956: name: bs
               1957: argument: 
                1958: expr: 
                 1959: literal: 8
               1960: argument: 
                1961: expr: 
                 1962: literal: "aspect_ratio_idc"
           1963: if_stmt: 
            1964: if: 
             1965: condition: 
              1966: expr: 
               1967: name: 
                1968: name: sps
                1969: operator: ->
                1970: name: sar_idc
               1971: operator: ==
               1972: literal: 255
             1973: block: 
              1974: block_content: 
               1975: expr_stmt: 
                1976: expr: 
                 1977: name: 
                  1978: name: sps
                  1979: operator: ->
                  1980: name: sar_width
                 1981: operator: =
                 1982: call: 
                  1983: name: gf_bs_read_int_log
                  1984: argument_list: 
                   1985: argument: 
                    1986: expr: 
                     1987: name: bs
                   1988: argument: 
                    1989: expr: 
                     1990: literal: 16
                   1991: argument: 
                    1992: expr: 
                     1993: literal: "aspect_ratio_width"
               1994: expr_stmt: 
                1995: expr: 
                 1996: name: 
                  1997: name: sps
                  1998: operator: ->
                  1999: name: sar_height
                 2000: operator: =
                 2001: call: 
                  2002: name: gf_bs_read_int_log
                  2003: argument_list: 
                   2004: argument: 
                    2005: expr: 
                     2006: name: bs
                   2007: argument: 
                    2008: expr: 
                     2009: literal: 16
                   2010: argument: 
                    2011: expr: 
                     2012: literal: "aspect_ratio_height"
            2013: if: 
             2014: condition: 
              2015: expr: 
               2016: name: 
                2017: name: sps
                2018: operator: ->
                2019: name: sar_idc
               2020: operator: <
               2021: literal: 17
             2022: block: 
              2023: block_content: 
               2024: expr_stmt: 
                2025: expr: 
                 2026: name: 
                  2027: name: sps
                  2028: operator: ->
                  2029: name: sar_width
                 2030: operator: =
                 2031: name: 
                  2032: name: hevc_sar
                  2033: index: 
                   2034: expr: 
                    2035: name: 
                     2036: name: sps
                     2037: operator: ->
                     2038: name: sar_idc
                 2039: operator: .
                 2040: name: w
               2041: expr_stmt: 
                2042: expr: 
                 2043: name: 
                  2044: name: sps
                  2045: operator: ->
                  2046: name: sar_height
                 2047: operator: =
                 2048: name: 
                  2049: name: hevc_sar
                  2050: index: 
                   2051: expr: 
                    2052: name: 
                     2053: name: sps
                     2054: operator: ->
                     2055: name: sar_idc
                 2056: operator: .
                 2057: name: h
       2058: if_stmt: 
        2059: if: 
         2060: condition: 
          2061: expr: 
           2062: operator: (
           2063: name: 
            2064: name: sps
            2065: operator: ->
            2066: name: overscan_info_present
           2067: operator: =
           2068: call: 
            2069: name: gf_bs_read_int_log
            2070: argument_list: 
             2071: argument: 
              2072: expr: 
               2073: name: bs
             2074: argument: 
              2075: expr: 
               2076: literal: 1
             2077: argument: 
              2078: expr: 
               2079: literal: "overscan_info_present"
           2080: operator: )
         2081: block: 
          2082: block_content: 
           2083: expr_stmt: 
            2084: expr: 
             2085: name: 
              2086: name: sps
              2087: operator: ->
              2088: name: overscan_appropriate
             2089: operator: =
             2090: call: 
              2091: name: gf_bs_read_int_log
              2092: argument_list: 
               2093: argument: 
                2094: expr: 
                 2095: name: bs
               2096: argument: 
                2097: expr: 
                 2098: literal: 1
               2099: argument: 
                2100: expr: 
                 2101: literal: "overscan_appropriate"
       2102: expr_stmt: 
        2103: expr: 
         2104: name: 
          2105: name: sps
          2106: operator: ->
          2107: name: video_signal_type_present_flag
         2108: operator: =
         2109: call: 
          2110: name: gf_bs_read_int_log
          2111: argument_list: 
           2112: argument: 
            2113: expr: 
             2114: name: bs
           2115: argument: 
            2116: expr: 
             2117: literal: 1
           2118: argument: 
            2119: expr: 
             2120: literal: "video_signal_type_present_flag"
       2121: if_stmt: 
        2122: if: 
         2123: condition: 
          2124: expr: 
           2125: name: 
            2126: name: sps
            2127: operator: ->
            2128: name: video_signal_type_present_flag
         2129: block: 
          2130: block_content: 
           2131: expr_stmt: 
            2132: expr: 
             2133: name: 
              2134: name: sps
              2135: operator: ->
              2136: name: video_format
             2137: operator: =
             2138: call: 
              2139: name: gf_bs_read_int_log
              2140: argument_list: 
               2141: argument: 
                2142: expr: 
                 2143: name: bs
               2144: argument: 
                2145: expr: 
                 2146: literal: 3
               2147: argument: 
                2148: expr: 
                 2149: literal: "video_format"
           2150: expr_stmt: 
            2151: expr: 
             2152: name: 
              2153: name: sps
              2154: operator: ->
              2155: name: video_full_range_flag
             2156: operator: =
             2157: call: 
              2158: name: gf_bs_read_int_log
              2159: argument_list: 
               2160: argument: 
                2161: expr: 
                 2162: name: bs
               2163: argument: 
                2164: expr: 
                 2165: literal: 1
               2166: argument: 
                2167: expr: 
                 2168: literal: "video_full_range_flag"
           2169: if_stmt: 
            2170: if: 
             2171: condition: 
              2172: expr: 
               2173: operator: (
               2174: name: 
                2175: name: sps
                2176: operator: ->
                2177: name: colour_description_present_flag
               2178: operator: =
               2179: call: 
                2180: name: gf_bs_read_int_log
                2181: argument_list: 
                 2182: argument: 
                  2183: expr: 
                   2184: name: bs
                 2185: argument: 
                  2186: expr: 
                   2187: literal: 1
                 2188: argument: 
                  2189: expr: 
                   2190: literal: "colour_description_present_flag"
               2191: operator: )
             2192: block: 
              2193: block_content: 
               2194: expr_stmt: 
                2195: expr: 
                 2196: name: 
                  2197: name: sps
                  2198: operator: ->
                  2199: name: colour_primaries
                 2200: operator: =
                 2201: call: 
                  2202: name: gf_bs_read_int_log
                  2203: argument_list: 
                   2204: argument: 
                    2205: expr: 
                     2206: name: bs
                   2207: argument: 
                    2208: expr: 
                     2209: literal: 8
                   2210: argument: 
                    2211: expr: 
                     2212: literal: "colour_primaries"
               2213: expr_stmt: 
                2214: expr: 
                 2215: name: 
                  2216: name: sps
                  2217: operator: ->
                  2218: name: transfer_characteristic
                 2219: operator: =
                 2220: call: 
                  2221: name: gf_bs_read_int_log
                  2222: argument_list: 
                   2223: argument: 
                    2224: expr: 
                     2225: name: bs
                   2226: argument: 
                    2227: expr: 
                     2228: literal: 8
                   2229: argument: 
                    2230: expr: 
                     2231: literal: "transfer_characteristic"
               2232: expr_stmt: 
                2233: expr: 
                 2234: name: 
                  2235: name: sps
                  2236: operator: ->
                  2237: name: matrix_coeffs
                 2238: operator: =
                 2239: call: 
                  2240: name: gf_bs_read_int_log
                  2241: argument_list: 
                   2242: argument: 
                    2243: expr: 
                     2244: name: bs
                   2245: argument: 
                    2246: expr: 
                     2247: literal: 8
                   2248: argument: 
                    2249: expr: 
                     2250: literal: "matrix_coefficients"
       2251: if_stmt: 
        2252: if: 
         2253: condition: 
          2254: expr: 
           2255: operator: (
           2256: name: 
            2257: name: sps
            2258: operator: ->
            2259: name: chroma_loc_info_present_flag
           2260: operator: =
           2261: call: 
            2262: name: gf_bs_read_int_log
            2263: argument_list: 
             2264: argument: 
              2265: expr: 
               2266: name: bs
             2267: argument: 
              2268: expr: 
               2269: literal: 1
             2270: argument: 
              2271: expr: 
               2272: literal: "chroma_loc_info_present_flag"
           2273: operator: )
         2274: block: 
          2275: block_content: 
           2276: expr_stmt: 
            2277: expr: 
             2278: name: 
              2279: name: sps
              2280: operator: ->
              2281: name: chroma_sample_loc_type_top_field
             2282: operator: =
             2283: call: 
              2284: name: gf_bs_read_ue_log
              2285: argument_list: 
               2286: argument: 
                2287: expr: 
                 2288: name: bs
               2289: argument: 
                2290: expr: 
                 2291: literal: "chroma_sample_loc_type_top_field"
           2292: expr_stmt: 
            2293: expr: 
             2294: name: 
              2295: name: sps
              2296: operator: ->
              2297: name: chroma_sample_loc_type_bottom_field
             2298: operator: =
             2299: call: 
              2300: name: gf_bs_read_ue_log
              2301: argument_list: 
               2302: argument: 
                2303: expr: 
                 2304: name: bs
               2305: argument: 
                2306: expr: 
                 2307: literal: "chroma_sample_loc_type_bottom_field"
       2308: expr_stmt: 
        2309: expr: 
         2310: name: 
          2311: name: sps
          2312: operator: ->
          2313: name: neutra_chroma_indication_flag
         2314: operator: =
         2315: call: 
          2316: name: gf_bs_read_int_log
          2317: argument_list: 
           2318: argument: 
            2319: expr: 
             2320: name: bs
           2321: argument: 
            2322: expr: 
             2323: literal: 1
           2324: argument: 
            2325: expr: 
             2326: literal: "neutra_chroma_indication_flag"
       2327: expr_stmt: 
        2328: expr: 
         2329: name: 
          2330: name: sps
          2331: operator: ->
          2332: name: field_seq_flag
         2333: operator: =
         2334: call: 
          2335: name: gf_bs_read_int_log
          2336: argument_list: 
           2337: argument: 
            2338: expr: 
             2339: name: bs
           2340: argument: 
            2341: expr: 
             2342: literal: 1
           2343: argument: 
            2344: expr: 
             2345: literal: "field_seq_flag"
       2346: expr_stmt: 
        2347: expr: 
         2348: name: 
          2349: name: sps
          2350: operator: ->
          2351: name: frame_field_info_present_flag
         2352: operator: =
         2353: call: 
          2354: name: gf_bs_read_int_log
          2355: argument_list: 
           2356: argument: 
            2357: expr: 
             2358: name: bs
           2359: argument: 
            2360: expr: 
             2361: literal: 1
           2362: argument: 
            2363: expr: 
             2364: literal: "frame_field_info_present_flag"
       2365: if_stmt: 
        2366: if: 
         2367: condition: 
          2368: expr: 
           2369: operator: (
           2370: name: 
            2371: name: sps
            2372: operator: ->
            2373: name: default_display_window_flag
           2374: operator: =
           2375: call: 
            2376: name: gf_bs_read_int_log
            2377: argument_list: 
             2378: argument: 
              2379: expr: 
               2380: name: bs
             2381: argument: 
              2382: expr: 
               2383: literal: 1
             2384: argument: 
              2385: expr: 
               2386: literal: "default_display_window_flag"
           2387: operator: )
         2388: block: 
          2389: block_content: 
           2390: expr_stmt: 
            2391: expr: 
             2392: name: 
              2393: name: sps
              2394: operator: ->
              2395: name: left_offset
             2396: operator: =
             2397: call: 
              2398: name: gf_bs_read_ue_log
              2399: argument_list: 
               2400: argument: 
                2401: expr: 
                 2402: name: bs
               2403: argument: 
                2404: expr: 
                 2405: literal: "display_window_left_offset"
           2406: expr_stmt: 
            2407: expr: 
             2408: name: 
              2409: name: sps
              2410: operator: ->
              2411: name: right_offset
             2412: operator: =
             2413: call: 
              2414: name: gf_bs_read_ue_log
              2415: argument_list: 
               2416: argument: 
                2417: expr: 
                 2418: name: bs
               2419: argument: 
                2420: expr: 
                 2421: literal: "display_window_right_offset"
           2422: expr_stmt: 
            2423: expr: 
             2424: name: 
              2425: name: sps
              2426: operator: ->
              2427: name: top_offset
             2428: operator: =
             2429: call: 
              2430: name: gf_bs_read_ue_log
              2431: argument_list: 
               2432: argument: 
                2433: expr: 
                 2434: name: bs
               2435: argument: 
                2436: expr: 
                 2437: literal: "display_window_top_offset"
           2438: expr_stmt: 
            2439: expr: 
             2440: name: 
              2441: name: sps
              2442: operator: ->
              2443: name: bottom_offset
             2444: operator: =
             2445: call: 
              2446: name: gf_bs_read_ue_log
              2447: argument_list: 
               2448: argument: 
                2449: expr: 
                 2450: name: bs
               2451: argument: 
                2452: expr: 
                 2453: literal: "display_window_bottom_offset"
       2454: expr_stmt: 
        2455: expr: 
         2456: name: 
          2457: name: sps
          2458: operator: ->
          2459: name: has_timing_info
         2460: operator: =
         2461: call: 
          2462: name: gf_bs_read_int_log
          2463: argument_list: 
           2464: argument: 
            2465: expr: 
             2466: name: bs
           2467: argument: 
            2468: expr: 
             2469: literal: 1
           2470: argument: 
            2471: expr: 
             2472: literal: "has_timing_info"
       2473: if_stmt: 
        2474: if: 
         2475: condition: 
          2476: expr: 
           2477: name: 
            2478: name: sps
            2479: operator: ->
            2480: name: has_timing_info
         2481: block: 
          2482: block_content: 
           2483: expr_stmt: 
            2484: expr: 
             2485: name: 
              2486: name: sps
              2487: operator: ->
              2488: name: num_units_in_tick
             2489: operator: =
             2490: call: 
              2491: name: gf_bs_read_int_log
              2492: argument_list: 
               2493: argument: 
                2494: expr: 
                 2495: name: bs
               2496: argument: 
                2497: expr: 
                 2498: literal: 32
               2499: argument: 
                2500: expr: 
                 2501: literal: "num_units_in_tick"
           2502: expr_stmt: 
            2503: expr: 
             2504: name: 
              2505: name: sps
              2506: operator: ->
              2507: name: time_scale
             2508: operator: =
             2509: call: 
              2510: name: gf_bs_read_int_log
              2511: argument_list: 
               2512: argument: 
                2513: expr: 
                 2514: name: bs
               2515: argument: 
                2516: expr: 
                 2517: literal: 32
               2518: argument: 
                2519: expr: 
                 2520: literal: "time_scale"
           2521: expr_stmt: 
            2522: expr: 
             2523: name: 
              2524: name: sps
              2525: operator: ->
              2526: name: poc_proportional_to_timing_flag
             2527: operator: =
             2528: call: 
              2529: name: gf_bs_read_int_log
              2530: argument_list: 
               2531: argument: 
                2532: expr: 
                 2533: name: bs
               2534: argument: 
                2535: expr: 
                 2536: literal: 1
               2537: argument: 
                2538: expr: 
                 2539: literal: "poc_proportional_to_timing_flag"
           2540: if_stmt: 
            2541: if: 
             2542: condition: 
              2543: expr: 
               2544: name: 
                2545: name: sps
                2546: operator: ->
                2547: name: poc_proportional_to_timing_flag
             2548: block: 
              2549: block_content: 
               2550: expr_stmt: 
                2551: expr: 
                 2552: name: 
                  2553: name: sps
                  2554: operator: ->
                  2555: name: num_ticks_poc_diff_one_minus1
                 2556: operator: =
                 2557: call: 
                  2558: name: gf_bs_read_ue_log
                  2559: argument_list: 
                   2560: argument: 
                    2561: expr: 
                     2562: name: bs
                   2563: argument: 
                    2564: expr: 
                     2565: literal: "num_ticks_poc_diff_one_minus1"
           2566: if_stmt: 
            2567: if: 
             2568: condition: 
              2569: expr: 
               2570: operator: (
               2571: name: 
                2572: name: sps
                2573: operator: ->
                2574: name: hrd_parameters_present_flag
               2575: operator: =
               2576: call: 
                2577: name: gf_bs_read_int_log
                2578: argument_list: 
                 2579: argument: 
                  2580: expr: 
                   2581: name: bs
                 2582: argument: 
                  2583: expr: 
                   2584: literal: 1
                 2585: argument: 
                  2586: expr: 
                   2587: literal: "hrd_parameters_present_flag"
               2588: operator: )
             2589: block: 
              2590: block_content: 
               2591: comment: //				GF_LOG(GF_LOG_INFO, GF_LOG_CODING, ("[HEVC] HRD param parsing not implemented\n"));
               2592: return: 
                2593: expr: 
                 2594: name: sps_id
       2595: if_stmt: 
        2596: if: 
         2597: condition: 
          2598: expr: 
           2599: call: 
            2600: name: gf_bs_read_int_log
            2601: argument_list: 
             2602: argument: 
              2603: expr: 
               2604: name: bs
             2605: argument: 
              2606: expr: 
               2607: literal: 1
             2608: argument: 
              2609: expr: 
               2610: literal: "bitstream_restriction_flag"
         2611: block: 
          2612: block_content: 
           2613: expr_stmt: 
            2614: expr: 
             2615: call: 
              2616: name: gf_bs_read_int_log
              2617: argument_list: 
               2618: argument: 
                2619: expr: 
                 2620: name: bs
               2621: argument: 
                2622: expr: 
                 2623: literal: 1
               2624: argument: 
                2625: expr: 
                 2626: literal: "tiles_fixed_structure_flag"
           2627: expr_stmt: 
            2628: expr: 
             2629: call: 
              2630: name: gf_bs_read_int_log
              2631: argument_list: 
               2632: argument: 
                2633: expr: 
                 2634: name: bs
               2635: argument: 
                2636: expr: 
                 2637: literal: 1
               2638: argument: 
                2639: expr: 
                 2640: literal: "motion_vectors_over_pic_boundaries_flag"
           2641: expr_stmt: 
            2642: expr: 
             2643: call: 
              2644: name: gf_bs_read_int_log
              2645: argument_list: 
               2646: argument: 
                2647: expr: 
                 2648: name: bs
               2649: argument: 
                2650: expr: 
                 2651: literal: 1
               2652: argument: 
                2653: expr: 
                 2654: literal: "restricted_ref_pic_lists_flag"
           2655: expr_stmt: 
            2656: expr: 
             2657: call: 
              2658: name: gf_bs_read_ue_log
              2659: argument_list: 
               2660: argument: 
                2661: expr: 
                 2662: name: bs
               2663: argument: 
                2664: expr: 
                 2665: literal: "min_spatial_segmentation_idc"
           2666: expr_stmt: 
            2667: expr: 
             2668: call: 
              2669: name: gf_bs_read_ue_log
              2670: argument_list: 
               2671: argument: 
                2672: expr: 
                 2673: name: bs
               2674: argument: 
                2675: expr: 
                 2676: literal: "max_bytes_per_pic_denom"
           2677: expr_stmt: 
            2678: expr: 
             2679: call: 
              2680: name: gf_bs_read_ue_log
              2681: argument_list: 
               2682: argument: 
                2683: expr: 
                 2684: name: bs
               2685: argument: 
                2686: expr: 
                 2687: literal: "max_bits_per_min_cu_denom"
           2688: expr_stmt: 
            2689: expr: 
             2690: call: 
              2691: name: gf_bs_read_ue_log
              2692: argument_list: 
               2693: argument: 
                2694: expr: 
                 2695: name: bs
               2696: argument: 
                2697: expr: 
                 2698: literal: "log2_max_mv_length_horizontal"
           2699: expr_stmt: 
            2700: expr: 
             2701: call: 
              2702: name: gf_bs_read_ue_log
              2703: argument_list: 
               2704: argument: 
                2705: expr: 
                 2706: name: bs
               2707: argument: 
                2708: expr: 
                 2709: literal: "log2_max_mv_length_vertical"
   2710: if_stmt: 
    2711: if: 
     2712: condition: 
      2713: expr: 
       2714: call: 
        2715: name: gf_bs_read_int_log
        2716: argument_list: 
         2717: argument: 
          2718: expr: 
           2719: name: bs
         2720: argument: 
          2721: expr: 
           2722: literal: 1
         2723: argument: 
          2724: expr: 
           2725: literal: "sps_extension_flag"
     2726: block: 
      2727: block_content: 
       2728: if: 
        2729: directive: if
        2730: expr: 
         2731: literal: 0
       2732: comment: /*sps_extension_data_flag */
       2733: endif: 
        2734: directive: endif
   2735: return: 
    2736: expr: 
     2737: name: sps_id

----------------------------------------
0: function: 
 1: type: 
  2: specifier: static
  3: name: s32
 4: name: gf_hevc_read_sps_bs_internal
 5: parameter_list: 
  6: parameter: 
   7: decl: 
    8: type: 
     9: name: GF_BitStream
     10: modifier: *
    11: name: bs
  12: parameter: 
   13: decl: 
    14: type: 
     15: name: HEVCState
     16: modifier: *
    17: name: hevc
  18: parameter: 
   19: decl: 
    20: type: 
     21: name: u8
    22: name: layer_id
  23: parameter: 
   24: decl: 
    25: type: 
     26: name: u32
     27: modifier: *
    28: name: vui_flag_pos
 29: block: 
  30: block_content: 
   31: decl_stmt: 
    32: decl: 
     33: type: 
      34: name: s32
     35: name: vps_id
    36: decl: 
     37: type: 
     38: name: sps_id
     39: init: 
      40: expr: 
       41: operator: -
       42: literal: 1
   43: decl_stmt: 
    44: decl: 
     45: type: 
      46: name: u32
     47: name: i
    48: decl: 
     49: type: 
     50: name: nb_CTUs
    51: decl: 
     52: type: 
     53: name: depth
   54: decl_stmt: 
    55: decl: 
     56: type: 
      57: name: HEVC_SPS
      58: modifier: *
     59: name: sps
   60: decl_stmt: 
    61: decl: 
     62: type: 
      63: name: HEVC_VPS
      64: modifier: *
     65: name: vps
   66: decl_stmt: 
    67: decl: 
     68: type: 
      69: name: HEVC_ProfileTierLevel
     70: name: ptl
   71: decl_stmt: 
    72: decl: 
     73: type: 
      74: name: Bool
     75: name: multiLayerExtSpsFlag
   76: decl_stmt: 
    77: decl: 
     78: type: 
      79: name: u8
     80: name: sps_ext_or_max_sub_layers_minus1
    81: decl: 
     82: type: 
     83: name: max_sub_layers_minus1
   84: if_stmt: 
    85: if: 
     86: condition: 
      87: expr: 
       88: name: vui_flag_pos
     89: block: 
      90: block_content: 
       91: expr_stmt: 
        92: expr: 
         93: operator: *
         94: name: vui_flag_pos
         95: operator: =
         96: literal: 0
   97: comment: //nalu header already parsed
   98: expr_stmt: 
    99: expr: 
     100: name: vps_id
     101: operator: =
     102: call: 
      103: name: gf_bs_read_int_log
      104: argument_list: 
       105: argument: 
        106: expr: 
         107: name: bs
       108: argument: 
        109: expr: 
         110: literal: 4
       111: argument: 
        112: expr: 
         113: literal: "vps_id"
   114: if_stmt: 
    115: if: 
     116: condition: 
      117: expr: 
       118: operator: (
       119: name: vps_id
       120: operator: <
       121: literal: 0
       122: operator: )
       123: operator: ||
       124: operator: (
       125: name: vps_id
       126: operator: >=
       127: literal: 16
       128: operator: )
     129: block: 
      130: block_content: 
       131: return: 
        132: expr: 
         133: operator: -
         134: literal: 1
   135: expr_stmt: 
    136: expr: 
     137: call: 
      138: name: memset
      139: argument_list: 
       140: argument: 
        141: expr: 
         142: operator: &
         143: name: ptl
       144: argument: 
        145: expr: 
         146: literal: 0
       147: argument: 
        148: expr: 
         149: sizeof: 
          150: argument_list: 
           151: argument: 
            152: expr: 
             153: name: ptl
   154: expr_stmt: 
    155: expr: 
     156: name: max_sub_layers_minus1
     157: operator: =
     158: literal: 0
   159: expr_stmt: 
    160: expr: 
     161: name: sps_ext_or_max_sub_layers_minus1
     162: operator: =
     163: literal: 0
   164: if_stmt: 
    165: if: 
     166: condition: 
      167: expr: 
       168: name: layer_id
       169: operator: ==
       170: literal: 0
     171: block: 
      172: block_content: 
       173: expr_stmt: 
        174: expr: 
         175: name: max_sub_layers_minus1
         176: operator: =
         177: call: 
          178: name: gf_bs_read_int_log
          179: argument_list: 
           180: argument: 
            181: expr: 
             182: name: bs
           183: argument: 
            184: expr: 
             185: literal: 3
           186: argument: 
            187: expr: 
             188: literal: "max_sub_layers_minus1"
    189: else: 
     190: block: 
      191: block_content: 
       192: expr_stmt: 
        193: expr: 
         194: name: sps_ext_or_max_sub_layers_minus1
         195: operator: =
         196: call: 
          197: name: gf_bs_read_int_log
          198: argument_list: 
           199: argument: 
            200: expr: 
             201: name: bs
           202: argument: 
            203: expr: 
             204: literal: 3
           205: argument: 
            206: expr: 
             207: literal: "sps_ext_or_max_sub_layers_minus1"
   208: expr_stmt: 
    209: expr: 
     210: name: multiLayerExtSpsFlag
     211: operator: =
     212: operator: (
     213: name: layer_id
     214: operator: !=
     215: literal: 0
     216: operator: )
     217: operator: &&
     218: operator: (
     219: name: sps_ext_or_max_sub_layers_minus1
     220: operator: ==
     221: literal: 7
     222: operator: )
   223: if_stmt: 
    224: if: 
     225: condition: 
      226: expr: 
       227: operator: !
       228: name: multiLayerExtSpsFlag
     229: block: 
      230: block_content: 
       231: expr_stmt: 
        232: expr: 
         233: call: 
          234: name: gf_bs_read_int_log
          235: argument_list: 
           236: argument: 
            237: expr: 
             238: name: bs
           239: argument: 
            240: expr: 
             241: literal: 1
           242: argument: 
            243: expr: 
             244: literal: "temporal_id_nesting_flag"
       245: expr_stmt: 
        246: expr: 
         247: call: 
          248: name: hevc_profile_tier_level
          249: argument_list: 
           250: argument: 
            251: expr: 
             252: name: bs
           253: argument: 
            254: expr: 
             255: literal: 1
           256: argument: 
            257: expr: 
             258: name: max_sub_layers_minus1
           259: argument: 
            260: expr: 
             261: operator: &
             262: name: ptl
           263: argument: 
            264: expr: 
             265: literal: 0
   266: expr_stmt: 
    267: expr: 
     268: name: sps_id
     269: operator: =
     270: call: 
      271: name: gf_bs_read_ue_log
      272: argument_list: 
       273: argument: 
        274: expr: 
         275: name: bs
       276: argument: 
        277: expr: 
         278: literal: "sps_id"
   279: if_stmt: 
    280: if: 
     281: condition: 
      282: expr: 
       283: operator: (
       284: name: sps_id
       285: operator: <
       286: literal: 0
       287: operator: )
       288: operator: ||
       289: operator: (
       290: name: sps_id
       291: operator: >=
       292: literal: 16
       293: operator: )
     294: block: 
      295: block_content: 
       296: return: 
        297: expr: 
         298: operator: -
         299: literal: 1
   300: expr_stmt: 
    301: expr: 
     302: name: sps
     303: operator: =
     304: operator: &
     305: name: 
      306: name: hevc
      307: operator: ->
      308: name: sps
      309: index: 
       310: expr: 
        311: name: sps_id
   312: if_stmt: 
    313: if: 
     314: condition: 
      315: expr: 
       316: operator: !
       317: name: 
        318: name: sps
        319: operator: ->
        320: name: state
     321: block: 
      322: block_content: 
       323: expr_stmt: 
        324: expr: 
         325: name: 
          326: name: sps
          327: operator: ->
          328: name: state
         329: operator: =
         330: literal: 1
       331: expr_stmt: 
        332: expr: 
         333: name: 
          334: name: sps
          335: operator: ->
          336: name: id
         337: operator: =
         338: name: sps_id
       339: expr_stmt: 
        340: expr: 
         341: name: 
          342: name: sps
          343: operator: ->
          344: name: vps_id
         345: operator: =
         346: name: vps_id
   347: expr_stmt: 
    348: expr: 
     349: name: 
      350: name: sps
      351: operator: ->
      352: name: ptl
     353: operator: =
     354: name: ptl
   355: expr_stmt: 
    356: expr: 
     357: name: vps
     358: operator: =
     359: operator: &
     360: name: 
      361: name: hevc
      362: operator: ->
      363: name: vps
      364: index: 
       365: expr: 
        366: name: vps_id
   367: expr_stmt: 
    368: expr: 
     369: name: 
      370: name: sps
      371: operator: ->
      372: name: max_sub_layers_minus1
     373: operator: =
     374: literal: 0
   375: expr_stmt: 
    376: expr: 
     377: name: 
      378: name: sps
      379: operator: ->
      380: name: sps_ext_or_max_sub_layers_minus1
     381: operator: =
     382: literal: 0
   383: comment: /* default values */
   384: expr_stmt: 
    385: expr: 
     386: name: 
      387: name: sps
      388: operator: ->
      389: name: colour_primaries
     390: operator: =
     391: literal: 2
   392: expr_stmt: 
    393: expr: 
     394: name: 
      395: name: sps
      396: operator: ->
      397: name: transfer_characteristic
     398: operator: =
     399: literal: 2
   400: expr_stmt: 
    401: expr: 
     402: name: 
      403: name: sps
      404: operator: ->
      405: name: matrix_coeffs
     406: operator: =
     407: literal: 2
   408: comment: //sps_rep_format_idx = 0;
   409: if_stmt: 
    410: if: 
     411: condition: 
      412: expr: 
       413: name: multiLayerExtSpsFlag
     414: block: 
      415: block_content: 
       416: expr_stmt: 
        417: expr: 
         418: name: 
          419: name: sps
          420: operator: ->
          421: name: update_rep_format_flag
         422: operator: =
         423: call: 
          424: name: gf_bs_read_int_log
          425: argument_list: 
           426: argument: 
            427: expr: 
             428: name: bs
           429: argument: 
            430: expr: 
             431: literal: 1
           432: argument: 
            433: expr: 
             434: literal: "update_rep_format_flag"
       435: if_stmt: 
        436: if: 
         437: condition: 
          438: expr: 
           439: name: 
            440: name: sps
            441: operator: ->
            442: name: update_rep_format_flag
         443: block: 
          444: block_content: 
           445: expr_stmt: 
            446: expr: 
             447: name: 
              448: name: sps
              449: operator: ->
              450: name: rep_format_idx
             451: operator: =
             452: call: 
              453: name: gf_bs_read_int_log
              454: argument_list: 
               455: argument: 
                456: expr: 
                 457: name: bs
               458: argument: 
                459: expr: 
                 460: literal: 8
               461: argument: 
                462: expr: 
                 463: literal: "rep_format_idx"
        464: else: 
         465: block: 
          466: block_content: 
           467: expr_stmt: 
            468: expr: 
             469: name: 
              470: name: sps
              471: operator: ->
              472: name: rep_format_idx
             473: operator: =
             474: name: 
              475: name: vps
              476: operator: ->
              477: name: rep_format_idx
              478: index: 
               479: expr: 
                480: name: layer_id
       481: expr_stmt: 
        482: expr: 
         483: name: 
          484: name: sps
          485: operator: ->
          486: name: width
         487: operator: =
         488: name: 
          489: name: vps
          490: operator: ->
          491: name: rep_formats
          492: index: 
           493: expr: 
            494: name: 
             495: name: sps
             496: operator: ->
             497: name: rep_format_idx
         498: operator: .
         499: name: pic_width_luma_samples
       500: expr_stmt: 
        501: expr: 
         502: name: 
          503: name: sps
          504: operator: ->
          505: name: height
         506: operator: =
         507: name: 
          508: name: vps
          509: operator: ->
          510: name: rep_formats
          511: index: 
           512: expr: 
            513: name: 
             514: name: sps
             515: operator: ->
             516: name: rep_format_idx
         517: operator: .
         518: name: pic_height_luma_samples
       519: expr_stmt: 
        520: expr: 
         521: name: 
          522: name: sps
          523: operator: ->
          524: name: chroma_format_idc
         525: operator: =
         526: name: 
          527: name: vps
          528: operator: ->
          529: name: rep_formats
          530: index: 
           531: expr: 
            532: name: 
             533: name: sps
             534: operator: ->
             535: name: rep_format_idx
         536: operator: .
         537: name: chroma_format_idc
       538: expr_stmt: 
        539: expr: 
         540: name: 
          541: name: sps
          542: operator: ->
          543: name: bit_depth_luma
         544: operator: =
         545: name: 
          546: name: vps
          547: operator: ->
          548: name: rep_formats
          549: index: 
           550: expr: 
            551: name: 
             552: name: sps
             553: operator: ->
             554: name: rep_format_idx
         555: operator: .
         556: name: bit_depth_luma
       557: expr_stmt: 
        558: expr: 
         559: name: 
          560: name: sps
          561: operator: ->
          562: name: bit_depth_chroma
         563: operator: =
         564: name: 
          565: name: vps
          566: operator: ->
          567: name: rep_formats
          568: index: 
           569: expr: 
            570: name: 
             571: name: sps
             572: operator: ->
             573: name: rep_format_idx
         574: operator: .
         575: name: bit_depth_chroma
       576: expr_stmt: 
        577: expr: 
         578: name: 
          579: name: sps
          580: operator: ->
          581: name: separate_colour_plane_flag
         582: operator: =
         583: name: 
          584: name: vps
          585: operator: ->
          586: name: rep_formats
          587: index: 
           588: expr: 
            589: name: 
             590: name: sps
             591: operator: ->
             592: name: rep_format_idx
         593: operator: .
         594: name: separate_colour_plane_flag
       595: comment: //TODO this is crude ...
       596: expr_stmt: 
        597: expr: 
         598: name: 
          599: name: sps
          600: operator: ->
          601: name: ptl
         602: operator: =
         603: name: 
          604: name: vps
          605: operator: ->
          606: name: ext_ptl
          607: index: 
           608: expr: 
            609: literal: 0
    610: else: 
     611: block: 
      612: block_content: 
       613: expr_stmt: 
        614: expr: 
         615: name: 
          616: name: sps
          617: operator: ->
          618: name: chroma_format_idc
         619: operator: =
         620: call: 
          621: name: gf_bs_read_ue_log
          622: argument_list: 
           623: argument: 
            624: expr: 
             625: name: bs
           626: argument: 
            627: expr: 
             628: literal: "chroma_format_idc"
       629: if_stmt: 
        630: if: 
         631: condition: 
          632: expr: 
           633: name: 
            634: name: sps
            635: operator: ->
            636: name: chroma_format_idc
           637: operator: ==
           638: literal: 3
         639: block: 
          640: block_content: 
           641: expr_stmt: 
            642: expr: 
             643: name: 
              644: name: sps
              645: operator: ->
              646: name: separate_colour_plane_flag
             647: operator: =
             648: call: 
              649: name: gf_bs_read_int_log
              650: argument_list: 
               651: argument: 
                652: expr: 
                 653: name: bs
               654: argument: 
                655: expr: 
                 656: literal: 1
               657: argument: 
                658: expr: 
                 659: literal: "separate_colour_plane_flag"
       660: expr_stmt: 
        661: expr: 
         662: name: 
          663: name: sps
          664: operator: ->
          665: name: width
         666: operator: =
         667: call: 
          668: name: gf_bs_read_ue_log
          669: argument_list: 
           670: argument: 
            671: expr: 
             672: name: bs
           673: argument: 
            674: expr: 
             675: literal: "width"
       676: expr_stmt: 
        677: expr: 
         678: name: 
          679: name: sps
          680: operator: ->
          681: name: height
         682: operator: =
         683: call: 
          684: name: gf_bs_read_ue_log
          685: argument_list: 
           686: argument: 
            687: expr: 
             688: name: bs
           689: argument: 
            690: expr: 
             691: literal: "height"
       692: if_stmt: 
        693: if: 
         694: condition: 
          695: expr: 
           696: operator: (
           697: name: 
            698: name: sps
            699: operator: ->
            700: name: cw_flag
           701: operator: =
           702: call: 
            703: name: gf_bs_read_int_log
            704: argument_list: 
             705: argument: 
              706: expr: 
               707: name: bs
             708: argument: 
              709: expr: 
               710: literal: 1
             711: argument: 
              712: expr: 
               713: literal: "conformance_window_flag"
           714: operator: )
         715: block: 
          716: block_content: 
           717: decl_stmt: 
            718: decl: 
             719: type: 
              720: name: u32
             721: name: SubWidthC
            722: decl: 
             723: type: 
             724: name: SubHeightC
           725: if_stmt: 
            726: if: 
             727: condition: 
              728: expr: 
               729: name: 
                730: name: sps
                731: operator: ->
                732: name: chroma_format_idc
               733: operator: ==
               734: literal: 1
             735: block: 
              736: block_content: 
               737: expr_stmt: 
                738: expr: 
                 739: name: SubWidthC
                 740: operator: =
                 741: name: SubHeightC
                 742: operator: =
                 743: literal: 2
            744: if: 
             745: condition: 
              746: expr: 
               747: name: 
                748: name: sps
                749: operator: ->
                750: name: chroma_format_idc
               751: operator: ==
               752: literal: 2
             753: block: 
              754: block_content: 
               755: expr_stmt: 
                756: expr: 
                 757: name: SubWidthC
                 758: operator: =
                 759: literal: 2
               760: expr_stmt: 
                761: expr: 
                 762: name: SubHeightC
                 763: operator: =
                 764: literal: 1
            765: else: 
             766: block: 
              767: block_content: 
               768: expr_stmt: 
                769: expr: 
                 770: name: SubWidthC
                 771: operator: =
                 772: name: SubHeightC
                 773: operator: =
                 774: literal: 1
           775: expr_stmt: 
            776: expr: 
             777: name: 
              778: name: sps
              779: operator: ->
              780: name: cw_left
             781: operator: =
             782: call: 
              783: name: gf_bs_read_ue_log
              784: argument_list: 
               785: argument: 
                786: expr: 
                 787: name: bs
               788: argument: 
                789: expr: 
                 790: literal: "conformance_window_left"
           791: expr_stmt: 
            792: expr: 
             793: name: 
              794: name: sps
              795: operator: ->
              796: name: cw_right
             797: operator: =
             798: call: 
              799: name: gf_bs_read_ue_log
              800: argument_list: 
               801: argument: 
                802: expr: 
                 803: name: bs
               804: argument: 
                805: expr: 
                 806: literal: "conformance_window_right"
           807: expr_stmt: 
            808: expr: 
             809: name: 
              810: name: sps
              811: operator: ->
              812: name: cw_top
             813: operator: =
             814: call: 
              815: name: gf_bs_read_ue_log
              816: argument_list: 
               817: argument: 
                818: expr: 
                 819: name: bs
               820: argument: 
                821: expr: 
                 822: literal: "conformance_window_top"
           823: expr_stmt: 
            824: expr: 
             825: name: 
              826: name: sps
              827: operator: ->
              828: name: cw_bottom
             829: operator: =
             830: call: 
              831: name: gf_bs_read_ue_log
              832: argument_list: 
               833: argument: 
                834: expr: 
                 835: name: bs
               836: argument: 
                837: expr: 
                 838: literal: "conformance_window_bottom"
           839: expr_stmt: 
            840: expr: 
             841: name: 
              842: name: sps
              843: operator: ->
              844: name: width
             845: operator: -=
             846: name: SubWidthC
             847: operator: *
             848: operator: (
             849: name: 
              850: name: sps
              851: operator: ->
              852: name: cw_left
             853: operator: +
             854: name: 
              855: name: sps
              856: operator: ->
              857: name: cw_right
             858: operator: )
           859: expr_stmt: 
            860: expr: 
             861: name: 
              862: name: sps
              863: operator: ->
              864: name: height
             865: operator: -=
             866: name: SubHeightC
             867: operator: *
             868: operator: (
             869: name: 
              870: name: sps
              871: operator: ->
              872: name: cw_top
             873: operator: +
             874: name: 
              875: name: sps
              876: operator: ->
              877: name: cw_bottom
             878: operator: )
       879: expr_stmt: 
        880: expr: 
         881: name: 
          882: name: sps
          883: operator: ->
          884: name: bit_depth_luma
         885: operator: =
         886: literal: 8
         887: operator: +
         888: call: 
          889: name: gf_bs_read_ue_log
          890: argument_list: 
           891: argument: 
            892: expr: 
             893: name: bs
           894: argument: 
            895: expr: 
             896: literal: "bit_depth_luma_minus8"
       897: expr_stmt: 
        898: expr: 
         899: name: 
          900: name: sps
          901: operator: ->
          902: name: bit_depth_chroma
         903: operator: =
         904: literal: 8
         905: operator: +
         906: call: 
          907: name: gf_bs_read_ue_log
          908: argument_list: 
           909: argument: 
            910: expr: 
             911: name: bs
           912: argument: 
            913: expr: 
             914: literal: "bit_depth_chroma_minus8"
   915: expr_stmt: 
    916: expr: 
     917: name: 
      918: name: sps
      919: operator: ->
      920: name: log2_max_pic_order_cnt_lsb
     921: operator: =
     922: literal: 4
     923: operator: +
     924: call: 
      925: name: gf_bs_read_ue_log
      926: argument_list: 
       927: argument: 
        928: expr: 
         929: name: bs
       930: argument: 
        931: expr: 
         932: literal: "log2_max_pic_order_cnt_lsb_minus4"
   933: if_stmt: 
    934: if: 
     935: condition: 
      936: expr: 
       937: operator: !
       938: name: multiLayerExtSpsFlag
     939: block: 
      940: block_content: 
       941: expr_stmt: 
        942: expr: 
         943: name: 
          944: name: sps
          945: operator: ->
          946: name: sub_layer_ordering_info_present_flag
         947: operator: =
         948: call: 
          949: name: gf_bs_read_int_log
          950: argument_list: 
           951: argument: 
            952: expr: 
             953: name: bs
           954: argument: 
            955: expr: 
             956: literal: 1
           957: argument: 
            958: expr: 
             959: literal: "sub_layer_ordering_info_present_flag"
       960: for: 
        961: control: 
         962: init: 
          963: expr: 
           964: name: i
           965: operator: =
           966: ternary: 
            967: condition: 
             968: expr: 
              969: name: 
               970: name: sps
               971: operator: ->
               972: name: sub_layer_ordering_info_present_flag
            973: then: 
             974: expr: 
              975: literal: 0
            976: else: 
             977: expr: 
              978: name: 
               979: name: sps
               980: operator: ->
               981: name: max_sub_layers_minus1
         982: condition: 
          983: expr: 
           984: name: i
           985: operator: <=
           986: name: 
            987: name: sps
            988: operator: ->
            989: name: max_sub_layers_minus1
         990: incr: 
          991: expr: 
           992: name: i
           993: operator: ++
        994: block: 
         995: block_content: 
          996: expr_stmt: 
           997: expr: 
            998: call: 
             999: name: gf_bs_read_ue_log_idx
             1000: argument_list: 
              1001: argument: 
               1002: expr: 
                1003: name: bs
              1004: argument: 
               1005: expr: 
                1006: literal: "max_dec_pic_buffering"
              1007: argument: 
               1008: expr: 
                1009: name: i
          1010: expr_stmt: 
           1011: expr: 
            1012: call: 
             1013: name: gf_bs_read_ue_log_idx
             1014: argument_list: 
              1015: argument: 
               1016: expr: 
                1017: name: bs
              1018: argument: 
               1019: expr: 
                1020: literal: "num_reorder_pics"
              1021: argument: 
               1022: expr: 
                1023: name: i
          1024: expr_stmt: 
           1025: expr: 
            1026: call: 
             1027: name: gf_bs_read_ue_log_idx
             1028: argument_list: 
              1029: argument: 
               1030: expr: 
                1031: name: bs
              1032: argument: 
               1033: expr: 
                1034: literal: "max_latency_increase"
              1035: argument: 
               1036: expr: 
                1037: name: i
   1038: expr_stmt: 
    1039: expr: 
     1040: name: 
      1041: name: sps
      1042: operator: ->
      1043: name: log2_min_luma_coding_block_size
     1044: operator: =
     1045: literal: 3
     1046: operator: +
     1047: call: 
      1048: name: gf_bs_read_ue_log
      1049: argument_list: 
       1050: argument: 
        1051: expr: 
         1052: name: bs
       1053: argument: 
        1054: expr: 
         1055: literal: "log2_min_luma_coding_block_size_minus3"
   1056: expr_stmt: 
    1057: expr: 
     1058: name: 
      1059: name: sps
      1060: operator: ->
      1061: name: log2_diff_max_min_luma_coding_block_size
     1062: operator: =
     1063: call: 
      1064: name: gf_bs_read_ue_log
      1065: argument_list: 
       1066: argument: 
        1067: expr: 
         1068: name: bs
       1069: argument: 
        1070: expr: 
         1071: literal: "log2_diff_max_min_luma_coding_block_size"
   1072: expr_stmt: 
    1073: expr: 
     1074: name: 
      1075: name: sps
      1076: operator: ->
      1077: name: max_CU_width
     1078: operator: =
     1079: operator: (
     1080: literal: 1
     1081: operator: <<
     1082: operator: (
     1083: name: 
      1084: name: sps
      1085: operator: ->
      1086: name: log2_min_luma_coding_block_size
     1087: operator: +
     1088: name: 
      1089: name: sps
      1090: operator: ->
      1091: name: log2_diff_max_min_luma_coding_block_size
     1092: operator: )
     1093: operator: )
   1094: expr_stmt: 
    1095: expr: 
     1096: name: 
      1097: name: sps
      1098: operator: ->
      1099: name: max_CU_height
     1100: operator: =
     1101: operator: (
     1102: literal: 1
     1103: operator: <<
     1104: operator: (
     1105: name: 
      1106: name: sps
      1107: operator: ->
      1108: name: log2_min_luma_coding_block_size
     1109: operator: +
     1110: name: 
      1111: name: sps
      1112: operator: ->
      1113: name: log2_diff_max_min_luma_coding_block_size
     1114: operator: )
     1115: operator: )
   1116: expr_stmt: 
    1117: expr: 
     1118: name: 
      1119: name: sps
      1120: operator: ->
      1121: name: log2_min_transform_block_size
     1122: operator: =
     1123: literal: 2
     1124: operator: +
     1125: call: 
      1126: name: gf_bs_read_ue_log
      1127: argument_list: 
       1128: argument: 
        1129: expr: 
         1130: name: bs
       1131: argument: 
        1132: expr: 
         1133: literal: "log2_min_transform_block_size_minus2"
   1134: expr_stmt: 
    1135: expr: 
     1136: name: 
      1137: name: sps
      1138: operator: ->
      1139: name: log2_max_transform_block_size
     1140: operator: =
     1141: name: 
      1142: name: sps
      1143: operator: ->
      1144: name: log2_min_transform_block_size
     1145: operator: +
     1146: call: 
      1147: name: gf_bs_read_ue_log
      1148: argument_list: 
       1149: argument: 
        1150: expr: 
         1151: name: bs
       1152: argument: 
        1153: expr: 
         1154: literal: "log2_max_transform_block_size"
   1155: expr_stmt: 
    1156: expr: 
     1157: name: depth
     1158: operator: =
     1159: literal: 0
   1160: expr_stmt: 
    1161: expr: 
     1162: name: 
      1163: name: sps
      1164: operator: ->
      1165: name: max_transform_hierarchy_depth_inter
     1166: operator: =
     1167: call: 
      1168: name: gf_bs_read_ue_log
      1169: argument_list: 
       1170: argument: 
        1171: expr: 
         1172: name: bs
       1173: argument: 
        1174: expr: 
         1175: literal: "max_transform_hierarchy_depth_inter"
   1176: expr_stmt: 
    1177: expr: 
     1178: name: 
      1179: name: sps
      1180: operator: ->
      1181: name: max_transform_hierarchy_depth_intra
     1182: operator: =
     1183: call: 
      1184: name: gf_bs_read_ue_log
      1185: argument_list: 
       1186: argument: 
        1187: expr: 
         1188: name: bs
       1189: argument: 
        1190: expr: 
         1191: literal: "max_transform_hierarchy_depth_intra"
   1192: while: 
    1193: condition: 
     1194: expr: 
      1195: operator: (
      1196: name: u32
      1197: operator: )
      1198: operator: (
      1199: name: 
       1200: name: sps
       1201: operator: ->
       1202: name: max_CU_width
      1203: operator: >>
      1204: name: 
       1205: name: sps
       1206: operator: ->
       1207: name: log2_diff_max_min_luma_coding_block_size
      1208: operator: )
      1209: operator: >
      1210: operator: (
      1211: name: u32
      1212: operator: )
      1213: operator: (
      1214: literal: 1
      1215: operator: <<
      1216: operator: (
      1217: name: 
       1218: name: sps
       1219: operator: ->
       1220: name: log2_min_transform_block_size
      1221: operator: +
      1222: name: depth
      1223: operator: )
      1224: operator: )
    1225: block: 
     1226: block_content: 
      1227: expr_stmt: 
       1228: expr: 
        1229: name: depth
        1230: operator: ++
   1231: expr_stmt: 
    1232: expr: 
     1233: name: 
      1234: name: sps
      1235: operator: ->
      1236: name: max_CU_depth
     1237: operator: =
     1238: name: 
      1239: name: sps
      1240: operator: ->
      1241: name: log2_diff_max_min_luma_coding_block_size
     1242: operator: +
     1243: name: depth
   1244: expr_stmt: 
    1245: expr: 
     1246: name: nb_CTUs
     1247: operator: =
     1248: operator: (
     1249: operator: (
     1250: name: 
      1251: name: sps
      1252: operator: ->
      1253: name: width
     1254: operator: +
     1255: name: 
      1256: name: sps
      1257: operator: ->
      1258: name: max_CU_width
     1259: operator: -
     1260: literal: 1
     1261: operator: )
     1262: operator: /
     1263: name: 
      1264: name: sps
      1265: operator: ->
      1266: name: max_CU_width
     1267: operator: )
     1268: operator: *
     1269: operator: (
     1270: operator: (
     1271: name: 
      1272: name: sps
      1273: operator: ->
      1274: name: height
     1275: operator: +
     1276: name: 
      1277: name: sps
      1278: operator: ->
      1279: name: max_CU_height
     1280: operator: -
     1281: literal: 1
     1282: operator: )
     1283: operator: /
     1284: name: 
      1285: name: sps
      1286: operator: ->
      1287: name: max_CU_height
     1288: operator: )
   1289: expr_stmt: 
    1290: expr: 
     1291: name: 
      1292: name: sps
      1293: operator: ->
      1294: name: bitsSliceSegmentAddress
     1295: operator: =
     1296: literal: 0
   1297: while: 
    1298: condition: 
     1299: expr: 
      1300: name: nb_CTUs
      1301: operator: >
      1302: operator: (
      1303: name: u32
      1304: operator: )
      1305: operator: (
      1306: literal: 1
      1307: operator: <<
      1308: name: 
       1309: name: sps
       1310: operator: ->
       1311: name: bitsSliceSegmentAddress
      1312: operator: )
    1313: block: 
     1314: block_content: 
      1315: expr_stmt: 
       1316: expr: 
        1317: name: 
         1318: name: sps
         1319: operator: ->
         1320: name: bitsSliceSegmentAddress
        1321: operator: ++
   1322: expr_stmt: 
    1323: expr: 
     1324: name: 
      1325: name: sps
      1326: operator: ->
      1327: name: scaling_list_enable_flag
     1328: operator: =
     1329: call: 
      1330: name: gf_bs_read_int_log
      1331: argument_list: 
       1332: argument: 
        1333: expr: 
         1334: name: bs
       1335: argument: 
        1336: expr: 
         1337: literal: 1
       1338: argument: 
        1339: expr: 
         1340: literal: "scaling_list_enable_flag"
   1341: if_stmt: 
    1342: if: 
     1343: condition: 
      1344: expr: 
       1345: name: 
        1346: name: sps
        1347: operator: ->
        1348: name: scaling_list_enable_flag
     1349: block: 
      1350: block_content: 
       1351: expr_stmt: 
        1352: expr: 
         1353: name: 
          1354: name: sps
          1355: operator: ->
          1356: name: infer_scaling_list_flag
         1357: operator: =
         1358: literal: 0
       1359: expr_stmt: 
        1360: expr: 
         1361: name: 
          1362: name: sps
          1363: operator: ->
          1364: name: scaling_list_ref_layer_id
         1365: operator: =
         1366: literal: 0
       1367: if_stmt: 
        1368: if: 
         1369: condition: 
          1370: expr: 
           1371: name: multiLayerExtSpsFlag
         1372: block: 
          1373: block_content: 
           1374: expr_stmt: 
            1375: expr: 
             1376: name: 
              1377: name: sps
              1378: operator: ->
              1379: name: infer_scaling_list_flag
             1380: operator: =
             1381: call: 
              1382: name: gf_bs_read_int_log
              1383: argument_list: 
               1384: argument: 
                1385: expr: 
                 1386: name: bs
               1387: argument: 
                1388: expr: 
                 1389: literal: 1
               1390: argument: 
                1391: expr: 
                 1392: literal: "infer_scaling_list_flag"
       1393: if_stmt: 
        1394: if: 
         1395: condition: 
          1396: expr: 
           1397: name: 
            1398: name: sps
            1399: operator: ->
            1400: name: infer_scaling_list_flag
         1401: block: 
          1402: block_content: 
           1403: expr_stmt: 
            1404: expr: 
             1405: name: 
              1406: name: sps
              1407: operator: ->
              1408: name: scaling_list_ref_layer_id
             1409: operator: =
             1410: call: 
              1411: name: gf_bs_read_int_log
              1412: argument_list: 
               1413: argument: 
                1414: expr: 
                 1415: name: bs
               1416: argument: 
                1417: expr: 
                 1418: literal: 6
               1419: argument: 
                1420: expr: 
                 1421: literal: "scaling_list_ref_layer_id"
        1422: else: 
         1423: block: 
          1424: block_content: 
           1425: expr_stmt: 
            1426: expr: 
             1427: name: 
              1428: name: sps
              1429: operator: ->
              1430: name: scaling_list_data_present_flag
             1431: operator: =
             1432: call: 
              1433: name: gf_bs_read_int_log
              1434: argument_list: 
               1435: argument: 
                1436: expr: 
                 1437: name: bs
               1438: argument: 
                1439: expr: 
                 1440: literal: 1
               1441: argument: 
                1442: expr: 
                 1443: literal: "scaling_list_data_present_flag"
           1444: if_stmt: 
            1445: if: 
             1446: condition: 
              1447: expr: 
               1448: name: 
                1449: name: sps
                1450: operator: ->
                1451: name: scaling_list_data_present_flag
             1452: block: 
              1453: block_content: 
               1454: expr_stmt: 
                1455: expr: 
                 1456: call: 
                  1457: name: hevc_scaling_list_data
                  1458: argument_list: 
                   1459: argument: 
                    1460: expr: 
                     1461: name: bs
   1462: expr_stmt: 
    1463: expr: 
     1464: name: 
      1465: name: sps
      1466: operator: ->
      1467: name: asymmetric_motion_partitions_enabled_flag
     1468: operator: =
     1469: call: 
      1470: name: gf_bs_read_int_log
      1471: argument_list: 
       1472: argument: 
        1473: expr: 
         1474: name: bs
       1475: argument: 
        1476: expr: 
         1477: literal: 1
       1478: argument: 
        1479: expr: 
         1480: literal: "asymmetric_motion_partitions_enabled_flag"
   1481: expr_stmt: 
    1482: expr: 
     1483: name: 
      1484: name: sps
      1485: operator: ->
      1486: name: sample_adaptive_offset_enabled_flag
     1487: operator: =
     1488: call: 
      1489: name: gf_bs_read_int_log
      1490: argument_list: 
       1491: argument: 
        1492: expr: 
         1493: name: bs
       1494: argument: 
        1495: expr: 
         1496: literal: 1
       1497: argument: 
        1498: expr: 
         1499: literal: "sample_adaptive_offset_enabled_flag"
   1500: if_stmt: 
    1501: if: 
     1502: condition: 
      1503: expr: 
       1504: operator: (
       1505: name: 
        1506: name: sps
        1507: operator: ->
        1508: name: pcm_enabled_flag
       1509: operator: =
       1510: call: 
        1511: name: gf_bs_read_int_log
        1512: argument_list: 
         1513: argument: 
          1514: expr: 
           1515: name: bs
         1516: argument: 
          1517: expr: 
           1518: literal: 1
         1519: argument: 
          1520: expr: 
           1521: literal: "pcm_enabled_flag"
       1522: operator: )
     1523: block: 
      1524: block_content: 
       1525: expr_stmt: 
        1526: expr: 
         1527: name: 
          1528: name: sps
          1529: operator: ->
          1530: name: pcm_sample_bit_depth_luma_minus1
         1531: operator: =
         1532: call: 
          1533: name: gf_bs_read_int_log
          1534: argument_list: 
           1535: argument: 
            1536: expr: 
             1537: name: bs
           1538: argument: 
            1539: expr: 
             1540: literal: 4
           1541: argument: 
            1542: expr: 
             1543: literal: "pcm_sample_bit_depth_luma_minus1"
       1544: expr_stmt: 
        1545: expr: 
         1546: name: 
          1547: name: sps
          1548: operator: ->
          1549: name: pcm_sample_bit_depth_chroma_minus1
         1550: operator: =
         1551: call: 
          1552: name: gf_bs_read_int_log
          1553: argument_list: 
           1554: argument: 
            1555: expr: 
             1556: name: bs
           1557: argument: 
            1558: expr: 
             1559: literal: 4
           1560: argument: 
            1561: expr: 
             1562: literal: "pcm_sample_bit_depth_chroma_minus1"
       1563: expr_stmt: 
        1564: expr: 
         1565: name: 
          1566: name: sps
          1567: operator: ->
          1568: name: log2_min_pcm_luma_coding_block_size_minus3
         1569: operator: =
         1570: call: 
          1571: name: gf_bs_read_ue_log
          1572: argument_list: 
           1573: argument: 
            1574: expr: 
             1575: name: bs
           1576: argument: 
            1577: expr: 
             1578: literal: "log2_min_pcm_luma_coding_block_size_minus3"
       1579: expr_stmt: 
        1580: expr: 
         1581: name: 
          1582: name: sps
          1583: operator: ->
          1584: name: log2_diff_max_min_pcm_luma_coding_block_size
         1585: operator: =
         1586: call: 
          1587: name: gf_bs_read_ue_log
          1588: argument_list: 
           1589: argument: 
            1590: expr: 
             1591: name: bs
           1592: argument: 
            1593: expr: 
             1594: literal: "log2_diff_max_min_pcm_luma_coding_block_size"
       1595: expr_stmt: 
        1596: expr: 
         1597: name: 
          1598: name: sps
          1599: operator: ->
          1600: name: pcm_loop_filter_disable_flag
         1601: operator: =
         1602: call: 
          1603: name: gf_bs_read_int_log
          1604: argument_list: 
           1605: argument: 
            1606: expr: 
             1607: name: bs
           1608: argument: 
            1609: expr: 
             1610: literal: 1
           1611: argument: 
            1612: expr: 
             1613: literal: "pcm_loop_filter_disable_flag"
   1614: expr_stmt: 
    1615: expr: 
     1616: name: 
      1617: name: sps
      1618: operator: ->
      1619: name: num_short_term_ref_pic_sets
     1620: operator: =
     1621: call: 
      1622: name: gf_bs_read_ue_log
      1623: argument_list: 
       1624: argument: 
        1625: expr: 
         1626: name: bs
       1627: argument: 
        1628: expr: 
         1629: literal: "num_short_term_ref_pic_sets"
   1630: if_stmt: 
    1631: if: 
     1632: condition: 
      1633: expr: 
       1634: name: 
        1635: name: sps
        1636: operator: ->
        1637: name: num_short_term_ref_pic_sets
       1638: operator: >
       1639: literal: 64
     1640: block: 
      1641: block_content: 
       1642: expr_stmt: 
        1643: expr: 
         1644: call: 
          1645: name: GF_LOG
          1646: argument_list: 
           1647: argument: 
            1648: expr: 
             1649: name: GF_LOG_ERROR
           1650: argument: 
            1651: expr: 
             1652: name: GF_LOG_CODING
           1653: argument: 
            1654: expr: 
             1655: operator: (
             1656: literal: "[HEVC] Invalid number of short term reference picture sets %d\n"
             1657: operator: ,
             1658: name: 
              1659: name: sps
              1660: operator: ->
              1661: name: num_short_term_ref_pic_sets
             1662: operator: )
       1663: return: 
        1664: expr: 
         1665: operator: -
         1666: literal: 1
   1667: for: 
    1668: control: 
     1669: init: 
      1670: expr: 
       1671: name: i
       1672: operator: =
       1673: literal: 0
     1674: condition: 
      1675: expr: 
       1676: name: i
       1677: operator: <
       1678: name: 
        1679: name: sps
        1680: operator: ->
        1681: name: num_short_term_ref_pic_sets
     1682: incr: 
      1683: expr: 
       1684: name: i
       1685: operator: ++
    1686: block: 
     1687: block_content: 
      1688: decl_stmt: 
       1689: decl: 
        1690: type: 
         1691: name: Bool
        1692: name: ret
        1693: init: 
         1694: expr: 
          1695: call: 
           1696: name: hevc_parse_short_term_ref_pic_set
           1697: argument_list: 
            1698: argument: 
             1699: expr: 
              1700: name: bs
            1701: argument: 
             1702: expr: 
              1703: name: sps
            1704: argument: 
             1705: expr: 
              1706: name: i
      1707: comment: /*cannot parse short_term_ref_pic_set, skip VUI parsing*/
      1708: if_stmt: 
       1709: if: 
        1710: condition: 
         1711: expr: 
          1712: operator: !
          1713: name: ret
        1714: block: 
         1715: block_content: 
          1716: expr_stmt: 
           1717: expr: 
            1718: call: 
             1719: name: GF_LOG
             1720: argument_list: 
              1721: argument: 
               1722: expr: 
                1723: name: GF_LOG_ERROR
              1724: argument: 
               1725: expr: 
                1726: name: GF_LOG_CODING
              1727: argument: 
               1728: expr: 
                1729: operator: (
                1730: literal: "[HEVC] Invalid short_term_ref_pic_set\n"
                1731: operator: )
          1732: return: 
           1733: expr: 
            1734: operator: -
            1735: literal: 1
   1736: expr_stmt: 
    1737: expr: 
     1738: name: 
      1739: name: sps
      1740: operator: ->
      1741: name: long_term_ref_pics_present_flag
     1742: operator: =
     1743: call: 
      1744: name: gf_bs_read_int_log
      1745: argument_list: 
       1746: argument: 
        1747: expr: 
         1748: name: bs
       1749: argument: 
        1750: expr: 
         1751: literal: 1
       1752: argument: 
        1753: expr: 
         1754: literal: "long_term_ref_pics_present_flag"
   1755: if_stmt: 
    1756: if: 
     1757: condition: 
      1758: expr: 
       1759: name: 
        1760: name: sps
        1761: operator: ->
        1762: name: long_term_ref_pics_present_flag
     1763: block: 
      1764: block_content: 
       1765: expr_stmt: 
        1766: expr: 
         1767: name: 
          1768: name: sps
          1769: operator: ->
          1770: name: num_long_term_ref_pic_sps
         1771: operator: =
         1772: call: 
          1773: name: gf_bs_read_ue_log
          1774: argument_list: 
           1775: argument: 
            1776: expr: 
             1777: name: bs
           1778: argument: 
            1779: expr: 
             1780: literal: "num_long_term_ref_pic_sps"
       1781: for: 
        1782: control: 
         1783: init: 
          1784: expr: 
           1785: name: i
           1786: operator: =
           1787: literal: 0
         1788: condition: 
          1789: expr: 
           1790: name: i
           1791: operator: <
           1792: name: 
            1793: name: sps
            1794: operator: ->
            1795: name: num_long_term_ref_pic_sps
         1796: incr: 
          1797: expr: 
           1798: name: i
           1799: operator: ++
        1800: block: 
         1801: block_content: 
          1802: expr_stmt: 
           1803: expr: 
            1804: call: 
             1805: name: gf_bs_read_int_log_idx
             1806: argument_list: 
              1807: argument: 
               1808: expr: 
                1809: name: bs
              1810: argument: 
               1811: expr: 
                1812: name: 
                 1813: name: sps
                 1814: operator: ->
                 1815: name: log2_max_pic_order_cnt_lsb
              1816: argument: 
               1817: expr: 
                1818: literal: "lt_ref_pic_poc_lsb_sps"
              1819: argument: 
               1820: expr: 
                1821: name: i
          1822: expr_stmt: 
           1823: expr: 
            1824: call: 
             1825: name: gf_bs_read_int_log_idx
             1826: argument_list: 
              1827: argument: 
               1828: expr: 
                1829: name: bs
              1830: argument: 
               1831: expr: 
                1832: literal: 1
              1833: argument: 
               1834: expr: 
                1835: literal: "used_by_curr_pic_lt_sps_flag"
              1836: argument: 
               1837: expr: 
                1838: name: i
   1839: expr_stmt: 
    1840: expr: 
     1841: name: 
      1842: name: sps
      1843: operator: ->
      1844: name: temporal_mvp_enable_flag
     1845: operator: =
     1846: call: 
      1847: name: gf_bs_read_int_log
      1848: argument_list: 
       1849: argument: 
        1850: expr: 
         1851: name: bs
       1852: argument: 
        1853: expr: 
         1854: literal: 1
       1855: argument: 
        1856: expr: 
         1857: literal: "temporal_mvp_enable_flag"
   1858: expr_stmt: 
    1859: expr: 
     1860: name: 
      1861: name: sps
      1862: operator: ->
      1863: name: strong_intra_smoothing_enable_flag
     1864: operator: =
     1865: call: 
      1866: name: gf_bs_read_int_log
      1867: argument_list: 
       1868: argument: 
        1869: expr: 
         1870: name: bs
       1871: argument: 
        1872: expr: 
         1873: literal: 1
       1874: argument: 
        1875: expr: 
         1876: literal: "strong_intra_smoothing_enable_flag"
   1877: if_stmt: 
    1878: if: 
     1879: condition: 
      1880: expr: 
       1881: name: vui_flag_pos
     1882: block: 
      1883: block_content: 
       1884: expr_stmt: 
        1885: expr: 
         1886: operator: *
         1887: name: vui_flag_pos
         1888: operator: =
         1889: operator: (
         1890: name: u32
         1891: operator: )
         1892: call: 
          1893: name: gf_bs_get_bit_offset
          1894: argument_list: 
           1895: argument: 
            1896: expr: 
             1897: name: bs
   1898: if_stmt: 
    1899: if: 
     1900: condition: 
      1901: expr: 
       1902: operator: (
       1903: name: 
        1904: name: sps
        1905: operator: ->
        1906: name: vui_parameters_present_flag
       1907: operator: =
       1908: call: 
        1909: name: gf_bs_read_int_log
        1910: argument_list: 
         1911: argument: 
          1912: expr: 
           1913: name: bs
         1914: argument: 
          1915: expr: 
           1916: literal: 1
         1917: argument: 
          1918: expr: 
           1919: literal: "vui_parameters_present_flag"
       1920: operator: )
     1921: block: 
      1922: block_content: 
       1923: expr_stmt: 
        1924: expr: 
         1925: name: 
          1926: name: sps
          1927: operator: ->
          1928: name: aspect_ratio_info_present_flag
         1929: operator: =
         1930: call: 
          1931: name: gf_bs_read_int_log
          1932: argument_list: 
           1933: argument: 
            1934: expr: 
             1935: name: bs
           1936: argument: 
            1937: expr: 
             1938: literal: 1
           1939: argument: 
            1940: expr: 
             1941: literal: "aspect_ratio_info_present_flag"
       1942: if_stmt: 
        1943: if: 
         1944: condition: 
          1945: expr: 
           1946: name: 
            1947: name: sps
            1948: operator: ->
            1949: name: aspect_ratio_info_present_flag
         1950: block: 
          1951: block_content: 
           1952: expr_stmt: 
            1953: expr: 
             1954: name: 
              1955: name: sps
              1956: operator: ->
              1957: name: sar_idc
             1958: operator: =
             1959: call: 
              1960: name: gf_bs_read_int_log
              1961: argument_list: 
               1962: argument: 
                1963: expr: 
                 1964: name: bs
               1965: argument: 
                1966: expr: 
                 1967: literal: 8
               1968: argument: 
                1969: expr: 
                 1970: literal: "aspect_ratio_idc"
           1971: if_stmt: 
            1972: if: 
             1973: condition: 
              1974: expr: 
               1975: name: 
                1976: name: sps
                1977: operator: ->
                1978: name: sar_idc
               1979: operator: ==
               1980: literal: 255
             1981: block: 
              1982: block_content: 
               1983: expr_stmt: 
                1984: expr: 
                 1985: name: 
                  1986: name: sps
                  1987: operator: ->
                  1988: name: sar_width
                 1989: operator: =
                 1990: call: 
                  1991: name: gf_bs_read_int_log
                  1992: argument_list: 
                   1993: argument: 
                    1994: expr: 
                     1995: name: bs
                   1996: argument: 
                    1997: expr: 
                     1998: literal: 16
                   1999: argument: 
                    2000: expr: 
                     2001: literal: "aspect_ratio_width"
               2002: expr_stmt: 
                2003: expr: 
                 2004: name: 
                  2005: name: sps
                  2006: operator: ->
                  2007: name: sar_height
                 2008: operator: =
                 2009: call: 
                  2010: name: gf_bs_read_int_log
                  2011: argument_list: 
                   2012: argument: 
                    2013: expr: 
                     2014: name: bs
                   2015: argument: 
                    2016: expr: 
                     2017: literal: 16
                   2018: argument: 
                    2019: expr: 
                     2020: literal: "aspect_ratio_height"
            2021: if: 
             2022: condition: 
              2023: expr: 
               2024: name: 
                2025: name: sps
                2026: operator: ->
                2027: name: sar_idc
               2028: operator: <
               2029: literal: 17
             2030: block: 
              2031: block_content: 
               2032: expr_stmt: 
                2033: expr: 
                 2034: name: 
                  2035: name: sps
                  2036: operator: ->
                  2037: name: sar_width
                 2038: operator: =
                 2039: name: 
                  2040: name: hevc_sar
                  2041: index: 
                   2042: expr: 
                    2043: name: 
                     2044: name: sps
                     2045: operator: ->
                     2046: name: sar_idc
                 2047: operator: .
                 2048: name: w
               2049: expr_stmt: 
                2050: expr: 
                 2051: name: 
                  2052: name: sps
                  2053: operator: ->
                  2054: name: sar_height
                 2055: operator: =
                 2056: name: 
                  2057: name: hevc_sar
                  2058: index: 
                   2059: expr: 
                    2060: name: 
                     2061: name: sps
                     2062: operator: ->
                     2063: name: sar_idc
                 2064: operator: .
                 2065: name: h
       2066: if_stmt: 
        2067: if: 
         2068: condition: 
          2069: expr: 
           2070: operator: (
           2071: name: 
            2072: name: sps
            2073: operator: ->
            2074: name: overscan_info_present
           2075: operator: =
           2076: call: 
            2077: name: gf_bs_read_int_log
            2078: argument_list: 
             2079: argument: 
              2080: expr: 
               2081: name: bs
             2082: argument: 
              2083: expr: 
               2084: literal: 1
             2085: argument: 
              2086: expr: 
               2087: literal: "overscan_info_present"
           2088: operator: )
         2089: block: 
          2090: block_content: 
           2091: expr_stmt: 
            2092: expr: 
             2093: name: 
              2094: name: sps
              2095: operator: ->
              2096: name: overscan_appropriate
             2097: operator: =
             2098: call: 
              2099: name: gf_bs_read_int_log
              2100: argument_list: 
               2101: argument: 
                2102: expr: 
                 2103: name: bs
               2104: argument: 
                2105: expr: 
                 2106: literal: 1
               2107: argument: 
                2108: expr: 
                 2109: literal: "overscan_appropriate"
       2110: expr_stmt: 
        2111: expr: 
         2112: name: 
          2113: name: sps
          2114: operator: ->
          2115: name: video_signal_type_present_flag
         2116: operator: =
         2117: call: 
          2118: name: gf_bs_read_int_log
          2119: argument_list: 
           2120: argument: 
            2121: expr: 
             2122: name: bs
           2123: argument: 
            2124: expr: 
             2125: literal: 1
           2126: argument: 
            2127: expr: 
             2128: literal: "video_signal_type_present_flag"
       2129: if_stmt: 
        2130: if: 
         2131: condition: 
          2132: expr: 
           2133: name: 
            2134: name: sps
            2135: operator: ->
            2136: name: video_signal_type_present_flag
         2137: block: 
          2138: block_content: 
           2139: expr_stmt: 
            2140: expr: 
             2141: name: 
              2142: name: sps
              2143: operator: ->
              2144: name: video_format
             2145: operator: =
             2146: call: 
              2147: name: gf_bs_read_int_log
              2148: argument_list: 
               2149: argument: 
                2150: expr: 
                 2151: name: bs
               2152: argument: 
                2153: expr: 
                 2154: literal: 3
               2155: argument: 
                2156: expr: 
                 2157: literal: "video_format"
           2158: expr_stmt: 
            2159: expr: 
             2160: name: 
              2161: name: sps
              2162: operator: ->
              2163: name: video_full_range_flag
             2164: operator: =
             2165: call: 
              2166: name: gf_bs_read_int_log
              2167: argument_list: 
               2168: argument: 
                2169: expr: 
                 2170: name: bs
               2171: argument: 
                2172: expr: 
                 2173: literal: 1
               2174: argument: 
                2175: expr: 
                 2176: literal: "video_full_range_flag"
           2177: if_stmt: 
            2178: if: 
             2179: condition: 
              2180: expr: 
               2181: operator: (
               2182: name: 
                2183: name: sps
                2184: operator: ->
                2185: name: colour_description_present_flag
               2186: operator: =
               2187: call: 
                2188: name: gf_bs_read_int_log
                2189: argument_list: 
                 2190: argument: 
                  2191: expr: 
                   2192: name: bs
                 2193: argument: 
                  2194: expr: 
                   2195: literal: 1
                 2196: argument: 
                  2197: expr: 
                   2198: literal: "colour_description_present_flag"
               2199: operator: )
             2200: block: 
              2201: block_content: 
               2202: expr_stmt: 
                2203: expr: 
                 2204: name: 
                  2205: name: sps
                  2206: operator: ->
                  2207: name: colour_primaries
                 2208: operator: =
                 2209: call: 
                  2210: name: gf_bs_read_int_log
                  2211: argument_list: 
                   2212: argument: 
                    2213: expr: 
                     2214: name: bs
                   2215: argument: 
                    2216: expr: 
                     2217: literal: 8
                   2218: argument: 
                    2219: expr: 
                     2220: literal: "colour_primaries"
               2221: expr_stmt: 
                2222: expr: 
                 2223: name: 
                  2224: name: sps
                  2225: operator: ->
                  2226: name: transfer_characteristic
                 2227: operator: =
                 2228: call: 
                  2229: name: gf_bs_read_int_log
                  2230: argument_list: 
                   2231: argument: 
                    2232: expr: 
                     2233: name: bs
                   2234: argument: 
                    2235: expr: 
                     2236: literal: 8
                   2237: argument: 
                    2238: expr: 
                     2239: literal: "transfer_characteristic"
               2240: expr_stmt: 
                2241: expr: 
                 2242: name: 
                  2243: name: sps
                  2244: operator: ->
                  2245: name: matrix_coeffs
                 2246: operator: =
                 2247: call: 
                  2248: name: gf_bs_read_int_log
                  2249: argument_list: 
                   2250: argument: 
                    2251: expr: 
                     2252: name: bs
                   2253: argument: 
                    2254: expr: 
                     2255: literal: 8
                   2256: argument: 
                    2257: expr: 
                     2258: literal: "matrix_coefficients"
       2259: if_stmt: 
        2260: if: 
         2261: condition: 
          2262: expr: 
           2263: operator: (
           2264: name: 
            2265: name: sps
            2266: operator: ->
            2267: name: chroma_loc_info_present_flag
           2268: operator: =
           2269: call: 
            2270: name: gf_bs_read_int_log
            2271: argument_list: 
             2272: argument: 
              2273: expr: 
               2274: name: bs
             2275: argument: 
              2276: expr: 
               2277: literal: 1
             2278: argument: 
              2279: expr: 
               2280: literal: "chroma_loc_info_present_flag"
           2281: operator: )
         2282: block: 
          2283: block_content: 
           2284: expr_stmt: 
            2285: expr: 
             2286: name: 
              2287: name: sps
              2288: operator: ->
              2289: name: chroma_sample_loc_type_top_field
             2290: operator: =
             2291: call: 
              2292: name: gf_bs_read_ue_log
              2293: argument_list: 
               2294: argument: 
                2295: expr: 
                 2296: name: bs
               2297: argument: 
                2298: expr: 
                 2299: literal: "chroma_sample_loc_type_top_field"
           2300: expr_stmt: 
            2301: expr: 
             2302: name: 
              2303: name: sps
              2304: operator: ->
              2305: name: chroma_sample_loc_type_bottom_field
             2306: operator: =
             2307: call: 
              2308: name: gf_bs_read_ue_log
              2309: argument_list: 
               2310: argument: 
                2311: expr: 
                 2312: name: bs
               2313: argument: 
                2314: expr: 
                 2315: literal: "chroma_sample_loc_type_bottom_field"
       2316: expr_stmt: 
        2317: expr: 
         2318: name: 
          2319: name: sps
          2320: operator: ->
          2321: name: neutra_chroma_indication_flag
         2322: operator: =
         2323: call: 
          2324: name: gf_bs_read_int_log
          2325: argument_list: 
           2326: argument: 
            2327: expr: 
             2328: name: bs
           2329: argument: 
            2330: expr: 
             2331: literal: 1
           2332: argument: 
            2333: expr: 
             2334: literal: "neutra_chroma_indication_flag"
       2335: expr_stmt: 
        2336: expr: 
         2337: name: 
          2338: name: sps
          2339: operator: ->
          2340: name: field_seq_flag
         2341: operator: =
         2342: call: 
          2343: name: gf_bs_read_int_log
          2344: argument_list: 
           2345: argument: 
            2346: expr: 
             2347: name: bs
           2348: argument: 
            2349: expr: 
             2350: literal: 1
           2351: argument: 
            2352: expr: 
             2353: literal: "field_seq_flag"
       2354: expr_stmt: 
        2355: expr: 
         2356: name: 
          2357: name: sps
          2358: operator: ->
          2359: name: frame_field_info_present_flag
         2360: operator: =
         2361: call: 
          2362: name: gf_bs_read_int_log
          2363: argument_list: 
           2364: argument: 
            2365: expr: 
             2366: name: bs
           2367: argument: 
            2368: expr: 
             2369: literal: 1
           2370: argument: 
            2371: expr: 
             2372: literal: "frame_field_info_present_flag"
       2373: if_stmt: 
        2374: if: 
         2375: condition: 
          2376: expr: 
           2377: operator: (
           2378: name: 
            2379: name: sps
            2380: operator: ->
            2381: name: default_display_window_flag
           2382: operator: =
           2383: call: 
            2384: name: gf_bs_read_int_log
            2385: argument_list: 
             2386: argument: 
              2387: expr: 
               2388: name: bs
             2389: argument: 
              2390: expr: 
               2391: literal: 1
             2392: argument: 
              2393: expr: 
               2394: literal: "default_display_window_flag"
           2395: operator: )
         2396: block: 
          2397: block_content: 
           2398: expr_stmt: 
            2399: expr: 
             2400: name: 
              2401: name: sps
              2402: operator: ->
              2403: name: left_offset
             2404: operator: =
             2405: call: 
              2406: name: gf_bs_read_ue_log
              2407: argument_list: 
               2408: argument: 
                2409: expr: 
                 2410: name: bs
               2411: argument: 
                2412: expr: 
                 2413: literal: "display_window_left_offset"
           2414: expr_stmt: 
            2415: expr: 
             2416: name: 
              2417: name: sps
              2418: operator: ->
              2419: name: right_offset
             2420: operator: =
             2421: call: 
              2422: name: gf_bs_read_ue_log
              2423: argument_list: 
               2424: argument: 
                2425: expr: 
                 2426: name: bs
               2427: argument: 
                2428: expr: 
                 2429: literal: "display_window_right_offset"
           2430: expr_stmt: 
            2431: expr: 
             2432: name: 
              2433: name: sps
              2434: operator: ->
              2435: name: top_offset
             2436: operator: =
             2437: call: 
              2438: name: gf_bs_read_ue_log
              2439: argument_list: 
               2440: argument: 
                2441: expr: 
                 2442: name: bs
               2443: argument: 
                2444: expr: 
                 2445: literal: "display_window_top_offset"
           2446: expr_stmt: 
            2447: expr: 
             2448: name: 
              2449: name: sps
              2450: operator: ->
              2451: name: bottom_offset
             2452: operator: =
             2453: call: 
              2454: name: gf_bs_read_ue_log
              2455: argument_list: 
               2456: argument: 
                2457: expr: 
                 2458: name: bs
               2459: argument: 
                2460: expr: 
                 2461: literal: "display_window_bottom_offset"
       2462: expr_stmt: 
        2463: expr: 
         2464: name: 
          2465: name: sps
          2466: operator: ->
          2467: name: has_timing_info
         2468: operator: =
         2469: call: 
          2470: name: gf_bs_read_int_log
          2471: argument_list: 
           2472: argument: 
            2473: expr: 
             2474: name: bs
           2475: argument: 
            2476: expr: 
             2477: literal: 1
           2478: argument: 
            2479: expr: 
             2480: literal: "has_timing_info"
       2481: if_stmt: 
        2482: if: 
         2483: condition: 
          2484: expr: 
           2485: name: 
            2486: name: sps
            2487: operator: ->
            2488: name: has_timing_info
         2489: block: 
          2490: block_content: 
           2491: expr_stmt: 
            2492: expr: 
             2493: name: 
              2494: name: sps
              2495: operator: ->
              2496: name: num_units_in_tick
             2497: operator: =
             2498: call: 
              2499: name: gf_bs_read_int_log
              2500: argument_list: 
               2501: argument: 
                2502: expr: 
                 2503: name: bs
               2504: argument: 
                2505: expr: 
                 2506: literal: 32
               2507: argument: 
                2508: expr: 
                 2509: literal: "num_units_in_tick"
           2510: expr_stmt: 
            2511: expr: 
             2512: name: 
              2513: name: sps
              2514: operator: ->
              2515: name: time_scale
             2516: operator: =
             2517: call: 
              2518: name: gf_bs_read_int_log
              2519: argument_list: 
               2520: argument: 
                2521: expr: 
                 2522: name: bs
               2523: argument: 
                2524: expr: 
                 2525: literal: 32
               2526: argument: 
                2527: expr: 
                 2528: literal: "time_scale"
           2529: expr_stmt: 
            2530: expr: 
             2531: name: 
              2532: name: sps
              2533: operator: ->
              2534: name: poc_proportional_to_timing_flag
             2535: operator: =
             2536: call: 
              2537: name: gf_bs_read_int_log
              2538: argument_list: 
               2539: argument: 
                2540: expr: 
                 2541: name: bs
               2542: argument: 
                2543: expr: 
                 2544: literal: 1
               2545: argument: 
                2546: expr: 
                 2547: literal: "poc_proportional_to_timing_flag"
           2548: if_stmt: 
            2549: if: 
             2550: condition: 
              2551: expr: 
               2552: name: 
                2553: name: sps
                2554: operator: ->
                2555: name: poc_proportional_to_timing_flag
             2556: block: 
              2557: block_content: 
               2558: expr_stmt: 
                2559: expr: 
                 2560: name: 
                  2561: name: sps
                  2562: operator: ->
                  2563: name: num_ticks_poc_diff_one_minus1
                 2564: operator: =
                 2565: call: 
                  2566: name: gf_bs_read_ue_log
                  2567: argument_list: 
                   2568: argument: 
                    2569: expr: 
                     2570: name: bs
                   2571: argument: 
                    2572: expr: 
                     2573: literal: "num_ticks_poc_diff_one_minus1"
           2574: if_stmt: 
            2575: if: 
             2576: condition: 
              2577: expr: 
               2578: operator: (
               2579: name: 
                2580: name: sps
                2581: operator: ->
                2582: name: hrd_parameters_present_flag
               2583: operator: =
               2584: call: 
                2585: name: gf_bs_read_int_log
                2586: argument_list: 
                 2587: argument: 
                  2588: expr: 
                   2589: name: bs
                 2590: argument: 
                  2591: expr: 
                   2592: literal: 1
                 2593: argument: 
                  2594: expr: 
                   2595: literal: "hrd_parameters_present_flag"
               2596: operator: )
             2597: block: 
              2598: block_content: 
               2599: comment: //				GF_LOG(GF_LOG_INFO, GF_LOG_CODING, ("[HEVC] HRD param parsing not implemented\n"));
               2600: return: 
                2601: expr: 
                 2602: name: sps_id
       2603: if_stmt: 
        2604: if: 
         2605: condition: 
          2606: expr: 
           2607: call: 
            2608: name: gf_bs_read_int_log
            2609: argument_list: 
             2610: argument: 
              2611: expr: 
               2612: name: bs
             2613: argument: 
              2614: expr: 
               2615: literal: 1
             2616: argument: 
              2617: expr: 
               2618: literal: "bitstream_restriction_flag"
         2619: block: 
          2620: block_content: 
           2621: expr_stmt: 
            2622: expr: 
             2623: call: 
              2624: name: gf_bs_read_int_log
              2625: argument_list: 
               2626: argument: 
                2627: expr: 
                 2628: name: bs
               2629: argument: 
                2630: expr: 
                 2631: literal: 1
               2632: argument: 
                2633: expr: 
                 2634: literal: "tiles_fixed_structure_flag"
           2635: expr_stmt: 
            2636: expr: 
             2637: call: 
              2638: name: gf_bs_read_int_log
              2639: argument_list: 
               2640: argument: 
                2641: expr: 
                 2642: name: bs
               2643: argument: 
                2644: expr: 
                 2645: literal: 1
               2646: argument: 
                2647: expr: 
                 2648: literal: "motion_vectors_over_pic_boundaries_flag"
           2649: expr_stmt: 
            2650: expr: 
             2651: call: 
              2652: name: gf_bs_read_int_log
              2653: argument_list: 
               2654: argument: 
                2655: expr: 
                 2656: name: bs
               2657: argument: 
                2658: expr: 
                 2659: literal: 1
               2660: argument: 
                2661: expr: 
                 2662: literal: "restricted_ref_pic_lists_flag"
           2663: expr_stmt: 
            2664: expr: 
             2665: call: 
              2666: name: gf_bs_read_ue_log
              2667: argument_list: 
               2668: argument: 
                2669: expr: 
                 2670: name: bs
               2671: argument: 
                2672: expr: 
                 2673: literal: "min_spatial_segmentation_idc"
           2674: expr_stmt: 
            2675: expr: 
             2676: call: 
              2677: name: gf_bs_read_ue_log
              2678: argument_list: 
               2679: argument: 
                2680: expr: 
                 2681: name: bs
               2682: argument: 
                2683: expr: 
                 2684: literal: "max_bytes_per_pic_denom"
           2685: expr_stmt: 
            2686: expr: 
             2687: call: 
              2688: name: gf_bs_read_ue_log
              2689: argument_list: 
               2690: argument: 
                2691: expr: 
                 2692: name: bs
               2693: argument: 
                2694: expr: 
                 2695: literal: "max_bits_per_min_cu_denom"
           2696: expr_stmt: 
            2697: expr: 
             2698: call: 
              2699: name: gf_bs_read_ue_log
              2700: argument_list: 
               2701: argument: 
                2702: expr: 
                 2703: name: bs
               2704: argument: 
                2705: expr: 
                 2706: literal: "log2_max_mv_length_horizontal"
           2707: expr_stmt: 
            2708: expr: 
             2709: call: 
              2710: name: gf_bs_read_ue_log
              2711: argument_list: 
               2712: argument: 
                2713: expr: 
                 2714: name: bs
               2715: argument: 
                2716: expr: 
                 2717: literal: "log2_max_mv_length_vertical"
   2718: if_stmt: 
    2719: if: 
     2720: condition: 
      2721: expr: 
       2722: call: 
        2723: name: gf_bs_read_int_log
        2724: argument_list: 
         2725: argument: 
          2726: expr: 
           2727: name: bs
         2728: argument: 
          2729: expr: 
           2730: literal: 1
         2731: argument: 
          2732: expr: 
           2733: literal: "sps_extension_flag"
     2734: block: 
      2735: block_content: 
       2736: if: 
        2737: directive: if
        2738: expr: 
         2739: literal: 0
       2740: comment: /*sps_extension_data_flag */
       2741: endif: 
        2742: directive: endif
   2743: return: 
    2744: expr: 
     2745: name: sps_id
=====
0: name: gf_hevc_read_sps_bs_internal

----------------------------------------
=====
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: s32
    6: name: vps_id
   7: decl: 
    8: type: 
    9: name: sps_id
    10: init: 
     11: expr: 
      12: operator: -
      13: literal: 1
  14: decl_stmt: 
   15: decl: 
    16: type: 
     17: name: u32
    18: name: i
   19: decl: 
    20: type: 
    21: name: nb_CTUs
   22: decl: 
    23: type: 
    24: name: depth
  25: decl_stmt: 
   26: decl: 
    27: type: 
     28: name: HEVC_SPS
     29: modifier: *
    30: name: sps
  31: decl_stmt: 
   32: decl: 
    33: type: 
     34: name: HEVC_VPS
     35: modifier: *
    36: name: vps
  37: decl_stmt: 
   38: decl: 
    39: type: 
     40: name: HEVC_ProfileTierLevel
    41: name: ptl
  42: decl_stmt: 
   43: decl: 
    44: type: 
     45: name: Bool
    46: name: multiLayerExtSpsFlag
  47: decl_stmt: 
   48: decl: 
    49: type: 
     50: name: u8
    51: name: sps_ext_or_max_sub_layers_minus1
   52: decl: 
    53: type: 
    54: name: max_sub_layers_minus1
  55: if_stmt: 
   56: if: 
    57: condition: 
     58: expr: 
      59: name: vui_flag_pos
    60: block: 
     61: block_content: 
      62: expr_stmt: 
       63: expr: 
        64: operator: *
        65: name: vui_flag_pos
        66: operator: =
        67: literal: 0
  68: comment: //nalu header already parsed
  69: expr_stmt: 
   70: expr: 
    71: name: vps_id
    72: operator: =
    73: call: 
     74: name: gf_bs_read_int_log
     75: argument_list: 
      76: argument: 
       77: expr: 
        78: name: bs
      79: argument: 
       80: expr: 
        81: literal: 4
      82: argument: 
       83: expr: 
        84: literal: "vps_id"
  85: if_stmt: 
   86: if: 
    87: condition: 
     88: expr: 
      89: name: vps_id
      90: operator: >=
      91: literal: 16
    92: block: 
     93: block_content: 
      94: return: 
       95: expr: 
        96: operator: -
        97: literal: 1
  98: expr_stmt: 
   99: expr: 
    100: call: 
     101: name: memset
     102: argument_list: 
      103: argument: 
       104: expr: 
        105: operator: &
        106: name: ptl
      107: argument: 
       108: expr: 
        109: literal: 0
      110: argument: 
       111: expr: 
        112: sizeof: 
         113: argument_list: 
          114: argument: 
           115: expr: 
            116: name: ptl
  117: expr_stmt: 
   118: expr: 
    119: name: max_sub_layers_minus1
    120: operator: =
    121: literal: 0
  122: expr_stmt: 
   123: expr: 
    124: name: sps_ext_or_max_sub_layers_minus1
    125: operator: =
    126: literal: 0
  127: if_stmt: 
   128: if: 
    129: condition: 
     130: expr: 
      131: name: layer_id
      132: operator: ==
      133: literal: 0
    134: block: 
     135: block_content: 
      136: expr_stmt: 
       137: expr: 
        138: name: max_sub_layers_minus1
        139: operator: =
        140: call: 
         141: name: gf_bs_read_int_log
         142: argument_list: 
          143: argument: 
           144: expr: 
            145: name: bs
          146: argument: 
           147: expr: 
            148: literal: 3
          149: argument: 
           150: expr: 
            151: literal: "max_sub_layers_minus1"
   152: else: 
    153: block: 
     154: block_content: 
      155: expr_stmt: 
       156: expr: 
        157: name: sps_ext_or_max_sub_layers_minus1
        158: operator: =
        159: call: 
         160: name: gf_bs_read_int_log
         161: argument_list: 
          162: argument: 
           163: expr: 
            164: name: bs
          165: argument: 
           166: expr: 
            167: literal: 3
          168: argument: 
           169: expr: 
            170: literal: "sps_ext_or_max_sub_layers_minus1"
  171: expr_stmt: 
   172: expr: 
    173: name: multiLayerExtSpsFlag
    174: operator: =
    175: operator: (
    176: name: layer_id
    177: operator: !=
    178: literal: 0
    179: operator: )
    180: operator: &&
    181: operator: (
    182: name: sps_ext_or_max_sub_layers_minus1
    183: operator: ==
    184: literal: 7
    185: operator: )
  186: if_stmt: 
   187: if: 
    188: condition: 
     189: expr: 
      190: operator: !
      191: name: multiLayerExtSpsFlag
    192: block: 
     193: block_content: 
      194: expr_stmt: 
       195: expr: 
        196: call: 
         197: name: gf_bs_read_int_log
         198: argument_list: 
          199: argument: 
           200: expr: 
            201: name: bs
          202: argument: 
           203: expr: 
            204: literal: 1
          205: argument: 
           206: expr: 
            207: literal: "temporal_id_nesting_flag"
      208: expr_stmt: 
       209: expr: 
        210: call: 
         211: name: hevc_profile_tier_level
         212: argument_list: 
          213: argument: 
           214: expr: 
            215: name: bs
          216: argument: 
           217: expr: 
            218: literal: 1
          219: argument: 
           220: expr: 
            221: name: max_sub_layers_minus1
          222: argument: 
           223: expr: 
            224: operator: &
            225: name: ptl
          226: argument: 
           227: expr: 
            228: literal: 0
  229: expr_stmt: 
   230: expr: 
    231: name: sps_id
    232: operator: =
    233: call: 
     234: name: gf_bs_read_ue_log
     235: argument_list: 
      236: argument: 
       237: expr: 
        238: name: bs
      239: argument: 
       240: expr: 
        241: literal: "sps_id"
  242: if_stmt: 
   243: if: 
    244: condition: 
     245: expr: 
      246: operator: (
      247: name: sps_id
      248: operator: <
      249: literal: 0
      250: operator: )
      251: operator: ||
      252: operator: (
      253: name: sps_id
      254: operator: >=
      255: literal: 16
      256: operator: )
    257: block: 
     258: block_content: 
      259: return: 
       260: expr: 
        261: operator: -
        262: literal: 1
  263: expr_stmt: 
   264: expr: 
    265: name: sps
    266: operator: =
    267: operator: &
    268: name: 
     269: name: hevc
     270: operator: ->
     271: name: sps
     272: index: 
      273: expr: 
       274: name: sps_id
  275: if_stmt: 
   276: if: 
    277: condition: 
     278: expr: 
      279: operator: !
      280: name: 
       281: name: sps
       282: operator: ->
       283: name: state
    284: block: 
     285: block_content: 
      286: expr_stmt: 
       287: expr: 
        288: name: 
         289: name: sps
         290: operator: ->
         291: name: state
        292: operator: =
        293: literal: 1
      294: expr_stmt: 
       295: expr: 
        296: name: 
         297: name: sps
         298: operator: ->
         299: name: id
        300: operator: =
        301: name: sps_id
      302: expr_stmt: 
       303: expr: 
        304: name: 
         305: name: sps
         306: operator: ->
         307: name: vps_id
        308: operator: =
        309: name: vps_id
  310: expr_stmt: 
   311: expr: 
    312: name: 
     313: name: sps
     314: operator: ->
     315: name: ptl
    316: operator: =
    317: name: ptl
  318: expr_stmt: 
   319: expr: 
    320: name: vps
    321: operator: =
    322: operator: &
    323: name: 
     324: name: hevc
     325: operator: ->
     326: name: vps
     327: index: 
      328: expr: 
       329: name: vps_id
  330: expr_stmt: 
   331: expr: 
    332: name: 
     333: name: sps
     334: operator: ->
     335: name: max_sub_layers_minus1
    336: operator: =
    337: literal: 0
  338: expr_stmt: 
   339: expr: 
    340: name: 
     341: name: sps
     342: operator: ->
     343: name: sps_ext_or_max_sub_layers_minus1
    344: operator: =
    345: literal: 0
  346: comment: /* default values */
  347: expr_stmt: 
   348: expr: 
    349: name: 
     350: name: sps
     351: operator: ->
     352: name: colour_primaries
    353: operator: =
    354: literal: 2
  355: expr_stmt: 
   356: expr: 
    357: name: 
     358: name: sps
     359: operator: ->
     360: name: transfer_characteristic
    361: operator: =
    362: literal: 2
  363: expr_stmt: 
   364: expr: 
    365: name: 
     366: name: sps
     367: operator: ->
     368: name: matrix_coeffs
    369: operator: =
    370: literal: 2
  371: comment: //sps_rep_format_idx = 0;
  372: if_stmt: 
   373: if: 
    374: condition: 
     375: expr: 
      376: name: multiLayerExtSpsFlag
    377: block: 
     378: block_content: 
      379: expr_stmt: 
       380: expr: 
        381: name: 
         382: name: sps
         383: operator: ->
         384: name: update_rep_format_flag
        385: operator: =
        386: call: 
         387: name: gf_bs_read_int_log
         388: argument_list: 
          389: argument: 
           390: expr: 
            391: name: bs
          392: argument: 
           393: expr: 
            394: literal: 1
          395: argument: 
           396: expr: 
            397: literal: "update_rep_format_flag"
      398: if_stmt: 
       399: if: 
        400: condition: 
         401: expr: 
          402: name: 
           403: name: sps
           404: operator: ->
           405: name: update_rep_format_flag
        406: block: 
         407: block_content: 
          408: expr_stmt: 
           409: expr: 
            410: name: 
             411: name: sps
             412: operator: ->
             413: name: rep_format_idx
            414: operator: =
            415: call: 
             416: name: gf_bs_read_int_log
             417: argument_list: 
              418: argument: 
               419: expr: 
                420: name: bs
              421: argument: 
               422: expr: 
                423: literal: 8
              424: argument: 
               425: expr: 
                426: literal: "rep_format_idx"
       427: else: 
        428: block: 
         429: block_content: 
          430: expr_stmt: 
           431: expr: 
            432: name: 
             433: name: sps
             434: operator: ->
             435: name: rep_format_idx
            436: operator: =
            437: name: 
             438: name: vps
             439: operator: ->
             440: name: rep_format_idx
             441: index: 
              442: expr: 
               443: name: layer_id
      444: expr_stmt: 
       445: expr: 
        446: name: 
         447: name: sps
         448: operator: ->
         449: name: width
        450: operator: =
        451: name: 
         452: name: vps
         453: operator: ->
         454: name: rep_formats
         455: index: 
          456: expr: 
           457: name: 
            458: name: sps
            459: operator: ->
            460: name: rep_format_idx
        461: operator: .
        462: name: pic_width_luma_samples
      463: expr_stmt: 
       464: expr: 
        465: name: 
         466: name: sps
         467: operator: ->
         468: name: height
        469: operator: =
        470: name: 
         471: name: vps
         472: operator: ->
         473: name: rep_formats
         474: index: 
          475: expr: 
           476: name: 
            477: name: sps
            478: operator: ->
            479: name: rep_format_idx
        480: operator: .
        481: name: pic_height_luma_samples
      482: expr_stmt: 
       483: expr: 
        484: name: 
         485: name: sps
         486: operator: ->
         487: name: chroma_format_idc
        488: operator: =
        489: name: 
         490: name: vps
         491: operator: ->
         492: name: rep_formats
         493: index: 
          494: expr: 
           495: name: 
            496: name: sps
            497: operator: ->
            498: name: rep_format_idx
        499: operator: .
        500: name: chroma_format_idc
      501: expr_stmt: 
       502: expr: 
        503: name: 
         504: name: sps
         505: operator: ->
         506: name: bit_depth_luma
        507: operator: =
        508: name: 
         509: name: vps
         510: operator: ->
         511: name: rep_formats
         512: index: 
          513: expr: 
           514: name: 
            515: name: sps
            516: operator: ->
            517: name: rep_format_idx
        518: operator: .
        519: name: bit_depth_luma
      520: expr_stmt: 
       521: expr: 
        522: name: 
         523: name: sps
         524: operator: ->
         525: name: bit_depth_chroma
        526: operator: =
        527: name: 
         528: name: vps
         529: operator: ->
         530: name: rep_formats
         531: index: 
          532: expr: 
           533: name: 
            534: name: sps
            535: operator: ->
            536: name: rep_format_idx
        537: operator: .
        538: name: bit_depth_chroma
      539: expr_stmt: 
       540: expr: 
        541: name: 
         542: name: sps
         543: operator: ->
         544: name: separate_colour_plane_flag
        545: operator: =
        546: name: 
         547: name: vps
         548: operator: ->
         549: name: rep_formats
         550: index: 
          551: expr: 
           552: name: 
            553: name: sps
            554: operator: ->
            555: name: rep_format_idx
        556: operator: .
        557: name: separate_colour_plane_flag
      558: comment: //TODO this is crude ...
      559: expr_stmt: 
       560: expr: 
        561: name: 
         562: name: sps
         563: operator: ->
         564: name: ptl
        565: operator: =
        566: name: 
         567: name: vps
         568: operator: ->
         569: name: ext_ptl
         570: index: 
          571: expr: 
           572: literal: 0
   573: else: 
    574: block: 
     575: block_content: 
      576: expr_stmt: 
       577: expr: 
        578: name: 
         579: name: sps
         580: operator: ->
         581: name: chroma_format_idc
        582: operator: =
        583: call: 
         584: name: gf_bs_read_ue_log
         585: argument_list: 
          586: argument: 
           587: expr: 
            588: name: bs
          589: argument: 
           590: expr: 
            591: literal: "chroma_format_idc"
      592: if_stmt: 
       593: if: 
        594: condition: 
         595: expr: 
          596: name: 
           597: name: sps
           598: operator: ->
           599: name: chroma_format_idc
          600: operator: ==
          601: literal: 3
        602: block: 
         603: block_content: 
          604: expr_stmt: 
           605: expr: 
            606: name: 
             607: name: sps
             608: operator: ->
             609: name: separate_colour_plane_flag
            610: operator: =
            611: call: 
             612: name: gf_bs_read_int_log
             613: argument_list: 
              614: argument: 
               615: expr: 
                616: name: bs
              617: argument: 
               618: expr: 
                619: literal: 1
              620: argument: 
               621: expr: 
                622: literal: "separate_colour_plane_flag"
      623: expr_stmt: 
       624: expr: 
        625: name: 
         626: name: sps
         627: operator: ->
         628: name: width
        629: operator: =
        630: call: 
         631: name: gf_bs_read_ue_log
         632: argument_list: 
          633: argument: 
           634: expr: 
            635: name: bs
          636: argument: 
           637: expr: 
            638: literal: "width"
      639: expr_stmt: 
       640: expr: 
        641: name: 
         642: name: sps
         643: operator: ->
         644: name: height
        645: operator: =
        646: call: 
         647: name: gf_bs_read_ue_log
         648: argument_list: 
          649: argument: 
           650: expr: 
            651: name: bs
          652: argument: 
           653: expr: 
            654: literal: "height"
      655: if_stmt: 
       656: if: 
        657: condition: 
         658: expr: 
          659: operator: (
          660: name: 
           661: name: sps
           662: operator: ->
           663: name: cw_flag
          664: operator: =
          665: call: 
           666: name: gf_bs_read_int_log
           667: argument_list: 
            668: argument: 
             669: expr: 
              670: name: bs
            671: argument: 
             672: expr: 
              673: literal: 1
            674: argument: 
             675: expr: 
              676: literal: "conformance_window_flag"
          677: operator: )
        678: block: 
         679: block_content: 
          680: decl_stmt: 
           681: decl: 
            682: type: 
             683: name: u32
            684: name: SubWidthC
           685: decl: 
            686: type: 
            687: name: SubHeightC
          688: if_stmt: 
           689: if: 
            690: condition: 
             691: expr: 
              692: name: 
               693: name: sps
               694: operator: ->
               695: name: chroma_format_idc
              696: operator: ==
              697: literal: 1
            698: block: 
             699: block_content: 
              700: expr_stmt: 
               701: expr: 
                702: name: SubWidthC
                703: operator: =
                704: name: SubHeightC
                705: operator: =
                706: literal: 2
           707: if: 
            708: condition: 
             709: expr: 
              710: name: 
               711: name: sps
               712: operator: ->
               713: name: chroma_format_idc
              714: operator: ==
              715: literal: 2
            716: block: 
             717: block_content: 
              718: expr_stmt: 
               719: expr: 
                720: name: SubWidthC
                721: operator: =
                722: literal: 2
              723: expr_stmt: 
               724: expr: 
                725: name: SubHeightC
                726: operator: =
                727: literal: 1
           728: else: 
            729: block: 
             730: block_content: 
              731: expr_stmt: 
               732: expr: 
                733: name: SubWidthC
                734: operator: =
                735: name: SubHeightC
                736: operator: =
                737: literal: 1
          738: expr_stmt: 
           739: expr: 
            740: name: 
             741: name: sps
             742: operator: ->
             743: name: cw_left
            744: operator: =
            745: call: 
             746: name: gf_bs_read_ue_log
             747: argument_list: 
              748: argument: 
               749: expr: 
                750: name: bs
              751: argument: 
               752: expr: 
                753: literal: "conformance_window_left"
          754: expr_stmt: 
           755: expr: 
            756: name: 
             757: name: sps
             758: operator: ->
             759: name: cw_right
            760: operator: =
            761: call: 
             762: name: gf_bs_read_ue_log
             763: argument_list: 
              764: argument: 
               765: expr: 
                766: name: bs
              767: argument: 
               768: expr: 
                769: literal: "conformance_window_right"
          770: expr_stmt: 
           771: expr: 
            772: name: 
             773: name: sps
             774: operator: ->
             775: name: cw_top
            776: operator: =
            777: call: 
             778: name: gf_bs_read_ue_log
             779: argument_list: 
              780: argument: 
               781: expr: 
                782: name: bs
              783: argument: 
               784: expr: 
                785: literal: "conformance_window_top"
          786: expr_stmt: 
           787: expr: 
            788: name: 
             789: name: sps
             790: operator: ->
             791: name: cw_bottom
            792: operator: =
            793: call: 
             794: name: gf_bs_read_ue_log
             795: argument_list: 
              796: argument: 
               797: expr: 
                798: name: bs
              799: argument: 
               800: expr: 
                801: literal: "conformance_window_bottom"
          802: expr_stmt: 
           803: expr: 
            804: name: 
             805: name: sps
             806: operator: ->
             807: name: width
            808: operator: -=
            809: name: SubWidthC
            810: operator: *
            811: operator: (
            812: name: 
             813: name: sps
             814: operator: ->
             815: name: cw_left
            816: operator: +
            817: name: 
             818: name: sps
             819: operator: ->
             820: name: cw_right
            821: operator: )
          822: expr_stmt: 
           823: expr: 
            824: name: 
             825: name: sps
             826: operator: ->
             827: name: height
            828: operator: -=
            829: name: SubHeightC
            830: operator: *
            831: operator: (
            832: name: 
             833: name: sps
             834: operator: ->
             835: name: cw_top
            836: operator: +
            837: name: 
             838: name: sps
             839: operator: ->
             840: name: cw_bottom
            841: operator: )
      842: expr_stmt: 
       843: expr: 
        844: name: 
         845: name: sps
         846: operator: ->
         847: name: bit_depth_luma
        848: operator: =
        849: literal: 8
        850: operator: +
        851: call: 
         852: name: gf_bs_read_ue_log
         853: argument_list: 
          854: argument: 
           855: expr: 
            856: name: bs
          857: argument: 
           858: expr: 
            859: literal: "bit_depth_luma_minus8"
      860: expr_stmt: 
       861: expr: 
        862: name: 
         863: name: sps
         864: operator: ->
         865: name: bit_depth_chroma
        866: operator: =
        867: literal: 8
        868: operator: +
        869: call: 
         870: name: gf_bs_read_ue_log
         871: argument_list: 
          872: argument: 
           873: expr: 
            874: name: bs
          875: argument: 
           876: expr: 
            877: literal: "bit_depth_chroma_minus8"
  878: expr_stmt: 
   879: expr: 
    880: name: 
     881: name: sps
     882: operator: ->
     883: name: log2_max_pic_order_cnt_lsb
    884: operator: =
    885: literal: 4
    886: operator: +
    887: call: 
     888: name: gf_bs_read_ue_log
     889: argument_list: 
      890: argument: 
       891: expr: 
        892: name: bs
      893: argument: 
       894: expr: 
        895: literal: "log2_max_pic_order_cnt_lsb_minus4"
  896: if_stmt: 
   897: if: 
    898: condition: 
     899: expr: 
      900: operator: !
      901: name: multiLayerExtSpsFlag
    902: block: 
     903: block_content: 
      904: expr_stmt: 
       905: expr: 
        906: name: 
         907: name: sps
         908: operator: ->
         909: name: sub_layer_ordering_info_present_flag
        910: operator: =
        911: call: 
         912: name: gf_bs_read_int_log
         913: argument_list: 
          914: argument: 
           915: expr: 
            916: name: bs
          917: argument: 
           918: expr: 
            919: literal: 1
          920: argument: 
           921: expr: 
            922: literal: "sub_layer_ordering_info_present_flag"
      923: for: 
       924: control: 
        925: init: 
         926: expr: 
          927: name: i
          928: operator: =
          929: ternary: 
           930: condition: 
            931: expr: 
             932: name: 
              933: name: sps
              934: operator: ->
              935: name: sub_layer_ordering_info_present_flag
           936: then: 
            937: expr: 
             938: literal: 0
           939: else: 
            940: expr: 
             941: name: 
              942: name: sps
              943: operator: ->
              944: name: max_sub_layers_minus1
        945: condition: 
         946: expr: 
          947: name: i
          948: operator: <=
          949: name: 
           950: name: sps
           951: operator: ->
           952: name: max_sub_layers_minus1
        953: incr: 
         954: expr: 
          955: name: i
          956: operator: ++
       957: block: 
        958: block_content: 
         959: expr_stmt: 
          960: expr: 
           961: call: 
            962: name: gf_bs_read_ue_log_idx
            963: argument_list: 
             964: argument: 
              965: expr: 
               966: name: bs
             967: argument: 
              968: expr: 
               969: literal: "max_dec_pic_buffering"
             970: argument: 
              971: expr: 
               972: name: i
         973: expr_stmt: 
          974: expr: 
           975: call: 
            976: name: gf_bs_read_ue_log_idx
            977: argument_list: 
             978: argument: 
              979: expr: 
               980: name: bs
             981: argument: 
              982: expr: 
               983: literal: "num_reorder_pics"
             984: argument: 
              985: expr: 
               986: name: i
         987: expr_stmt: 
          988: expr: 
           989: call: 
            990: name: gf_bs_read_ue_log_idx
            991: argument_list: 
             992: argument: 
              993: expr: 
               994: name: bs
             995: argument: 
              996: expr: 
               997: literal: "max_latency_increase"
             998: argument: 
              999: expr: 
               1000: name: i
  1001: expr_stmt: 
   1002: expr: 
    1003: name: 
     1004: name: sps
     1005: operator: ->
     1006: name: log2_min_luma_coding_block_size
    1007: operator: =
    1008: literal: 3
    1009: operator: +
    1010: call: 
     1011: name: gf_bs_read_ue_log
     1012: argument_list: 
      1013: argument: 
       1014: expr: 
        1015: name: bs
      1016: argument: 
       1017: expr: 
        1018: literal: "log2_min_luma_coding_block_size_minus3"
  1019: expr_stmt: 
   1020: expr: 
    1021: name: 
     1022: name: sps
     1023: operator: ->
     1024: name: log2_diff_max_min_luma_coding_block_size
    1025: operator: =
    1026: call: 
     1027: name: gf_bs_read_ue_log
     1028: argument_list: 
      1029: argument: 
       1030: expr: 
        1031: name: bs
      1032: argument: 
       1033: expr: 
        1034: literal: "log2_diff_max_min_luma_coding_block_size"
  1035: expr_stmt: 
   1036: expr: 
    1037: name: 
     1038: name: sps
     1039: operator: ->
     1040: name: max_CU_width
    1041: operator: =
    1042: operator: (
    1043: literal: 1
    1044: operator: <<
    1045: operator: (
    1046: name: 
     1047: name: sps
     1048: operator: ->
     1049: name: log2_min_luma_coding_block_size
    1050: operator: +
    1051: name: 
     1052: name: sps
     1053: operator: ->
     1054: name: log2_diff_max_min_luma_coding_block_size
    1055: operator: )
    1056: operator: )
  1057: expr_stmt: 
   1058: expr: 
    1059: name: 
     1060: name: sps
     1061: operator: ->
     1062: name: max_CU_height
    1063: operator: =
    1064: operator: (
    1065: literal: 1
    1066: operator: <<
    1067: operator: (
    1068: name: 
     1069: name: sps
     1070: operator: ->
     1071: name: log2_min_luma_coding_block_size
    1072: operator: +
    1073: name: 
     1074: name: sps
     1075: operator: ->
     1076: name: log2_diff_max_min_luma_coding_block_size
    1077: operator: )
    1078: operator: )
  1079: expr_stmt: 
   1080: expr: 
    1081: name: 
     1082: name: sps
     1083: operator: ->
     1084: name: log2_min_transform_block_size
    1085: operator: =
    1086: literal: 2
    1087: operator: +
    1088: call: 
     1089: name: gf_bs_read_ue_log
     1090: argument_list: 
      1091: argument: 
       1092: expr: 
        1093: name: bs
      1094: argument: 
       1095: expr: 
        1096: literal: "log2_min_transform_block_size_minus2"
  1097: expr_stmt: 
   1098: expr: 
    1099: name: 
     1100: name: sps
     1101: operator: ->
     1102: name: log2_max_transform_block_size
    1103: operator: =
    1104: name: 
     1105: name: sps
     1106: operator: ->
     1107: name: log2_min_transform_block_size
    1108: operator: +
    1109: call: 
     1110: name: gf_bs_read_ue_log
     1111: argument_list: 
      1112: argument: 
       1113: expr: 
        1114: name: bs
      1115: argument: 
       1116: expr: 
        1117: literal: "log2_max_transform_block_size"
  1118: expr_stmt: 
   1119: expr: 
    1120: name: depth
    1121: operator: =
    1122: literal: 0
  1123: expr_stmt: 
   1124: expr: 
    1125: name: 
     1126: name: sps
     1127: operator: ->
     1128: name: max_transform_hierarchy_depth_inter
    1129: operator: =
    1130: call: 
     1131: name: gf_bs_read_ue_log
     1132: argument_list: 
      1133: argument: 
       1134: expr: 
        1135: name: bs
      1136: argument: 
       1137: expr: 
        1138: literal: "max_transform_hierarchy_depth_inter"
  1139: expr_stmt: 
   1140: expr: 
    1141: name: 
     1142: name: sps
     1143: operator: ->
     1144: name: max_transform_hierarchy_depth_intra
    1145: operator: =
    1146: call: 
     1147: name: gf_bs_read_ue_log
     1148: argument_list: 
      1149: argument: 
       1150: expr: 
        1151: name: bs
      1152: argument: 
       1153: expr: 
        1154: literal: "max_transform_hierarchy_depth_intra"
  1155: while: 
   1156: condition: 
    1157: expr: 
     1158: operator: (
     1159: name: u32
     1160: operator: )
     1161: operator: (
     1162: name: 
      1163: name: sps
      1164: operator: ->
      1165: name: max_CU_width
     1166: operator: >>
     1167: name: 
      1168: name: sps
      1169: operator: ->
      1170: name: log2_diff_max_min_luma_coding_block_size
     1171: operator: )
     1172: operator: >
     1173: operator: (
     1174: name: u32
     1175: operator: )
     1176: operator: (
     1177: literal: 1
     1178: operator: <<
     1179: operator: (
     1180: name: 
      1181: name: sps
      1182: operator: ->
      1183: name: log2_min_transform_block_size
     1184: operator: +
     1185: name: depth
     1186: operator: )
     1187: operator: )
   1188: block: 
    1189: block_content: 
     1190: expr_stmt: 
      1191: expr: 
       1192: name: depth
       1193: operator: ++
  1194: expr_stmt: 
   1195: expr: 
    1196: name: 
     1197: name: sps
     1198: operator: ->
     1199: name: max_CU_depth
    1200: operator: =
    1201: name: 
     1202: name: sps
     1203: operator: ->
     1204: name: log2_diff_max_min_luma_coding_block_size
    1205: operator: +
    1206: name: depth
  1207: expr_stmt: 
   1208: expr: 
    1209: name: nb_CTUs
    1210: operator: =
    1211: operator: (
    1212: operator: (
    1213: name: 
     1214: name: sps
     1215: operator: ->
     1216: name: width
    1217: operator: +
    1218: name: 
     1219: name: sps
     1220: operator: ->
     1221: name: max_CU_width
    1222: operator: -
    1223: literal: 1
    1224: operator: )
    1225: operator: /
    1226: name: 
     1227: name: sps
     1228: operator: ->
     1229: name: max_CU_width
    1230: operator: )
    1231: operator: *
    1232: operator: (
    1233: operator: (
    1234: name: 
     1235: name: sps
     1236: operator: ->
     1237: name: height
    1238: operator: +
    1239: name: 
     1240: name: sps
     1241: operator: ->
     1242: name: max_CU_height
    1243: operator: -
    1244: literal: 1
    1245: operator: )
    1246: operator: /
    1247: name: 
     1248: name: sps
     1249: operator: ->
     1250: name: max_CU_height
    1251: operator: )
  1252: expr_stmt: 
   1253: expr: 
    1254: name: 
     1255: name: sps
     1256: operator: ->
     1257: name: bitsSliceSegmentAddress
    1258: operator: =
    1259: literal: 0
  1260: while: 
   1261: condition: 
    1262: expr: 
     1263: name: nb_CTUs
     1264: operator: >
     1265: operator: (
     1266: name: u32
     1267: operator: )
     1268: operator: (
     1269: literal: 1
     1270: operator: <<
     1271: name: 
      1272: name: sps
      1273: operator: ->
      1274: name: bitsSliceSegmentAddress
     1275: operator: )
   1276: block: 
    1277: block_content: 
     1278: expr_stmt: 
      1279: expr: 
       1280: name: 
        1281: name: sps
        1282: operator: ->
        1283: name: bitsSliceSegmentAddress
       1284: operator: ++
  1285: expr_stmt: 
   1286: expr: 
    1287: name: 
     1288: name: sps
     1289: operator: ->
     1290: name: scaling_list_enable_flag
    1291: operator: =
    1292: call: 
     1293: name: gf_bs_read_int_log
     1294: argument_list: 
      1295: argument: 
       1296: expr: 
        1297: name: bs
      1298: argument: 
       1299: expr: 
        1300: literal: 1
      1301: argument: 
       1302: expr: 
        1303: literal: "scaling_list_enable_flag"
  1304: if_stmt: 
   1305: if: 
    1306: condition: 
     1307: expr: 
      1308: name: 
       1309: name: sps
       1310: operator: ->
       1311: name: scaling_list_enable_flag
    1312: block: 
     1313: block_content: 
      1314: expr_stmt: 
       1315: expr: 
        1316: name: 
         1317: name: sps
         1318: operator: ->
         1319: name: infer_scaling_list_flag
        1320: operator: =
        1321: literal: 0
      1322: expr_stmt: 
       1323: expr: 
        1324: name: 
         1325: name: sps
         1326: operator: ->
         1327: name: scaling_list_ref_layer_id
        1328: operator: =
        1329: literal: 0
      1330: if_stmt: 
       1331: if: 
        1332: condition: 
         1333: expr: 
          1334: name: multiLayerExtSpsFlag
        1335: block: 
         1336: block_content: 
          1337: expr_stmt: 
           1338: expr: 
            1339: name: 
             1340: name: sps
             1341: operator: ->
             1342: name: infer_scaling_list_flag
            1343: operator: =
            1344: call: 
             1345: name: gf_bs_read_int_log
             1346: argument_list: 
              1347: argument: 
               1348: expr: 
                1349: name: bs
              1350: argument: 
               1351: expr: 
                1352: literal: 1
              1353: argument: 
               1354: expr: 
                1355: literal: "infer_scaling_list_flag"
      1356: if_stmt: 
       1357: if: 
        1358: condition: 
         1359: expr: 
          1360: name: 
           1361: name: sps
           1362: operator: ->
           1363: name: infer_scaling_list_flag
        1364: block: 
         1365: block_content: 
          1366: expr_stmt: 
           1367: expr: 
            1368: name: 
             1369: name: sps
             1370: operator: ->
             1371: name: scaling_list_ref_layer_id
            1372: operator: =
            1373: call: 
             1374: name: gf_bs_read_int_log
             1375: argument_list: 
              1376: argument: 
               1377: expr: 
                1378: name: bs
              1379: argument: 
               1380: expr: 
                1381: literal: 6
              1382: argument: 
               1383: expr: 
                1384: literal: "scaling_list_ref_layer_id"
       1385: else: 
        1386: block: 
         1387: block_content: 
          1388: expr_stmt: 
           1389: expr: 
            1390: name: 
             1391: name: sps
             1392: operator: ->
             1393: name: scaling_list_data_present_flag
            1394: operator: =
            1395: call: 
             1396: name: gf_bs_read_int_log
             1397: argument_list: 
              1398: argument: 
               1399: expr: 
                1400: name: bs
              1401: argument: 
               1402: expr: 
                1403: literal: 1
              1404: argument: 
               1405: expr: 
                1406: literal: "scaling_list_data_present_flag"
          1407: if_stmt: 
           1408: if: 
            1409: condition: 
             1410: expr: 
              1411: name: 
               1412: name: sps
               1413: operator: ->
               1414: name: scaling_list_data_present_flag
            1415: block: 
             1416: block_content: 
              1417: expr_stmt: 
               1418: expr: 
                1419: call: 
                 1420: name: hevc_scaling_list_data
                 1421: argument_list: 
                  1422: argument: 
                   1423: expr: 
                    1424: name: bs
  1425: expr_stmt: 
   1426: expr: 
    1427: name: 
     1428: name: sps
     1429: operator: ->
     1430: name: asymmetric_motion_partitions_enabled_flag
    1431: operator: =
    1432: call: 
     1433: name: gf_bs_read_int_log
     1434: argument_list: 
      1435: argument: 
       1436: expr: 
        1437: name: bs
      1438: argument: 
       1439: expr: 
        1440: literal: 1
      1441: argument: 
       1442: expr: 
        1443: literal: "asymmetric_motion_partitions_enabled_flag"
  1444: expr_stmt: 
   1445: expr: 
    1446: name: 
     1447: name: sps
     1448: operator: ->
     1449: name: sample_adaptive_offset_enabled_flag
    1450: operator: =
    1451: call: 
     1452: name: gf_bs_read_int_log
     1453: argument_list: 
      1454: argument: 
       1455: expr: 
        1456: name: bs
      1457: argument: 
       1458: expr: 
        1459: literal: 1
      1460: argument: 
       1461: expr: 
        1462: literal: "sample_adaptive_offset_enabled_flag"
  1463: if_stmt: 
   1464: if: 
    1465: condition: 
     1466: expr: 
      1467: operator: (
      1468: name: 
       1469: name: sps
       1470: operator: ->
       1471: name: pcm_enabled_flag
      1472: operator: =
      1473: call: 
       1474: name: gf_bs_read_int_log
       1475: argument_list: 
        1476: argument: 
         1477: expr: 
          1478: name: bs
        1479: argument: 
         1480: expr: 
          1481: literal: 1
        1482: argument: 
         1483: expr: 
          1484: literal: "pcm_enabled_flag"
      1485: operator: )
    1486: block: 
     1487: block_content: 
      1488: expr_stmt: 
       1489: expr: 
        1490: name: 
         1491: name: sps
         1492: operator: ->
         1493: name: pcm_sample_bit_depth_luma_minus1
        1494: operator: =
        1495: call: 
         1496: name: gf_bs_read_int_log
         1497: argument_list: 
          1498: argument: 
           1499: expr: 
            1500: name: bs
          1501: argument: 
           1502: expr: 
            1503: literal: 4
          1504: argument: 
           1505: expr: 
            1506: literal: "pcm_sample_bit_depth_luma_minus1"
      1507: expr_stmt: 
       1508: expr: 
        1509: name: 
         1510: name: sps
         1511: operator: ->
         1512: name: pcm_sample_bit_depth_chroma_minus1
        1513: operator: =
        1514: call: 
         1515: name: gf_bs_read_int_log
         1516: argument_list: 
          1517: argument: 
           1518: expr: 
            1519: name: bs
          1520: argument: 
           1521: expr: 
            1522: literal: 4
          1523: argument: 
           1524: expr: 
            1525: literal: "pcm_sample_bit_depth_chroma_minus1"
      1526: expr_stmt: 
       1527: expr: 
        1528: name: 
         1529: name: sps
         1530: operator: ->
         1531: name: log2_min_pcm_luma_coding_block_size_minus3
        1532: operator: =
        1533: call: 
         1534: name: gf_bs_read_ue_log
         1535: argument_list: 
          1536: argument: 
           1537: expr: 
            1538: name: bs
          1539: argument: 
           1540: expr: 
            1541: literal: "log2_min_pcm_luma_coding_block_size_minus3"
      1542: expr_stmt: 
       1543: expr: 
        1544: name: 
         1545: name: sps
         1546: operator: ->
         1547: name: log2_diff_max_min_pcm_luma_coding_block_size
        1548: operator: =
        1549: call: 
         1550: name: gf_bs_read_ue_log
         1551: argument_list: 
          1552: argument: 
           1553: expr: 
            1554: name: bs
          1555: argument: 
           1556: expr: 
            1557: literal: "log2_diff_max_min_pcm_luma_coding_block_size"
      1558: expr_stmt: 
       1559: expr: 
        1560: name: 
         1561: name: sps
         1562: operator: ->
         1563: name: pcm_loop_filter_disable_flag
        1564: operator: =
        1565: call: 
         1566: name: gf_bs_read_int_log
         1567: argument_list: 
          1568: argument: 
           1569: expr: 
            1570: name: bs
          1571: argument: 
           1572: expr: 
            1573: literal: 1
          1574: argument: 
           1575: expr: 
            1576: literal: "pcm_loop_filter_disable_flag"
  1577: expr_stmt: 
   1578: expr: 
    1579: name: 
     1580: name: sps
     1581: operator: ->
     1582: name: num_short_term_ref_pic_sets
    1583: operator: =
    1584: call: 
     1585: name: gf_bs_read_ue_log
     1586: argument_list: 
      1587: argument: 
       1588: expr: 
        1589: name: bs
      1590: argument: 
       1591: expr: 
        1592: literal: "num_short_term_ref_pic_sets"
  1593: if_stmt: 
   1594: if: 
    1595: condition: 
     1596: expr: 
      1597: name: 
       1598: name: sps
       1599: operator: ->
       1600: name: num_short_term_ref_pic_sets
      1601: operator: >
      1602: literal: 64
    1603: block: 
     1604: block_content: 
      1605: expr_stmt: 
       1606: expr: 
        1607: call: 
         1608: name: GF_LOG
         1609: argument_list: 
          1610: argument: 
           1611: expr: 
            1612: name: GF_LOG_ERROR
          1613: argument: 
           1614: expr: 
            1615: name: GF_LOG_CODING
          1616: argument: 
           1617: expr: 
            1618: operator: (
            1619: literal: "[HEVC] Invalid number of short term reference picture sets %d\n"
            1620: operator: ,
            1621: name: 
             1622: name: sps
             1623: operator: ->
             1624: name: num_short_term_ref_pic_sets
            1625: operator: )
      1626: return: 
       1627: expr: 
        1628: operator: -
        1629: literal: 1
  1630: for: 
   1631: control: 
    1632: init: 
     1633: expr: 
      1634: name: i
      1635: operator: =
      1636: literal: 0
    1637: condition: 
     1638: expr: 
      1639: name: i
      1640: operator: <
      1641: name: 
       1642: name: sps
       1643: operator: ->
       1644: name: num_short_term_ref_pic_sets
    1645: incr: 
     1646: expr: 
      1647: name: i
      1648: operator: ++
   1649: block: 
    1650: block_content: 
     1651: decl_stmt: 
      1652: decl: 
       1653: type: 
        1654: name: Bool
       1655: name: ret
       1656: init: 
        1657: expr: 
         1658: call: 
          1659: name: hevc_parse_short_term_ref_pic_set
          1660: argument_list: 
           1661: argument: 
            1662: expr: 
             1663: name: bs
           1664: argument: 
            1665: expr: 
             1666: name: sps
           1667: argument: 
            1668: expr: 
             1669: name: i
     1670: comment: /*cannot parse short_term_ref_pic_set, skip VUI parsing*/
     1671: if_stmt: 
      1672: if: 
       1673: condition: 
        1674: expr: 
         1675: operator: !
         1676: name: ret
       1677: block: 
        1678: block_content: 
         1679: expr_stmt: 
          1680: expr: 
           1681: call: 
            1682: name: GF_LOG
            1683: argument_list: 
             1684: argument: 
              1685: expr: 
               1686: name: GF_LOG_ERROR
             1687: argument: 
              1688: expr: 
               1689: name: GF_LOG_CODING
             1690: argument: 
              1691: expr: 
               1692: operator: (
               1693: literal: "[HEVC] Invalid short_term_ref_pic_set\n"
               1694: operator: )
         1695: return: 
          1696: expr: 
           1697: operator: -
           1698: literal: 1
  1699: expr_stmt: 
   1700: expr: 
    1701: name: 
     1702: name: sps
     1703: operator: ->
     1704: name: long_term_ref_pics_present_flag
    1705: operator: =
    1706: call: 
     1707: name: gf_bs_read_int_log
     1708: argument_list: 
      1709: argument: 
       1710: expr: 
        1711: name: bs
      1712: argument: 
       1713: expr: 
        1714: literal: 1
      1715: argument: 
       1716: expr: 
        1717: literal: "long_term_ref_pics_present_flag"
  1718: if_stmt: 
   1719: if: 
    1720: condition: 
     1721: expr: 
      1722: name: 
       1723: name: sps
       1724: operator: ->
       1725: name: long_term_ref_pics_present_flag
    1726: block: 
     1727: block_content: 
      1728: expr_stmt: 
       1729: expr: 
        1730: name: 
         1731: name: sps
         1732: operator: ->
         1733: name: num_long_term_ref_pic_sps
        1734: operator: =
        1735: call: 
         1736: name: gf_bs_read_ue_log
         1737: argument_list: 
          1738: argument: 
           1739: expr: 
            1740: name: bs
          1741: argument: 
           1742: expr: 
            1743: literal: "num_long_term_ref_pic_sps"
      1744: for: 
       1745: control: 
        1746: init: 
         1747: expr: 
          1748: name: i
          1749: operator: =
          1750: literal: 0
        1751: condition: 
         1752: expr: 
          1753: name: i
          1754: operator: <
          1755: name: 
           1756: name: sps
           1757: operator: ->
           1758: name: num_long_term_ref_pic_sps
        1759: incr: 
         1760: expr: 
          1761: name: i
          1762: operator: ++
       1763: block: 
        1764: block_content: 
         1765: expr_stmt: 
          1766: expr: 
           1767: call: 
            1768: name: gf_bs_read_int_log_idx
            1769: argument_list: 
             1770: argument: 
              1771: expr: 
               1772: name: bs
             1773: argument: 
              1774: expr: 
               1775: name: 
                1776: name: sps
                1777: operator: ->
                1778: name: log2_max_pic_order_cnt_lsb
             1779: argument: 
              1780: expr: 
               1781: literal: "lt_ref_pic_poc_lsb_sps"
             1782: argument: 
              1783: expr: 
               1784: name: i
         1785: expr_stmt: 
          1786: expr: 
           1787: call: 
            1788: name: gf_bs_read_int_log_idx
            1789: argument_list: 
             1790: argument: 
              1791: expr: 
               1792: name: bs
             1793: argument: 
              1794: expr: 
               1795: literal: 1
             1796: argument: 
              1797: expr: 
               1798: literal: "used_by_curr_pic_lt_sps_flag"
             1799: argument: 
              1800: expr: 
               1801: name: i
  1802: expr_stmt: 
   1803: expr: 
    1804: name: 
     1805: name: sps
     1806: operator: ->
     1807: name: temporal_mvp_enable_flag
    1808: operator: =
    1809: call: 
     1810: name: gf_bs_read_int_log
     1811: argument_list: 
      1812: argument: 
       1813: expr: 
        1814: name: bs
      1815: argument: 
       1816: expr: 
        1817: literal: 1
      1818: argument: 
       1819: expr: 
        1820: literal: "temporal_mvp_enable_flag"
  1821: expr_stmt: 
   1822: expr: 
    1823: name: 
     1824: name: sps
     1825: operator: ->
     1826: name: strong_intra_smoothing_enable_flag
    1827: operator: =
    1828: call: 
     1829: name: gf_bs_read_int_log
     1830: argument_list: 
      1831: argument: 
       1832: expr: 
        1833: name: bs
      1834: argument: 
       1835: expr: 
        1836: literal: 1
      1837: argument: 
       1838: expr: 
        1839: literal: "strong_intra_smoothing_enable_flag"
  1840: if_stmt: 
   1841: if: 
    1842: condition: 
     1843: expr: 
      1844: name: vui_flag_pos
    1845: block: 
     1846: block_content: 
      1847: expr_stmt: 
       1848: expr: 
        1849: operator: *
        1850: name: vui_flag_pos
        1851: operator: =
        1852: operator: (
        1853: name: u32
        1854: operator: )
        1855: call: 
         1856: name: gf_bs_get_bit_offset
         1857: argument_list: 
          1858: argument: 
           1859: expr: 
            1860: name: bs
  1861: if_stmt: 
   1862: if: 
    1863: condition: 
     1864: expr: 
      1865: operator: (
      1866: name: 
       1867: name: sps
       1868: operator: ->
       1869: name: vui_parameters_present_flag
      1870: operator: =
      1871: call: 
       1872: name: gf_bs_read_int_log
       1873: argument_list: 
        1874: argument: 
         1875: expr: 
          1876: name: bs
        1877: argument: 
         1878: expr: 
          1879: literal: 1
        1880: argument: 
         1881: expr: 
          1882: literal: "vui_parameters_present_flag"
      1883: operator: )
    1884: block: 
     1885: block_content: 
      1886: expr_stmt: 
       1887: expr: 
        1888: name: 
         1889: name: sps
         1890: operator: ->
         1891: name: aspect_ratio_info_present_flag
        1892: operator: =
        1893: call: 
         1894: name: gf_bs_read_int_log
         1895: argument_list: 
          1896: argument: 
           1897: expr: 
            1898: name: bs
          1899: argument: 
           1900: expr: 
            1901: literal: 1
          1902: argument: 
           1903: expr: 
            1904: literal: "aspect_ratio_info_present_flag"
      1905: if_stmt: 
       1906: if: 
        1907: condition: 
         1908: expr: 
          1909: name: 
           1910: name: sps
           1911: operator: ->
           1912: name: aspect_ratio_info_present_flag
        1913: block: 
         1914: block_content: 
          1915: expr_stmt: 
           1916: expr: 
            1917: name: 
             1918: name: sps
             1919: operator: ->
             1920: name: sar_idc
            1921: operator: =
            1922: call: 
             1923: name: gf_bs_read_int_log
             1924: argument_list: 
              1925: argument: 
               1926: expr: 
                1927: name: bs
              1928: argument: 
               1929: expr: 
                1930: literal: 8
              1931: argument: 
               1932: expr: 
                1933: literal: "aspect_ratio_idc"
          1934: if_stmt: 
           1935: if: 
            1936: condition: 
             1937: expr: 
              1938: name: 
               1939: name: sps
               1940: operator: ->
               1941: name: sar_idc
              1942: operator: ==
              1943: literal: 255
            1944: block: 
             1945: block_content: 
              1946: expr_stmt: 
               1947: expr: 
                1948: name: 
                 1949: name: sps
                 1950: operator: ->
                 1951: name: sar_width
                1952: operator: =
                1953: call: 
                 1954: name: gf_bs_read_int_log
                 1955: argument_list: 
                  1956: argument: 
                   1957: expr: 
                    1958: name: bs
                  1959: argument: 
                   1960: expr: 
                    1961: literal: 16
                  1962: argument: 
                   1963: expr: 
                    1964: literal: "aspect_ratio_width"
              1965: expr_stmt: 
               1966: expr: 
                1967: name: 
                 1968: name: sps
                 1969: operator: ->
                 1970: name: sar_height
                1971: operator: =
                1972: call: 
                 1973: name: gf_bs_read_int_log
                 1974: argument_list: 
                  1975: argument: 
                   1976: expr: 
                    1977: name: bs
                  1978: argument: 
                   1979: expr: 
                    1980: literal: 16
                  1981: argument: 
                   1982: expr: 
                    1983: literal: "aspect_ratio_height"
           1984: if: 
            1985: condition: 
             1986: expr: 
              1987: name: 
               1988: name: sps
               1989: operator: ->
               1990: name: sar_idc
              1991: operator: <
              1992: literal: 17
            1993: block: 
             1994: block_content: 
              1995: expr_stmt: 
               1996: expr: 
                1997: name: 
                 1998: name: sps
                 1999: operator: ->
                 2000: name: sar_width
                2001: operator: =
                2002: name: 
                 2003: name: hevc_sar
                 2004: index: 
                  2005: expr: 
                   2006: name: 
                    2007: name: sps
                    2008: operator: ->
                    2009: name: sar_idc
                2010: operator: .
                2011: name: w
              2012: expr_stmt: 
               2013: expr: 
                2014: name: 
                 2015: name: sps
                 2016: operator: ->
                 2017: name: sar_height
                2018: operator: =
                2019: name: 
                 2020: name: hevc_sar
                 2021: index: 
                  2022: expr: 
                   2023: name: 
                    2024: name: sps
                    2025: operator: ->
                    2026: name: sar_idc
                2027: operator: .
                2028: name: h
      2029: if_stmt: 
       2030: if: 
        2031: condition: 
         2032: expr: 
          2033: operator: (
          2034: name: 
           2035: name: sps
           2036: operator: ->
           2037: name: overscan_info_present
          2038: operator: =
          2039: call: 
           2040: name: gf_bs_read_int_log
           2041: argument_list: 
            2042: argument: 
             2043: expr: 
              2044: name: bs
            2045: argument: 
             2046: expr: 
              2047: literal: 1
            2048: argument: 
             2049: expr: 
              2050: literal: "overscan_info_present"
          2051: operator: )
        2052: block: 
         2053: block_content: 
          2054: expr_stmt: 
           2055: expr: 
            2056: name: 
             2057: name: sps
             2058: operator: ->
             2059: name: overscan_appropriate
            2060: operator: =
            2061: call: 
             2062: name: gf_bs_read_int_log
             2063: argument_list: 
              2064: argument: 
               2065: expr: 
                2066: name: bs
              2067: argument: 
               2068: expr: 
                2069: literal: 1
              2070: argument: 
               2071: expr: 
                2072: literal: "overscan_appropriate"
      2073: expr_stmt: 
       2074: expr: 
        2075: name: 
         2076: name: sps
         2077: operator: ->
         2078: name: video_signal_type_present_flag
        2079: operator: =
        2080: call: 
         2081: name: gf_bs_read_int_log
         2082: argument_list: 
          2083: argument: 
           2084: expr: 
            2085: name: bs
          2086: argument: 
           2087: expr: 
            2088: literal: 1
          2089: argument: 
           2090: expr: 
            2091: literal: "video_signal_type_present_flag"
      2092: if_stmt: 
       2093: if: 
        2094: condition: 
         2095: expr: 
          2096: name: 
           2097: name: sps
           2098: operator: ->
           2099: name: video_signal_type_present_flag
        2100: block: 
         2101: block_content: 
          2102: expr_stmt: 
           2103: expr: 
            2104: name: 
             2105: name: sps
             2106: operator: ->
             2107: name: video_format
            2108: operator: =
            2109: call: 
             2110: name: gf_bs_read_int_log
             2111: argument_list: 
              2112: argument: 
               2113: expr: 
                2114: name: bs
              2115: argument: 
               2116: expr: 
                2117: literal: 3
              2118: argument: 
               2119: expr: 
                2120: literal: "video_format"
          2121: expr_stmt: 
           2122: expr: 
            2123: name: 
             2124: name: sps
             2125: operator: ->
             2126: name: video_full_range_flag
            2127: operator: =
            2128: call: 
             2129: name: gf_bs_read_int_log
             2130: argument_list: 
              2131: argument: 
               2132: expr: 
                2133: name: bs
              2134: argument: 
               2135: expr: 
                2136: literal: 1
              2137: argument: 
               2138: expr: 
                2139: literal: "video_full_range_flag"
          2140: if_stmt: 
           2141: if: 
            2142: condition: 
             2143: expr: 
              2144: operator: (
              2145: name: 
               2146: name: sps
               2147: operator: ->
               2148: name: colour_description_present_flag
              2149: operator: =
              2150: call: 
               2151: name: gf_bs_read_int_log
               2152: argument_list: 
                2153: argument: 
                 2154: expr: 
                  2155: name: bs
                2156: argument: 
                 2157: expr: 
                  2158: literal: 1
                2159: argument: 
                 2160: expr: 
                  2161: literal: "colour_description_present_flag"
              2162: operator: )
            2163: block: 
             2164: block_content: 
              2165: expr_stmt: 
               2166: expr: 
                2167: name: 
                 2168: name: sps
                 2169: operator: ->
                 2170: name: colour_primaries
                2171: operator: =
                2172: call: 
                 2173: name: gf_bs_read_int_log
                 2174: argument_list: 
                  2175: argument: 
                   2176: expr: 
                    2177: name: bs
                  2178: argument: 
                   2179: expr: 
                    2180: literal: 8
                  2181: argument: 
                   2182: expr: 
                    2183: literal: "colour_primaries"
              2184: expr_stmt: 
               2185: expr: 
                2186: name: 
                 2187: name: sps
                 2188: operator: ->
                 2189: name: transfer_characteristic
                2190: operator: =
                2191: call: 
                 2192: name: gf_bs_read_int_log
                 2193: argument_list: 
                  2194: argument: 
                   2195: expr: 
                    2196: name: bs
                  2197: argument: 
                   2198: expr: 
                    2199: literal: 8
                  2200: argument: 
                   2201: expr: 
                    2202: literal: "transfer_characteristic"
              2203: expr_stmt: 
               2204: expr: 
                2205: name: 
                 2206: name: sps
                 2207: operator: ->
                 2208: name: matrix_coeffs
                2209: operator: =
                2210: call: 
                 2211: name: gf_bs_read_int_log
                 2212: argument_list: 
                  2213: argument: 
                   2214: expr: 
                    2215: name: bs
                  2216: argument: 
                   2217: expr: 
                    2218: literal: 8
                  2219: argument: 
                   2220: expr: 
                    2221: literal: "matrix_coefficients"
      2222: if_stmt: 
       2223: if: 
        2224: condition: 
         2225: expr: 
          2226: operator: (
          2227: name: 
           2228: name: sps
           2229: operator: ->
           2230: name: chroma_loc_info_present_flag
          2231: operator: =
          2232: call: 
           2233: name: gf_bs_read_int_log
           2234: argument_list: 
            2235: argument: 
             2236: expr: 
              2237: name: bs
            2238: argument: 
             2239: expr: 
              2240: literal: 1
            2241: argument: 
             2242: expr: 
              2243: literal: "chroma_loc_info_present_flag"
          2244: operator: )
        2245: block: 
         2246: block_content: 
          2247: expr_stmt: 
           2248: expr: 
            2249: name: 
             2250: name: sps
             2251: operator: ->
             2252: name: chroma_sample_loc_type_top_field
            2253: operator: =
            2254: call: 
             2255: name: gf_bs_read_ue_log
             2256: argument_list: 
              2257: argument: 
               2258: expr: 
                2259: name: bs
              2260: argument: 
               2261: expr: 
                2262: literal: "chroma_sample_loc_type_top_field"
          2263: expr_stmt: 
           2264: expr: 
            2265: name: 
             2266: name: sps
             2267: operator: ->
             2268: name: chroma_sample_loc_type_bottom_field
            2269: operator: =
            2270: call: 
             2271: name: gf_bs_read_ue_log
             2272: argument_list: 
              2273: argument: 
               2274: expr: 
                2275: name: bs
              2276: argument: 
               2277: expr: 
                2278: literal: "chroma_sample_loc_type_bottom_field"
      2279: expr_stmt: 
       2280: expr: 
        2281: name: 
         2282: name: sps
         2283: operator: ->
         2284: name: neutra_chroma_indication_flag
        2285: operator: =
        2286: call: 
         2287: name: gf_bs_read_int_log
         2288: argument_list: 
          2289: argument: 
           2290: expr: 
            2291: name: bs
          2292: argument: 
           2293: expr: 
            2294: literal: 1
          2295: argument: 
           2296: expr: 
            2297: literal: "neutra_chroma_indication_flag"
      2298: expr_stmt: 
       2299: expr: 
        2300: name: 
         2301: name: sps
         2302: operator: ->
         2303: name: field_seq_flag
        2304: operator: =
        2305: call: 
         2306: name: gf_bs_read_int_log
         2307: argument_list: 
          2308: argument: 
           2309: expr: 
            2310: name: bs
          2311: argument: 
           2312: expr: 
            2313: literal: 1
          2314: argument: 
           2315: expr: 
            2316: literal: "field_seq_flag"
      2317: expr_stmt: 
       2318: expr: 
        2319: name: 
         2320: name: sps
         2321: operator: ->
         2322: name: frame_field_info_present_flag
        2323: operator: =
        2324: call: 
         2325: name: gf_bs_read_int_log
         2326: argument_list: 
          2327: argument: 
           2328: expr: 
            2329: name: bs
          2330: argument: 
           2331: expr: 
            2332: literal: 1
          2333: argument: 
           2334: expr: 
            2335: literal: "frame_field_info_present_flag"
      2336: if_stmt: 
       2337: if: 
        2338: condition: 
         2339: expr: 
          2340: operator: (
          2341: name: 
           2342: name: sps
           2343: operator: ->
           2344: name: default_display_window_flag
          2345: operator: =
          2346: call: 
           2347: name: gf_bs_read_int_log
           2348: argument_list: 
            2349: argument: 
             2350: expr: 
              2351: name: bs
            2352: argument: 
             2353: expr: 
              2354: literal: 1
            2355: argument: 
             2356: expr: 
              2357: literal: "default_display_window_flag"
          2358: operator: )
        2359: block: 
         2360: block_content: 
          2361: expr_stmt: 
           2362: expr: 
            2363: name: 
             2364: name: sps
             2365: operator: ->
             2366: name: left_offset
            2367: operator: =
            2368: call: 
             2369: name: gf_bs_read_ue_log
             2370: argument_list: 
              2371: argument: 
               2372: expr: 
                2373: name: bs
              2374: argument: 
               2375: expr: 
                2376: literal: "display_window_left_offset"
          2377: expr_stmt: 
           2378: expr: 
            2379: name: 
             2380: name: sps
             2381: operator: ->
             2382: name: right_offset
            2383: operator: =
            2384: call: 
             2385: name: gf_bs_read_ue_log
             2386: argument_list: 
              2387: argument: 
               2388: expr: 
                2389: name: bs
              2390: argument: 
               2391: expr: 
                2392: literal: "display_window_right_offset"
          2393: expr_stmt: 
           2394: expr: 
            2395: name: 
             2396: name: sps
             2397: operator: ->
             2398: name: top_offset
            2399: operator: =
            2400: call: 
             2401: name: gf_bs_read_ue_log
             2402: argument_list: 
              2403: argument: 
               2404: expr: 
                2405: name: bs
              2406: argument: 
               2407: expr: 
                2408: literal: "display_window_top_offset"
          2409: expr_stmt: 
           2410: expr: 
            2411: name: 
             2412: name: sps
             2413: operator: ->
             2414: name: bottom_offset
            2415: operator: =
            2416: call: 
             2417: name: gf_bs_read_ue_log
             2418: argument_list: 
              2419: argument: 
               2420: expr: 
                2421: name: bs
              2422: argument: 
               2423: expr: 
                2424: literal: "display_window_bottom_offset"
      2425: expr_stmt: 
       2426: expr: 
        2427: name: 
         2428: name: sps
         2429: operator: ->
         2430: name: has_timing_info
        2431: operator: =
        2432: call: 
         2433: name: gf_bs_read_int_log
         2434: argument_list: 
          2435: argument: 
           2436: expr: 
            2437: name: bs
          2438: argument: 
           2439: expr: 
            2440: literal: 1
          2441: argument: 
           2442: expr: 
            2443: literal: "has_timing_info"
      2444: if_stmt: 
       2445: if: 
        2446: condition: 
         2447: expr: 
          2448: name: 
           2449: name: sps
           2450: operator: ->
           2451: name: has_timing_info
        2452: block: 
         2453: block_content: 
          2454: expr_stmt: 
           2455: expr: 
            2456: name: 
             2457: name: sps
             2458: operator: ->
             2459: name: num_units_in_tick
            2460: operator: =
            2461: call: 
             2462: name: gf_bs_read_int_log
             2463: argument_list: 
              2464: argument: 
               2465: expr: 
                2466: name: bs
              2467: argument: 
               2468: expr: 
                2469: literal: 32
              2470: argument: 
               2471: expr: 
                2472: literal: "num_units_in_tick"
          2473: expr_stmt: 
           2474: expr: 
            2475: name: 
             2476: name: sps
             2477: operator: ->
             2478: name: time_scale
            2479: operator: =
            2480: call: 
             2481: name: gf_bs_read_int_log
             2482: argument_list: 
              2483: argument: 
               2484: expr: 
                2485: name: bs
              2486: argument: 
               2487: expr: 
                2488: literal: 32
              2489: argument: 
               2490: expr: 
                2491: literal: "time_scale"
          2492: expr_stmt: 
           2493: expr: 
            2494: name: 
             2495: name: sps
             2496: operator: ->
             2497: name: poc_proportional_to_timing_flag
            2498: operator: =
            2499: call: 
             2500: name: gf_bs_read_int_log
             2501: argument_list: 
              2502: argument: 
               2503: expr: 
                2504: name: bs
              2505: argument: 
               2506: expr: 
                2507: literal: 1
              2508: argument: 
               2509: expr: 
                2510: literal: "poc_proportional_to_timing_flag"
          2511: if_stmt: 
           2512: if: 
            2513: condition: 
             2514: expr: 
              2515: name: 
               2516: name: sps
               2517: operator: ->
               2518: name: poc_proportional_to_timing_flag
            2519: block: 
             2520: block_content: 
              2521: expr_stmt: 
               2522: expr: 
                2523: name: 
                 2524: name: sps
                 2525: operator: ->
                 2526: name: num_ticks_poc_diff_one_minus1
                2527: operator: =
                2528: call: 
                 2529: name: gf_bs_read_ue_log
                 2530: argument_list: 
                  2531: argument: 
                   2532: expr: 
                    2533: name: bs
                  2534: argument: 
                   2535: expr: 
                    2536: literal: "num_ticks_poc_diff_one_minus1"
          2537: if_stmt: 
           2538: if: 
            2539: condition: 
             2540: expr: 
              2541: operator: (
              2542: name: 
               2543: name: sps
               2544: operator: ->
               2545: name: hrd_parameters_present_flag
              2546: operator: =
              2547: call: 
               2548: name: gf_bs_read_int_log
               2549: argument_list: 
                2550: argument: 
                 2551: expr: 
                  2552: name: bs
                2553: argument: 
                 2554: expr: 
                  2555: literal: 1
                2556: argument: 
                 2557: expr: 
                  2558: literal: "hrd_parameters_present_flag"
              2559: operator: )
            2560: block: 
             2561: block_content: 
              2562: comment: //				GF_LOG(GF_LOG_INFO, GF_LOG_CODING, ("[HEVC] HRD param parsing not implemented\n"));
              2563: return: 
               2564: expr: 
                2565: name: sps_id
      2566: if_stmt: 
       2567: if: 
        2568: condition: 
         2569: expr: 
          2570: call: 
           2571: name: gf_bs_read_int_log
           2572: argument_list: 
            2573: argument: 
             2574: expr: 
              2575: name: bs
            2576: argument: 
             2577: expr: 
              2578: literal: 1
            2579: argument: 
             2580: expr: 
              2581: literal: "bitstream_restriction_flag"
        2582: block: 
         2583: block_content: 
          2584: expr_stmt: 
           2585: expr: 
            2586: call: 
             2587: name: gf_bs_read_int_log
             2588: argument_list: 
              2589: argument: 
               2590: expr: 
                2591: name: bs
              2592: argument: 
               2593: expr: 
                2594: literal: 1
              2595: argument: 
               2596: expr: 
                2597: literal: "tiles_fixed_structure_flag"
          2598: expr_stmt: 
           2599: expr: 
            2600: call: 
             2601: name: gf_bs_read_int_log
             2602: argument_list: 
              2603: argument: 
               2604: expr: 
                2605: name: bs
              2606: argument: 
               2607: expr: 
                2608: literal: 1
              2609: argument: 
               2610: expr: 
                2611: literal: "motion_vectors_over_pic_boundaries_flag"
          2612: expr_stmt: 
           2613: expr: 
            2614: call: 
             2615: name: gf_bs_read_int_log
             2616: argument_list: 
              2617: argument: 
               2618: expr: 
                2619: name: bs
              2620: argument: 
               2621: expr: 
                2622: literal: 1
              2623: argument: 
               2624: expr: 
                2625: literal: "restricted_ref_pic_lists_flag"
          2626: expr_stmt: 
           2627: expr: 
            2628: call: 
             2629: name: gf_bs_read_ue_log
             2630: argument_list: 
              2631: argument: 
               2632: expr: 
                2633: name: bs
              2634: argument: 
               2635: expr: 
                2636: literal: "min_spatial_segmentation_idc"
          2637: expr_stmt: 
           2638: expr: 
            2639: call: 
             2640: name: gf_bs_read_ue_log
             2641: argument_list: 
              2642: argument: 
               2643: expr: 
                2644: name: bs
              2645: argument: 
               2646: expr: 
                2647: literal: "max_bytes_per_pic_denom"
          2648: expr_stmt: 
           2649: expr: 
            2650: call: 
             2651: name: gf_bs_read_ue_log
             2652: argument_list: 
              2653: argument: 
               2654: expr: 
                2655: name: bs
              2656: argument: 
               2657: expr: 
                2658: literal: "max_bits_per_min_cu_denom"
          2659: expr_stmt: 
           2660: expr: 
            2661: call: 
             2662: name: gf_bs_read_ue_log
             2663: argument_list: 
              2664: argument: 
               2665: expr: 
                2666: name: bs
              2667: argument: 
               2668: expr: 
                2669: literal: "log2_max_mv_length_horizontal"
          2670: expr_stmt: 
           2671: expr: 
            2672: call: 
             2673: name: gf_bs_read_ue_log
             2674: argument_list: 
              2675: argument: 
               2676: expr: 
                2677: name: bs
              2678: argument: 
               2679: expr: 
                2680: literal: "log2_max_mv_length_vertical"
  2681: if_stmt: 
   2682: if: 
    2683: condition: 
     2684: expr: 
      2685: call: 
       2686: name: gf_bs_read_int_log
       2687: argument_list: 
        2688: argument: 
         2689: expr: 
          2690: name: bs
        2691: argument: 
         2692: expr: 
          2693: literal: 1
        2694: argument: 
         2695: expr: 
          2696: literal: "sps_extension_flag"
    2697: block: 
     2698: block_content: 
      2699: if: 
       2700: directive: if
       2701: expr: 
        2702: literal: 0
      2703: comment: /*sps_extension_data_flag */
      2704: endif: 
       2705: directive: endif
  2706: return: 
   2707: expr: 
    2708: name: sps_id

----------------------------------------
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: s32
    6: name: vps_id
   7: decl: 
    8: type: 
    9: name: sps_id
    10: init: 
     11: expr: 
      12: operator: -
      13: literal: 1
  14: decl_stmt: 
   15: decl: 
    16: type: 
     17: name: u32
    18: name: i
   19: decl: 
    20: type: 
    21: name: nb_CTUs
   22: decl: 
    23: type: 
    24: name: depth
  25: decl_stmt: 
   26: decl: 
    27: type: 
     28: name: HEVC_SPS
     29: modifier: *
    30: name: sps
  31: decl_stmt: 
   32: decl: 
    33: type: 
     34: name: HEVC_VPS
     35: modifier: *
    36: name: vps
  37: decl_stmt: 
   38: decl: 
    39: type: 
     40: name: HEVC_ProfileTierLevel
    41: name: ptl
  42: decl_stmt: 
   43: decl: 
    44: type: 
     45: name: Bool
    46: name: multiLayerExtSpsFlag
  47: decl_stmt: 
   48: decl: 
    49: type: 
     50: name: u8
    51: name: sps_ext_or_max_sub_layers_minus1
   52: decl: 
    53: type: 
    54: name: max_sub_layers_minus1
  55: if_stmt: 
   56: if: 
    57: condition: 
     58: expr: 
      59: name: vui_flag_pos
    60: block: 
     61: block_content: 
      62: expr_stmt: 
       63: expr: 
        64: operator: *
        65: name: vui_flag_pos
        66: operator: =
        67: literal: 0
  68: comment: //nalu header already parsed
  69: expr_stmt: 
   70: expr: 
    71: name: vps_id
    72: operator: =
    73: call: 
     74: name: gf_bs_read_int_log
     75: argument_list: 
      76: argument: 
       77: expr: 
        78: name: bs
      79: argument: 
       80: expr: 
        81: literal: 4
      82: argument: 
       83: expr: 
        84: literal: "vps_id"
  85: if_stmt: 
   86: if: 
    87: condition: 
     88: expr: 
      89: operator: (
      90: name: vps_id
      91: operator: <
      92: literal: 0
      93: operator: )
      94: operator: ||
      95: operator: (
      96: name: vps_id
      97: operator: >=
      98: literal: 16
      99: operator: )
    100: block: 
     101: block_content: 
      102: return: 
       103: expr: 
        104: operator: -
        105: literal: 1
  106: expr_stmt: 
   107: expr: 
    108: call: 
     109: name: memset
     110: argument_list: 
      111: argument: 
       112: expr: 
        113: operator: &
        114: name: ptl
      115: argument: 
       116: expr: 
        117: literal: 0
      118: argument: 
       119: expr: 
        120: sizeof: 
         121: argument_list: 
          122: argument: 
           123: expr: 
            124: name: ptl
  125: expr_stmt: 
   126: expr: 
    127: name: max_sub_layers_minus1
    128: operator: =
    129: literal: 0
  130: expr_stmt: 
   131: expr: 
    132: name: sps_ext_or_max_sub_layers_minus1
    133: operator: =
    134: literal: 0
  135: if_stmt: 
   136: if: 
    137: condition: 
     138: expr: 
      139: name: layer_id
      140: operator: ==
      141: literal: 0
    142: block: 
     143: block_content: 
      144: expr_stmt: 
       145: expr: 
        146: name: max_sub_layers_minus1
        147: operator: =
        148: call: 
         149: name: gf_bs_read_int_log
         150: argument_list: 
          151: argument: 
           152: expr: 
            153: name: bs
          154: argument: 
           155: expr: 
            156: literal: 3
          157: argument: 
           158: expr: 
            159: literal: "max_sub_layers_minus1"
   160: else: 
    161: block: 
     162: block_content: 
      163: expr_stmt: 
       164: expr: 
        165: name: sps_ext_or_max_sub_layers_minus1
        166: operator: =
        167: call: 
         168: name: gf_bs_read_int_log
         169: argument_list: 
          170: argument: 
           171: expr: 
            172: name: bs
          173: argument: 
           174: expr: 
            175: literal: 3
          176: argument: 
           177: expr: 
            178: literal: "sps_ext_or_max_sub_layers_minus1"
  179: expr_stmt: 
   180: expr: 
    181: name: multiLayerExtSpsFlag
    182: operator: =
    183: operator: (
    184: name: layer_id
    185: operator: !=
    186: literal: 0
    187: operator: )
    188: operator: &&
    189: operator: (
    190: name: sps_ext_or_max_sub_layers_minus1
    191: operator: ==
    192: literal: 7
    193: operator: )
  194: if_stmt: 
   195: if: 
    196: condition: 
     197: expr: 
      198: operator: !
      199: name: multiLayerExtSpsFlag
    200: block: 
     201: block_content: 
      202: expr_stmt: 
       203: expr: 
        204: call: 
         205: name: gf_bs_read_int_log
         206: argument_list: 
          207: argument: 
           208: expr: 
            209: name: bs
          210: argument: 
           211: expr: 
            212: literal: 1
          213: argument: 
           214: expr: 
            215: literal: "temporal_id_nesting_flag"
      216: expr_stmt: 
       217: expr: 
        218: call: 
         219: name: hevc_profile_tier_level
         220: argument_list: 
          221: argument: 
           222: expr: 
            223: name: bs
          224: argument: 
           225: expr: 
            226: literal: 1
          227: argument: 
           228: expr: 
            229: name: max_sub_layers_minus1
          230: argument: 
           231: expr: 
            232: operator: &
            233: name: ptl
          234: argument: 
           235: expr: 
            236: literal: 0
  237: expr_stmt: 
   238: expr: 
    239: name: sps_id
    240: operator: =
    241: call: 
     242: name: gf_bs_read_ue_log
     243: argument_list: 
      244: argument: 
       245: expr: 
        246: name: bs
      247: argument: 
       248: expr: 
        249: literal: "sps_id"
  250: if_stmt: 
   251: if: 
    252: condition: 
     253: expr: 
      254: operator: (
      255: name: sps_id
      256: operator: <
      257: literal: 0
      258: operator: )
      259: operator: ||
      260: operator: (
      261: name: sps_id
      262: operator: >=
      263: literal: 16
      264: operator: )
    265: block: 
     266: block_content: 
      267: return: 
       268: expr: 
        269: operator: -
        270: literal: 1
  271: expr_stmt: 
   272: expr: 
    273: name: sps
    274: operator: =
    275: operator: &
    276: name: 
     277: name: hevc
     278: operator: ->
     279: name: sps
     280: index: 
      281: expr: 
       282: name: sps_id
  283: if_stmt: 
   284: if: 
    285: condition: 
     286: expr: 
      287: operator: !
      288: name: 
       289: name: sps
       290: operator: ->
       291: name: state
    292: block: 
     293: block_content: 
      294: expr_stmt: 
       295: expr: 
        296: name: 
         297: name: sps
         298: operator: ->
         299: name: state
        300: operator: =
        301: literal: 1
      302: expr_stmt: 
       303: expr: 
        304: name: 
         305: name: sps
         306: operator: ->
         307: name: id
        308: operator: =
        309: name: sps_id
      310: expr_stmt: 
       311: expr: 
        312: name: 
         313: name: sps
         314: operator: ->
         315: name: vps_id
        316: operator: =
        317: name: vps_id
  318: expr_stmt: 
   319: expr: 
    320: name: 
     321: name: sps
     322: operator: ->
     323: name: ptl
    324: operator: =
    325: name: ptl
  326: expr_stmt: 
   327: expr: 
    328: name: vps
    329: operator: =
    330: operator: &
    331: name: 
     332: name: hevc
     333: operator: ->
     334: name: vps
     335: index: 
      336: expr: 
       337: name: vps_id
  338: expr_stmt: 
   339: expr: 
    340: name: 
     341: name: sps
     342: operator: ->
     343: name: max_sub_layers_minus1
    344: operator: =
    345: literal: 0
  346: expr_stmt: 
   347: expr: 
    348: name: 
     349: name: sps
     350: operator: ->
     351: name: sps_ext_or_max_sub_layers_minus1
    352: operator: =
    353: literal: 0
  354: comment: /* default values */
  355: expr_stmt: 
   356: expr: 
    357: name: 
     358: name: sps
     359: operator: ->
     360: name: colour_primaries
    361: operator: =
    362: literal: 2
  363: expr_stmt: 
   364: expr: 
    365: name: 
     366: name: sps
     367: operator: ->
     368: name: transfer_characteristic
    369: operator: =
    370: literal: 2
  371: expr_stmt: 
   372: expr: 
    373: name: 
     374: name: sps
     375: operator: ->
     376: name: matrix_coeffs
    377: operator: =
    378: literal: 2
  379: comment: //sps_rep_format_idx = 0;
  380: if_stmt: 
   381: if: 
    382: condition: 
     383: expr: 
      384: name: multiLayerExtSpsFlag
    385: block: 
     386: block_content: 
      387: expr_stmt: 
       388: expr: 
        389: name: 
         390: name: sps
         391: operator: ->
         392: name: update_rep_format_flag
        393: operator: =
        394: call: 
         395: name: gf_bs_read_int_log
         396: argument_list: 
          397: argument: 
           398: expr: 
            399: name: bs
          400: argument: 
           401: expr: 
            402: literal: 1
          403: argument: 
           404: expr: 
            405: literal: "update_rep_format_flag"
      406: if_stmt: 
       407: if: 
        408: condition: 
         409: expr: 
          410: name: 
           411: name: sps
           412: operator: ->
           413: name: update_rep_format_flag
        414: block: 
         415: block_content: 
          416: expr_stmt: 
           417: expr: 
            418: name: 
             419: name: sps
             420: operator: ->
             421: name: rep_format_idx
            422: operator: =
            423: call: 
             424: name: gf_bs_read_int_log
             425: argument_list: 
              426: argument: 
               427: expr: 
                428: name: bs
              429: argument: 
               430: expr: 
                431: literal: 8
              432: argument: 
               433: expr: 
                434: literal: "rep_format_idx"
       435: else: 
        436: block: 
         437: block_content: 
          438: expr_stmt: 
           439: expr: 
            440: name: 
             441: name: sps
             442: operator: ->
             443: name: rep_format_idx
            444: operator: =
            445: name: 
             446: name: vps
             447: operator: ->
             448: name: rep_format_idx
             449: index: 
              450: expr: 
               451: name: layer_id
      452: expr_stmt: 
       453: expr: 
        454: name: 
         455: name: sps
         456: operator: ->
         457: name: width
        458: operator: =
        459: name: 
         460: name: vps
         461: operator: ->
         462: name: rep_formats
         463: index: 
          464: expr: 
           465: name: 
            466: name: sps
            467: operator: ->
            468: name: rep_format_idx
        469: operator: .
        470: name: pic_width_luma_samples
      471: expr_stmt: 
       472: expr: 
        473: name: 
         474: name: sps
         475: operator: ->
         476: name: height
        477: operator: =
        478: name: 
         479: name: vps
         480: operator: ->
         481: name: rep_formats
         482: index: 
          483: expr: 
           484: name: 
            485: name: sps
            486: operator: ->
            487: name: rep_format_idx
        488: operator: .
        489: name: pic_height_luma_samples
      490: expr_stmt: 
       491: expr: 
        492: name: 
         493: name: sps
         494: operator: ->
         495: name: chroma_format_idc
        496: operator: =
        497: name: 
         498: name: vps
         499: operator: ->
         500: name: rep_formats
         501: index: 
          502: expr: 
           503: name: 
            504: name: sps
            505: operator: ->
            506: name: rep_format_idx
        507: operator: .
        508: name: chroma_format_idc
      509: expr_stmt: 
       510: expr: 
        511: name: 
         512: name: sps
         513: operator: ->
         514: name: bit_depth_luma
        515: operator: =
        516: name: 
         517: name: vps
         518: operator: ->
         519: name: rep_formats
         520: index: 
          521: expr: 
           522: name: 
            523: name: sps
            524: operator: ->
            525: name: rep_format_idx
        526: operator: .
        527: name: bit_depth_luma
      528: expr_stmt: 
       529: expr: 
        530: name: 
         531: name: sps
         532: operator: ->
         533: name: bit_depth_chroma
        534: operator: =
        535: name: 
         536: name: vps
         537: operator: ->
         538: name: rep_formats
         539: index: 
          540: expr: 
           541: name: 
            542: name: sps
            543: operator: ->
            544: name: rep_format_idx
        545: operator: .
        546: name: bit_depth_chroma
      547: expr_stmt: 
       548: expr: 
        549: name: 
         550: name: sps
         551: operator: ->
         552: name: separate_colour_plane_flag
        553: operator: =
        554: name: 
         555: name: vps
         556: operator: ->
         557: name: rep_formats
         558: index: 
          559: expr: 
           560: name: 
            561: name: sps
            562: operator: ->
            563: name: rep_format_idx
        564: operator: .
        565: name: separate_colour_plane_flag
      566: comment: //TODO this is crude ...
      567: expr_stmt: 
       568: expr: 
        569: name: 
         570: name: sps
         571: operator: ->
         572: name: ptl
        573: operator: =
        574: name: 
         575: name: vps
         576: operator: ->
         577: name: ext_ptl
         578: index: 
          579: expr: 
           580: literal: 0
   581: else: 
    582: block: 
     583: block_content: 
      584: expr_stmt: 
       585: expr: 
        586: name: 
         587: name: sps
         588: operator: ->
         589: name: chroma_format_idc
        590: operator: =
        591: call: 
         592: name: gf_bs_read_ue_log
         593: argument_list: 
          594: argument: 
           595: expr: 
            596: name: bs
          597: argument: 
           598: expr: 
            599: literal: "chroma_format_idc"
      600: if_stmt: 
       601: if: 
        602: condition: 
         603: expr: 
          604: name: 
           605: name: sps
           606: operator: ->
           607: name: chroma_format_idc
          608: operator: ==
          609: literal: 3
        610: block: 
         611: block_content: 
          612: expr_stmt: 
           613: expr: 
            614: name: 
             615: name: sps
             616: operator: ->
             617: name: separate_colour_plane_flag
            618: operator: =
            619: call: 
             620: name: gf_bs_read_int_log
             621: argument_list: 
              622: argument: 
               623: expr: 
                624: name: bs
              625: argument: 
               626: expr: 
                627: literal: 1
              628: argument: 
               629: expr: 
                630: literal: "separate_colour_plane_flag"
      631: expr_stmt: 
       632: expr: 
        633: name: 
         634: name: sps
         635: operator: ->
         636: name: width
        637: operator: =
        638: call: 
         639: name: gf_bs_read_ue_log
         640: argument_list: 
          641: argument: 
           642: expr: 
            643: name: bs
          644: argument: 
           645: expr: 
            646: literal: "width"
      647: expr_stmt: 
       648: expr: 
        649: name: 
         650: name: sps
         651: operator: ->
         652: name: height
        653: operator: =
        654: call: 
         655: name: gf_bs_read_ue_log
         656: argument_list: 
          657: argument: 
           658: expr: 
            659: name: bs
          660: argument: 
           661: expr: 
            662: literal: "height"
      663: if_stmt: 
       664: if: 
        665: condition: 
         666: expr: 
          667: operator: (
          668: name: 
           669: name: sps
           670: operator: ->
           671: name: cw_flag
          672: operator: =
          673: call: 
           674: name: gf_bs_read_int_log
           675: argument_list: 
            676: argument: 
             677: expr: 
              678: name: bs
            679: argument: 
             680: expr: 
              681: literal: 1
            682: argument: 
             683: expr: 
              684: literal: "conformance_window_flag"
          685: operator: )
        686: block: 
         687: block_content: 
          688: decl_stmt: 
           689: decl: 
            690: type: 
             691: name: u32
            692: name: SubWidthC
           693: decl: 
            694: type: 
            695: name: SubHeightC
          696: if_stmt: 
           697: if: 
            698: condition: 
             699: expr: 
              700: name: 
               701: name: sps
               702: operator: ->
               703: name: chroma_format_idc
              704: operator: ==
              705: literal: 1
            706: block: 
             707: block_content: 
              708: expr_stmt: 
               709: expr: 
                710: name: SubWidthC
                711: operator: =
                712: name: SubHeightC
                713: operator: =
                714: literal: 2
           715: if: 
            716: condition: 
             717: expr: 
              718: name: 
               719: name: sps
               720: operator: ->
               721: name: chroma_format_idc
              722: operator: ==
              723: literal: 2
            724: block: 
             725: block_content: 
              726: expr_stmt: 
               727: expr: 
                728: name: SubWidthC
                729: operator: =
                730: literal: 2
              731: expr_stmt: 
               732: expr: 
                733: name: SubHeightC
                734: operator: =
                735: literal: 1
           736: else: 
            737: block: 
             738: block_content: 
              739: expr_stmt: 
               740: expr: 
                741: name: SubWidthC
                742: operator: =
                743: name: SubHeightC
                744: operator: =
                745: literal: 1
          746: expr_stmt: 
           747: expr: 
            748: name: 
             749: name: sps
             750: operator: ->
             751: name: cw_left
            752: operator: =
            753: call: 
             754: name: gf_bs_read_ue_log
             755: argument_list: 
              756: argument: 
               757: expr: 
                758: name: bs
              759: argument: 
               760: expr: 
                761: literal: "conformance_window_left"
          762: expr_stmt: 
           763: expr: 
            764: name: 
             765: name: sps
             766: operator: ->
             767: name: cw_right
            768: operator: =
            769: call: 
             770: name: gf_bs_read_ue_log
             771: argument_list: 
              772: argument: 
               773: expr: 
                774: name: bs
              775: argument: 
               776: expr: 
                777: literal: "conformance_window_right"
          778: expr_stmt: 
           779: expr: 
            780: name: 
             781: name: sps
             782: operator: ->
             783: name: cw_top
            784: operator: =
            785: call: 
             786: name: gf_bs_read_ue_log
             787: argument_list: 
              788: argument: 
               789: expr: 
                790: name: bs
              791: argument: 
               792: expr: 
                793: literal: "conformance_window_top"
          794: expr_stmt: 
           795: expr: 
            796: name: 
             797: name: sps
             798: operator: ->
             799: name: cw_bottom
            800: operator: =
            801: call: 
             802: name: gf_bs_read_ue_log
             803: argument_list: 
              804: argument: 
               805: expr: 
                806: name: bs
              807: argument: 
               808: expr: 
                809: literal: "conformance_window_bottom"
          810: expr_stmt: 
           811: expr: 
            812: name: 
             813: name: sps
             814: operator: ->
             815: name: width
            816: operator: -=
            817: name: SubWidthC
            818: operator: *
            819: operator: (
            820: name: 
             821: name: sps
             822: operator: ->
             823: name: cw_left
            824: operator: +
            825: name: 
             826: name: sps
             827: operator: ->
             828: name: cw_right
            829: operator: )
          830: expr_stmt: 
           831: expr: 
            832: name: 
             833: name: sps
             834: operator: ->
             835: name: height
            836: operator: -=
            837: name: SubHeightC
            838: operator: *
            839: operator: (
            840: name: 
             841: name: sps
             842: operator: ->
             843: name: cw_top
            844: operator: +
            845: name: 
             846: name: sps
             847: operator: ->
             848: name: cw_bottom
            849: operator: )
      850: expr_stmt: 
       851: expr: 
        852: name: 
         853: name: sps
         854: operator: ->
         855: name: bit_depth_luma
        856: operator: =
        857: literal: 8
        858: operator: +
        859: call: 
         860: name: gf_bs_read_ue_log
         861: argument_list: 
          862: argument: 
           863: expr: 
            864: name: bs
          865: argument: 
           866: expr: 
            867: literal: "bit_depth_luma_minus8"
      868: expr_stmt: 
       869: expr: 
        870: name: 
         871: name: sps
         872: operator: ->
         873: name: bit_depth_chroma
        874: operator: =
        875: literal: 8
        876: operator: +
        877: call: 
         878: name: gf_bs_read_ue_log
         879: argument_list: 
          880: argument: 
           881: expr: 
            882: name: bs
          883: argument: 
           884: expr: 
            885: literal: "bit_depth_chroma_minus8"
  886: expr_stmt: 
   887: expr: 
    888: name: 
     889: name: sps
     890: operator: ->
     891: name: log2_max_pic_order_cnt_lsb
    892: operator: =
    893: literal: 4
    894: operator: +
    895: call: 
     896: name: gf_bs_read_ue_log
     897: argument_list: 
      898: argument: 
       899: expr: 
        900: name: bs
      901: argument: 
       902: expr: 
        903: literal: "log2_max_pic_order_cnt_lsb_minus4"
  904: if_stmt: 
   905: if: 
    906: condition: 
     907: expr: 
      908: operator: !
      909: name: multiLayerExtSpsFlag
    910: block: 
     911: block_content: 
      912: expr_stmt: 
       913: expr: 
        914: name: 
         915: name: sps
         916: operator: ->
         917: name: sub_layer_ordering_info_present_flag
        918: operator: =
        919: call: 
         920: name: gf_bs_read_int_log
         921: argument_list: 
          922: argument: 
           923: expr: 
            924: name: bs
          925: argument: 
           926: expr: 
            927: literal: 1
          928: argument: 
           929: expr: 
            930: literal: "sub_layer_ordering_info_present_flag"
      931: for: 
       932: control: 
        933: init: 
         934: expr: 
          935: name: i
          936: operator: =
          937: ternary: 
           938: condition: 
            939: expr: 
             940: name: 
              941: name: sps
              942: operator: ->
              943: name: sub_layer_ordering_info_present_flag
           944: then: 
            945: expr: 
             946: literal: 0
           947: else: 
            948: expr: 
             949: name: 
              950: name: sps
              951: operator: ->
              952: name: max_sub_layers_minus1
        953: condition: 
         954: expr: 
          955: name: i
          956: operator: <=
          957: name: 
           958: name: sps
           959: operator: ->
           960: name: max_sub_layers_minus1
        961: incr: 
         962: expr: 
          963: name: i
          964: operator: ++
       965: block: 
        966: block_content: 
         967: expr_stmt: 
          968: expr: 
           969: call: 
            970: name: gf_bs_read_ue_log_idx
            971: argument_list: 
             972: argument: 
              973: expr: 
               974: name: bs
             975: argument: 
              976: expr: 
               977: literal: "max_dec_pic_buffering"
             978: argument: 
              979: expr: 
               980: name: i
         981: expr_stmt: 
          982: expr: 
           983: call: 
            984: name: gf_bs_read_ue_log_idx
            985: argument_list: 
             986: argument: 
              987: expr: 
               988: name: bs
             989: argument: 
              990: expr: 
               991: literal: "num_reorder_pics"
             992: argument: 
              993: expr: 
               994: name: i
         995: expr_stmt: 
          996: expr: 
           997: call: 
            998: name: gf_bs_read_ue_log_idx
            999: argument_list: 
             1000: argument: 
              1001: expr: 
               1002: name: bs
             1003: argument: 
              1004: expr: 
               1005: literal: "max_latency_increase"
             1006: argument: 
              1007: expr: 
               1008: name: i
  1009: expr_stmt: 
   1010: expr: 
    1011: name: 
     1012: name: sps
     1013: operator: ->
     1014: name: log2_min_luma_coding_block_size
    1015: operator: =
    1016: literal: 3
    1017: operator: +
    1018: call: 
     1019: name: gf_bs_read_ue_log
     1020: argument_list: 
      1021: argument: 
       1022: expr: 
        1023: name: bs
      1024: argument: 
       1025: expr: 
        1026: literal: "log2_min_luma_coding_block_size_minus3"
  1027: expr_stmt: 
   1028: expr: 
    1029: name: 
     1030: name: sps
     1031: operator: ->
     1032: name: log2_diff_max_min_luma_coding_block_size
    1033: operator: =
    1034: call: 
     1035: name: gf_bs_read_ue_log
     1036: argument_list: 
      1037: argument: 
       1038: expr: 
        1039: name: bs
      1040: argument: 
       1041: expr: 
        1042: literal: "log2_diff_max_min_luma_coding_block_size"
  1043: expr_stmt: 
   1044: expr: 
    1045: name: 
     1046: name: sps
     1047: operator: ->
     1048: name: max_CU_width
    1049: operator: =
    1050: operator: (
    1051: literal: 1
    1052: operator: <<
    1053: operator: (
    1054: name: 
     1055: name: sps
     1056: operator: ->
     1057: name: log2_min_luma_coding_block_size
    1058: operator: +
    1059: name: 
     1060: name: sps
     1061: operator: ->
     1062: name: log2_diff_max_min_luma_coding_block_size
    1063: operator: )
    1064: operator: )
  1065: expr_stmt: 
   1066: expr: 
    1067: name: 
     1068: name: sps
     1069: operator: ->
     1070: name: max_CU_height
    1071: operator: =
    1072: operator: (
    1073: literal: 1
    1074: operator: <<
    1075: operator: (
    1076: name: 
     1077: name: sps
     1078: operator: ->
     1079: name: log2_min_luma_coding_block_size
    1080: operator: +
    1081: name: 
     1082: name: sps
     1083: operator: ->
     1084: name: log2_diff_max_min_luma_coding_block_size
    1085: operator: )
    1086: operator: )
  1087: expr_stmt: 
   1088: expr: 
    1089: name: 
     1090: name: sps
     1091: operator: ->
     1092: name: log2_min_transform_block_size
    1093: operator: =
    1094: literal: 2
    1095: operator: +
    1096: call: 
     1097: name: gf_bs_read_ue_log
     1098: argument_list: 
      1099: argument: 
       1100: expr: 
        1101: name: bs
      1102: argument: 
       1103: expr: 
        1104: literal: "log2_min_transform_block_size_minus2"
  1105: expr_stmt: 
   1106: expr: 
    1107: name: 
     1108: name: sps
     1109: operator: ->
     1110: name: log2_max_transform_block_size
    1111: operator: =
    1112: name: 
     1113: name: sps
     1114: operator: ->
     1115: name: log2_min_transform_block_size
    1116: operator: +
    1117: call: 
     1118: name: gf_bs_read_ue_log
     1119: argument_list: 
      1120: argument: 
       1121: expr: 
        1122: name: bs
      1123: argument: 
       1124: expr: 
        1125: literal: "log2_max_transform_block_size"
  1126: expr_stmt: 
   1127: expr: 
    1128: name: depth
    1129: operator: =
    1130: literal: 0
  1131: expr_stmt: 
   1132: expr: 
    1133: name: 
     1134: name: sps
     1135: operator: ->
     1136: name: max_transform_hierarchy_depth_inter
    1137: operator: =
    1138: call: 
     1139: name: gf_bs_read_ue_log
     1140: argument_list: 
      1141: argument: 
       1142: expr: 
        1143: name: bs
      1144: argument: 
       1145: expr: 
        1146: literal: "max_transform_hierarchy_depth_inter"
  1147: expr_stmt: 
   1148: expr: 
    1149: name: 
     1150: name: sps
     1151: operator: ->
     1152: name: max_transform_hierarchy_depth_intra
    1153: operator: =
    1154: call: 
     1155: name: gf_bs_read_ue_log
     1156: argument_list: 
      1157: argument: 
       1158: expr: 
        1159: name: bs
      1160: argument: 
       1161: expr: 
        1162: literal: "max_transform_hierarchy_depth_intra"
  1163: while: 
   1164: condition: 
    1165: expr: 
     1166: operator: (
     1167: name: u32
     1168: operator: )
     1169: operator: (
     1170: name: 
      1171: name: sps
      1172: operator: ->
      1173: name: max_CU_width
     1174: operator: >>
     1175: name: 
      1176: name: sps
      1177: operator: ->
      1178: name: log2_diff_max_min_luma_coding_block_size
     1179: operator: )
     1180: operator: >
     1181: operator: (
     1182: name: u32
     1183: operator: )
     1184: operator: (
     1185: literal: 1
     1186: operator: <<
     1187: operator: (
     1188: name: 
      1189: name: sps
      1190: operator: ->
      1191: name: log2_min_transform_block_size
     1192: operator: +
     1193: name: depth
     1194: operator: )
     1195: operator: )
   1196: block: 
    1197: block_content: 
     1198: expr_stmt: 
      1199: expr: 
       1200: name: depth
       1201: operator: ++
  1202: expr_stmt: 
   1203: expr: 
    1204: name: 
     1205: name: sps
     1206: operator: ->
     1207: name: max_CU_depth
    1208: operator: =
    1209: name: 
     1210: name: sps
     1211: operator: ->
     1212: name: log2_diff_max_min_luma_coding_block_size
    1213: operator: +
    1214: name: depth
  1215: expr_stmt: 
   1216: expr: 
    1217: name: nb_CTUs
    1218: operator: =
    1219: operator: (
    1220: operator: (
    1221: name: 
     1222: name: sps
     1223: operator: ->
     1224: name: width
    1225: operator: +
    1226: name: 
     1227: name: sps
     1228: operator: ->
     1229: name: max_CU_width
    1230: operator: -
    1231: literal: 1
    1232: operator: )
    1233: operator: /
    1234: name: 
     1235: name: sps
     1236: operator: ->
     1237: name: max_CU_width
    1238: operator: )
    1239: operator: *
    1240: operator: (
    1241: operator: (
    1242: name: 
     1243: name: sps
     1244: operator: ->
     1245: name: height
    1246: operator: +
    1247: name: 
     1248: name: sps
     1249: operator: ->
     1250: name: max_CU_height
    1251: operator: -
    1252: literal: 1
    1253: operator: )
    1254: operator: /
    1255: name: 
     1256: name: sps
     1257: operator: ->
     1258: name: max_CU_height
    1259: operator: )
  1260: expr_stmt: 
   1261: expr: 
    1262: name: 
     1263: name: sps
     1264: operator: ->
     1265: name: bitsSliceSegmentAddress
    1266: operator: =
    1267: literal: 0
  1268: while: 
   1269: condition: 
    1270: expr: 
     1271: name: nb_CTUs
     1272: operator: >
     1273: operator: (
     1274: name: u32
     1275: operator: )
     1276: operator: (
     1277: literal: 1
     1278: operator: <<
     1279: name: 
      1280: name: sps
      1281: operator: ->
      1282: name: bitsSliceSegmentAddress
     1283: operator: )
   1284: block: 
    1285: block_content: 
     1286: expr_stmt: 
      1287: expr: 
       1288: name: 
        1289: name: sps
        1290: operator: ->
        1291: name: bitsSliceSegmentAddress
       1292: operator: ++
  1293: expr_stmt: 
   1294: expr: 
    1295: name: 
     1296: name: sps
     1297: operator: ->
     1298: name: scaling_list_enable_flag
    1299: operator: =
    1300: call: 
     1301: name: gf_bs_read_int_log
     1302: argument_list: 
      1303: argument: 
       1304: expr: 
        1305: name: bs
      1306: argument: 
       1307: expr: 
        1308: literal: 1
      1309: argument: 
       1310: expr: 
        1311: literal: "scaling_list_enable_flag"
  1312: if_stmt: 
   1313: if: 
    1314: condition: 
     1315: expr: 
      1316: name: 
       1317: name: sps
       1318: operator: ->
       1319: name: scaling_list_enable_flag
    1320: block: 
     1321: block_content: 
      1322: expr_stmt: 
       1323: expr: 
        1324: name: 
         1325: name: sps
         1326: operator: ->
         1327: name: infer_scaling_list_flag
        1328: operator: =
        1329: literal: 0
      1330: expr_stmt: 
       1331: expr: 
        1332: name: 
         1333: name: sps
         1334: operator: ->
         1335: name: scaling_list_ref_layer_id
        1336: operator: =
        1337: literal: 0
      1338: if_stmt: 
       1339: if: 
        1340: condition: 
         1341: expr: 
          1342: name: multiLayerExtSpsFlag
        1343: block: 
         1344: block_content: 
          1345: expr_stmt: 
           1346: expr: 
            1347: name: 
             1348: name: sps
             1349: operator: ->
             1350: name: infer_scaling_list_flag
            1351: operator: =
            1352: call: 
             1353: name: gf_bs_read_int_log
             1354: argument_list: 
              1355: argument: 
               1356: expr: 
                1357: name: bs
              1358: argument: 
               1359: expr: 
                1360: literal: 1
              1361: argument: 
               1362: expr: 
                1363: literal: "infer_scaling_list_flag"
      1364: if_stmt: 
       1365: if: 
        1366: condition: 
         1367: expr: 
          1368: name: 
           1369: name: sps
           1370: operator: ->
           1371: name: infer_scaling_list_flag
        1372: block: 
         1373: block_content: 
          1374: expr_stmt: 
           1375: expr: 
            1376: name: 
             1377: name: sps
             1378: operator: ->
             1379: name: scaling_list_ref_layer_id
            1380: operator: =
            1381: call: 
             1382: name: gf_bs_read_int_log
             1383: argument_list: 
              1384: argument: 
               1385: expr: 
                1386: name: bs
              1387: argument: 
               1388: expr: 
                1389: literal: 6
              1390: argument: 
               1391: expr: 
                1392: literal: "scaling_list_ref_layer_id"
       1393: else: 
        1394: block: 
         1395: block_content: 
          1396: expr_stmt: 
           1397: expr: 
            1398: name: 
             1399: name: sps
             1400: operator: ->
             1401: name: scaling_list_data_present_flag
            1402: operator: =
            1403: call: 
             1404: name: gf_bs_read_int_log
             1405: argument_list: 
              1406: argument: 
               1407: expr: 
                1408: name: bs
              1409: argument: 
               1410: expr: 
                1411: literal: 1
              1412: argument: 
               1413: expr: 
                1414: literal: "scaling_list_data_present_flag"
          1415: if_stmt: 
           1416: if: 
            1417: condition: 
             1418: expr: 
              1419: name: 
               1420: name: sps
               1421: operator: ->
               1422: name: scaling_list_data_present_flag
            1423: block: 
             1424: block_content: 
              1425: expr_stmt: 
               1426: expr: 
                1427: call: 
                 1428: name: hevc_scaling_list_data
                 1429: argument_list: 
                  1430: argument: 
                   1431: expr: 
                    1432: name: bs
  1433: expr_stmt: 
   1434: expr: 
    1435: name: 
     1436: name: sps
     1437: operator: ->
     1438: name: asymmetric_motion_partitions_enabled_flag
    1439: operator: =
    1440: call: 
     1441: name: gf_bs_read_int_log
     1442: argument_list: 
      1443: argument: 
       1444: expr: 
        1445: name: bs
      1446: argument: 
       1447: expr: 
        1448: literal: 1
      1449: argument: 
       1450: expr: 
        1451: literal: "asymmetric_motion_partitions_enabled_flag"
  1452: expr_stmt: 
   1453: expr: 
    1454: name: 
     1455: name: sps
     1456: operator: ->
     1457: name: sample_adaptive_offset_enabled_flag
    1458: operator: =
    1459: call: 
     1460: name: gf_bs_read_int_log
     1461: argument_list: 
      1462: argument: 
       1463: expr: 
        1464: name: bs
      1465: argument: 
       1466: expr: 
        1467: literal: 1
      1468: argument: 
       1469: expr: 
        1470: literal: "sample_adaptive_offset_enabled_flag"
  1471: if_stmt: 
   1472: if: 
    1473: condition: 
     1474: expr: 
      1475: operator: (
      1476: name: 
       1477: name: sps
       1478: operator: ->
       1479: name: pcm_enabled_flag
      1480: operator: =
      1481: call: 
       1482: name: gf_bs_read_int_log
       1483: argument_list: 
        1484: argument: 
         1485: expr: 
          1486: name: bs
        1487: argument: 
         1488: expr: 
          1489: literal: 1
        1490: argument: 
         1491: expr: 
          1492: literal: "pcm_enabled_flag"
      1493: operator: )
    1494: block: 
     1495: block_content: 
      1496: expr_stmt: 
       1497: expr: 
        1498: name: 
         1499: name: sps
         1500: operator: ->
         1501: name: pcm_sample_bit_depth_luma_minus1
        1502: operator: =
        1503: call: 
         1504: name: gf_bs_read_int_log
         1505: argument_list: 
          1506: argument: 
           1507: expr: 
            1508: name: bs
          1509: argument: 
           1510: expr: 
            1511: literal: 4
          1512: argument: 
           1513: expr: 
            1514: literal: "pcm_sample_bit_depth_luma_minus1"
      1515: expr_stmt: 
       1516: expr: 
        1517: name: 
         1518: name: sps
         1519: operator: ->
         1520: name: pcm_sample_bit_depth_chroma_minus1
        1521: operator: =
        1522: call: 
         1523: name: gf_bs_read_int_log
         1524: argument_list: 
          1525: argument: 
           1526: expr: 
            1527: name: bs
          1528: argument: 
           1529: expr: 
            1530: literal: 4
          1531: argument: 
           1532: expr: 
            1533: literal: "pcm_sample_bit_depth_chroma_minus1"
      1534: expr_stmt: 
       1535: expr: 
        1536: name: 
         1537: name: sps
         1538: operator: ->
         1539: name: log2_min_pcm_luma_coding_block_size_minus3
        1540: operator: =
        1541: call: 
         1542: name: gf_bs_read_ue_log
         1543: argument_list: 
          1544: argument: 
           1545: expr: 
            1546: name: bs
          1547: argument: 
           1548: expr: 
            1549: literal: "log2_min_pcm_luma_coding_block_size_minus3"
      1550: expr_stmt: 
       1551: expr: 
        1552: name: 
         1553: name: sps
         1554: operator: ->
         1555: name: log2_diff_max_min_pcm_luma_coding_block_size
        1556: operator: =
        1557: call: 
         1558: name: gf_bs_read_ue_log
         1559: argument_list: 
          1560: argument: 
           1561: expr: 
            1562: name: bs
          1563: argument: 
           1564: expr: 
            1565: literal: "log2_diff_max_min_pcm_luma_coding_block_size"
      1566: expr_stmt: 
       1567: expr: 
        1568: name: 
         1569: name: sps
         1570: operator: ->
         1571: name: pcm_loop_filter_disable_flag
        1572: operator: =
        1573: call: 
         1574: name: gf_bs_read_int_log
         1575: argument_list: 
          1576: argument: 
           1577: expr: 
            1578: name: bs
          1579: argument: 
           1580: expr: 
            1581: literal: 1
          1582: argument: 
           1583: expr: 
            1584: literal: "pcm_loop_filter_disable_flag"
  1585: expr_stmt: 
   1586: expr: 
    1587: name: 
     1588: name: sps
     1589: operator: ->
     1590: name: num_short_term_ref_pic_sets
    1591: operator: =
    1592: call: 
     1593: name: gf_bs_read_ue_log
     1594: argument_list: 
      1595: argument: 
       1596: expr: 
        1597: name: bs
      1598: argument: 
       1599: expr: 
        1600: literal: "num_short_term_ref_pic_sets"
  1601: if_stmt: 
   1602: if: 
    1603: condition: 
     1604: expr: 
      1605: name: 
       1606: name: sps
       1607: operator: ->
       1608: name: num_short_term_ref_pic_sets
      1609: operator: >
      1610: literal: 64
    1611: block: 
     1612: block_content: 
      1613: expr_stmt: 
       1614: expr: 
        1615: call: 
         1616: name: GF_LOG
         1617: argument_list: 
          1618: argument: 
           1619: expr: 
            1620: name: GF_LOG_ERROR
          1621: argument: 
           1622: expr: 
            1623: name: GF_LOG_CODING
          1624: argument: 
           1625: expr: 
            1626: operator: (
            1627: literal: "[HEVC] Invalid number of short term reference picture sets %d\n"
            1628: operator: ,
            1629: name: 
             1630: name: sps
             1631: operator: ->
             1632: name: num_short_term_ref_pic_sets
            1633: operator: )
      1634: return: 
       1635: expr: 
        1636: operator: -
        1637: literal: 1
  1638: for: 
   1639: control: 
    1640: init: 
     1641: expr: 
      1642: name: i
      1643: operator: =
      1644: literal: 0
    1645: condition: 
     1646: expr: 
      1647: name: i
      1648: operator: <
      1649: name: 
       1650: name: sps
       1651: operator: ->
       1652: name: num_short_term_ref_pic_sets
    1653: incr: 
     1654: expr: 
      1655: name: i
      1656: operator: ++
   1657: block: 
    1658: block_content: 
     1659: decl_stmt: 
      1660: decl: 
       1661: type: 
        1662: name: Bool
       1663: name: ret
       1664: init: 
        1665: expr: 
         1666: call: 
          1667: name: hevc_parse_short_term_ref_pic_set
          1668: argument_list: 
           1669: argument: 
            1670: expr: 
             1671: name: bs
           1672: argument: 
            1673: expr: 
             1674: name: sps
           1675: argument: 
            1676: expr: 
             1677: name: i
     1678: comment: /*cannot parse short_term_ref_pic_set, skip VUI parsing*/
     1679: if_stmt: 
      1680: if: 
       1681: condition: 
        1682: expr: 
         1683: operator: !
         1684: name: ret
       1685: block: 
        1686: block_content: 
         1687: expr_stmt: 
          1688: expr: 
           1689: call: 
            1690: name: GF_LOG
            1691: argument_list: 
             1692: argument: 
              1693: expr: 
               1694: name: GF_LOG_ERROR
             1695: argument: 
              1696: expr: 
               1697: name: GF_LOG_CODING
             1698: argument: 
              1699: expr: 
               1700: operator: (
               1701: literal: "[HEVC] Invalid short_term_ref_pic_set\n"
               1702: operator: )
         1703: return: 
          1704: expr: 
           1705: operator: -
           1706: literal: 1
  1707: expr_stmt: 
   1708: expr: 
    1709: name: 
     1710: name: sps
     1711: operator: ->
     1712: name: long_term_ref_pics_present_flag
    1713: operator: =
    1714: call: 
     1715: name: gf_bs_read_int_log
     1716: argument_list: 
      1717: argument: 
       1718: expr: 
        1719: name: bs
      1720: argument: 
       1721: expr: 
        1722: literal: 1
      1723: argument: 
       1724: expr: 
        1725: literal: "long_term_ref_pics_present_flag"
  1726: if_stmt: 
   1727: if: 
    1728: condition: 
     1729: expr: 
      1730: name: 
       1731: name: sps
       1732: operator: ->
       1733: name: long_term_ref_pics_present_flag
    1734: block: 
     1735: block_content: 
      1736: expr_stmt: 
       1737: expr: 
        1738: name: 
         1739: name: sps
         1740: operator: ->
         1741: name: num_long_term_ref_pic_sps
        1742: operator: =
        1743: call: 
         1744: name: gf_bs_read_ue_log
         1745: argument_list: 
          1746: argument: 
           1747: expr: 
            1748: name: bs
          1749: argument: 
           1750: expr: 
            1751: literal: "num_long_term_ref_pic_sps"
      1752: for: 
       1753: control: 
        1754: init: 
         1755: expr: 
          1756: name: i
          1757: operator: =
          1758: literal: 0
        1759: condition: 
         1760: expr: 
          1761: name: i
          1762: operator: <
          1763: name: 
           1764: name: sps
           1765: operator: ->
           1766: name: num_long_term_ref_pic_sps
        1767: incr: 
         1768: expr: 
          1769: name: i
          1770: operator: ++
       1771: block: 
        1772: block_content: 
         1773: expr_stmt: 
          1774: expr: 
           1775: call: 
            1776: name: gf_bs_read_int_log_idx
            1777: argument_list: 
             1778: argument: 
              1779: expr: 
               1780: name: bs
             1781: argument: 
              1782: expr: 
               1783: name: 
                1784: name: sps
                1785: operator: ->
                1786: name: log2_max_pic_order_cnt_lsb
             1787: argument: 
              1788: expr: 
               1789: literal: "lt_ref_pic_poc_lsb_sps"
             1790: argument: 
              1791: expr: 
               1792: name: i
         1793: expr_stmt: 
          1794: expr: 
           1795: call: 
            1796: name: gf_bs_read_int_log_idx
            1797: argument_list: 
             1798: argument: 
              1799: expr: 
               1800: name: bs
             1801: argument: 
              1802: expr: 
               1803: literal: 1
             1804: argument: 
              1805: expr: 
               1806: literal: "used_by_curr_pic_lt_sps_flag"
             1807: argument: 
              1808: expr: 
               1809: name: i
  1810: expr_stmt: 
   1811: expr: 
    1812: name: 
     1813: name: sps
     1814: operator: ->
     1815: name: temporal_mvp_enable_flag
    1816: operator: =
    1817: call: 
     1818: name: gf_bs_read_int_log
     1819: argument_list: 
      1820: argument: 
       1821: expr: 
        1822: name: bs
      1823: argument: 
       1824: expr: 
        1825: literal: 1
      1826: argument: 
       1827: expr: 
        1828: literal: "temporal_mvp_enable_flag"
  1829: expr_stmt: 
   1830: expr: 
    1831: name: 
     1832: name: sps
     1833: operator: ->
     1834: name: strong_intra_smoothing_enable_flag
    1835: operator: =
    1836: call: 
     1837: name: gf_bs_read_int_log
     1838: argument_list: 
      1839: argument: 
       1840: expr: 
        1841: name: bs
      1842: argument: 
       1843: expr: 
        1844: literal: 1
      1845: argument: 
       1846: expr: 
        1847: literal: "strong_intra_smoothing_enable_flag"
  1848: if_stmt: 
   1849: if: 
    1850: condition: 
     1851: expr: 
      1852: name: vui_flag_pos
    1853: block: 
     1854: block_content: 
      1855: expr_stmt: 
       1856: expr: 
        1857: operator: *
        1858: name: vui_flag_pos
        1859: operator: =
        1860: operator: (
        1861: name: u32
        1862: operator: )
        1863: call: 
         1864: name: gf_bs_get_bit_offset
         1865: argument_list: 
          1866: argument: 
           1867: expr: 
            1868: name: bs
  1869: if_stmt: 
   1870: if: 
    1871: condition: 
     1872: expr: 
      1873: operator: (
      1874: name: 
       1875: name: sps
       1876: operator: ->
       1877: name: vui_parameters_present_flag
      1878: operator: =
      1879: call: 
       1880: name: gf_bs_read_int_log
       1881: argument_list: 
        1882: argument: 
         1883: expr: 
          1884: name: bs
        1885: argument: 
         1886: expr: 
          1887: literal: 1
        1888: argument: 
         1889: expr: 
          1890: literal: "vui_parameters_present_flag"
      1891: operator: )
    1892: block: 
     1893: block_content: 
      1894: expr_stmt: 
       1895: expr: 
        1896: name: 
         1897: name: sps
         1898: operator: ->
         1899: name: aspect_ratio_info_present_flag
        1900: operator: =
        1901: call: 
         1902: name: gf_bs_read_int_log
         1903: argument_list: 
          1904: argument: 
           1905: expr: 
            1906: name: bs
          1907: argument: 
           1908: expr: 
            1909: literal: 1
          1910: argument: 
           1911: expr: 
            1912: literal: "aspect_ratio_info_present_flag"
      1913: if_stmt: 
       1914: if: 
        1915: condition: 
         1916: expr: 
          1917: name: 
           1918: name: sps
           1919: operator: ->
           1920: name: aspect_ratio_info_present_flag
        1921: block: 
         1922: block_content: 
          1923: expr_stmt: 
           1924: expr: 
            1925: name: 
             1926: name: sps
             1927: operator: ->
             1928: name: sar_idc
            1929: operator: =
            1930: call: 
             1931: name: gf_bs_read_int_log
             1932: argument_list: 
              1933: argument: 
               1934: expr: 
                1935: name: bs
              1936: argument: 
               1937: expr: 
                1938: literal: 8
              1939: argument: 
               1940: expr: 
                1941: literal: "aspect_ratio_idc"
          1942: if_stmt: 
           1943: if: 
            1944: condition: 
             1945: expr: 
              1946: name: 
               1947: name: sps
               1948: operator: ->
               1949: name: sar_idc
              1950: operator: ==
              1951: literal: 255
            1952: block: 
             1953: block_content: 
              1954: expr_stmt: 
               1955: expr: 
                1956: name: 
                 1957: name: sps
                 1958: operator: ->
                 1959: name: sar_width
                1960: operator: =
                1961: call: 
                 1962: name: gf_bs_read_int_log
                 1963: argument_list: 
                  1964: argument: 
                   1965: expr: 
                    1966: name: bs
                  1967: argument: 
                   1968: expr: 
                    1969: literal: 16
                  1970: argument: 
                   1971: expr: 
                    1972: literal: "aspect_ratio_width"
              1973: expr_stmt: 
               1974: expr: 
                1975: name: 
                 1976: name: sps
                 1977: operator: ->
                 1978: name: sar_height
                1979: operator: =
                1980: call: 
                 1981: name: gf_bs_read_int_log
                 1982: argument_list: 
                  1983: argument: 
                   1984: expr: 
                    1985: name: bs
                  1986: argument: 
                   1987: expr: 
                    1988: literal: 16
                  1989: argument: 
                   1990: expr: 
                    1991: literal: "aspect_ratio_height"
           1992: if: 
            1993: condition: 
             1994: expr: 
              1995: name: 
               1996: name: sps
               1997: operator: ->
               1998: name: sar_idc
              1999: operator: <
              2000: literal: 17
            2001: block: 
             2002: block_content: 
              2003: expr_stmt: 
               2004: expr: 
                2005: name: 
                 2006: name: sps
                 2007: operator: ->
                 2008: name: sar_width
                2009: operator: =
                2010: name: 
                 2011: name: hevc_sar
                 2012: index: 
                  2013: expr: 
                   2014: name: 
                    2015: name: sps
                    2016: operator: ->
                    2017: name: sar_idc
                2018: operator: .
                2019: name: w
              2020: expr_stmt: 
               2021: expr: 
                2022: name: 
                 2023: name: sps
                 2024: operator: ->
                 2025: name: sar_height
                2026: operator: =
                2027: name: 
                 2028: name: hevc_sar
                 2029: index: 
                  2030: expr: 
                   2031: name: 
                    2032: name: sps
                    2033: operator: ->
                    2034: name: sar_idc
                2035: operator: .
                2036: name: h
      2037: if_stmt: 
       2038: if: 
        2039: condition: 
         2040: expr: 
          2041: operator: (
          2042: name: 
           2043: name: sps
           2044: operator: ->
           2045: name: overscan_info_present
          2046: operator: =
          2047: call: 
           2048: name: gf_bs_read_int_log
           2049: argument_list: 
            2050: argument: 
             2051: expr: 
              2052: name: bs
            2053: argument: 
             2054: expr: 
              2055: literal: 1
            2056: argument: 
             2057: expr: 
              2058: literal: "overscan_info_present"
          2059: operator: )
        2060: block: 
         2061: block_content: 
          2062: expr_stmt: 
           2063: expr: 
            2064: name: 
             2065: name: sps
             2066: operator: ->
             2067: name: overscan_appropriate
            2068: operator: =
            2069: call: 
             2070: name: gf_bs_read_int_log
             2071: argument_list: 
              2072: argument: 
               2073: expr: 
                2074: name: bs
              2075: argument: 
               2076: expr: 
                2077: literal: 1
              2078: argument: 
               2079: expr: 
                2080: literal: "overscan_appropriate"
      2081: expr_stmt: 
       2082: expr: 
        2083: name: 
         2084: name: sps
         2085: operator: ->
         2086: name: video_signal_type_present_flag
        2087: operator: =
        2088: call: 
         2089: name: gf_bs_read_int_log
         2090: argument_list: 
          2091: argument: 
           2092: expr: 
            2093: name: bs
          2094: argument: 
           2095: expr: 
            2096: literal: 1
          2097: argument: 
           2098: expr: 
            2099: literal: "video_signal_type_present_flag"
      2100: if_stmt: 
       2101: if: 
        2102: condition: 
         2103: expr: 
          2104: name: 
           2105: name: sps
           2106: operator: ->
           2107: name: video_signal_type_present_flag
        2108: block: 
         2109: block_content: 
          2110: expr_stmt: 
           2111: expr: 
            2112: name: 
             2113: name: sps
             2114: operator: ->
             2115: name: video_format
            2116: operator: =
            2117: call: 
             2118: name: gf_bs_read_int_log
             2119: argument_list: 
              2120: argument: 
               2121: expr: 
                2122: name: bs
              2123: argument: 
               2124: expr: 
                2125: literal: 3
              2126: argument: 
               2127: expr: 
                2128: literal: "video_format"
          2129: expr_stmt: 
           2130: expr: 
            2131: name: 
             2132: name: sps
             2133: operator: ->
             2134: name: video_full_range_flag
            2135: operator: =
            2136: call: 
             2137: name: gf_bs_read_int_log
             2138: argument_list: 
              2139: argument: 
               2140: expr: 
                2141: name: bs
              2142: argument: 
               2143: expr: 
                2144: literal: 1
              2145: argument: 
               2146: expr: 
                2147: literal: "video_full_range_flag"
          2148: if_stmt: 
           2149: if: 
            2150: condition: 
             2151: expr: 
              2152: operator: (
              2153: name: 
               2154: name: sps
               2155: operator: ->
               2156: name: colour_description_present_flag
              2157: operator: =
              2158: call: 
               2159: name: gf_bs_read_int_log
               2160: argument_list: 
                2161: argument: 
                 2162: expr: 
                  2163: name: bs
                2164: argument: 
                 2165: expr: 
                  2166: literal: 1
                2167: argument: 
                 2168: expr: 
                  2169: literal: "colour_description_present_flag"
              2170: operator: )
            2171: block: 
             2172: block_content: 
              2173: expr_stmt: 
               2174: expr: 
                2175: name: 
                 2176: name: sps
                 2177: operator: ->
                 2178: name: colour_primaries
                2179: operator: =
                2180: call: 
                 2181: name: gf_bs_read_int_log
                 2182: argument_list: 
                  2183: argument: 
                   2184: expr: 
                    2185: name: bs
                  2186: argument: 
                   2187: expr: 
                    2188: literal: 8
                  2189: argument: 
                   2190: expr: 
                    2191: literal: "colour_primaries"
              2192: expr_stmt: 
               2193: expr: 
                2194: name: 
                 2195: name: sps
                 2196: operator: ->
                 2197: name: transfer_characteristic
                2198: operator: =
                2199: call: 
                 2200: name: gf_bs_read_int_log
                 2201: argument_list: 
                  2202: argument: 
                   2203: expr: 
                    2204: name: bs
                  2205: argument: 
                   2206: expr: 
                    2207: literal: 8
                  2208: argument: 
                   2209: expr: 
                    2210: literal: "transfer_characteristic"
              2211: expr_stmt: 
               2212: expr: 
                2213: name: 
                 2214: name: sps
                 2215: operator: ->
                 2216: name: matrix_coeffs
                2217: operator: =
                2218: call: 
                 2219: name: gf_bs_read_int_log
                 2220: argument_list: 
                  2221: argument: 
                   2222: expr: 
                    2223: name: bs
                  2224: argument: 
                   2225: expr: 
                    2226: literal: 8
                  2227: argument: 
                   2228: expr: 
                    2229: literal: "matrix_coefficients"
      2230: if_stmt: 
       2231: if: 
        2232: condition: 
         2233: expr: 
          2234: operator: (
          2235: name: 
           2236: name: sps
           2237: operator: ->
           2238: name: chroma_loc_info_present_flag
          2239: operator: =
          2240: call: 
           2241: name: gf_bs_read_int_log
           2242: argument_list: 
            2243: argument: 
             2244: expr: 
              2245: name: bs
            2246: argument: 
             2247: expr: 
              2248: literal: 1
            2249: argument: 
             2250: expr: 
              2251: literal: "chroma_loc_info_present_flag"
          2252: operator: )
        2253: block: 
         2254: block_content: 
          2255: expr_stmt: 
           2256: expr: 
            2257: name: 
             2258: name: sps
             2259: operator: ->
             2260: name: chroma_sample_loc_type_top_field
            2261: operator: =
            2262: call: 
             2263: name: gf_bs_read_ue_log
             2264: argument_list: 
              2265: argument: 
               2266: expr: 
                2267: name: bs
              2268: argument: 
               2269: expr: 
                2270: literal: "chroma_sample_loc_type_top_field"
          2271: expr_stmt: 
           2272: expr: 
            2273: name: 
             2274: name: sps
             2275: operator: ->
             2276: name: chroma_sample_loc_type_bottom_field
            2277: operator: =
            2278: call: 
             2279: name: gf_bs_read_ue_log
             2280: argument_list: 
              2281: argument: 
               2282: expr: 
                2283: name: bs
              2284: argument: 
               2285: expr: 
                2286: literal: "chroma_sample_loc_type_bottom_field"
      2287: expr_stmt: 
       2288: expr: 
        2289: name: 
         2290: name: sps
         2291: operator: ->
         2292: name: neutra_chroma_indication_flag
        2293: operator: =
        2294: call: 
         2295: name: gf_bs_read_int_log
         2296: argument_list: 
          2297: argument: 
           2298: expr: 
            2299: name: bs
          2300: argument: 
           2301: expr: 
            2302: literal: 1
          2303: argument: 
           2304: expr: 
            2305: literal: "neutra_chroma_indication_flag"
      2306: expr_stmt: 
       2307: expr: 
        2308: name: 
         2309: name: sps
         2310: operator: ->
         2311: name: field_seq_flag
        2312: operator: =
        2313: call: 
         2314: name: gf_bs_read_int_log
         2315: argument_list: 
          2316: argument: 
           2317: expr: 
            2318: name: bs
          2319: argument: 
           2320: expr: 
            2321: literal: 1
          2322: argument: 
           2323: expr: 
            2324: literal: "field_seq_flag"
      2325: expr_stmt: 
       2326: expr: 
        2327: name: 
         2328: name: sps
         2329: operator: ->
         2330: name: frame_field_info_present_flag
        2331: operator: =
        2332: call: 
         2333: name: gf_bs_read_int_log
         2334: argument_list: 
          2335: argument: 
           2336: expr: 
            2337: name: bs
          2338: argument: 
           2339: expr: 
            2340: literal: 1
          2341: argument: 
           2342: expr: 
            2343: literal: "frame_field_info_present_flag"
      2344: if_stmt: 
       2345: if: 
        2346: condition: 
         2347: expr: 
          2348: operator: (
          2349: name: 
           2350: name: sps
           2351: operator: ->
           2352: name: default_display_window_flag
          2353: operator: =
          2354: call: 
           2355: name: gf_bs_read_int_log
           2356: argument_list: 
            2357: argument: 
             2358: expr: 
              2359: name: bs
            2360: argument: 
             2361: expr: 
              2362: literal: 1
            2363: argument: 
             2364: expr: 
              2365: literal: "default_display_window_flag"
          2366: operator: )
        2367: block: 
         2368: block_content: 
          2369: expr_stmt: 
           2370: expr: 
            2371: name: 
             2372: name: sps
             2373: operator: ->
             2374: name: left_offset
            2375: operator: =
            2376: call: 
             2377: name: gf_bs_read_ue_log
             2378: argument_list: 
              2379: argument: 
               2380: expr: 
                2381: name: bs
              2382: argument: 
               2383: expr: 
                2384: literal: "display_window_left_offset"
          2385: expr_stmt: 
           2386: expr: 
            2387: name: 
             2388: name: sps
             2389: operator: ->
             2390: name: right_offset
            2391: operator: =
            2392: call: 
             2393: name: gf_bs_read_ue_log
             2394: argument_list: 
              2395: argument: 
               2396: expr: 
                2397: name: bs
              2398: argument: 
               2399: expr: 
                2400: literal: "display_window_right_offset"
          2401: expr_stmt: 
           2402: expr: 
            2403: name: 
             2404: name: sps
             2405: operator: ->
             2406: name: top_offset
            2407: operator: =
            2408: call: 
             2409: name: gf_bs_read_ue_log
             2410: argument_list: 
              2411: argument: 
               2412: expr: 
                2413: name: bs
              2414: argument: 
               2415: expr: 
                2416: literal: "display_window_top_offset"
          2417: expr_stmt: 
           2418: expr: 
            2419: name: 
             2420: name: sps
             2421: operator: ->
             2422: name: bottom_offset
            2423: operator: =
            2424: call: 
             2425: name: gf_bs_read_ue_log
             2426: argument_list: 
              2427: argument: 
               2428: expr: 
                2429: name: bs
              2430: argument: 
               2431: expr: 
                2432: literal: "display_window_bottom_offset"
      2433: expr_stmt: 
       2434: expr: 
        2435: name: 
         2436: name: sps
         2437: operator: ->
         2438: name: has_timing_info
        2439: operator: =
        2440: call: 
         2441: name: gf_bs_read_int_log
         2442: argument_list: 
          2443: argument: 
           2444: expr: 
            2445: name: bs
          2446: argument: 
           2447: expr: 
            2448: literal: 1
          2449: argument: 
           2450: expr: 
            2451: literal: "has_timing_info"
      2452: if_stmt: 
       2453: if: 
        2454: condition: 
         2455: expr: 
          2456: name: 
           2457: name: sps
           2458: operator: ->
           2459: name: has_timing_info
        2460: block: 
         2461: block_content: 
          2462: expr_stmt: 
           2463: expr: 
            2464: name: 
             2465: name: sps
             2466: operator: ->
             2467: name: num_units_in_tick
            2468: operator: =
            2469: call: 
             2470: name: gf_bs_read_int_log
             2471: argument_list: 
              2472: argument: 
               2473: expr: 
                2474: name: bs
              2475: argument: 
               2476: expr: 
                2477: literal: 32
              2478: argument: 
               2479: expr: 
                2480: literal: "num_units_in_tick"
          2481: expr_stmt: 
           2482: expr: 
            2483: name: 
             2484: name: sps
             2485: operator: ->
             2486: name: time_scale
            2487: operator: =
            2488: call: 
             2489: name: gf_bs_read_int_log
             2490: argument_list: 
              2491: argument: 
               2492: expr: 
                2493: name: bs
              2494: argument: 
               2495: expr: 
                2496: literal: 32
              2497: argument: 
               2498: expr: 
                2499: literal: "time_scale"
          2500: expr_stmt: 
           2501: expr: 
            2502: name: 
             2503: name: sps
             2504: operator: ->
             2505: name: poc_proportional_to_timing_flag
            2506: operator: =
            2507: call: 
             2508: name: gf_bs_read_int_log
             2509: argument_list: 
              2510: argument: 
               2511: expr: 
                2512: name: bs
              2513: argument: 
               2514: expr: 
                2515: literal: 1
              2516: argument: 
               2517: expr: 
                2518: literal: "poc_proportional_to_timing_flag"
          2519: if_stmt: 
           2520: if: 
            2521: condition: 
             2522: expr: 
              2523: name: 
               2524: name: sps
               2525: operator: ->
               2526: name: poc_proportional_to_timing_flag
            2527: block: 
             2528: block_content: 
              2529: expr_stmt: 
               2530: expr: 
                2531: name: 
                 2532: name: sps
                 2533: operator: ->
                 2534: name: num_ticks_poc_diff_one_minus1
                2535: operator: =
                2536: call: 
                 2537: name: gf_bs_read_ue_log
                 2538: argument_list: 
                  2539: argument: 
                   2540: expr: 
                    2541: name: bs
                  2542: argument: 
                   2543: expr: 
                    2544: literal: "num_ticks_poc_diff_one_minus1"
          2545: if_stmt: 
           2546: if: 
            2547: condition: 
             2548: expr: 
              2549: operator: (
              2550: name: 
               2551: name: sps
               2552: operator: ->
               2553: name: hrd_parameters_present_flag
              2554: operator: =
              2555: call: 
               2556: name: gf_bs_read_int_log
               2557: argument_list: 
                2558: argument: 
                 2559: expr: 
                  2560: name: bs
                2561: argument: 
                 2562: expr: 
                  2563: literal: 1
                2564: argument: 
                 2565: expr: 
                  2566: literal: "hrd_parameters_present_flag"
              2567: operator: )
            2568: block: 
             2569: block_content: 
              2570: comment: //				GF_LOG(GF_LOG_INFO, GF_LOG_CODING, ("[HEVC] HRD param parsing not implemented\n"));
              2571: return: 
               2572: expr: 
                2573: name: sps_id
      2574: if_stmt: 
       2575: if: 
        2576: condition: 
         2577: expr: 
          2578: call: 
           2579: name: gf_bs_read_int_log
           2580: argument_list: 
            2581: argument: 
             2582: expr: 
              2583: name: bs
            2584: argument: 
             2585: expr: 
              2586: literal: 1
            2587: argument: 
             2588: expr: 
              2589: literal: "bitstream_restriction_flag"
        2590: block: 
         2591: block_content: 
          2592: expr_stmt: 
           2593: expr: 
            2594: call: 
             2595: name: gf_bs_read_int_log
             2596: argument_list: 
              2597: argument: 
               2598: expr: 
                2599: name: bs
              2600: argument: 
               2601: expr: 
                2602: literal: 1
              2603: argument: 
               2604: expr: 
                2605: literal: "tiles_fixed_structure_flag"
          2606: expr_stmt: 
           2607: expr: 
            2608: call: 
             2609: name: gf_bs_read_int_log
             2610: argument_list: 
              2611: argument: 
               2612: expr: 
                2613: name: bs
              2614: argument: 
               2615: expr: 
                2616: literal: 1
              2617: argument: 
               2618: expr: 
                2619: literal: "motion_vectors_over_pic_boundaries_flag"
          2620: expr_stmt: 
           2621: expr: 
            2622: call: 
             2623: name: gf_bs_read_int_log
             2624: argument_list: 
              2625: argument: 
               2626: expr: 
                2627: name: bs
              2628: argument: 
               2629: expr: 
                2630: literal: 1
              2631: argument: 
               2632: expr: 
                2633: literal: "restricted_ref_pic_lists_flag"
          2634: expr_stmt: 
           2635: expr: 
            2636: call: 
             2637: name: gf_bs_read_ue_log
             2638: argument_list: 
              2639: argument: 
               2640: expr: 
                2641: name: bs
              2642: argument: 
               2643: expr: 
                2644: literal: "min_spatial_segmentation_idc"
          2645: expr_stmt: 
           2646: expr: 
            2647: call: 
             2648: name: gf_bs_read_ue_log
             2649: argument_list: 
              2650: argument: 
               2651: expr: 
                2652: name: bs
              2653: argument: 
               2654: expr: 
                2655: literal: "max_bytes_per_pic_denom"
          2656: expr_stmt: 
           2657: expr: 
            2658: call: 
             2659: name: gf_bs_read_ue_log
             2660: argument_list: 
              2661: argument: 
               2662: expr: 
                2663: name: bs
              2664: argument: 
               2665: expr: 
                2666: literal: "max_bits_per_min_cu_denom"
          2667: expr_stmt: 
           2668: expr: 
            2669: call: 
             2670: name: gf_bs_read_ue_log
             2671: argument_list: 
              2672: argument: 
               2673: expr: 
                2674: name: bs
              2675: argument: 
               2676: expr: 
                2677: literal: "log2_max_mv_length_horizontal"
          2678: expr_stmt: 
           2679: expr: 
            2680: call: 
             2681: name: gf_bs_read_ue_log
             2682: argument_list: 
              2683: argument: 
               2684: expr: 
                2685: name: bs
              2686: argument: 
               2687: expr: 
                2688: literal: "log2_max_mv_length_vertical"
  2689: if_stmt: 
   2690: if: 
    2691: condition: 
     2692: expr: 
      2693: call: 
       2694: name: gf_bs_read_int_log
       2695: argument_list: 
        2696: argument: 
         2697: expr: 
          2698: name: bs
        2699: argument: 
         2700: expr: 
          2701: literal: 1
        2702: argument: 
         2703: expr: 
          2704: literal: "sps_extension_flag"
    2705: block: 
     2706: block_content: 
      2707: if: 
       2708: directive: if
       2709: expr: 
        2710: literal: 0
      2711: comment: /*sps_extension_data_flag */
      2712: endif: 
       2713: directive: endif
  2714: return: 
   2715: expr: 
    2716: name: sps_id
=====
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: s32
   5: name: vps_id
  6: decl: 
   7: type: 
   8: name: sps_id
   9: init: 
    10: expr: 
     11: operator: -
     12: literal: 1
 13: decl_stmt: 
  14: decl: 
   15: type: 
    16: name: u32
   17: name: i
  18: decl: 
   19: type: 
   20: name: nb_CTUs
  21: decl: 
   22: type: 
   23: name: depth
 24: decl_stmt: 
  25: decl: 
   26: type: 
    27: name: HEVC_SPS
    28: modifier: *
   29: name: sps
 30: decl_stmt: 
  31: decl: 
   32: type: 
    33: name: HEVC_VPS
    34: modifier: *
   35: name: vps
 36: decl_stmt: 
  37: decl: 
   38: type: 
    39: name: HEVC_ProfileTierLevel
   40: name: ptl
 41: decl_stmt: 
  42: decl: 
   43: type: 
    44: name: Bool
   45: name: multiLayerExtSpsFlag
 46: decl_stmt: 
  47: decl: 
   48: type: 
    49: name: u8
   50: name: sps_ext_or_max_sub_layers_minus1
  51: decl: 
   52: type: 
   53: name: max_sub_layers_minus1
 54: if_stmt: 
  55: if: 
   56: condition: 
    57: expr: 
     58: name: vui_flag_pos
   59: block: 
    60: block_content: 
     61: expr_stmt: 
      62: expr: 
       63: operator: *
       64: name: vui_flag_pos
       65: operator: =
       66: literal: 0
 67: comment: //nalu header already parsed
 68: expr_stmt: 
  69: expr: 
   70: name: vps_id
   71: operator: =
   72: call: 
    73: name: gf_bs_read_int_log
    74: argument_list: 
     75: argument: 
      76: expr: 
       77: name: bs
     78: argument: 
      79: expr: 
       80: literal: 4
     81: argument: 
      82: expr: 
       83: literal: "vps_id"
 84: if_stmt: 
  85: if: 
   86: condition: 
    87: expr: 
     88: name: vps_id
     89: operator: >=
     90: literal: 16
   91: block: 
    92: block_content: 
     93: return: 
      94: expr: 
       95: operator: -
       96: literal: 1
 97: expr_stmt: 
  98: expr: 
   99: call: 
    100: name: memset
    101: argument_list: 
     102: argument: 
      103: expr: 
       104: operator: &
       105: name: ptl
     106: argument: 
      107: expr: 
       108: literal: 0
     109: argument: 
      110: expr: 
       111: sizeof: 
        112: argument_list: 
         113: argument: 
          114: expr: 
           115: name: ptl
 116: expr_stmt: 
  117: expr: 
   118: name: max_sub_layers_minus1
   119: operator: =
   120: literal: 0
 121: expr_stmt: 
  122: expr: 
   123: name: sps_ext_or_max_sub_layers_minus1
   124: operator: =
   125: literal: 0
 126: if_stmt: 
  127: if: 
   128: condition: 
    129: expr: 
     130: name: layer_id
     131: operator: ==
     132: literal: 0
   133: block: 
    134: block_content: 
     135: expr_stmt: 
      136: expr: 
       137: name: max_sub_layers_minus1
       138: operator: =
       139: call: 
        140: name: gf_bs_read_int_log
        141: argument_list: 
         142: argument: 
          143: expr: 
           144: name: bs
         145: argument: 
          146: expr: 
           147: literal: 3
         148: argument: 
          149: expr: 
           150: literal: "max_sub_layers_minus1"
  151: else: 
   152: block: 
    153: block_content: 
     154: expr_stmt: 
      155: expr: 
       156: name: sps_ext_or_max_sub_layers_minus1
       157: operator: =
       158: call: 
        159: name: gf_bs_read_int_log
        160: argument_list: 
         161: argument: 
          162: expr: 
           163: name: bs
         164: argument: 
          165: expr: 
           166: literal: 3
         167: argument: 
          168: expr: 
           169: literal: "sps_ext_or_max_sub_layers_minus1"
 170: expr_stmt: 
  171: expr: 
   172: name: multiLayerExtSpsFlag
   173: operator: =
   174: operator: (
   175: name: layer_id
   176: operator: !=
   177: literal: 0
   178: operator: )
   179: operator: &&
   180: operator: (
   181: name: sps_ext_or_max_sub_layers_minus1
   182: operator: ==
   183: literal: 7
   184: operator: )
 185: if_stmt: 
  186: if: 
   187: condition: 
    188: expr: 
     189: operator: !
     190: name: multiLayerExtSpsFlag
   191: block: 
    192: block_content: 
     193: expr_stmt: 
      194: expr: 
       195: call: 
        196: name: gf_bs_read_int_log
        197: argument_list: 
         198: argument: 
          199: expr: 
           200: name: bs
         201: argument: 
          202: expr: 
           203: literal: 1
         204: argument: 
          205: expr: 
           206: literal: "temporal_id_nesting_flag"
     207: expr_stmt: 
      208: expr: 
       209: call: 
        210: name: hevc_profile_tier_level
        211: argument_list: 
         212: argument: 
          213: expr: 
           214: name: bs
         215: argument: 
          216: expr: 
           217: literal: 1
         218: argument: 
          219: expr: 
           220: name: max_sub_layers_minus1
         221: argument: 
          222: expr: 
           223: operator: &
           224: name: ptl
         225: argument: 
          226: expr: 
           227: literal: 0
 228: expr_stmt: 
  229: expr: 
   230: name: sps_id
   231: operator: =
   232: call: 
    233: name: gf_bs_read_ue_log
    234: argument_list: 
     235: argument: 
      236: expr: 
       237: name: bs
     238: argument: 
      239: expr: 
       240: literal: "sps_id"
 241: if_stmt: 
  242: if: 
   243: condition: 
    244: expr: 
     245: operator: (
     246: name: sps_id
     247: operator: <
     248: literal: 0
     249: operator: )
     250: operator: ||
     251: operator: (
     252: name: sps_id
     253: operator: >=
     254: literal: 16
     255: operator: )
   256: block: 
    257: block_content: 
     258: return: 
      259: expr: 
       260: operator: -
       261: literal: 1
 262: expr_stmt: 
  263: expr: 
   264: name: sps
   265: operator: =
   266: operator: &
   267: name: 
    268: name: hevc
    269: operator: ->
    270: name: sps
    271: index: 
     272: expr: 
      273: name: sps_id
 274: if_stmt: 
  275: if: 
   276: condition: 
    277: expr: 
     278: operator: !
     279: name: 
      280: name: sps
      281: operator: ->
      282: name: state
   283: block: 
    284: block_content: 
     285: expr_stmt: 
      286: expr: 
       287: name: 
        288: name: sps
        289: operator: ->
        290: name: state
       291: operator: =
       292: literal: 1
     293: expr_stmt: 
      294: expr: 
       295: name: 
        296: name: sps
        297: operator: ->
        298: name: id
       299: operator: =
       300: name: sps_id
     301: expr_stmt: 
      302: expr: 
       303: name: 
        304: name: sps
        305: operator: ->
        306: name: vps_id
       307: operator: =
       308: name: vps_id
 309: expr_stmt: 
  310: expr: 
   311: name: 
    312: name: sps
    313: operator: ->
    314: name: ptl
   315: operator: =
   316: name: ptl
 317: expr_stmt: 
  318: expr: 
   319: name: vps
   320: operator: =
   321: operator: &
   322: name: 
    323: name: hevc
    324: operator: ->
    325: name: vps
    326: index: 
     327: expr: 
      328: name: vps_id
 329: expr_stmt: 
  330: expr: 
   331: name: 
    332: name: sps
    333: operator: ->
    334: name: max_sub_layers_minus1
   335: operator: =
   336: literal: 0
 337: expr_stmt: 
  338: expr: 
   339: name: 
    340: name: sps
    341: operator: ->
    342: name: sps_ext_or_max_sub_layers_minus1
   343: operator: =
   344: literal: 0
 345: comment: /* default values */
 346: expr_stmt: 
  347: expr: 
   348: name: 
    349: name: sps
    350: operator: ->
    351: name: colour_primaries
   352: operator: =
   353: literal: 2
 354: expr_stmt: 
  355: expr: 
   356: name: 
    357: name: sps
    358: operator: ->
    359: name: transfer_characteristic
   360: operator: =
   361: literal: 2
 362: expr_stmt: 
  363: expr: 
   364: name: 
    365: name: sps
    366: operator: ->
    367: name: matrix_coeffs
   368: operator: =
   369: literal: 2
 370: comment: //sps_rep_format_idx = 0;
 371: if_stmt: 
  372: if: 
   373: condition: 
    374: expr: 
     375: name: multiLayerExtSpsFlag
   376: block: 
    377: block_content: 
     378: expr_stmt: 
      379: expr: 
       380: name: 
        381: name: sps
        382: operator: ->
        383: name: update_rep_format_flag
       384: operator: =
       385: call: 
        386: name: gf_bs_read_int_log
        387: argument_list: 
         388: argument: 
          389: expr: 
           390: name: bs
         391: argument: 
          392: expr: 
           393: literal: 1
         394: argument: 
          395: expr: 
           396: literal: "update_rep_format_flag"
     397: if_stmt: 
      398: if: 
       399: condition: 
        400: expr: 
         401: name: 
          402: name: sps
          403: operator: ->
          404: name: update_rep_format_flag
       405: block: 
        406: block_content: 
         407: expr_stmt: 
          408: expr: 
           409: name: 
            410: name: sps
            411: operator: ->
            412: name: rep_format_idx
           413: operator: =
           414: call: 
            415: name: gf_bs_read_int_log
            416: argument_list: 
             417: argument: 
              418: expr: 
               419: name: bs
             420: argument: 
              421: expr: 
               422: literal: 8
             423: argument: 
              424: expr: 
               425: literal: "rep_format_idx"
      426: else: 
       427: block: 
        428: block_content: 
         429: expr_stmt: 
          430: expr: 
           431: name: 
            432: name: sps
            433: operator: ->
            434: name: rep_format_idx
           435: operator: =
           436: name: 
            437: name: vps
            438: operator: ->
            439: name: rep_format_idx
            440: index: 
             441: expr: 
              442: name: layer_id
     443: expr_stmt: 
      444: expr: 
       445: name: 
        446: name: sps
        447: operator: ->
        448: name: width
       449: operator: =
       450: name: 
        451: name: vps
        452: operator: ->
        453: name: rep_formats
        454: index: 
         455: expr: 
          456: name: 
           457: name: sps
           458: operator: ->
           459: name: rep_format_idx
       460: operator: .
       461: name: pic_width_luma_samples
     462: expr_stmt: 
      463: expr: 
       464: name: 
        465: name: sps
        466: operator: ->
        467: name: height
       468: operator: =
       469: name: 
        470: name: vps
        471: operator: ->
        472: name: rep_formats
        473: index: 
         474: expr: 
          475: name: 
           476: name: sps
           477: operator: ->
           478: name: rep_format_idx
       479: operator: .
       480: name: pic_height_luma_samples
     481: expr_stmt: 
      482: expr: 
       483: name: 
        484: name: sps
        485: operator: ->
        486: name: chroma_format_idc
       487: operator: =
       488: name: 
        489: name: vps
        490: operator: ->
        491: name: rep_formats
        492: index: 
         493: expr: 
          494: name: 
           495: name: sps
           496: operator: ->
           497: name: rep_format_idx
       498: operator: .
       499: name: chroma_format_idc
     500: expr_stmt: 
      501: expr: 
       502: name: 
        503: name: sps
        504: operator: ->
        505: name: bit_depth_luma
       506: operator: =
       507: name: 
        508: name: vps
        509: operator: ->
        510: name: rep_formats
        511: index: 
         512: expr: 
          513: name: 
           514: name: sps
           515: operator: ->
           516: name: rep_format_idx
       517: operator: .
       518: name: bit_depth_luma
     519: expr_stmt: 
      520: expr: 
       521: name: 
        522: name: sps
        523: operator: ->
        524: name: bit_depth_chroma
       525: operator: =
       526: name: 
        527: name: vps
        528: operator: ->
        529: name: rep_formats
        530: index: 
         531: expr: 
          532: name: 
           533: name: sps
           534: operator: ->
           535: name: rep_format_idx
       536: operator: .
       537: name: bit_depth_chroma
     538: expr_stmt: 
      539: expr: 
       540: name: 
        541: name: sps
        542: operator: ->
        543: name: separate_colour_plane_flag
       544: operator: =
       545: name: 
        546: name: vps
        547: operator: ->
        548: name: rep_formats
        549: index: 
         550: expr: 
          551: name: 
           552: name: sps
           553: operator: ->
           554: name: rep_format_idx
       555: operator: .
       556: name: separate_colour_plane_flag
     557: comment: //TODO this is crude ...
     558: expr_stmt: 
      559: expr: 
       560: name: 
        561: name: sps
        562: operator: ->
        563: name: ptl
       564: operator: =
       565: name: 
        566: name: vps
        567: operator: ->
        568: name: ext_ptl
        569: index: 
         570: expr: 
          571: literal: 0
  572: else: 
   573: block: 
    574: block_content: 
     575: expr_stmt: 
      576: expr: 
       577: name: 
        578: name: sps
        579: operator: ->
        580: name: chroma_format_idc
       581: operator: =
       582: call: 
        583: name: gf_bs_read_ue_log
        584: argument_list: 
         585: argument: 
          586: expr: 
           587: name: bs
         588: argument: 
          589: expr: 
           590: literal: "chroma_format_idc"
     591: if_stmt: 
      592: if: 
       593: condition: 
        594: expr: 
         595: name: 
          596: name: sps
          597: operator: ->
          598: name: chroma_format_idc
         599: operator: ==
         600: literal: 3
       601: block: 
        602: block_content: 
         603: expr_stmt: 
          604: expr: 
           605: name: 
            606: name: sps
            607: operator: ->
            608: name: separate_colour_plane_flag
           609: operator: =
           610: call: 
            611: name: gf_bs_read_int_log
            612: argument_list: 
             613: argument: 
              614: expr: 
               615: name: bs
             616: argument: 
              617: expr: 
               618: literal: 1
             619: argument: 
              620: expr: 
               621: literal: "separate_colour_plane_flag"
     622: expr_stmt: 
      623: expr: 
       624: name: 
        625: name: sps
        626: operator: ->
        627: name: width
       628: operator: =
       629: call: 
        630: name: gf_bs_read_ue_log
        631: argument_list: 
         632: argument: 
          633: expr: 
           634: name: bs
         635: argument: 
          636: expr: 
           637: literal: "width"
     638: expr_stmt: 
      639: expr: 
       640: name: 
        641: name: sps
        642: operator: ->
        643: name: height
       644: operator: =
       645: call: 
        646: name: gf_bs_read_ue_log
        647: argument_list: 
         648: argument: 
          649: expr: 
           650: name: bs
         651: argument: 
          652: expr: 
           653: literal: "height"
     654: if_stmt: 
      655: if: 
       656: condition: 
        657: expr: 
         658: operator: (
         659: name: 
          660: name: sps
          661: operator: ->
          662: name: cw_flag
         663: operator: =
         664: call: 
          665: name: gf_bs_read_int_log
          666: argument_list: 
           667: argument: 
            668: expr: 
             669: name: bs
           670: argument: 
            671: expr: 
             672: literal: 1
           673: argument: 
            674: expr: 
             675: literal: "conformance_window_flag"
         676: operator: )
       677: block: 
        678: block_content: 
         679: decl_stmt: 
          680: decl: 
           681: type: 
            682: name: u32
           683: name: SubWidthC
          684: decl: 
           685: type: 
           686: name: SubHeightC
         687: if_stmt: 
          688: if: 
           689: condition: 
            690: expr: 
             691: name: 
              692: name: sps
              693: operator: ->
              694: name: chroma_format_idc
             695: operator: ==
             696: literal: 1
           697: block: 
            698: block_content: 
             699: expr_stmt: 
              700: expr: 
               701: name: SubWidthC
               702: operator: =
               703: name: SubHeightC
               704: operator: =
               705: literal: 2
          706: if: 
           707: condition: 
            708: expr: 
             709: name: 
              710: name: sps
              711: operator: ->
              712: name: chroma_format_idc
             713: operator: ==
             714: literal: 2
           715: block: 
            716: block_content: 
             717: expr_stmt: 
              718: expr: 
               719: name: SubWidthC
               720: operator: =
               721: literal: 2
             722: expr_stmt: 
              723: expr: 
               724: name: SubHeightC
               725: operator: =
               726: literal: 1
          727: else: 
           728: block: 
            729: block_content: 
             730: expr_stmt: 
              731: expr: 
               732: name: SubWidthC
               733: operator: =
               734: name: SubHeightC
               735: operator: =
               736: literal: 1
         737: expr_stmt: 
          738: expr: 
           739: name: 
            740: name: sps
            741: operator: ->
            742: name: cw_left
           743: operator: =
           744: call: 
            745: name: gf_bs_read_ue_log
            746: argument_list: 
             747: argument: 
              748: expr: 
               749: name: bs
             750: argument: 
              751: expr: 
               752: literal: "conformance_window_left"
         753: expr_stmt: 
          754: expr: 
           755: name: 
            756: name: sps
            757: operator: ->
            758: name: cw_right
           759: operator: =
           760: call: 
            761: name: gf_bs_read_ue_log
            762: argument_list: 
             763: argument: 
              764: expr: 
               765: name: bs
             766: argument: 
              767: expr: 
               768: literal: "conformance_window_right"
         769: expr_stmt: 
          770: expr: 
           771: name: 
            772: name: sps
            773: operator: ->
            774: name: cw_top
           775: operator: =
           776: call: 
            777: name: gf_bs_read_ue_log
            778: argument_list: 
             779: argument: 
              780: expr: 
               781: name: bs
             782: argument: 
              783: expr: 
               784: literal: "conformance_window_top"
         785: expr_stmt: 
          786: expr: 
           787: name: 
            788: name: sps
            789: operator: ->
            790: name: cw_bottom
           791: operator: =
           792: call: 
            793: name: gf_bs_read_ue_log
            794: argument_list: 
             795: argument: 
              796: expr: 
               797: name: bs
             798: argument: 
              799: expr: 
               800: literal: "conformance_window_bottom"
         801: expr_stmt: 
          802: expr: 
           803: name: 
            804: name: sps
            805: operator: ->
            806: name: width
           807: operator: -=
           808: name: SubWidthC
           809: operator: *
           810: operator: (
           811: name: 
            812: name: sps
            813: operator: ->
            814: name: cw_left
           815: operator: +
           816: name: 
            817: name: sps
            818: operator: ->
            819: name: cw_right
           820: operator: )
         821: expr_stmt: 
          822: expr: 
           823: name: 
            824: name: sps
            825: operator: ->
            826: name: height
           827: operator: -=
           828: name: SubHeightC
           829: operator: *
           830: operator: (
           831: name: 
            832: name: sps
            833: operator: ->
            834: name: cw_top
           835: operator: +
           836: name: 
            837: name: sps
            838: operator: ->
            839: name: cw_bottom
           840: operator: )
     841: expr_stmt: 
      842: expr: 
       843: name: 
        844: name: sps
        845: operator: ->
        846: name: bit_depth_luma
       847: operator: =
       848: literal: 8
       849: operator: +
       850: call: 
        851: name: gf_bs_read_ue_log
        852: argument_list: 
         853: argument: 
          854: expr: 
           855: name: bs
         856: argument: 
          857: expr: 
           858: literal: "bit_depth_luma_minus8"
     859: expr_stmt: 
      860: expr: 
       861: name: 
        862: name: sps
        863: operator: ->
        864: name: bit_depth_chroma
       865: operator: =
       866: literal: 8
       867: operator: +
       868: call: 
        869: name: gf_bs_read_ue_log
        870: argument_list: 
         871: argument: 
          872: expr: 
           873: name: bs
         874: argument: 
          875: expr: 
           876: literal: "bit_depth_chroma_minus8"
 877: expr_stmt: 
  878: expr: 
   879: name: 
    880: name: sps
    881: operator: ->
    882: name: log2_max_pic_order_cnt_lsb
   883: operator: =
   884: literal: 4
   885: operator: +
   886: call: 
    887: name: gf_bs_read_ue_log
    888: argument_list: 
     889: argument: 
      890: expr: 
       891: name: bs
     892: argument: 
      893: expr: 
       894: literal: "log2_max_pic_order_cnt_lsb_minus4"
 895: if_stmt: 
  896: if: 
   897: condition: 
    898: expr: 
     899: operator: !
     900: name: multiLayerExtSpsFlag
   901: block: 
    902: block_content: 
     903: expr_stmt: 
      904: expr: 
       905: name: 
        906: name: sps
        907: operator: ->
        908: name: sub_layer_ordering_info_present_flag
       909: operator: =
       910: call: 
        911: name: gf_bs_read_int_log
        912: argument_list: 
         913: argument: 
          914: expr: 
           915: name: bs
         916: argument: 
          917: expr: 
           918: literal: 1
         919: argument: 
          920: expr: 
           921: literal: "sub_layer_ordering_info_present_flag"
     922: for: 
      923: control: 
       924: init: 
        925: expr: 
         926: name: i
         927: operator: =
         928: ternary: 
          929: condition: 
           930: expr: 
            931: name: 
             932: name: sps
             933: operator: ->
             934: name: sub_layer_ordering_info_present_flag
          935: then: 
           936: expr: 
            937: literal: 0
          938: else: 
           939: expr: 
            940: name: 
             941: name: sps
             942: operator: ->
             943: name: max_sub_layers_minus1
       944: condition: 
        945: expr: 
         946: name: i
         947: operator: <=
         948: name: 
          949: name: sps
          950: operator: ->
          951: name: max_sub_layers_minus1
       952: incr: 
        953: expr: 
         954: name: i
         955: operator: ++
      956: block: 
       957: block_content: 
        958: expr_stmt: 
         959: expr: 
          960: call: 
           961: name: gf_bs_read_ue_log_idx
           962: argument_list: 
            963: argument: 
             964: expr: 
              965: name: bs
            966: argument: 
             967: expr: 
              968: literal: "max_dec_pic_buffering"
            969: argument: 
             970: expr: 
              971: name: i
        972: expr_stmt: 
         973: expr: 
          974: call: 
           975: name: gf_bs_read_ue_log_idx
           976: argument_list: 
            977: argument: 
             978: expr: 
              979: name: bs
            980: argument: 
             981: expr: 
              982: literal: "num_reorder_pics"
            983: argument: 
             984: expr: 
              985: name: i
        986: expr_stmt: 
         987: expr: 
          988: call: 
           989: name: gf_bs_read_ue_log_idx
           990: argument_list: 
            991: argument: 
             992: expr: 
              993: name: bs
            994: argument: 
             995: expr: 
              996: literal: "max_latency_increase"
            997: argument: 
             998: expr: 
              999: name: i
 1000: expr_stmt: 
  1001: expr: 
   1002: name: 
    1003: name: sps
    1004: operator: ->
    1005: name: log2_min_luma_coding_block_size
   1006: operator: =
   1007: literal: 3
   1008: operator: +
   1009: call: 
    1010: name: gf_bs_read_ue_log
    1011: argument_list: 
     1012: argument: 
      1013: expr: 
       1014: name: bs
     1015: argument: 
      1016: expr: 
       1017: literal: "log2_min_luma_coding_block_size_minus3"
 1018: expr_stmt: 
  1019: expr: 
   1020: name: 
    1021: name: sps
    1022: operator: ->
    1023: name: log2_diff_max_min_luma_coding_block_size
   1024: operator: =
   1025: call: 
    1026: name: gf_bs_read_ue_log
    1027: argument_list: 
     1028: argument: 
      1029: expr: 
       1030: name: bs
     1031: argument: 
      1032: expr: 
       1033: literal: "log2_diff_max_min_luma_coding_block_size"
 1034: expr_stmt: 
  1035: expr: 
   1036: name: 
    1037: name: sps
    1038: operator: ->
    1039: name: max_CU_width
   1040: operator: =
   1041: operator: (
   1042: literal: 1
   1043: operator: <<
   1044: operator: (
   1045: name: 
    1046: name: sps
    1047: operator: ->
    1048: name: log2_min_luma_coding_block_size
   1049: operator: +
   1050: name: 
    1051: name: sps
    1052: operator: ->
    1053: name: log2_diff_max_min_luma_coding_block_size
   1054: operator: )
   1055: operator: )
 1056: expr_stmt: 
  1057: expr: 
   1058: name: 
    1059: name: sps
    1060: operator: ->
    1061: name: max_CU_height
   1062: operator: =
   1063: operator: (
   1064: literal: 1
   1065: operator: <<
   1066: operator: (
   1067: name: 
    1068: name: sps
    1069: operator: ->
    1070: name: log2_min_luma_coding_block_size
   1071: operator: +
   1072: name: 
    1073: name: sps
    1074: operator: ->
    1075: name: log2_diff_max_min_luma_coding_block_size
   1076: operator: )
   1077: operator: )
 1078: expr_stmt: 
  1079: expr: 
   1080: name: 
    1081: name: sps
    1082: operator: ->
    1083: name: log2_min_transform_block_size
   1084: operator: =
   1085: literal: 2
   1086: operator: +
   1087: call: 
    1088: name: gf_bs_read_ue_log
    1089: argument_list: 
     1090: argument: 
      1091: expr: 
       1092: name: bs
     1093: argument: 
      1094: expr: 
       1095: literal: "log2_min_transform_block_size_minus2"
 1096: expr_stmt: 
  1097: expr: 
   1098: name: 
    1099: name: sps
    1100: operator: ->
    1101: name: log2_max_transform_block_size
   1102: operator: =
   1103: name: 
    1104: name: sps
    1105: operator: ->
    1106: name: log2_min_transform_block_size
   1107: operator: +
   1108: call: 
    1109: name: gf_bs_read_ue_log
    1110: argument_list: 
     1111: argument: 
      1112: expr: 
       1113: name: bs
     1114: argument: 
      1115: expr: 
       1116: literal: "log2_max_transform_block_size"
 1117: expr_stmt: 
  1118: expr: 
   1119: name: depth
   1120: operator: =
   1121: literal: 0
 1122: expr_stmt: 
  1123: expr: 
   1124: name: 
    1125: name: sps
    1126: operator: ->
    1127: name: max_transform_hierarchy_depth_inter
   1128: operator: =
   1129: call: 
    1130: name: gf_bs_read_ue_log
    1131: argument_list: 
     1132: argument: 
      1133: expr: 
       1134: name: bs
     1135: argument: 
      1136: expr: 
       1137: literal: "max_transform_hierarchy_depth_inter"
 1138: expr_stmt: 
  1139: expr: 
   1140: name: 
    1141: name: sps
    1142: operator: ->
    1143: name: max_transform_hierarchy_depth_intra
   1144: operator: =
   1145: call: 
    1146: name: gf_bs_read_ue_log
    1147: argument_list: 
     1148: argument: 
      1149: expr: 
       1150: name: bs
     1151: argument: 
      1152: expr: 
       1153: literal: "max_transform_hierarchy_depth_intra"
 1154: while: 
  1155: condition: 
   1156: expr: 
    1157: operator: (
    1158: name: u32
    1159: operator: )
    1160: operator: (
    1161: name: 
     1162: name: sps
     1163: operator: ->
     1164: name: max_CU_width
    1165: operator: >>
    1166: name: 
     1167: name: sps
     1168: operator: ->
     1169: name: log2_diff_max_min_luma_coding_block_size
    1170: operator: )
    1171: operator: >
    1172: operator: (
    1173: name: u32
    1174: operator: )
    1175: operator: (
    1176: literal: 1
    1177: operator: <<
    1178: operator: (
    1179: name: 
     1180: name: sps
     1181: operator: ->
     1182: name: log2_min_transform_block_size
    1183: operator: +
    1184: name: depth
    1185: operator: )
    1186: operator: )
  1187: block: 
   1188: block_content: 
    1189: expr_stmt: 
     1190: expr: 
      1191: name: depth
      1192: operator: ++
 1193: expr_stmt: 
  1194: expr: 
   1195: name: 
    1196: name: sps
    1197: operator: ->
    1198: name: max_CU_depth
   1199: operator: =
   1200: name: 
    1201: name: sps
    1202: operator: ->
    1203: name: log2_diff_max_min_luma_coding_block_size
   1204: operator: +
   1205: name: depth
 1206: expr_stmt: 
  1207: expr: 
   1208: name: nb_CTUs
   1209: operator: =
   1210: operator: (
   1211: operator: (
   1212: name: 
    1213: name: sps
    1214: operator: ->
    1215: name: width
   1216: operator: +
   1217: name: 
    1218: name: sps
    1219: operator: ->
    1220: name: max_CU_width
   1221: operator: -
   1222: literal: 1
   1223: operator: )
   1224: operator: /
   1225: name: 
    1226: name: sps
    1227: operator: ->
    1228: name: max_CU_width
   1229: operator: )
   1230: operator: *
   1231: operator: (
   1232: operator: (
   1233: name: 
    1234: name: sps
    1235: operator: ->
    1236: name: height
   1237: operator: +
   1238: name: 
    1239: name: sps
    1240: operator: ->
    1241: name: max_CU_height
   1242: operator: -
   1243: literal: 1
   1244: operator: )
   1245: operator: /
   1246: name: 
    1247: name: sps
    1248: operator: ->
    1249: name: max_CU_height
   1250: operator: )
 1251: expr_stmt: 
  1252: expr: 
   1253: name: 
    1254: name: sps
    1255: operator: ->
    1256: name: bitsSliceSegmentAddress
   1257: operator: =
   1258: literal: 0
 1259: while: 
  1260: condition: 
   1261: expr: 
    1262: name: nb_CTUs
    1263: operator: >
    1264: operator: (
    1265: name: u32
    1266: operator: )
    1267: operator: (
    1268: literal: 1
    1269: operator: <<
    1270: name: 
     1271: name: sps
     1272: operator: ->
     1273: name: bitsSliceSegmentAddress
    1274: operator: )
  1275: block: 
   1276: block_content: 
    1277: expr_stmt: 
     1278: expr: 
      1279: name: 
       1280: name: sps
       1281: operator: ->
       1282: name: bitsSliceSegmentAddress
      1283: operator: ++
 1284: expr_stmt: 
  1285: expr: 
   1286: name: 
    1287: name: sps
    1288: operator: ->
    1289: name: scaling_list_enable_flag
   1290: operator: =
   1291: call: 
    1292: name: gf_bs_read_int_log
    1293: argument_list: 
     1294: argument: 
      1295: expr: 
       1296: name: bs
     1297: argument: 
      1298: expr: 
       1299: literal: 1
     1300: argument: 
      1301: expr: 
       1302: literal: "scaling_list_enable_flag"
 1303: if_stmt: 
  1304: if: 
   1305: condition: 
    1306: expr: 
     1307: name: 
      1308: name: sps
      1309: operator: ->
      1310: name: scaling_list_enable_flag
   1311: block: 
    1312: block_content: 
     1313: expr_stmt: 
      1314: expr: 
       1315: name: 
        1316: name: sps
        1317: operator: ->
        1318: name: infer_scaling_list_flag
       1319: operator: =
       1320: literal: 0
     1321: expr_stmt: 
      1322: expr: 
       1323: name: 
        1324: name: sps
        1325: operator: ->
        1326: name: scaling_list_ref_layer_id
       1327: operator: =
       1328: literal: 0
     1329: if_stmt: 
      1330: if: 
       1331: condition: 
        1332: expr: 
         1333: name: multiLayerExtSpsFlag
       1334: block: 
        1335: block_content: 
         1336: expr_stmt: 
          1337: expr: 
           1338: name: 
            1339: name: sps
            1340: operator: ->
            1341: name: infer_scaling_list_flag
           1342: operator: =
           1343: call: 
            1344: name: gf_bs_read_int_log
            1345: argument_list: 
             1346: argument: 
              1347: expr: 
               1348: name: bs
             1349: argument: 
              1350: expr: 
               1351: literal: 1
             1352: argument: 
              1353: expr: 
               1354: literal: "infer_scaling_list_flag"
     1355: if_stmt: 
      1356: if: 
       1357: condition: 
        1358: expr: 
         1359: name: 
          1360: name: sps
          1361: operator: ->
          1362: name: infer_scaling_list_flag
       1363: block: 
        1364: block_content: 
         1365: expr_stmt: 
          1366: expr: 
           1367: name: 
            1368: name: sps
            1369: operator: ->
            1370: name: scaling_list_ref_layer_id
           1371: operator: =
           1372: call: 
            1373: name: gf_bs_read_int_log
            1374: argument_list: 
             1375: argument: 
              1376: expr: 
               1377: name: bs
             1378: argument: 
              1379: expr: 
               1380: literal: 6
             1381: argument: 
              1382: expr: 
               1383: literal: "scaling_list_ref_layer_id"
      1384: else: 
       1385: block: 
        1386: block_content: 
         1387: expr_stmt: 
          1388: expr: 
           1389: name: 
            1390: name: sps
            1391: operator: ->
            1392: name: scaling_list_data_present_flag
           1393: operator: =
           1394: call: 
            1395: name: gf_bs_read_int_log
            1396: argument_list: 
             1397: argument: 
              1398: expr: 
               1399: name: bs
             1400: argument: 
              1401: expr: 
               1402: literal: 1
             1403: argument: 
              1404: expr: 
               1405: literal: "scaling_list_data_present_flag"
         1406: if_stmt: 
          1407: if: 
           1408: condition: 
            1409: expr: 
             1410: name: 
              1411: name: sps
              1412: operator: ->
              1413: name: scaling_list_data_present_flag
           1414: block: 
            1415: block_content: 
             1416: expr_stmt: 
              1417: expr: 
               1418: call: 
                1419: name: hevc_scaling_list_data
                1420: argument_list: 
                 1421: argument: 
                  1422: expr: 
                   1423: name: bs
 1424: expr_stmt: 
  1425: expr: 
   1426: name: 
    1427: name: sps
    1428: operator: ->
    1429: name: asymmetric_motion_partitions_enabled_flag
   1430: operator: =
   1431: call: 
    1432: name: gf_bs_read_int_log
    1433: argument_list: 
     1434: argument: 
      1435: expr: 
       1436: name: bs
     1437: argument: 
      1438: expr: 
       1439: literal: 1
     1440: argument: 
      1441: expr: 
       1442: literal: "asymmetric_motion_partitions_enabled_flag"
 1443: expr_stmt: 
  1444: expr: 
   1445: name: 
    1446: name: sps
    1447: operator: ->
    1448: name: sample_adaptive_offset_enabled_flag
   1449: operator: =
   1450: call: 
    1451: name: gf_bs_read_int_log
    1452: argument_list: 
     1453: argument: 
      1454: expr: 
       1455: name: bs
     1456: argument: 
      1457: expr: 
       1458: literal: 1
     1459: argument: 
      1460: expr: 
       1461: literal: "sample_adaptive_offset_enabled_flag"
 1462: if_stmt: 
  1463: if: 
   1464: condition: 
    1465: expr: 
     1466: operator: (
     1467: name: 
      1468: name: sps
      1469: operator: ->
      1470: name: pcm_enabled_flag
     1471: operator: =
     1472: call: 
      1473: name: gf_bs_read_int_log
      1474: argument_list: 
       1475: argument: 
        1476: expr: 
         1477: name: bs
       1478: argument: 
        1479: expr: 
         1480: literal: 1
       1481: argument: 
        1482: expr: 
         1483: literal: "pcm_enabled_flag"
     1484: operator: )
   1485: block: 
    1486: block_content: 
     1487: expr_stmt: 
      1488: expr: 
       1489: name: 
        1490: name: sps
        1491: operator: ->
        1492: name: pcm_sample_bit_depth_luma_minus1
       1493: operator: =
       1494: call: 
        1495: name: gf_bs_read_int_log
        1496: argument_list: 
         1497: argument: 
          1498: expr: 
           1499: name: bs
         1500: argument: 
          1501: expr: 
           1502: literal: 4
         1503: argument: 
          1504: expr: 
           1505: literal: "pcm_sample_bit_depth_luma_minus1"
     1506: expr_stmt: 
      1507: expr: 
       1508: name: 
        1509: name: sps
        1510: operator: ->
        1511: name: pcm_sample_bit_depth_chroma_minus1
       1512: operator: =
       1513: call: 
        1514: name: gf_bs_read_int_log
        1515: argument_list: 
         1516: argument: 
          1517: expr: 
           1518: name: bs
         1519: argument: 
          1520: expr: 
           1521: literal: 4
         1522: argument: 
          1523: expr: 
           1524: literal: "pcm_sample_bit_depth_chroma_minus1"
     1525: expr_stmt: 
      1526: expr: 
       1527: name: 
        1528: name: sps
        1529: operator: ->
        1530: name: log2_min_pcm_luma_coding_block_size_minus3
       1531: operator: =
       1532: call: 
        1533: name: gf_bs_read_ue_log
        1534: argument_list: 
         1535: argument: 
          1536: expr: 
           1537: name: bs
         1538: argument: 
          1539: expr: 
           1540: literal: "log2_min_pcm_luma_coding_block_size_minus3"
     1541: expr_stmt: 
      1542: expr: 
       1543: name: 
        1544: name: sps
        1545: operator: ->
        1546: name: log2_diff_max_min_pcm_luma_coding_block_size
       1547: operator: =
       1548: call: 
        1549: name: gf_bs_read_ue_log
        1550: argument_list: 
         1551: argument: 
          1552: expr: 
           1553: name: bs
         1554: argument: 
          1555: expr: 
           1556: literal: "log2_diff_max_min_pcm_luma_coding_block_size"
     1557: expr_stmt: 
      1558: expr: 
       1559: name: 
        1560: name: sps
        1561: operator: ->
        1562: name: pcm_loop_filter_disable_flag
       1563: operator: =
       1564: call: 
        1565: name: gf_bs_read_int_log
        1566: argument_list: 
         1567: argument: 
          1568: expr: 
           1569: name: bs
         1570: argument: 
          1571: expr: 
           1572: literal: 1
         1573: argument: 
          1574: expr: 
           1575: literal: "pcm_loop_filter_disable_flag"
 1576: expr_stmt: 
  1577: expr: 
   1578: name: 
    1579: name: sps
    1580: operator: ->
    1581: name: num_short_term_ref_pic_sets
   1582: operator: =
   1583: call: 
    1584: name: gf_bs_read_ue_log
    1585: argument_list: 
     1586: argument: 
      1587: expr: 
       1588: name: bs
     1589: argument: 
      1590: expr: 
       1591: literal: "num_short_term_ref_pic_sets"
 1592: if_stmt: 
  1593: if: 
   1594: condition: 
    1595: expr: 
     1596: name: 
      1597: name: sps
      1598: operator: ->
      1599: name: num_short_term_ref_pic_sets
     1600: operator: >
     1601: literal: 64
   1602: block: 
    1603: block_content: 
     1604: expr_stmt: 
      1605: expr: 
       1606: call: 
        1607: name: GF_LOG
        1608: argument_list: 
         1609: argument: 
          1610: expr: 
           1611: name: GF_LOG_ERROR
         1612: argument: 
          1613: expr: 
           1614: name: GF_LOG_CODING
         1615: argument: 
          1616: expr: 
           1617: operator: (
           1618: literal: "[HEVC] Invalid number of short term reference picture sets %d\n"
           1619: operator: ,
           1620: name: 
            1621: name: sps
            1622: operator: ->
            1623: name: num_short_term_ref_pic_sets
           1624: operator: )
     1625: return: 
      1626: expr: 
       1627: operator: -
       1628: literal: 1
 1629: for: 
  1630: control: 
   1631: init: 
    1632: expr: 
     1633: name: i
     1634: operator: =
     1635: literal: 0
   1636: condition: 
    1637: expr: 
     1638: name: i
     1639: operator: <
     1640: name: 
      1641: name: sps
      1642: operator: ->
      1643: name: num_short_term_ref_pic_sets
   1644: incr: 
    1645: expr: 
     1646: name: i
     1647: operator: ++
  1648: block: 
   1649: block_content: 
    1650: decl_stmt: 
     1651: decl: 
      1652: type: 
       1653: name: Bool
      1654: name: ret
      1655: init: 
       1656: expr: 
        1657: call: 
         1658: name: hevc_parse_short_term_ref_pic_set
         1659: argument_list: 
          1660: argument: 
           1661: expr: 
            1662: name: bs
          1663: argument: 
           1664: expr: 
            1665: name: sps
          1666: argument: 
           1667: expr: 
            1668: name: i
    1669: comment: /*cannot parse short_term_ref_pic_set, skip VUI parsing*/
    1670: if_stmt: 
     1671: if: 
      1672: condition: 
       1673: expr: 
        1674: operator: !
        1675: name: ret
      1676: block: 
       1677: block_content: 
        1678: expr_stmt: 
         1679: expr: 
          1680: call: 
           1681: name: GF_LOG
           1682: argument_list: 
            1683: argument: 
             1684: expr: 
              1685: name: GF_LOG_ERROR
            1686: argument: 
             1687: expr: 
              1688: name: GF_LOG_CODING
            1689: argument: 
             1690: expr: 
              1691: operator: (
              1692: literal: "[HEVC] Invalid short_term_ref_pic_set\n"
              1693: operator: )
        1694: return: 
         1695: expr: 
          1696: operator: -
          1697: literal: 1
 1698: expr_stmt: 
  1699: expr: 
   1700: name: 
    1701: name: sps
    1702: operator: ->
    1703: name: long_term_ref_pics_present_flag
   1704: operator: =
   1705: call: 
    1706: name: gf_bs_read_int_log
    1707: argument_list: 
     1708: argument: 
      1709: expr: 
       1710: name: bs
     1711: argument: 
      1712: expr: 
       1713: literal: 1
     1714: argument: 
      1715: expr: 
       1716: literal: "long_term_ref_pics_present_flag"
 1717: if_stmt: 
  1718: if: 
   1719: condition: 
    1720: expr: 
     1721: name: 
      1722: name: sps
      1723: operator: ->
      1724: name: long_term_ref_pics_present_flag
   1725: block: 
    1726: block_content: 
     1727: expr_stmt: 
      1728: expr: 
       1729: name: 
        1730: name: sps
        1731: operator: ->
        1732: name: num_long_term_ref_pic_sps
       1733: operator: =
       1734: call: 
        1735: name: gf_bs_read_ue_log
        1736: argument_list: 
         1737: argument: 
          1738: expr: 
           1739: name: bs
         1740: argument: 
          1741: expr: 
           1742: literal: "num_long_term_ref_pic_sps"
     1743: for: 
      1744: control: 
       1745: init: 
        1746: expr: 
         1747: name: i
         1748: operator: =
         1749: literal: 0
       1750: condition: 
        1751: expr: 
         1752: name: i
         1753: operator: <
         1754: name: 
          1755: name: sps
          1756: operator: ->
          1757: name: num_long_term_ref_pic_sps
       1758: incr: 
        1759: expr: 
         1760: name: i
         1761: operator: ++
      1762: block: 
       1763: block_content: 
        1764: expr_stmt: 
         1765: expr: 
          1766: call: 
           1767: name: gf_bs_read_int_log_idx
           1768: argument_list: 
            1769: argument: 
             1770: expr: 
              1771: name: bs
            1772: argument: 
             1773: expr: 
              1774: name: 
               1775: name: sps
               1776: operator: ->
               1777: name: log2_max_pic_order_cnt_lsb
            1778: argument: 
             1779: expr: 
              1780: literal: "lt_ref_pic_poc_lsb_sps"
            1781: argument: 
             1782: expr: 
              1783: name: i
        1784: expr_stmt: 
         1785: expr: 
          1786: call: 
           1787: name: gf_bs_read_int_log_idx
           1788: argument_list: 
            1789: argument: 
             1790: expr: 
              1791: name: bs
            1792: argument: 
             1793: expr: 
              1794: literal: 1
            1795: argument: 
             1796: expr: 
              1797: literal: "used_by_curr_pic_lt_sps_flag"
            1798: argument: 
             1799: expr: 
              1800: name: i
 1801: expr_stmt: 
  1802: expr: 
   1803: name: 
    1804: name: sps
    1805: operator: ->
    1806: name: temporal_mvp_enable_flag
   1807: operator: =
   1808: call: 
    1809: name: gf_bs_read_int_log
    1810: argument_list: 
     1811: argument: 
      1812: expr: 
       1813: name: bs
     1814: argument: 
      1815: expr: 
       1816: literal: 1
     1817: argument: 
      1818: expr: 
       1819: literal: "temporal_mvp_enable_flag"
 1820: expr_stmt: 
  1821: expr: 
   1822: name: 
    1823: name: sps
    1824: operator: ->
    1825: name: strong_intra_smoothing_enable_flag
   1826: operator: =
   1827: call: 
    1828: name: gf_bs_read_int_log
    1829: argument_list: 
     1830: argument: 
      1831: expr: 
       1832: name: bs
     1833: argument: 
      1834: expr: 
       1835: literal: 1
     1836: argument: 
      1837: expr: 
       1838: literal: "strong_intra_smoothing_enable_flag"
 1839: if_stmt: 
  1840: if: 
   1841: condition: 
    1842: expr: 
     1843: name: vui_flag_pos
   1844: block: 
    1845: block_content: 
     1846: expr_stmt: 
      1847: expr: 
       1848: operator: *
       1849: name: vui_flag_pos
       1850: operator: =
       1851: operator: (
       1852: name: u32
       1853: operator: )
       1854: call: 
        1855: name: gf_bs_get_bit_offset
        1856: argument_list: 
         1857: argument: 
          1858: expr: 
           1859: name: bs
 1860: if_stmt: 
  1861: if: 
   1862: condition: 
    1863: expr: 
     1864: operator: (
     1865: name: 
      1866: name: sps
      1867: operator: ->
      1868: name: vui_parameters_present_flag
     1869: operator: =
     1870: call: 
      1871: name: gf_bs_read_int_log
      1872: argument_list: 
       1873: argument: 
        1874: expr: 
         1875: name: bs
       1876: argument: 
        1877: expr: 
         1878: literal: 1
       1879: argument: 
        1880: expr: 
         1881: literal: "vui_parameters_present_flag"
     1882: operator: )
   1883: block: 
    1884: block_content: 
     1885: expr_stmt: 
      1886: expr: 
       1887: name: 
        1888: name: sps
        1889: operator: ->
        1890: name: aspect_ratio_info_present_flag
       1891: operator: =
       1892: call: 
        1893: name: gf_bs_read_int_log
        1894: argument_list: 
         1895: argument: 
          1896: expr: 
           1897: name: bs
         1898: argument: 
          1899: expr: 
           1900: literal: 1
         1901: argument: 
          1902: expr: 
           1903: literal: "aspect_ratio_info_present_flag"
     1904: if_stmt: 
      1905: if: 
       1906: condition: 
        1907: expr: 
         1908: name: 
          1909: name: sps
          1910: operator: ->
          1911: name: aspect_ratio_info_present_flag
       1912: block: 
        1913: block_content: 
         1914: expr_stmt: 
          1915: expr: 
           1916: name: 
            1917: name: sps
            1918: operator: ->
            1919: name: sar_idc
           1920: operator: =
           1921: call: 
            1922: name: gf_bs_read_int_log
            1923: argument_list: 
             1924: argument: 
              1925: expr: 
               1926: name: bs
             1927: argument: 
              1928: expr: 
               1929: literal: 8
             1930: argument: 
              1931: expr: 
               1932: literal: "aspect_ratio_idc"
         1933: if_stmt: 
          1934: if: 
           1935: condition: 
            1936: expr: 
             1937: name: 
              1938: name: sps
              1939: operator: ->
              1940: name: sar_idc
             1941: operator: ==
             1942: literal: 255
           1943: block: 
            1944: block_content: 
             1945: expr_stmt: 
              1946: expr: 
               1947: name: 
                1948: name: sps
                1949: operator: ->
                1950: name: sar_width
               1951: operator: =
               1952: call: 
                1953: name: gf_bs_read_int_log
                1954: argument_list: 
                 1955: argument: 
                  1956: expr: 
                   1957: name: bs
                 1958: argument: 
                  1959: expr: 
                   1960: literal: 16
                 1961: argument: 
                  1962: expr: 
                   1963: literal: "aspect_ratio_width"
             1964: expr_stmt: 
              1965: expr: 
               1966: name: 
                1967: name: sps
                1968: operator: ->
                1969: name: sar_height
               1970: operator: =
               1971: call: 
                1972: name: gf_bs_read_int_log
                1973: argument_list: 
                 1974: argument: 
                  1975: expr: 
                   1976: name: bs
                 1977: argument: 
                  1978: expr: 
                   1979: literal: 16
                 1980: argument: 
                  1981: expr: 
                   1982: literal: "aspect_ratio_height"
          1983: if: 
           1984: condition: 
            1985: expr: 
             1986: name: 
              1987: name: sps
              1988: operator: ->
              1989: name: sar_idc
             1990: operator: <
             1991: literal: 17
           1992: block: 
            1993: block_content: 
             1994: expr_stmt: 
              1995: expr: 
               1996: name: 
                1997: name: sps
                1998: operator: ->
                1999: name: sar_width
               2000: operator: =
               2001: name: 
                2002: name: hevc_sar
                2003: index: 
                 2004: expr: 
                  2005: name: 
                   2006: name: sps
                   2007: operator: ->
                   2008: name: sar_idc
               2009: operator: .
               2010: name: w
             2011: expr_stmt: 
              2012: expr: 
               2013: name: 
                2014: name: sps
                2015: operator: ->
                2016: name: sar_height
               2017: operator: =
               2018: name: 
                2019: name: hevc_sar
                2020: index: 
                 2021: expr: 
                  2022: name: 
                   2023: name: sps
                   2024: operator: ->
                   2025: name: sar_idc
               2026: operator: .
               2027: name: h
     2028: if_stmt: 
      2029: if: 
       2030: condition: 
        2031: expr: 
         2032: operator: (
         2033: name: 
          2034: name: sps
          2035: operator: ->
          2036: name: overscan_info_present
         2037: operator: =
         2038: call: 
          2039: name: gf_bs_read_int_log
          2040: argument_list: 
           2041: argument: 
            2042: expr: 
             2043: name: bs
           2044: argument: 
            2045: expr: 
             2046: literal: 1
           2047: argument: 
            2048: expr: 
             2049: literal: "overscan_info_present"
         2050: operator: )
       2051: block: 
        2052: block_content: 
         2053: expr_stmt: 
          2054: expr: 
           2055: name: 
            2056: name: sps
            2057: operator: ->
            2058: name: overscan_appropriate
           2059: operator: =
           2060: call: 
            2061: name: gf_bs_read_int_log
            2062: argument_list: 
             2063: argument: 
              2064: expr: 
               2065: name: bs
             2066: argument: 
              2067: expr: 
               2068: literal: 1
             2069: argument: 
              2070: expr: 
               2071: literal: "overscan_appropriate"
     2072: expr_stmt: 
      2073: expr: 
       2074: name: 
        2075: name: sps
        2076: operator: ->
        2077: name: video_signal_type_present_flag
       2078: operator: =
       2079: call: 
        2080: name: gf_bs_read_int_log
        2081: argument_list: 
         2082: argument: 
          2083: expr: 
           2084: name: bs
         2085: argument: 
          2086: expr: 
           2087: literal: 1
         2088: argument: 
          2089: expr: 
           2090: literal: "video_signal_type_present_flag"
     2091: if_stmt: 
      2092: if: 
       2093: condition: 
        2094: expr: 
         2095: name: 
          2096: name: sps
          2097: operator: ->
          2098: name: video_signal_type_present_flag
       2099: block: 
        2100: block_content: 
         2101: expr_stmt: 
          2102: expr: 
           2103: name: 
            2104: name: sps
            2105: operator: ->
            2106: name: video_format
           2107: operator: =
           2108: call: 
            2109: name: gf_bs_read_int_log
            2110: argument_list: 
             2111: argument: 
              2112: expr: 
               2113: name: bs
             2114: argument: 
              2115: expr: 
               2116: literal: 3
             2117: argument: 
              2118: expr: 
               2119: literal: "video_format"
         2120: expr_stmt: 
          2121: expr: 
           2122: name: 
            2123: name: sps
            2124: operator: ->
            2125: name: video_full_range_flag
           2126: operator: =
           2127: call: 
            2128: name: gf_bs_read_int_log
            2129: argument_list: 
             2130: argument: 
              2131: expr: 
               2132: name: bs
             2133: argument: 
              2134: expr: 
               2135: literal: 1
             2136: argument: 
              2137: expr: 
               2138: literal: "video_full_range_flag"
         2139: if_stmt: 
          2140: if: 
           2141: condition: 
            2142: expr: 
             2143: operator: (
             2144: name: 
              2145: name: sps
              2146: operator: ->
              2147: name: colour_description_present_flag
             2148: operator: =
             2149: call: 
              2150: name: gf_bs_read_int_log
              2151: argument_list: 
               2152: argument: 
                2153: expr: 
                 2154: name: bs
               2155: argument: 
                2156: expr: 
                 2157: literal: 1
               2158: argument: 
                2159: expr: 
                 2160: literal: "colour_description_present_flag"
             2161: operator: )
           2162: block: 
            2163: block_content: 
             2164: expr_stmt: 
              2165: expr: 
               2166: name: 
                2167: name: sps
                2168: operator: ->
                2169: name: colour_primaries
               2170: operator: =
               2171: call: 
                2172: name: gf_bs_read_int_log
                2173: argument_list: 
                 2174: argument: 
                  2175: expr: 
                   2176: name: bs
                 2177: argument: 
                  2178: expr: 
                   2179: literal: 8
                 2180: argument: 
                  2181: expr: 
                   2182: literal: "colour_primaries"
             2183: expr_stmt: 
              2184: expr: 
               2185: name: 
                2186: name: sps
                2187: operator: ->
                2188: name: transfer_characteristic
               2189: operator: =
               2190: call: 
                2191: name: gf_bs_read_int_log
                2192: argument_list: 
                 2193: argument: 
                  2194: expr: 
                   2195: name: bs
                 2196: argument: 
                  2197: expr: 
                   2198: literal: 8
                 2199: argument: 
                  2200: expr: 
                   2201: literal: "transfer_characteristic"
             2202: expr_stmt: 
              2203: expr: 
               2204: name: 
                2205: name: sps
                2206: operator: ->
                2207: name: matrix_coeffs
               2208: operator: =
               2209: call: 
                2210: name: gf_bs_read_int_log
                2211: argument_list: 
                 2212: argument: 
                  2213: expr: 
                   2214: name: bs
                 2215: argument: 
                  2216: expr: 
                   2217: literal: 8
                 2218: argument: 
                  2219: expr: 
                   2220: literal: "matrix_coefficients"
     2221: if_stmt: 
      2222: if: 
       2223: condition: 
        2224: expr: 
         2225: operator: (
         2226: name: 
          2227: name: sps
          2228: operator: ->
          2229: name: chroma_loc_info_present_flag
         2230: operator: =
         2231: call: 
          2232: name: gf_bs_read_int_log
          2233: argument_list: 
           2234: argument: 
            2235: expr: 
             2236: name: bs
           2237: argument: 
            2238: expr: 
             2239: literal: 1
           2240: argument: 
            2241: expr: 
             2242: literal: "chroma_loc_info_present_flag"
         2243: operator: )
       2244: block: 
        2245: block_content: 
         2246: expr_stmt: 
          2247: expr: 
           2248: name: 
            2249: name: sps
            2250: operator: ->
            2251: name: chroma_sample_loc_type_top_field
           2252: operator: =
           2253: call: 
            2254: name: gf_bs_read_ue_log
            2255: argument_list: 
             2256: argument: 
              2257: expr: 
               2258: name: bs
             2259: argument: 
              2260: expr: 
               2261: literal: "chroma_sample_loc_type_top_field"
         2262: expr_stmt: 
          2263: expr: 
           2264: name: 
            2265: name: sps
            2266: operator: ->
            2267: name: chroma_sample_loc_type_bottom_field
           2268: operator: =
           2269: call: 
            2270: name: gf_bs_read_ue_log
            2271: argument_list: 
             2272: argument: 
              2273: expr: 
               2274: name: bs
             2275: argument: 
              2276: expr: 
               2277: literal: "chroma_sample_loc_type_bottom_field"
     2278: expr_stmt: 
      2279: expr: 
       2280: name: 
        2281: name: sps
        2282: operator: ->
        2283: name: neutra_chroma_indication_flag
       2284: operator: =
       2285: call: 
        2286: name: gf_bs_read_int_log
        2287: argument_list: 
         2288: argument: 
          2289: expr: 
           2290: name: bs
         2291: argument: 
          2292: expr: 
           2293: literal: 1
         2294: argument: 
          2295: expr: 
           2296: literal: "neutra_chroma_indication_flag"
     2297: expr_stmt: 
      2298: expr: 
       2299: name: 
        2300: name: sps
        2301: operator: ->
        2302: name: field_seq_flag
       2303: operator: =
       2304: call: 
        2305: name: gf_bs_read_int_log
        2306: argument_list: 
         2307: argument: 
          2308: expr: 
           2309: name: bs
         2310: argument: 
          2311: expr: 
           2312: literal: 1
         2313: argument: 
          2314: expr: 
           2315: literal: "field_seq_flag"
     2316: expr_stmt: 
      2317: expr: 
       2318: name: 
        2319: name: sps
        2320: operator: ->
        2321: name: frame_field_info_present_flag
       2322: operator: =
       2323: call: 
        2324: name: gf_bs_read_int_log
        2325: argument_list: 
         2326: argument: 
          2327: expr: 
           2328: name: bs
         2329: argument: 
          2330: expr: 
           2331: literal: 1
         2332: argument: 
          2333: expr: 
           2334: literal: "frame_field_info_present_flag"
     2335: if_stmt: 
      2336: if: 
       2337: condition: 
        2338: expr: 
         2339: operator: (
         2340: name: 
          2341: name: sps
          2342: operator: ->
          2343: name: default_display_window_flag
         2344: operator: =
         2345: call: 
          2346: name: gf_bs_read_int_log
          2347: argument_list: 
           2348: argument: 
            2349: expr: 
             2350: name: bs
           2351: argument: 
            2352: expr: 
             2353: literal: 1
           2354: argument: 
            2355: expr: 
             2356: literal: "default_display_window_flag"
         2357: operator: )
       2358: block: 
        2359: block_content: 
         2360: expr_stmt: 
          2361: expr: 
           2362: name: 
            2363: name: sps
            2364: operator: ->
            2365: name: left_offset
           2366: operator: =
           2367: call: 
            2368: name: gf_bs_read_ue_log
            2369: argument_list: 
             2370: argument: 
              2371: expr: 
               2372: name: bs
             2373: argument: 
              2374: expr: 
               2375: literal: "display_window_left_offset"
         2376: expr_stmt: 
          2377: expr: 
           2378: name: 
            2379: name: sps
            2380: operator: ->
            2381: name: right_offset
           2382: operator: =
           2383: call: 
            2384: name: gf_bs_read_ue_log
            2385: argument_list: 
             2386: argument: 
              2387: expr: 
               2388: name: bs
             2389: argument: 
              2390: expr: 
               2391: literal: "display_window_right_offset"
         2392: expr_stmt: 
          2393: expr: 
           2394: name: 
            2395: name: sps
            2396: operator: ->
            2397: name: top_offset
           2398: operator: =
           2399: call: 
            2400: name: gf_bs_read_ue_log
            2401: argument_list: 
             2402: argument: 
              2403: expr: 
               2404: name: bs
             2405: argument: 
              2406: expr: 
               2407: literal: "display_window_top_offset"
         2408: expr_stmt: 
          2409: expr: 
           2410: name: 
            2411: name: sps
            2412: operator: ->
            2413: name: bottom_offset
           2414: operator: =
           2415: call: 
            2416: name: gf_bs_read_ue_log
            2417: argument_list: 
             2418: argument: 
              2419: expr: 
               2420: name: bs
             2421: argument: 
              2422: expr: 
               2423: literal: "display_window_bottom_offset"
     2424: expr_stmt: 
      2425: expr: 
       2426: name: 
        2427: name: sps
        2428: operator: ->
        2429: name: has_timing_info
       2430: operator: =
       2431: call: 
        2432: name: gf_bs_read_int_log
        2433: argument_list: 
         2434: argument: 
          2435: expr: 
           2436: name: bs
         2437: argument: 
          2438: expr: 
           2439: literal: 1
         2440: argument: 
          2441: expr: 
           2442: literal: "has_timing_info"
     2443: if_stmt: 
      2444: if: 
       2445: condition: 
        2446: expr: 
         2447: name: 
          2448: name: sps
          2449: operator: ->
          2450: name: has_timing_info
       2451: block: 
        2452: block_content: 
         2453: expr_stmt: 
          2454: expr: 
           2455: name: 
            2456: name: sps
            2457: operator: ->
            2458: name: num_units_in_tick
           2459: operator: =
           2460: call: 
            2461: name: gf_bs_read_int_log
            2462: argument_list: 
             2463: argument: 
              2464: expr: 
               2465: name: bs
             2466: argument: 
              2467: expr: 
               2468: literal: 32
             2469: argument: 
              2470: expr: 
               2471: literal: "num_units_in_tick"
         2472: expr_stmt: 
          2473: expr: 
           2474: name: 
            2475: name: sps
            2476: operator: ->
            2477: name: time_scale
           2478: operator: =
           2479: call: 
            2480: name: gf_bs_read_int_log
            2481: argument_list: 
             2482: argument: 
              2483: expr: 
               2484: name: bs
             2485: argument: 
              2486: expr: 
               2487: literal: 32
             2488: argument: 
              2489: expr: 
               2490: literal: "time_scale"
         2491: expr_stmt: 
          2492: expr: 
           2493: name: 
            2494: name: sps
            2495: operator: ->
            2496: name: poc_proportional_to_timing_flag
           2497: operator: =
           2498: call: 
            2499: name: gf_bs_read_int_log
            2500: argument_list: 
             2501: argument: 
              2502: expr: 
               2503: name: bs
             2504: argument: 
              2505: expr: 
               2506: literal: 1
             2507: argument: 
              2508: expr: 
               2509: literal: "poc_proportional_to_timing_flag"
         2510: if_stmt: 
          2511: if: 
           2512: condition: 
            2513: expr: 
             2514: name: 
              2515: name: sps
              2516: operator: ->
              2517: name: poc_proportional_to_timing_flag
           2518: block: 
            2519: block_content: 
             2520: expr_stmt: 
              2521: expr: 
               2522: name: 
                2523: name: sps
                2524: operator: ->
                2525: name: num_ticks_poc_diff_one_minus1
               2526: operator: =
               2527: call: 
                2528: name: gf_bs_read_ue_log
                2529: argument_list: 
                 2530: argument: 
                  2531: expr: 
                   2532: name: bs
                 2533: argument: 
                  2534: expr: 
                   2535: literal: "num_ticks_poc_diff_one_minus1"
         2536: if_stmt: 
          2537: if: 
           2538: condition: 
            2539: expr: 
             2540: operator: (
             2541: name: 
              2542: name: sps
              2543: operator: ->
              2544: name: hrd_parameters_present_flag
             2545: operator: =
             2546: call: 
              2547: name: gf_bs_read_int_log
              2548: argument_list: 
               2549: argument: 
                2550: expr: 
                 2551: name: bs
               2552: argument: 
                2553: expr: 
                 2554: literal: 1
               2555: argument: 
                2556: expr: 
                 2557: literal: "hrd_parameters_present_flag"
             2558: operator: )
           2559: block: 
            2560: block_content: 
             2561: comment: //				GF_LOG(GF_LOG_INFO, GF_LOG_CODING, ("[HEVC] HRD param parsing not implemented\n"));
             2562: return: 
              2563: expr: 
               2564: name: sps_id
     2565: if_stmt: 
      2566: if: 
       2567: condition: 
        2568: expr: 
         2569: call: 
          2570: name: gf_bs_read_int_log
          2571: argument_list: 
           2572: argument: 
            2573: expr: 
             2574: name: bs
           2575: argument: 
            2576: expr: 
             2577: literal: 1
           2578: argument: 
            2579: expr: 
             2580: literal: "bitstream_restriction_flag"
       2581: block: 
        2582: block_content: 
         2583: expr_stmt: 
          2584: expr: 
           2585: call: 
            2586: name: gf_bs_read_int_log
            2587: argument_list: 
             2588: argument: 
              2589: expr: 
               2590: name: bs
             2591: argument: 
              2592: expr: 
               2593: literal: 1
             2594: argument: 
              2595: expr: 
               2596: literal: "tiles_fixed_structure_flag"
         2597: expr_stmt: 
          2598: expr: 
           2599: call: 
            2600: name: gf_bs_read_int_log
            2601: argument_list: 
             2602: argument: 
              2603: expr: 
               2604: name: bs
             2605: argument: 
              2606: expr: 
               2607: literal: 1
             2608: argument: 
              2609: expr: 
               2610: literal: "motion_vectors_over_pic_boundaries_flag"
         2611: expr_stmt: 
          2612: expr: 
           2613: call: 
            2614: name: gf_bs_read_int_log
            2615: argument_list: 
             2616: argument: 
              2617: expr: 
               2618: name: bs
             2619: argument: 
              2620: expr: 
               2621: literal: 1
             2622: argument: 
              2623: expr: 
               2624: literal: "restricted_ref_pic_lists_flag"
         2625: expr_stmt: 
          2626: expr: 
           2627: call: 
            2628: name: gf_bs_read_ue_log
            2629: argument_list: 
             2630: argument: 
              2631: expr: 
               2632: name: bs
             2633: argument: 
              2634: expr: 
               2635: literal: "min_spatial_segmentation_idc"
         2636: expr_stmt: 
          2637: expr: 
           2638: call: 
            2639: name: gf_bs_read_ue_log
            2640: argument_list: 
             2641: argument: 
              2642: expr: 
               2643: name: bs
             2644: argument: 
              2645: expr: 
               2646: literal: "max_bytes_per_pic_denom"
         2647: expr_stmt: 
          2648: expr: 
           2649: call: 
            2650: name: gf_bs_read_ue_log
            2651: argument_list: 
             2652: argument: 
              2653: expr: 
               2654: name: bs
             2655: argument: 
              2656: expr: 
               2657: literal: "max_bits_per_min_cu_denom"
         2658: expr_stmt: 
          2659: expr: 
           2660: call: 
            2661: name: gf_bs_read_ue_log
            2662: argument_list: 
             2663: argument: 
              2664: expr: 
               2665: name: bs
             2666: argument: 
              2667: expr: 
               2668: literal: "log2_max_mv_length_horizontal"
         2669: expr_stmt: 
          2670: expr: 
           2671: call: 
            2672: name: gf_bs_read_ue_log
            2673: argument_list: 
             2674: argument: 
              2675: expr: 
               2676: name: bs
             2677: argument: 
              2678: expr: 
               2679: literal: "log2_max_mv_length_vertical"
 2680: if_stmt: 
  2681: if: 
   2682: condition: 
    2683: expr: 
     2684: call: 
      2685: name: gf_bs_read_int_log
      2686: argument_list: 
       2687: argument: 
        2688: expr: 
         2689: name: bs
       2690: argument: 
        2691: expr: 
         2692: literal: 1
       2693: argument: 
        2694: expr: 
         2695: literal: "sps_extension_flag"
   2696: block: 
    2697: block_content: 
     2698: if: 
      2699: directive: if
      2700: expr: 
       2701: literal: 0
     2702: comment: /*sps_extension_data_flag */
     2703: endif: 
      2704: directive: endif
 2705: return: 
  2706: expr: 
   2707: name: sps_id

----------------------------------------
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: s32
   5: name: vps_id
  6: decl: 
   7: type: 
   8: name: sps_id
   9: init: 
    10: expr: 
     11: operator: -
     12: literal: 1
 13: decl_stmt: 
  14: decl: 
   15: type: 
    16: name: u32
   17: name: i
  18: decl: 
   19: type: 
   20: name: nb_CTUs
  21: decl: 
   22: type: 
   23: name: depth
 24: decl_stmt: 
  25: decl: 
   26: type: 
    27: name: HEVC_SPS
    28: modifier: *
   29: name: sps
 30: decl_stmt: 
  31: decl: 
   32: type: 
    33: name: HEVC_VPS
    34: modifier: *
   35: name: vps
 36: decl_stmt: 
  37: decl: 
   38: type: 
    39: name: HEVC_ProfileTierLevel
   40: name: ptl
 41: decl_stmt: 
  42: decl: 
   43: type: 
    44: name: Bool
   45: name: multiLayerExtSpsFlag
 46: decl_stmt: 
  47: decl: 
   48: type: 
    49: name: u8
   50: name: sps_ext_or_max_sub_layers_minus1
  51: decl: 
   52: type: 
   53: name: max_sub_layers_minus1
 54: if_stmt: 
  55: if: 
   56: condition: 
    57: expr: 
     58: name: vui_flag_pos
   59: block: 
    60: block_content: 
     61: expr_stmt: 
      62: expr: 
       63: operator: *
       64: name: vui_flag_pos
       65: operator: =
       66: literal: 0
 67: comment: //nalu header already parsed
 68: expr_stmt: 
  69: expr: 
   70: name: vps_id
   71: operator: =
   72: call: 
    73: name: gf_bs_read_int_log
    74: argument_list: 
     75: argument: 
      76: expr: 
       77: name: bs
     78: argument: 
      79: expr: 
       80: literal: 4
     81: argument: 
      82: expr: 
       83: literal: "vps_id"
 84: if_stmt: 
  85: if: 
   86: condition: 
    87: expr: 
     88: operator: (
     89: name: vps_id
     90: operator: <
     91: literal: 0
     92: operator: )
     93: operator: ||
     94: operator: (
     95: name: vps_id
     96: operator: >=
     97: literal: 16
     98: operator: )
   99: block: 
    100: block_content: 
     101: return: 
      102: expr: 
       103: operator: -
       104: literal: 1
 105: expr_stmt: 
  106: expr: 
   107: call: 
    108: name: memset
    109: argument_list: 
     110: argument: 
      111: expr: 
       112: operator: &
       113: name: ptl
     114: argument: 
      115: expr: 
       116: literal: 0
     117: argument: 
      118: expr: 
       119: sizeof: 
        120: argument_list: 
         121: argument: 
          122: expr: 
           123: name: ptl
 124: expr_stmt: 
  125: expr: 
   126: name: max_sub_layers_minus1
   127: operator: =
   128: literal: 0
 129: expr_stmt: 
  130: expr: 
   131: name: sps_ext_or_max_sub_layers_minus1
   132: operator: =
   133: literal: 0
 134: if_stmt: 
  135: if: 
   136: condition: 
    137: expr: 
     138: name: layer_id
     139: operator: ==
     140: literal: 0
   141: block: 
    142: block_content: 
     143: expr_stmt: 
      144: expr: 
       145: name: max_sub_layers_minus1
       146: operator: =
       147: call: 
        148: name: gf_bs_read_int_log
        149: argument_list: 
         150: argument: 
          151: expr: 
           152: name: bs
         153: argument: 
          154: expr: 
           155: literal: 3
         156: argument: 
          157: expr: 
           158: literal: "max_sub_layers_minus1"
  159: else: 
   160: block: 
    161: block_content: 
     162: expr_stmt: 
      163: expr: 
       164: name: sps_ext_or_max_sub_layers_minus1
       165: operator: =
       166: call: 
        167: name: gf_bs_read_int_log
        168: argument_list: 
         169: argument: 
          170: expr: 
           171: name: bs
         172: argument: 
          173: expr: 
           174: literal: 3
         175: argument: 
          176: expr: 
           177: literal: "sps_ext_or_max_sub_layers_minus1"
 178: expr_stmt: 
  179: expr: 
   180: name: multiLayerExtSpsFlag
   181: operator: =
   182: operator: (
   183: name: layer_id
   184: operator: !=
   185: literal: 0
   186: operator: )
   187: operator: &&
   188: operator: (
   189: name: sps_ext_or_max_sub_layers_minus1
   190: operator: ==
   191: literal: 7
   192: operator: )
 193: if_stmt: 
  194: if: 
   195: condition: 
    196: expr: 
     197: operator: !
     198: name: multiLayerExtSpsFlag
   199: block: 
    200: block_content: 
     201: expr_stmt: 
      202: expr: 
       203: call: 
        204: name: gf_bs_read_int_log
        205: argument_list: 
         206: argument: 
          207: expr: 
           208: name: bs
         209: argument: 
          210: expr: 
           211: literal: 1
         212: argument: 
          213: expr: 
           214: literal: "temporal_id_nesting_flag"
     215: expr_stmt: 
      216: expr: 
       217: call: 
        218: name: hevc_profile_tier_level
        219: argument_list: 
         220: argument: 
          221: expr: 
           222: name: bs
         223: argument: 
          224: expr: 
           225: literal: 1
         226: argument: 
          227: expr: 
           228: name: max_sub_layers_minus1
         229: argument: 
          230: expr: 
           231: operator: &
           232: name: ptl
         233: argument: 
          234: expr: 
           235: literal: 0
 236: expr_stmt: 
  237: expr: 
   238: name: sps_id
   239: operator: =
   240: call: 
    241: name: gf_bs_read_ue_log
    242: argument_list: 
     243: argument: 
      244: expr: 
       245: name: bs
     246: argument: 
      247: expr: 
       248: literal: "sps_id"
 249: if_stmt: 
  250: if: 
   251: condition: 
    252: expr: 
     253: operator: (
     254: name: sps_id
     255: operator: <
     256: literal: 0
     257: operator: )
     258: operator: ||
     259: operator: (
     260: name: sps_id
     261: operator: >=
     262: literal: 16
     263: operator: )
   264: block: 
    265: block_content: 
     266: return: 
      267: expr: 
       268: operator: -
       269: literal: 1
 270: expr_stmt: 
  271: expr: 
   272: name: sps
   273: operator: =
   274: operator: &
   275: name: 
    276: name: hevc
    277: operator: ->
    278: name: sps
    279: index: 
     280: expr: 
      281: name: sps_id
 282: if_stmt: 
  283: if: 
   284: condition: 
    285: expr: 
     286: operator: !
     287: name: 
      288: name: sps
      289: operator: ->
      290: name: state
   291: block: 
    292: block_content: 
     293: expr_stmt: 
      294: expr: 
       295: name: 
        296: name: sps
        297: operator: ->
        298: name: state
       299: operator: =
       300: literal: 1
     301: expr_stmt: 
      302: expr: 
       303: name: 
        304: name: sps
        305: operator: ->
        306: name: id
       307: operator: =
       308: name: sps_id
     309: expr_stmt: 
      310: expr: 
       311: name: 
        312: name: sps
        313: operator: ->
        314: name: vps_id
       315: operator: =
       316: name: vps_id
 317: expr_stmt: 
  318: expr: 
   319: name: 
    320: name: sps
    321: operator: ->
    322: name: ptl
   323: operator: =
   324: name: ptl
 325: expr_stmt: 
  326: expr: 
   327: name: vps
   328: operator: =
   329: operator: &
   330: name: 
    331: name: hevc
    332: operator: ->
    333: name: vps
    334: index: 
     335: expr: 
      336: name: vps_id
 337: expr_stmt: 
  338: expr: 
   339: name: 
    340: name: sps
    341: operator: ->
    342: name: max_sub_layers_minus1
   343: operator: =
   344: literal: 0
 345: expr_stmt: 
  346: expr: 
   347: name: 
    348: name: sps
    349: operator: ->
    350: name: sps_ext_or_max_sub_layers_minus1
   351: operator: =
   352: literal: 0
 353: comment: /* default values */
 354: expr_stmt: 
  355: expr: 
   356: name: 
    357: name: sps
    358: operator: ->
    359: name: colour_primaries
   360: operator: =
   361: literal: 2
 362: expr_stmt: 
  363: expr: 
   364: name: 
    365: name: sps
    366: operator: ->
    367: name: transfer_characteristic
   368: operator: =
   369: literal: 2
 370: expr_stmt: 
  371: expr: 
   372: name: 
    373: name: sps
    374: operator: ->
    375: name: matrix_coeffs
   376: operator: =
   377: literal: 2
 378: comment: //sps_rep_format_idx = 0;
 379: if_stmt: 
  380: if: 
   381: condition: 
    382: expr: 
     383: name: multiLayerExtSpsFlag
   384: block: 
    385: block_content: 
     386: expr_stmt: 
      387: expr: 
       388: name: 
        389: name: sps
        390: operator: ->
        391: name: update_rep_format_flag
       392: operator: =
       393: call: 
        394: name: gf_bs_read_int_log
        395: argument_list: 
         396: argument: 
          397: expr: 
           398: name: bs
         399: argument: 
          400: expr: 
           401: literal: 1
         402: argument: 
          403: expr: 
           404: literal: "update_rep_format_flag"
     405: if_stmt: 
      406: if: 
       407: condition: 
        408: expr: 
         409: name: 
          410: name: sps
          411: operator: ->
          412: name: update_rep_format_flag
       413: block: 
        414: block_content: 
         415: expr_stmt: 
          416: expr: 
           417: name: 
            418: name: sps
            419: operator: ->
            420: name: rep_format_idx
           421: operator: =
           422: call: 
            423: name: gf_bs_read_int_log
            424: argument_list: 
             425: argument: 
              426: expr: 
               427: name: bs
             428: argument: 
              429: expr: 
               430: literal: 8
             431: argument: 
              432: expr: 
               433: literal: "rep_format_idx"
      434: else: 
       435: block: 
        436: block_content: 
         437: expr_stmt: 
          438: expr: 
           439: name: 
            440: name: sps
            441: operator: ->
            442: name: rep_format_idx
           443: operator: =
           444: name: 
            445: name: vps
            446: operator: ->
            447: name: rep_format_idx
            448: index: 
             449: expr: 
              450: name: layer_id
     451: expr_stmt: 
      452: expr: 
       453: name: 
        454: name: sps
        455: operator: ->
        456: name: width
       457: operator: =
       458: name: 
        459: name: vps
        460: operator: ->
        461: name: rep_formats
        462: index: 
         463: expr: 
          464: name: 
           465: name: sps
           466: operator: ->
           467: name: rep_format_idx
       468: operator: .
       469: name: pic_width_luma_samples
     470: expr_stmt: 
      471: expr: 
       472: name: 
        473: name: sps
        474: operator: ->
        475: name: height
       476: operator: =
       477: name: 
        478: name: vps
        479: operator: ->
        480: name: rep_formats
        481: index: 
         482: expr: 
          483: name: 
           484: name: sps
           485: operator: ->
           486: name: rep_format_idx
       487: operator: .
       488: name: pic_height_luma_samples
     489: expr_stmt: 
      490: expr: 
       491: name: 
        492: name: sps
        493: operator: ->
        494: name: chroma_format_idc
       495: operator: =
       496: name: 
        497: name: vps
        498: operator: ->
        499: name: rep_formats
        500: index: 
         501: expr: 
          502: name: 
           503: name: sps
           504: operator: ->
           505: name: rep_format_idx
       506: operator: .
       507: name: chroma_format_idc
     508: expr_stmt: 
      509: expr: 
       510: name: 
        511: name: sps
        512: operator: ->
        513: name: bit_depth_luma
       514: operator: =
       515: name: 
        516: name: vps
        517: operator: ->
        518: name: rep_formats
        519: index: 
         520: expr: 
          521: name: 
           522: name: sps
           523: operator: ->
           524: name: rep_format_idx
       525: operator: .
       526: name: bit_depth_luma
     527: expr_stmt: 
      528: expr: 
       529: name: 
        530: name: sps
        531: operator: ->
        532: name: bit_depth_chroma
       533: operator: =
       534: name: 
        535: name: vps
        536: operator: ->
        537: name: rep_formats
        538: index: 
         539: expr: 
          540: name: 
           541: name: sps
           542: operator: ->
           543: name: rep_format_idx
       544: operator: .
       545: name: bit_depth_chroma
     546: expr_stmt: 
      547: expr: 
       548: name: 
        549: name: sps
        550: operator: ->
        551: name: separate_colour_plane_flag
       552: operator: =
       553: name: 
        554: name: vps
        555: operator: ->
        556: name: rep_formats
        557: index: 
         558: expr: 
          559: name: 
           560: name: sps
           561: operator: ->
           562: name: rep_format_idx
       563: operator: .
       564: name: separate_colour_plane_flag
     565: comment: //TODO this is crude ...
     566: expr_stmt: 
      567: expr: 
       568: name: 
        569: name: sps
        570: operator: ->
        571: name: ptl
       572: operator: =
       573: name: 
        574: name: vps
        575: operator: ->
        576: name: ext_ptl
        577: index: 
         578: expr: 
          579: literal: 0
  580: else: 
   581: block: 
    582: block_content: 
     583: expr_stmt: 
      584: expr: 
       585: name: 
        586: name: sps
        587: operator: ->
        588: name: chroma_format_idc
       589: operator: =
       590: call: 
        591: name: gf_bs_read_ue_log
        592: argument_list: 
         593: argument: 
          594: expr: 
           595: name: bs
         596: argument: 
          597: expr: 
           598: literal: "chroma_format_idc"
     599: if_stmt: 
      600: if: 
       601: condition: 
        602: expr: 
         603: name: 
          604: name: sps
          605: operator: ->
          606: name: chroma_format_idc
         607: operator: ==
         608: literal: 3
       609: block: 
        610: block_content: 
         611: expr_stmt: 
          612: expr: 
           613: name: 
            614: name: sps
            615: operator: ->
            616: name: separate_colour_plane_flag
           617: operator: =
           618: call: 
            619: name: gf_bs_read_int_log
            620: argument_list: 
             621: argument: 
              622: expr: 
               623: name: bs
             624: argument: 
              625: expr: 
               626: literal: 1
             627: argument: 
              628: expr: 
               629: literal: "separate_colour_plane_flag"
     630: expr_stmt: 
      631: expr: 
       632: name: 
        633: name: sps
        634: operator: ->
        635: name: width
       636: operator: =
       637: call: 
        638: name: gf_bs_read_ue_log
        639: argument_list: 
         640: argument: 
          641: expr: 
           642: name: bs
         643: argument: 
          644: expr: 
           645: literal: "width"
     646: expr_stmt: 
      647: expr: 
       648: name: 
        649: name: sps
        650: operator: ->
        651: name: height
       652: operator: =
       653: call: 
        654: name: gf_bs_read_ue_log
        655: argument_list: 
         656: argument: 
          657: expr: 
           658: name: bs
         659: argument: 
          660: expr: 
           661: literal: "height"
     662: if_stmt: 
      663: if: 
       664: condition: 
        665: expr: 
         666: operator: (
         667: name: 
          668: name: sps
          669: operator: ->
          670: name: cw_flag
         671: operator: =
         672: call: 
          673: name: gf_bs_read_int_log
          674: argument_list: 
           675: argument: 
            676: expr: 
             677: name: bs
           678: argument: 
            679: expr: 
             680: literal: 1
           681: argument: 
            682: expr: 
             683: literal: "conformance_window_flag"
         684: operator: )
       685: block: 
        686: block_content: 
         687: decl_stmt: 
          688: decl: 
           689: type: 
            690: name: u32
           691: name: SubWidthC
          692: decl: 
           693: type: 
           694: name: SubHeightC
         695: if_stmt: 
          696: if: 
           697: condition: 
            698: expr: 
             699: name: 
              700: name: sps
              701: operator: ->
              702: name: chroma_format_idc
             703: operator: ==
             704: literal: 1
           705: block: 
            706: block_content: 
             707: expr_stmt: 
              708: expr: 
               709: name: SubWidthC
               710: operator: =
               711: name: SubHeightC
               712: operator: =
               713: literal: 2
          714: if: 
           715: condition: 
            716: expr: 
             717: name: 
              718: name: sps
              719: operator: ->
              720: name: chroma_format_idc
             721: operator: ==
             722: literal: 2
           723: block: 
            724: block_content: 
             725: expr_stmt: 
              726: expr: 
               727: name: SubWidthC
               728: operator: =
               729: literal: 2
             730: expr_stmt: 
              731: expr: 
               732: name: SubHeightC
               733: operator: =
               734: literal: 1
          735: else: 
           736: block: 
            737: block_content: 
             738: expr_stmt: 
              739: expr: 
               740: name: SubWidthC
               741: operator: =
               742: name: SubHeightC
               743: operator: =
               744: literal: 1
         745: expr_stmt: 
          746: expr: 
           747: name: 
            748: name: sps
            749: operator: ->
            750: name: cw_left
           751: operator: =
           752: call: 
            753: name: gf_bs_read_ue_log
            754: argument_list: 
             755: argument: 
              756: expr: 
               757: name: bs
             758: argument: 
              759: expr: 
               760: literal: "conformance_window_left"
         761: expr_stmt: 
          762: expr: 
           763: name: 
            764: name: sps
            765: operator: ->
            766: name: cw_right
           767: operator: =
           768: call: 
            769: name: gf_bs_read_ue_log
            770: argument_list: 
             771: argument: 
              772: expr: 
               773: name: bs
             774: argument: 
              775: expr: 
               776: literal: "conformance_window_right"
         777: expr_stmt: 
          778: expr: 
           779: name: 
            780: name: sps
            781: operator: ->
            782: name: cw_top
           783: operator: =
           784: call: 
            785: name: gf_bs_read_ue_log
            786: argument_list: 
             787: argument: 
              788: expr: 
               789: name: bs
             790: argument: 
              791: expr: 
               792: literal: "conformance_window_top"
         793: expr_stmt: 
          794: expr: 
           795: name: 
            796: name: sps
            797: operator: ->
            798: name: cw_bottom
           799: operator: =
           800: call: 
            801: name: gf_bs_read_ue_log
            802: argument_list: 
             803: argument: 
              804: expr: 
               805: name: bs
             806: argument: 
              807: expr: 
               808: literal: "conformance_window_bottom"
         809: expr_stmt: 
          810: expr: 
           811: name: 
            812: name: sps
            813: operator: ->
            814: name: width
           815: operator: -=
           816: name: SubWidthC
           817: operator: *
           818: operator: (
           819: name: 
            820: name: sps
            821: operator: ->
            822: name: cw_left
           823: operator: +
           824: name: 
            825: name: sps
            826: operator: ->
            827: name: cw_right
           828: operator: )
         829: expr_stmt: 
          830: expr: 
           831: name: 
            832: name: sps
            833: operator: ->
            834: name: height
           835: operator: -=
           836: name: SubHeightC
           837: operator: *
           838: operator: (
           839: name: 
            840: name: sps
            841: operator: ->
            842: name: cw_top
           843: operator: +
           844: name: 
            845: name: sps
            846: operator: ->
            847: name: cw_bottom
           848: operator: )
     849: expr_stmt: 
      850: expr: 
       851: name: 
        852: name: sps
        853: operator: ->
        854: name: bit_depth_luma
       855: operator: =
       856: literal: 8
       857: operator: +
       858: call: 
        859: name: gf_bs_read_ue_log
        860: argument_list: 
         861: argument: 
          862: expr: 
           863: name: bs
         864: argument: 
          865: expr: 
           866: literal: "bit_depth_luma_minus8"
     867: expr_stmt: 
      868: expr: 
       869: name: 
        870: name: sps
        871: operator: ->
        872: name: bit_depth_chroma
       873: operator: =
       874: literal: 8
       875: operator: +
       876: call: 
        877: name: gf_bs_read_ue_log
        878: argument_list: 
         879: argument: 
          880: expr: 
           881: name: bs
         882: argument: 
          883: expr: 
           884: literal: "bit_depth_chroma_minus8"
 885: expr_stmt: 
  886: expr: 
   887: name: 
    888: name: sps
    889: operator: ->
    890: name: log2_max_pic_order_cnt_lsb
   891: operator: =
   892: literal: 4
   893: operator: +
   894: call: 
    895: name: gf_bs_read_ue_log
    896: argument_list: 
     897: argument: 
      898: expr: 
       899: name: bs
     900: argument: 
      901: expr: 
       902: literal: "log2_max_pic_order_cnt_lsb_minus4"
 903: if_stmt: 
  904: if: 
   905: condition: 
    906: expr: 
     907: operator: !
     908: name: multiLayerExtSpsFlag
   909: block: 
    910: block_content: 
     911: expr_stmt: 
      912: expr: 
       913: name: 
        914: name: sps
        915: operator: ->
        916: name: sub_layer_ordering_info_present_flag
       917: operator: =
       918: call: 
        919: name: gf_bs_read_int_log
        920: argument_list: 
         921: argument: 
          922: expr: 
           923: name: bs
         924: argument: 
          925: expr: 
           926: literal: 1
         927: argument: 
          928: expr: 
           929: literal: "sub_layer_ordering_info_present_flag"
     930: for: 
      931: control: 
       932: init: 
        933: expr: 
         934: name: i
         935: operator: =
         936: ternary: 
          937: condition: 
           938: expr: 
            939: name: 
             940: name: sps
             941: operator: ->
             942: name: sub_layer_ordering_info_present_flag
          943: then: 
           944: expr: 
            945: literal: 0
          946: else: 
           947: expr: 
            948: name: 
             949: name: sps
             950: operator: ->
             951: name: max_sub_layers_minus1
       952: condition: 
        953: expr: 
         954: name: i
         955: operator: <=
         956: name: 
          957: name: sps
          958: operator: ->
          959: name: max_sub_layers_minus1
       960: incr: 
        961: expr: 
         962: name: i
         963: operator: ++
      964: block: 
       965: block_content: 
        966: expr_stmt: 
         967: expr: 
          968: call: 
           969: name: gf_bs_read_ue_log_idx
           970: argument_list: 
            971: argument: 
             972: expr: 
              973: name: bs
            974: argument: 
             975: expr: 
              976: literal: "max_dec_pic_buffering"
            977: argument: 
             978: expr: 
              979: name: i
        980: expr_stmt: 
         981: expr: 
          982: call: 
           983: name: gf_bs_read_ue_log_idx
           984: argument_list: 
            985: argument: 
             986: expr: 
              987: name: bs
            988: argument: 
             989: expr: 
              990: literal: "num_reorder_pics"
            991: argument: 
             992: expr: 
              993: name: i
        994: expr_stmt: 
         995: expr: 
          996: call: 
           997: name: gf_bs_read_ue_log_idx
           998: argument_list: 
            999: argument: 
             1000: expr: 
              1001: name: bs
            1002: argument: 
             1003: expr: 
              1004: literal: "max_latency_increase"
            1005: argument: 
             1006: expr: 
              1007: name: i
 1008: expr_stmt: 
  1009: expr: 
   1010: name: 
    1011: name: sps
    1012: operator: ->
    1013: name: log2_min_luma_coding_block_size
   1014: operator: =
   1015: literal: 3
   1016: operator: +
   1017: call: 
    1018: name: gf_bs_read_ue_log
    1019: argument_list: 
     1020: argument: 
      1021: expr: 
       1022: name: bs
     1023: argument: 
      1024: expr: 
       1025: literal: "log2_min_luma_coding_block_size_minus3"
 1026: expr_stmt: 
  1027: expr: 
   1028: name: 
    1029: name: sps
    1030: operator: ->
    1031: name: log2_diff_max_min_luma_coding_block_size
   1032: operator: =
   1033: call: 
    1034: name: gf_bs_read_ue_log
    1035: argument_list: 
     1036: argument: 
      1037: expr: 
       1038: name: bs
     1039: argument: 
      1040: expr: 
       1041: literal: "log2_diff_max_min_luma_coding_block_size"
 1042: expr_stmt: 
  1043: expr: 
   1044: name: 
    1045: name: sps
    1046: operator: ->
    1047: name: max_CU_width
   1048: operator: =
   1049: operator: (
   1050: literal: 1
   1051: operator: <<
   1052: operator: (
   1053: name: 
    1054: name: sps
    1055: operator: ->
    1056: name: log2_min_luma_coding_block_size
   1057: operator: +
   1058: name: 
    1059: name: sps
    1060: operator: ->
    1061: name: log2_diff_max_min_luma_coding_block_size
   1062: operator: )
   1063: operator: )
 1064: expr_stmt: 
  1065: expr: 
   1066: name: 
    1067: name: sps
    1068: operator: ->
    1069: name: max_CU_height
   1070: operator: =
   1071: operator: (
   1072: literal: 1
   1073: operator: <<
   1074: operator: (
   1075: name: 
    1076: name: sps
    1077: operator: ->
    1078: name: log2_min_luma_coding_block_size
   1079: operator: +
   1080: name: 
    1081: name: sps
    1082: operator: ->
    1083: name: log2_diff_max_min_luma_coding_block_size
   1084: operator: )
   1085: operator: )
 1086: expr_stmt: 
  1087: expr: 
   1088: name: 
    1089: name: sps
    1090: operator: ->
    1091: name: log2_min_transform_block_size
   1092: operator: =
   1093: literal: 2
   1094: operator: +
   1095: call: 
    1096: name: gf_bs_read_ue_log
    1097: argument_list: 
     1098: argument: 
      1099: expr: 
       1100: name: bs
     1101: argument: 
      1102: expr: 
       1103: literal: "log2_min_transform_block_size_minus2"
 1104: expr_stmt: 
  1105: expr: 
   1106: name: 
    1107: name: sps
    1108: operator: ->
    1109: name: log2_max_transform_block_size
   1110: operator: =
   1111: name: 
    1112: name: sps
    1113: operator: ->
    1114: name: log2_min_transform_block_size
   1115: operator: +
   1116: call: 
    1117: name: gf_bs_read_ue_log
    1118: argument_list: 
     1119: argument: 
      1120: expr: 
       1121: name: bs
     1122: argument: 
      1123: expr: 
       1124: literal: "log2_max_transform_block_size"
 1125: expr_stmt: 
  1126: expr: 
   1127: name: depth
   1128: operator: =
   1129: literal: 0
 1130: expr_stmt: 
  1131: expr: 
   1132: name: 
    1133: name: sps
    1134: operator: ->
    1135: name: max_transform_hierarchy_depth_inter
   1136: operator: =
   1137: call: 
    1138: name: gf_bs_read_ue_log
    1139: argument_list: 
     1140: argument: 
      1141: expr: 
       1142: name: bs
     1143: argument: 
      1144: expr: 
       1145: literal: "max_transform_hierarchy_depth_inter"
 1146: expr_stmt: 
  1147: expr: 
   1148: name: 
    1149: name: sps
    1150: operator: ->
    1151: name: max_transform_hierarchy_depth_intra
   1152: operator: =
   1153: call: 
    1154: name: gf_bs_read_ue_log
    1155: argument_list: 
     1156: argument: 
      1157: expr: 
       1158: name: bs
     1159: argument: 
      1160: expr: 
       1161: literal: "max_transform_hierarchy_depth_intra"
 1162: while: 
  1163: condition: 
   1164: expr: 
    1165: operator: (
    1166: name: u32
    1167: operator: )
    1168: operator: (
    1169: name: 
     1170: name: sps
     1171: operator: ->
     1172: name: max_CU_width
    1173: operator: >>
    1174: name: 
     1175: name: sps
     1176: operator: ->
     1177: name: log2_diff_max_min_luma_coding_block_size
    1178: operator: )
    1179: operator: >
    1180: operator: (
    1181: name: u32
    1182: operator: )
    1183: operator: (
    1184: literal: 1
    1185: operator: <<
    1186: operator: (
    1187: name: 
     1188: name: sps
     1189: operator: ->
     1190: name: log2_min_transform_block_size
    1191: operator: +
    1192: name: depth
    1193: operator: )
    1194: operator: )
  1195: block: 
   1196: block_content: 
    1197: expr_stmt: 
     1198: expr: 
      1199: name: depth
      1200: operator: ++
 1201: expr_stmt: 
  1202: expr: 
   1203: name: 
    1204: name: sps
    1205: operator: ->
    1206: name: max_CU_depth
   1207: operator: =
   1208: name: 
    1209: name: sps
    1210: operator: ->
    1211: name: log2_diff_max_min_luma_coding_block_size
   1212: operator: +
   1213: name: depth
 1214: expr_stmt: 
  1215: expr: 
   1216: name: nb_CTUs
   1217: operator: =
   1218: operator: (
   1219: operator: (
   1220: name: 
    1221: name: sps
    1222: operator: ->
    1223: name: width
   1224: operator: +
   1225: name: 
    1226: name: sps
    1227: operator: ->
    1228: name: max_CU_width
   1229: operator: -
   1230: literal: 1
   1231: operator: )
   1232: operator: /
   1233: name: 
    1234: name: sps
    1235: operator: ->
    1236: name: max_CU_width
   1237: operator: )
   1238: operator: *
   1239: operator: (
   1240: operator: (
   1241: name: 
    1242: name: sps
    1243: operator: ->
    1244: name: height
   1245: operator: +
   1246: name: 
    1247: name: sps
    1248: operator: ->
    1249: name: max_CU_height
   1250: operator: -
   1251: literal: 1
   1252: operator: )
   1253: operator: /
   1254: name: 
    1255: name: sps
    1256: operator: ->
    1257: name: max_CU_height
   1258: operator: )
 1259: expr_stmt: 
  1260: expr: 
   1261: name: 
    1262: name: sps
    1263: operator: ->
    1264: name: bitsSliceSegmentAddress
   1265: operator: =
   1266: literal: 0
 1267: while: 
  1268: condition: 
   1269: expr: 
    1270: name: nb_CTUs
    1271: operator: >
    1272: operator: (
    1273: name: u32
    1274: operator: )
    1275: operator: (
    1276: literal: 1
    1277: operator: <<
    1278: name: 
     1279: name: sps
     1280: operator: ->
     1281: name: bitsSliceSegmentAddress
    1282: operator: )
  1283: block: 
   1284: block_content: 
    1285: expr_stmt: 
     1286: expr: 
      1287: name: 
       1288: name: sps
       1289: operator: ->
       1290: name: bitsSliceSegmentAddress
      1291: operator: ++
 1292: expr_stmt: 
  1293: expr: 
   1294: name: 
    1295: name: sps
    1296: operator: ->
    1297: name: scaling_list_enable_flag
   1298: operator: =
   1299: call: 
    1300: name: gf_bs_read_int_log
    1301: argument_list: 
     1302: argument: 
      1303: expr: 
       1304: name: bs
     1305: argument: 
      1306: expr: 
       1307: literal: 1
     1308: argument: 
      1309: expr: 
       1310: literal: "scaling_list_enable_flag"
 1311: if_stmt: 
  1312: if: 
   1313: condition: 
    1314: expr: 
     1315: name: 
      1316: name: sps
      1317: operator: ->
      1318: name: scaling_list_enable_flag
   1319: block: 
    1320: block_content: 
     1321: expr_stmt: 
      1322: expr: 
       1323: name: 
        1324: name: sps
        1325: operator: ->
        1326: name: infer_scaling_list_flag
       1327: operator: =
       1328: literal: 0
     1329: expr_stmt: 
      1330: expr: 
       1331: name: 
        1332: name: sps
        1333: operator: ->
        1334: name: scaling_list_ref_layer_id
       1335: operator: =
       1336: literal: 0
     1337: if_stmt: 
      1338: if: 
       1339: condition: 
        1340: expr: 
         1341: name: multiLayerExtSpsFlag
       1342: block: 
        1343: block_content: 
         1344: expr_stmt: 
          1345: expr: 
           1346: name: 
            1347: name: sps
            1348: operator: ->
            1349: name: infer_scaling_list_flag
           1350: operator: =
           1351: call: 
            1352: name: gf_bs_read_int_log
            1353: argument_list: 
             1354: argument: 
              1355: expr: 
               1356: name: bs
             1357: argument: 
              1358: expr: 
               1359: literal: 1
             1360: argument: 
              1361: expr: 
               1362: literal: "infer_scaling_list_flag"
     1363: if_stmt: 
      1364: if: 
       1365: condition: 
        1366: expr: 
         1367: name: 
          1368: name: sps
          1369: operator: ->
          1370: name: infer_scaling_list_flag
       1371: block: 
        1372: block_content: 
         1373: expr_stmt: 
          1374: expr: 
           1375: name: 
            1376: name: sps
            1377: operator: ->
            1378: name: scaling_list_ref_layer_id
           1379: operator: =
           1380: call: 
            1381: name: gf_bs_read_int_log
            1382: argument_list: 
             1383: argument: 
              1384: expr: 
               1385: name: bs
             1386: argument: 
              1387: expr: 
               1388: literal: 6
             1389: argument: 
              1390: expr: 
               1391: literal: "scaling_list_ref_layer_id"
      1392: else: 
       1393: block: 
        1394: block_content: 
         1395: expr_stmt: 
          1396: expr: 
           1397: name: 
            1398: name: sps
            1399: operator: ->
            1400: name: scaling_list_data_present_flag
           1401: operator: =
           1402: call: 
            1403: name: gf_bs_read_int_log
            1404: argument_list: 
             1405: argument: 
              1406: expr: 
               1407: name: bs
             1408: argument: 
              1409: expr: 
               1410: literal: 1
             1411: argument: 
              1412: expr: 
               1413: literal: "scaling_list_data_present_flag"
         1414: if_stmt: 
          1415: if: 
           1416: condition: 
            1417: expr: 
             1418: name: 
              1419: name: sps
              1420: operator: ->
              1421: name: scaling_list_data_present_flag
           1422: block: 
            1423: block_content: 
             1424: expr_stmt: 
              1425: expr: 
               1426: call: 
                1427: name: hevc_scaling_list_data
                1428: argument_list: 
                 1429: argument: 
                  1430: expr: 
                   1431: name: bs
 1432: expr_stmt: 
  1433: expr: 
   1434: name: 
    1435: name: sps
    1436: operator: ->
    1437: name: asymmetric_motion_partitions_enabled_flag
   1438: operator: =
   1439: call: 
    1440: name: gf_bs_read_int_log
    1441: argument_list: 
     1442: argument: 
      1443: expr: 
       1444: name: bs
     1445: argument: 
      1446: expr: 
       1447: literal: 1
     1448: argument: 
      1449: expr: 
       1450: literal: "asymmetric_motion_partitions_enabled_flag"
 1451: expr_stmt: 
  1452: expr: 
   1453: name: 
    1454: name: sps
    1455: operator: ->
    1456: name: sample_adaptive_offset_enabled_flag
   1457: operator: =
   1458: call: 
    1459: name: gf_bs_read_int_log
    1460: argument_list: 
     1461: argument: 
      1462: expr: 
       1463: name: bs
     1464: argument: 
      1465: expr: 
       1466: literal: 1
     1467: argument: 
      1468: expr: 
       1469: literal: "sample_adaptive_offset_enabled_flag"
 1470: if_stmt: 
  1471: if: 
   1472: condition: 
    1473: expr: 
     1474: operator: (
     1475: name: 
      1476: name: sps
      1477: operator: ->
      1478: name: pcm_enabled_flag
     1479: operator: =
     1480: call: 
      1481: name: gf_bs_read_int_log
      1482: argument_list: 
       1483: argument: 
        1484: expr: 
         1485: name: bs
       1486: argument: 
        1487: expr: 
         1488: literal: 1
       1489: argument: 
        1490: expr: 
         1491: literal: "pcm_enabled_flag"
     1492: operator: )
   1493: block: 
    1494: block_content: 
     1495: expr_stmt: 
      1496: expr: 
       1497: name: 
        1498: name: sps
        1499: operator: ->
        1500: name: pcm_sample_bit_depth_luma_minus1
       1501: operator: =
       1502: call: 
        1503: name: gf_bs_read_int_log
        1504: argument_list: 
         1505: argument: 
          1506: expr: 
           1507: name: bs
         1508: argument: 
          1509: expr: 
           1510: literal: 4
         1511: argument: 
          1512: expr: 
           1513: literal: "pcm_sample_bit_depth_luma_minus1"
     1514: expr_stmt: 
      1515: expr: 
       1516: name: 
        1517: name: sps
        1518: operator: ->
        1519: name: pcm_sample_bit_depth_chroma_minus1
       1520: operator: =
       1521: call: 
        1522: name: gf_bs_read_int_log
        1523: argument_list: 
         1524: argument: 
          1525: expr: 
           1526: name: bs
         1527: argument: 
          1528: expr: 
           1529: literal: 4
         1530: argument: 
          1531: expr: 
           1532: literal: "pcm_sample_bit_depth_chroma_minus1"
     1533: expr_stmt: 
      1534: expr: 
       1535: name: 
        1536: name: sps
        1537: operator: ->
        1538: name: log2_min_pcm_luma_coding_block_size_minus3
       1539: operator: =
       1540: call: 
        1541: name: gf_bs_read_ue_log
        1542: argument_list: 
         1543: argument: 
          1544: expr: 
           1545: name: bs
         1546: argument: 
          1547: expr: 
           1548: literal: "log2_min_pcm_luma_coding_block_size_minus3"
     1549: expr_stmt: 
      1550: expr: 
       1551: name: 
        1552: name: sps
        1553: operator: ->
        1554: name: log2_diff_max_min_pcm_luma_coding_block_size
       1555: operator: =
       1556: call: 
        1557: name: gf_bs_read_ue_log
        1558: argument_list: 
         1559: argument: 
          1560: expr: 
           1561: name: bs
         1562: argument: 
          1563: expr: 
           1564: literal: "log2_diff_max_min_pcm_luma_coding_block_size"
     1565: expr_stmt: 
      1566: expr: 
       1567: name: 
        1568: name: sps
        1569: operator: ->
        1570: name: pcm_loop_filter_disable_flag
       1571: operator: =
       1572: call: 
        1573: name: gf_bs_read_int_log
        1574: argument_list: 
         1575: argument: 
          1576: expr: 
           1577: name: bs
         1578: argument: 
          1579: expr: 
           1580: literal: 1
         1581: argument: 
          1582: expr: 
           1583: literal: "pcm_loop_filter_disable_flag"
 1584: expr_stmt: 
  1585: expr: 
   1586: name: 
    1587: name: sps
    1588: operator: ->
    1589: name: num_short_term_ref_pic_sets
   1590: operator: =
   1591: call: 
    1592: name: gf_bs_read_ue_log
    1593: argument_list: 
     1594: argument: 
      1595: expr: 
       1596: name: bs
     1597: argument: 
      1598: expr: 
       1599: literal: "num_short_term_ref_pic_sets"
 1600: if_stmt: 
  1601: if: 
   1602: condition: 
    1603: expr: 
     1604: name: 
      1605: name: sps
      1606: operator: ->
      1607: name: num_short_term_ref_pic_sets
     1608: operator: >
     1609: literal: 64
   1610: block: 
    1611: block_content: 
     1612: expr_stmt: 
      1613: expr: 
       1614: call: 
        1615: name: GF_LOG
        1616: argument_list: 
         1617: argument: 
          1618: expr: 
           1619: name: GF_LOG_ERROR
         1620: argument: 
          1621: expr: 
           1622: name: GF_LOG_CODING
         1623: argument: 
          1624: expr: 
           1625: operator: (
           1626: literal: "[HEVC] Invalid number of short term reference picture sets %d\n"
           1627: operator: ,
           1628: name: 
            1629: name: sps
            1630: operator: ->
            1631: name: num_short_term_ref_pic_sets
           1632: operator: )
     1633: return: 
      1634: expr: 
       1635: operator: -
       1636: literal: 1
 1637: for: 
  1638: control: 
   1639: init: 
    1640: expr: 
     1641: name: i
     1642: operator: =
     1643: literal: 0
   1644: condition: 
    1645: expr: 
     1646: name: i
     1647: operator: <
     1648: name: 
      1649: name: sps
      1650: operator: ->
      1651: name: num_short_term_ref_pic_sets
   1652: incr: 
    1653: expr: 
     1654: name: i
     1655: operator: ++
  1656: block: 
   1657: block_content: 
    1658: decl_stmt: 
     1659: decl: 
      1660: type: 
       1661: name: Bool
      1662: name: ret
      1663: init: 
       1664: expr: 
        1665: call: 
         1666: name: hevc_parse_short_term_ref_pic_set
         1667: argument_list: 
          1668: argument: 
           1669: expr: 
            1670: name: bs
          1671: argument: 
           1672: expr: 
            1673: name: sps
          1674: argument: 
           1675: expr: 
            1676: name: i
    1677: comment: /*cannot parse short_term_ref_pic_set, skip VUI parsing*/
    1678: if_stmt: 
     1679: if: 
      1680: condition: 
       1681: expr: 
        1682: operator: !
        1683: name: ret
      1684: block: 
       1685: block_content: 
        1686: expr_stmt: 
         1687: expr: 
          1688: call: 
           1689: name: GF_LOG
           1690: argument_list: 
            1691: argument: 
             1692: expr: 
              1693: name: GF_LOG_ERROR
            1694: argument: 
             1695: expr: 
              1696: name: GF_LOG_CODING
            1697: argument: 
             1698: expr: 
              1699: operator: (
              1700: literal: "[HEVC] Invalid short_term_ref_pic_set\n"
              1701: operator: )
        1702: return: 
         1703: expr: 
          1704: operator: -
          1705: literal: 1
 1706: expr_stmt: 
  1707: expr: 
   1708: name: 
    1709: name: sps
    1710: operator: ->
    1711: name: long_term_ref_pics_present_flag
   1712: operator: =
   1713: call: 
    1714: name: gf_bs_read_int_log
    1715: argument_list: 
     1716: argument: 
      1717: expr: 
       1718: name: bs
     1719: argument: 
      1720: expr: 
       1721: literal: 1
     1722: argument: 
      1723: expr: 
       1724: literal: "long_term_ref_pics_present_flag"
 1725: if_stmt: 
  1726: if: 
   1727: condition: 
    1728: expr: 
     1729: name: 
      1730: name: sps
      1731: operator: ->
      1732: name: long_term_ref_pics_present_flag
   1733: block: 
    1734: block_content: 
     1735: expr_stmt: 
      1736: expr: 
       1737: name: 
        1738: name: sps
        1739: operator: ->
        1740: name: num_long_term_ref_pic_sps
       1741: operator: =
       1742: call: 
        1743: name: gf_bs_read_ue_log
        1744: argument_list: 
         1745: argument: 
          1746: expr: 
           1747: name: bs
         1748: argument: 
          1749: expr: 
           1750: literal: "num_long_term_ref_pic_sps"
     1751: for: 
      1752: control: 
       1753: init: 
        1754: expr: 
         1755: name: i
         1756: operator: =
         1757: literal: 0
       1758: condition: 
        1759: expr: 
         1760: name: i
         1761: operator: <
         1762: name: 
          1763: name: sps
          1764: operator: ->
          1765: name: num_long_term_ref_pic_sps
       1766: incr: 
        1767: expr: 
         1768: name: i
         1769: operator: ++
      1770: block: 
       1771: block_content: 
        1772: expr_stmt: 
         1773: expr: 
          1774: call: 
           1775: name: gf_bs_read_int_log_idx
           1776: argument_list: 
            1777: argument: 
             1778: expr: 
              1779: name: bs
            1780: argument: 
             1781: expr: 
              1782: name: 
               1783: name: sps
               1784: operator: ->
               1785: name: log2_max_pic_order_cnt_lsb
            1786: argument: 
             1787: expr: 
              1788: literal: "lt_ref_pic_poc_lsb_sps"
            1789: argument: 
             1790: expr: 
              1791: name: i
        1792: expr_stmt: 
         1793: expr: 
          1794: call: 
           1795: name: gf_bs_read_int_log_idx
           1796: argument_list: 
            1797: argument: 
             1798: expr: 
              1799: name: bs
            1800: argument: 
             1801: expr: 
              1802: literal: 1
            1803: argument: 
             1804: expr: 
              1805: literal: "used_by_curr_pic_lt_sps_flag"
            1806: argument: 
             1807: expr: 
              1808: name: i
 1809: expr_stmt: 
  1810: expr: 
   1811: name: 
    1812: name: sps
    1813: operator: ->
    1814: name: temporal_mvp_enable_flag
   1815: operator: =
   1816: call: 
    1817: name: gf_bs_read_int_log
    1818: argument_list: 
     1819: argument: 
      1820: expr: 
       1821: name: bs
     1822: argument: 
      1823: expr: 
       1824: literal: 1
     1825: argument: 
      1826: expr: 
       1827: literal: "temporal_mvp_enable_flag"
 1828: expr_stmt: 
  1829: expr: 
   1830: name: 
    1831: name: sps
    1832: operator: ->
    1833: name: strong_intra_smoothing_enable_flag
   1834: operator: =
   1835: call: 
    1836: name: gf_bs_read_int_log
    1837: argument_list: 
     1838: argument: 
      1839: expr: 
       1840: name: bs
     1841: argument: 
      1842: expr: 
       1843: literal: 1
     1844: argument: 
      1845: expr: 
       1846: literal: "strong_intra_smoothing_enable_flag"
 1847: if_stmt: 
  1848: if: 
   1849: condition: 
    1850: expr: 
     1851: name: vui_flag_pos
   1852: block: 
    1853: block_content: 
     1854: expr_stmt: 
      1855: expr: 
       1856: operator: *
       1857: name: vui_flag_pos
       1858: operator: =
       1859: operator: (
       1860: name: u32
       1861: operator: )
       1862: call: 
        1863: name: gf_bs_get_bit_offset
        1864: argument_list: 
         1865: argument: 
          1866: expr: 
           1867: name: bs
 1868: if_stmt: 
  1869: if: 
   1870: condition: 
    1871: expr: 
     1872: operator: (
     1873: name: 
      1874: name: sps
      1875: operator: ->
      1876: name: vui_parameters_present_flag
     1877: operator: =
     1878: call: 
      1879: name: gf_bs_read_int_log
      1880: argument_list: 
       1881: argument: 
        1882: expr: 
         1883: name: bs
       1884: argument: 
        1885: expr: 
         1886: literal: 1
       1887: argument: 
        1888: expr: 
         1889: literal: "vui_parameters_present_flag"
     1890: operator: )
   1891: block: 
    1892: block_content: 
     1893: expr_stmt: 
      1894: expr: 
       1895: name: 
        1896: name: sps
        1897: operator: ->
        1898: name: aspect_ratio_info_present_flag
       1899: operator: =
       1900: call: 
        1901: name: gf_bs_read_int_log
        1902: argument_list: 
         1903: argument: 
          1904: expr: 
           1905: name: bs
         1906: argument: 
          1907: expr: 
           1908: literal: 1
         1909: argument: 
          1910: expr: 
           1911: literal: "aspect_ratio_info_present_flag"
     1912: if_stmt: 
      1913: if: 
       1914: condition: 
        1915: expr: 
         1916: name: 
          1917: name: sps
          1918: operator: ->
          1919: name: aspect_ratio_info_present_flag
       1920: block: 
        1921: block_content: 
         1922: expr_stmt: 
          1923: expr: 
           1924: name: 
            1925: name: sps
            1926: operator: ->
            1927: name: sar_idc
           1928: operator: =
           1929: call: 
            1930: name: gf_bs_read_int_log
            1931: argument_list: 
             1932: argument: 
              1933: expr: 
               1934: name: bs
             1935: argument: 
              1936: expr: 
               1937: literal: 8
             1938: argument: 
              1939: expr: 
               1940: literal: "aspect_ratio_idc"
         1941: if_stmt: 
          1942: if: 
           1943: condition: 
            1944: expr: 
             1945: name: 
              1946: name: sps
              1947: operator: ->
              1948: name: sar_idc
             1949: operator: ==
             1950: literal: 255
           1951: block: 
            1952: block_content: 
             1953: expr_stmt: 
              1954: expr: 
               1955: name: 
                1956: name: sps
                1957: operator: ->
                1958: name: sar_width
               1959: operator: =
               1960: call: 
                1961: name: gf_bs_read_int_log
                1962: argument_list: 
                 1963: argument: 
                  1964: expr: 
                   1965: name: bs
                 1966: argument: 
                  1967: expr: 
                   1968: literal: 16
                 1969: argument: 
                  1970: expr: 
                   1971: literal: "aspect_ratio_width"
             1972: expr_stmt: 
              1973: expr: 
               1974: name: 
                1975: name: sps
                1976: operator: ->
                1977: name: sar_height
               1978: operator: =
               1979: call: 
                1980: name: gf_bs_read_int_log
                1981: argument_list: 
                 1982: argument: 
                  1983: expr: 
                   1984: name: bs
                 1985: argument: 
                  1986: expr: 
                   1987: literal: 16
                 1988: argument: 
                  1989: expr: 
                   1990: literal: "aspect_ratio_height"
          1991: if: 
           1992: condition: 
            1993: expr: 
             1994: name: 
              1995: name: sps
              1996: operator: ->
              1997: name: sar_idc
             1998: operator: <
             1999: literal: 17
           2000: block: 
            2001: block_content: 
             2002: expr_stmt: 
              2003: expr: 
               2004: name: 
                2005: name: sps
                2006: operator: ->
                2007: name: sar_width
               2008: operator: =
               2009: name: 
                2010: name: hevc_sar
                2011: index: 
                 2012: expr: 
                  2013: name: 
                   2014: name: sps
                   2015: operator: ->
                   2016: name: sar_idc
               2017: operator: .
               2018: name: w
             2019: expr_stmt: 
              2020: expr: 
               2021: name: 
                2022: name: sps
                2023: operator: ->
                2024: name: sar_height
               2025: operator: =
               2026: name: 
                2027: name: hevc_sar
                2028: index: 
                 2029: expr: 
                  2030: name: 
                   2031: name: sps
                   2032: operator: ->
                   2033: name: sar_idc
               2034: operator: .
               2035: name: h
     2036: if_stmt: 
      2037: if: 
       2038: condition: 
        2039: expr: 
         2040: operator: (
         2041: name: 
          2042: name: sps
          2043: operator: ->
          2044: name: overscan_info_present
         2045: operator: =
         2046: call: 
          2047: name: gf_bs_read_int_log
          2048: argument_list: 
           2049: argument: 
            2050: expr: 
             2051: name: bs
           2052: argument: 
            2053: expr: 
             2054: literal: 1
           2055: argument: 
            2056: expr: 
             2057: literal: "overscan_info_present"
         2058: operator: )
       2059: block: 
        2060: block_content: 
         2061: expr_stmt: 
          2062: expr: 
           2063: name: 
            2064: name: sps
            2065: operator: ->
            2066: name: overscan_appropriate
           2067: operator: =
           2068: call: 
            2069: name: gf_bs_read_int_log
            2070: argument_list: 
             2071: argument: 
              2072: expr: 
               2073: name: bs
             2074: argument: 
              2075: expr: 
               2076: literal: 1
             2077: argument: 
              2078: expr: 
               2079: literal: "overscan_appropriate"
     2080: expr_stmt: 
      2081: expr: 
       2082: name: 
        2083: name: sps
        2084: operator: ->
        2085: name: video_signal_type_present_flag
       2086: operator: =
       2087: call: 
        2088: name: gf_bs_read_int_log
        2089: argument_list: 
         2090: argument: 
          2091: expr: 
           2092: name: bs
         2093: argument: 
          2094: expr: 
           2095: literal: 1
         2096: argument: 
          2097: expr: 
           2098: literal: "video_signal_type_present_flag"
     2099: if_stmt: 
      2100: if: 
       2101: condition: 
        2102: expr: 
         2103: name: 
          2104: name: sps
          2105: operator: ->
          2106: name: video_signal_type_present_flag
       2107: block: 
        2108: block_content: 
         2109: expr_stmt: 
          2110: expr: 
           2111: name: 
            2112: name: sps
            2113: operator: ->
            2114: name: video_format
           2115: operator: =
           2116: call: 
            2117: name: gf_bs_read_int_log
            2118: argument_list: 
             2119: argument: 
              2120: expr: 
               2121: name: bs
             2122: argument: 
              2123: expr: 
               2124: literal: 3
             2125: argument: 
              2126: expr: 
               2127: literal: "video_format"
         2128: expr_stmt: 
          2129: expr: 
           2130: name: 
            2131: name: sps
            2132: operator: ->
            2133: name: video_full_range_flag
           2134: operator: =
           2135: call: 
            2136: name: gf_bs_read_int_log
            2137: argument_list: 
             2138: argument: 
              2139: expr: 
               2140: name: bs
             2141: argument: 
              2142: expr: 
               2143: literal: 1
             2144: argument: 
              2145: expr: 
               2146: literal: "video_full_range_flag"
         2147: if_stmt: 
          2148: if: 
           2149: condition: 
            2150: expr: 
             2151: operator: (
             2152: name: 
              2153: name: sps
              2154: operator: ->
              2155: name: colour_description_present_flag
             2156: operator: =
             2157: call: 
              2158: name: gf_bs_read_int_log
              2159: argument_list: 
               2160: argument: 
                2161: expr: 
                 2162: name: bs
               2163: argument: 
                2164: expr: 
                 2165: literal: 1
               2166: argument: 
                2167: expr: 
                 2168: literal: "colour_description_present_flag"
             2169: operator: )
           2170: block: 
            2171: block_content: 
             2172: expr_stmt: 
              2173: expr: 
               2174: name: 
                2175: name: sps
                2176: operator: ->
                2177: name: colour_primaries
               2178: operator: =
               2179: call: 
                2180: name: gf_bs_read_int_log
                2181: argument_list: 
                 2182: argument: 
                  2183: expr: 
                   2184: name: bs
                 2185: argument: 
                  2186: expr: 
                   2187: literal: 8
                 2188: argument: 
                  2189: expr: 
                   2190: literal: "colour_primaries"
             2191: expr_stmt: 
              2192: expr: 
               2193: name: 
                2194: name: sps
                2195: operator: ->
                2196: name: transfer_characteristic
               2197: operator: =
               2198: call: 
                2199: name: gf_bs_read_int_log
                2200: argument_list: 
                 2201: argument: 
                  2202: expr: 
                   2203: name: bs
                 2204: argument: 
                  2205: expr: 
                   2206: literal: 8
                 2207: argument: 
                  2208: expr: 
                   2209: literal: "transfer_characteristic"
             2210: expr_stmt: 
              2211: expr: 
               2212: name: 
                2213: name: sps
                2214: operator: ->
                2215: name: matrix_coeffs
               2216: operator: =
               2217: call: 
                2218: name: gf_bs_read_int_log
                2219: argument_list: 
                 2220: argument: 
                  2221: expr: 
                   2222: name: bs
                 2223: argument: 
                  2224: expr: 
                   2225: literal: 8
                 2226: argument: 
                  2227: expr: 
                   2228: literal: "matrix_coefficients"
     2229: if_stmt: 
      2230: if: 
       2231: condition: 
        2232: expr: 
         2233: operator: (
         2234: name: 
          2235: name: sps
          2236: operator: ->
          2237: name: chroma_loc_info_present_flag
         2238: operator: =
         2239: call: 
          2240: name: gf_bs_read_int_log
          2241: argument_list: 
           2242: argument: 
            2243: expr: 
             2244: name: bs
           2245: argument: 
            2246: expr: 
             2247: literal: 1
           2248: argument: 
            2249: expr: 
             2250: literal: "chroma_loc_info_present_flag"
         2251: operator: )
       2252: block: 
        2253: block_content: 
         2254: expr_stmt: 
          2255: expr: 
           2256: name: 
            2257: name: sps
            2258: operator: ->
            2259: name: chroma_sample_loc_type_top_field
           2260: operator: =
           2261: call: 
            2262: name: gf_bs_read_ue_log
            2263: argument_list: 
             2264: argument: 
              2265: expr: 
               2266: name: bs
             2267: argument: 
              2268: expr: 
               2269: literal: "chroma_sample_loc_type_top_field"
         2270: expr_stmt: 
          2271: expr: 
           2272: name: 
            2273: name: sps
            2274: operator: ->
            2275: name: chroma_sample_loc_type_bottom_field
           2276: operator: =
           2277: call: 
            2278: name: gf_bs_read_ue_log
            2279: argument_list: 
             2280: argument: 
              2281: expr: 
               2282: name: bs
             2283: argument: 
              2284: expr: 
               2285: literal: "chroma_sample_loc_type_bottom_field"
     2286: expr_stmt: 
      2287: expr: 
       2288: name: 
        2289: name: sps
        2290: operator: ->
        2291: name: neutra_chroma_indication_flag
       2292: operator: =
       2293: call: 
        2294: name: gf_bs_read_int_log
        2295: argument_list: 
         2296: argument: 
          2297: expr: 
           2298: name: bs
         2299: argument: 
          2300: expr: 
           2301: literal: 1
         2302: argument: 
          2303: expr: 
           2304: literal: "neutra_chroma_indication_flag"
     2305: expr_stmt: 
      2306: expr: 
       2307: name: 
        2308: name: sps
        2309: operator: ->
        2310: name: field_seq_flag
       2311: operator: =
       2312: call: 
        2313: name: gf_bs_read_int_log
        2314: argument_list: 
         2315: argument: 
          2316: expr: 
           2317: name: bs
         2318: argument: 
          2319: expr: 
           2320: literal: 1
         2321: argument: 
          2322: expr: 
           2323: literal: "field_seq_flag"
     2324: expr_stmt: 
      2325: expr: 
       2326: name: 
        2327: name: sps
        2328: operator: ->
        2329: name: frame_field_info_present_flag
       2330: operator: =
       2331: call: 
        2332: name: gf_bs_read_int_log
        2333: argument_list: 
         2334: argument: 
          2335: expr: 
           2336: name: bs
         2337: argument: 
          2338: expr: 
           2339: literal: 1
         2340: argument: 
          2341: expr: 
           2342: literal: "frame_field_info_present_flag"
     2343: if_stmt: 
      2344: if: 
       2345: condition: 
        2346: expr: 
         2347: operator: (
         2348: name: 
          2349: name: sps
          2350: operator: ->
          2351: name: default_display_window_flag
         2352: operator: =
         2353: call: 
          2354: name: gf_bs_read_int_log
          2355: argument_list: 
           2356: argument: 
            2357: expr: 
             2358: name: bs
           2359: argument: 
            2360: expr: 
             2361: literal: 1
           2362: argument: 
            2363: expr: 
             2364: literal: "default_display_window_flag"
         2365: operator: )
       2366: block: 
        2367: block_content: 
         2368: expr_stmt: 
          2369: expr: 
           2370: name: 
            2371: name: sps
            2372: operator: ->
            2373: name: left_offset
           2374: operator: =
           2375: call: 
            2376: name: gf_bs_read_ue_log
            2377: argument_list: 
             2378: argument: 
              2379: expr: 
               2380: name: bs
             2381: argument: 
              2382: expr: 
               2383: literal: "display_window_left_offset"
         2384: expr_stmt: 
          2385: expr: 
           2386: name: 
            2387: name: sps
            2388: operator: ->
            2389: name: right_offset
           2390: operator: =
           2391: call: 
            2392: name: gf_bs_read_ue_log
            2393: argument_list: 
             2394: argument: 
              2395: expr: 
               2396: name: bs
             2397: argument: 
              2398: expr: 
               2399: literal: "display_window_right_offset"
         2400: expr_stmt: 
          2401: expr: 
           2402: name: 
            2403: name: sps
            2404: operator: ->
            2405: name: top_offset
           2406: operator: =
           2407: call: 
            2408: name: gf_bs_read_ue_log
            2409: argument_list: 
             2410: argument: 
              2411: expr: 
               2412: name: bs
             2413: argument: 
              2414: expr: 
               2415: literal: "display_window_top_offset"
         2416: expr_stmt: 
          2417: expr: 
           2418: name: 
            2419: name: sps
            2420: operator: ->
            2421: name: bottom_offset
           2422: operator: =
           2423: call: 
            2424: name: gf_bs_read_ue_log
            2425: argument_list: 
             2426: argument: 
              2427: expr: 
               2428: name: bs
             2429: argument: 
              2430: expr: 
               2431: literal: "display_window_bottom_offset"
     2432: expr_stmt: 
      2433: expr: 
       2434: name: 
        2435: name: sps
        2436: operator: ->
        2437: name: has_timing_info
       2438: operator: =
       2439: call: 
        2440: name: gf_bs_read_int_log
        2441: argument_list: 
         2442: argument: 
          2443: expr: 
           2444: name: bs
         2445: argument: 
          2446: expr: 
           2447: literal: 1
         2448: argument: 
          2449: expr: 
           2450: literal: "has_timing_info"
     2451: if_stmt: 
      2452: if: 
       2453: condition: 
        2454: expr: 
         2455: name: 
          2456: name: sps
          2457: operator: ->
          2458: name: has_timing_info
       2459: block: 
        2460: block_content: 
         2461: expr_stmt: 
          2462: expr: 
           2463: name: 
            2464: name: sps
            2465: operator: ->
            2466: name: num_units_in_tick
           2467: operator: =
           2468: call: 
            2469: name: gf_bs_read_int_log
            2470: argument_list: 
             2471: argument: 
              2472: expr: 
               2473: name: bs
             2474: argument: 
              2475: expr: 
               2476: literal: 32
             2477: argument: 
              2478: expr: 
               2479: literal: "num_units_in_tick"
         2480: expr_stmt: 
          2481: expr: 
           2482: name: 
            2483: name: sps
            2484: operator: ->
            2485: name: time_scale
           2486: operator: =
           2487: call: 
            2488: name: gf_bs_read_int_log
            2489: argument_list: 
             2490: argument: 
              2491: expr: 
               2492: name: bs
             2493: argument: 
              2494: expr: 
               2495: literal: 32
             2496: argument: 
              2497: expr: 
               2498: literal: "time_scale"
         2499: expr_stmt: 
          2500: expr: 
           2501: name: 
            2502: name: sps
            2503: operator: ->
            2504: name: poc_proportional_to_timing_flag
           2505: operator: =
           2506: call: 
            2507: name: gf_bs_read_int_log
            2508: argument_list: 
             2509: argument: 
              2510: expr: 
               2511: name: bs
             2512: argument: 
              2513: expr: 
               2514: literal: 1
             2515: argument: 
              2516: expr: 
               2517: literal: "poc_proportional_to_timing_flag"
         2518: if_stmt: 
          2519: if: 
           2520: condition: 
            2521: expr: 
             2522: name: 
              2523: name: sps
              2524: operator: ->
              2525: name: poc_proportional_to_timing_flag
           2526: block: 
            2527: block_content: 
             2528: expr_stmt: 
              2529: expr: 
               2530: name: 
                2531: name: sps
                2532: operator: ->
                2533: name: num_ticks_poc_diff_one_minus1
               2534: operator: =
               2535: call: 
                2536: name: gf_bs_read_ue_log
                2537: argument_list: 
                 2538: argument: 
                  2539: expr: 
                   2540: name: bs
                 2541: argument: 
                  2542: expr: 
                   2543: literal: "num_ticks_poc_diff_one_minus1"
         2544: if_stmt: 
          2545: if: 
           2546: condition: 
            2547: expr: 
             2548: operator: (
             2549: name: 
              2550: name: sps
              2551: operator: ->
              2552: name: hrd_parameters_present_flag
             2553: operator: =
             2554: call: 
              2555: name: gf_bs_read_int_log
              2556: argument_list: 
               2557: argument: 
                2558: expr: 
                 2559: name: bs
               2560: argument: 
                2561: expr: 
                 2562: literal: 1
               2563: argument: 
                2564: expr: 
                 2565: literal: "hrd_parameters_present_flag"
             2566: operator: )
           2567: block: 
            2568: block_content: 
             2569: comment: //				GF_LOG(GF_LOG_INFO, GF_LOG_CODING, ("[HEVC] HRD param parsing not implemented\n"));
             2570: return: 
              2571: expr: 
               2572: name: sps_id
     2573: if_stmt: 
      2574: if: 
       2575: condition: 
        2576: expr: 
         2577: call: 
          2578: name: gf_bs_read_int_log
          2579: argument_list: 
           2580: argument: 
            2581: expr: 
             2582: name: bs
           2583: argument: 
            2584: expr: 
             2585: literal: 1
           2586: argument: 
            2587: expr: 
             2588: literal: "bitstream_restriction_flag"
       2589: block: 
        2590: block_content: 
         2591: expr_stmt: 
          2592: expr: 
           2593: call: 
            2594: name: gf_bs_read_int_log
            2595: argument_list: 
             2596: argument: 
              2597: expr: 
               2598: name: bs
             2599: argument: 
              2600: expr: 
               2601: literal: 1
             2602: argument: 
              2603: expr: 
               2604: literal: "tiles_fixed_structure_flag"
         2605: expr_stmt: 
          2606: expr: 
           2607: call: 
            2608: name: gf_bs_read_int_log
            2609: argument_list: 
             2610: argument: 
              2611: expr: 
               2612: name: bs
             2613: argument: 
              2614: expr: 
               2615: literal: 1
             2616: argument: 
              2617: expr: 
               2618: literal: "motion_vectors_over_pic_boundaries_flag"
         2619: expr_stmt: 
          2620: expr: 
           2621: call: 
            2622: name: gf_bs_read_int_log
            2623: argument_list: 
             2624: argument: 
              2625: expr: 
               2626: name: bs
             2627: argument: 
              2628: expr: 
               2629: literal: 1
             2630: argument: 
              2631: expr: 
               2632: literal: "restricted_ref_pic_lists_flag"
         2633: expr_stmt: 
          2634: expr: 
           2635: call: 
            2636: name: gf_bs_read_ue_log
            2637: argument_list: 
             2638: argument: 
              2639: expr: 
               2640: name: bs
             2641: argument: 
              2642: expr: 
               2643: literal: "min_spatial_segmentation_idc"
         2644: expr_stmt: 
          2645: expr: 
           2646: call: 
            2647: name: gf_bs_read_ue_log
            2648: argument_list: 
             2649: argument: 
              2650: expr: 
               2651: name: bs
             2652: argument: 
              2653: expr: 
               2654: literal: "max_bytes_per_pic_denom"
         2655: expr_stmt: 
          2656: expr: 
           2657: call: 
            2658: name: gf_bs_read_ue_log
            2659: argument_list: 
             2660: argument: 
              2661: expr: 
               2662: name: bs
             2663: argument: 
              2664: expr: 
               2665: literal: "max_bits_per_min_cu_denom"
         2666: expr_stmt: 
          2667: expr: 
           2668: call: 
            2669: name: gf_bs_read_ue_log
            2670: argument_list: 
             2671: argument: 
              2672: expr: 
               2673: name: bs
             2674: argument: 
              2675: expr: 
               2676: literal: "log2_max_mv_length_horizontal"
         2677: expr_stmt: 
          2678: expr: 
           2679: call: 
            2680: name: gf_bs_read_ue_log
            2681: argument_list: 
             2682: argument: 
              2683: expr: 
               2684: name: bs
             2685: argument: 
              2686: expr: 
               2687: literal: "log2_max_mv_length_vertical"
 2688: if_stmt: 
  2689: if: 
   2690: condition: 
    2691: expr: 
     2692: call: 
      2693: name: gf_bs_read_int_log
      2694: argument_list: 
       2695: argument: 
        2696: expr: 
         2697: name: bs
       2698: argument: 
        2699: expr: 
         2700: literal: 1
       2701: argument: 
        2702: expr: 
         2703: literal: "sps_extension_flag"
   2704: block: 
    2705: block_content: 
     2706: if: 
      2707: directive: if
      2708: expr: 
       2709: literal: 0
     2710: comment: /*sps_extension_data_flag */
     2711: endif: 
      2712: directive: endif
 2713: return: 
  2714: expr: 
   2715: name: sps_id
=====
0: comment: //nalu header already parsed

----------------------------------------
=====
0: condition: 
 1: expr: 
  2: name: vps_id
  3: operator: >=
  4: literal: 16

----------------------------------------
=====
0: comment: /* default values */

----------------------------------------
=====
0: comment: //sps_rep_format_idx = 0;

----------------------------------------
=====
