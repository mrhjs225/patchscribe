0: unit: 
 1: function: 
  2: type: 
   3: specifier: static
   4: name: s32
  5: name: gf_media_vvc_read_pps_bs_internal
  6: parameter_list: 
   7: parameter: 
    8: decl: 
     9: type: 
      10: name: GF_BitStream
      11: modifier: *
     12: name: bs
   13: parameter: 
    14: decl: 
     15: type: 
      16: name: VVCState
      17: modifier: *
     18: name: vvc
  19: block: 
   20: block_content: 
    21: decl_stmt: 
     22: decl: 
      23: type: 
       24: name: u32
      25: name: i
    26: decl_stmt: 
     27: decl: 
      28: type: 
       29: name: s32
      30: name: pps_id
    31: decl_stmt: 
     32: decl: 
      33: type: 
       34: name: VVC_PPS
       35: modifier: *
      36: name: pps
    37: comment: //NAL header already read
    38: expr_stmt: 
     39: expr: 
      40: name: pps_id
      41: operator: =
      42: call: 
       43: name: gf_bs_read_int_log
       44: argument_list: 
        45: argument: 
         46: expr: 
          47: name: bs
        48: argument: 
         49: expr: 
          50: literal: 6
        51: argument: 
         52: expr: 
          53: literal: "pps_id"
    54: if_stmt: 
     55: if: 
      56: condition: 
       57: expr: 
        58: operator: (
        59: name: pps_id
        60: operator: <
        61: literal: 0
        62: operator: )
        63: operator: ||
        64: operator: (
        65: name: pps_id
        66: operator: >=
        67: literal: 64
        68: operator: )
      69: block: 
       70: block_content: 
        71: expr_stmt: 
         72: expr: 
          73: call: 
           74: name: GF_LOG
           75: argument_list: 
            76: argument: 
             77: expr: 
              78: name: GF_LOG_ERROR
            79: argument: 
             80: expr: 
              81: name: GF_LOG_CODING
            82: argument: 
             83: expr: 
              84: operator: (
              85: literal: "[VVC] wrong PPS ID %d in PPS\n"
              86: operator: ,
              87: name: pps_id
              88: operator: )
        89: return: 
         90: expr: 
          91: operator: -
          92: literal: 1
    93: expr_stmt: 
     94: expr: 
      95: name: pps
      96: operator: =
      97: operator: &
      98: name: 
       99: name: vvc
       100: operator: ->
       101: name: pps
       102: index: 
        103: expr: 
         104: name: pps_id
    105: if_stmt: 
     106: if: 
      107: condition: 
       108: expr: 
        109: operator: !
        110: name: 
         111: name: pps
         112: operator: ->
         113: name: state
      114: block: 
       115: block_content: 
        116: expr_stmt: 
         117: expr: 
          118: name: 
           119: name: pps
           120: operator: ->
           121: name: id
          122: operator: =
          123: name: pps_id
        124: expr_stmt: 
         125: expr: 
          126: name: 
           127: name: pps
           128: operator: ->
           129: name: state
          130: operator: =
          131: literal: 1
    132: expr_stmt: 
     133: expr: 
      134: name: 
       135: name: pps
       136: operator: ->
       137: name: sps_id
      138: operator: =
      139: call: 
       140: name: gf_bs_read_int_log
       141: argument_list: 
        142: argument: 
         143: expr: 
          144: name: bs
        145: argument: 
         146: expr: 
          147: literal: 4
        148: argument: 
         149: expr: 
          150: literal: "sps_id"
    151: if_stmt: 
     152: if: 
      153: condition: 
       154: expr: 
        155: name: 
         156: name: pps
         157: operator: ->
         158: name: sps_id
        159: operator: >=
        160: literal: 16
      161: block: 
       162: block_content: 
        163: expr_stmt: 
         164: expr: 
          165: call: 
           166: name: GF_LOG
           167: argument_list: 
            168: argument: 
             169: expr: 
              170: name: GF_LOG_ERROR
            171: argument: 
             172: expr: 
              173: name: GF_LOG_CODING
            174: argument: 
             175: expr: 
              176: operator: (
              177: literal: "[VVC] wrong SPS ID %d in PPS\n"
              178: operator: ,
              179: name: 
               180: name: pps
               181: operator: ->
               182: name: sps_id
              183: operator: )
        184: expr_stmt: 
         185: expr: 
          186: name: 
           187: name: pps
           188: operator: ->
           189: name: sps_id
          190: operator: =
          191: literal: 0
        192: return: 
         193: expr: 
          194: operator: -
          195: literal: 1
    196: expr_stmt: 
     197: expr: 
      198: name: 
       199: name: vvc
       200: operator: ->
       201: name: sps_active_idx
      202: operator: =
      203: name: 
       204: name: pps
       205: operator: ->
       206: name: sps_id
    207: comment: /*set active sps*/
    208: expr_stmt: 
     209: expr: 
      210: name: 
       211: name: pps
       212: operator: ->
       213: name: mixed_nal_types
      214: operator: =
      215: call: 
       216: name: gf_bs_read_int_log
       217: argument_list: 
        218: argument: 
         219: expr: 
          220: name: bs
        221: argument: 
         222: expr: 
          223: literal: 1
        224: argument: 
         225: expr: 
          226: literal: "mixed_nal_types"
    227: expr_stmt: 
     228: expr: 
      229: name: 
       230: name: pps
       231: operator: ->
       232: name: width
      233: operator: =
      234: call: 
       235: name: gf_bs_read_ue_log
       236: argument_list: 
        237: argument: 
         238: expr: 
          239: name: bs
        240: argument: 
         241: expr: 
          242: literal: "width"
    243: expr_stmt: 
     244: expr: 
      245: name: 
       246: name: pps
       247: operator: ->
       248: name: height
      249: operator: =
      250: call: 
       251: name: gf_bs_read_ue_log
       252: argument_list: 
        253: argument: 
         254: expr: 
          255: name: bs
        256: argument: 
         257: expr: 
          258: literal: "height"
    259: expr_stmt: 
     260: expr: 
      261: name: 
       262: name: pps
       263: operator: ->
       264: name: conf_window
      265: operator: =
      266: call: 
       267: name: gf_bs_read_int_log
       268: argument_list: 
        269: argument: 
         270: expr: 
          271: name: bs
        272: argument: 
         273: expr: 
          274: literal: 1
        275: argument: 
         276: expr: 
          277: literal: "conformance_window_flag"
    278: if_stmt: 
     279: if: 
      280: condition: 
       281: expr: 
        282: name: 
         283: name: pps
         284: operator: ->
         285: name: conf_window
      286: block: 
       287: block_content: 
        288: expr_stmt: 
         289: expr: 
          290: name: 
           291: name: pps
           292: operator: ->
           293: name: cw_left
          294: operator: =
          295: call: 
           296: name: gf_bs_read_ue_log
           297: argument_list: 
            298: argument: 
             299: expr: 
              300: name: bs
            301: argument: 
             302: expr: 
              303: literal: "conf_win_left_offset"
        304: expr_stmt: 
         305: expr: 
          306: name: 
           307: name: pps
           308: operator: ->
           309: name: cw_right
          310: operator: =
          311: call: 
           312: name: gf_bs_read_ue_log
           313: argument_list: 
            314: argument: 
             315: expr: 
              316: name: bs
            317: argument: 
             318: expr: 
              319: literal: "conf_win_right_offset"
        320: expr_stmt: 
         321: expr: 
          322: name: 
           323: name: pps
           324: operator: ->
           325: name: cw_top
          326: operator: =
          327: call: 
           328: name: gf_bs_read_ue_log
           329: argument_list: 
            330: argument: 
             331: expr: 
              332: name: bs
            333: argument: 
             334: expr: 
              335: literal: "conf_win_top_offset"
        336: expr_stmt: 
         337: expr: 
          338: name: 
           339: name: pps
           340: operator: ->
           341: name: cw_bottom
          342: operator: =
          343: call: 
           344: name: gf_bs_read_ue_log
           345: argument_list: 
            346: argument: 
             347: expr: 
              348: name: bs
            349: argument: 
             350: expr: 
              351: literal: "conf_win_bottom_offset"
    352: comment: //scaling window
    353: if_stmt: 
     354: if: 
      355: condition: 
       356: expr: 
        357: call: 
         358: name: gf_bs_read_int_log
         359: argument_list: 
          360: argument: 
           361: expr: 
            362: name: bs
          363: argument: 
           364: expr: 
            365: literal: 1
          366: argument: 
           367: expr: 
            368: literal: "scaling_window_explicit_signalling_flag"
      369: block: 
       370: block_content: 
        371: expr_stmt: 
         372: expr: 
          373: call: 
           374: name: gf_bs_read_se_log
           375: argument_list: 
            376: argument: 
             377: expr: 
              378: name: bs
            379: argument: 
             380: expr: 
              381: literal: "scaling_win_left_offset"
        382: expr_stmt: 
         383: expr: 
          384: call: 
           385: name: gf_bs_read_se_log
           386: argument_list: 
            387: argument: 
             388: expr: 
              389: name: bs
            390: argument: 
             391: expr: 
              392: literal: "scaling_win_right_offset"
        393: expr_stmt: 
         394: expr: 
          395: call: 
           396: name: gf_bs_read_se_log
           397: argument_list: 
            398: argument: 
             399: expr: 
              400: name: bs
            401: argument: 
             402: expr: 
              403: literal: "scaling_win_top_offset"
        404: expr_stmt: 
         405: expr: 
          406: call: 
           407: name: gf_bs_read_se_log
           408: argument_list: 
            409: argument: 
             410: expr: 
              411: name: bs
            412: argument: 
             413: expr: 
              414: literal: "scaling_win_bottom_offset"
    415: expr_stmt: 
     416: expr: 
      417: name: 
       418: name: pps
       419: operator: ->
       420: name: output_flag_present_flag
      421: operator: =
      422: call: 
       423: name: gf_bs_read_int_log
       424: argument_list: 
        425: argument: 
         426: expr: 
          427: name: bs
        428: argument: 
         429: expr: 
          430: literal: 1
        431: argument: 
         432: expr: 
          433: literal: "output_flag_present_flag"
    434: expr_stmt: 
     435: expr: 
      436: name: 
       437: name: pps
       438: operator: ->
       439: name: no_pic_partition_flag
      440: operator: =
      441: call: 
       442: name: gf_bs_read_int_log
       443: argument_list: 
        444: argument: 
         445: expr: 
          446: name: bs
        447: argument: 
         448: expr: 
          449: literal: 1
        450: argument: 
         451: expr: 
          452: literal: "no_pic_partition_flag"
    453: expr_stmt: 
     454: expr: 
      455: name: 
       456: name: pps
       457: operator: ->
       458: name: subpic_id_mapping_present_flag
      459: operator: =
      460: call: 
       461: name: gf_bs_read_int_log
       462: argument_list: 
        463: argument: 
         464: expr: 
          465: name: bs
        466: argument: 
         467: expr: 
          468: literal: 1
        469: argument: 
         470: expr: 
          471: literal: "subpic_id_mapping_present_flag"
    472: if_stmt: 
     473: if: 
      474: condition: 
       475: expr: 
        476: name: 
         477: name: pps
         478: operator: ->
         479: name: subpic_id_mapping_present_flag
      480: block: 
       481: block_content: 
        482: decl_stmt: 
         483: decl: 
          484: type: 
           485: name: u32
          486: name: pps_subpic_id_len
         487: decl: 
          488: type: 
          489: name: pps_num_subpics
          490: init: 
           491: expr: 
            492: literal: 0
        493: if_stmt: 
         494: if: 
          495: condition: 
           496: expr: 
            497: operator: !
            498: name: 
             499: name: pps
             500: operator: ->
             501: name: no_pic_partition_flag
          502: block: 
           503: block_content: 
            504: expr_stmt: 
             505: expr: 
              506: name: pps_num_subpics
              507: operator: =
              508: literal: 1
              509: operator: +
              510: call: 
               511: name: gf_bs_read_ue_log
               512: argument_list: 
                513: argument: 
                 514: expr: 
                  515: name: bs
                516: argument: 
                 517: expr: 
                  518: literal: "pps_num_subpics_minus1"
        519: expr_stmt: 
         520: expr: 
          521: name: pps_subpic_id_len
          522: operator: =
          523: literal: 1
          524: operator: +
          525: call: 
           526: name: gf_bs_read_ue
           527: argument_list: 
            528: argument: 
             529: expr: 
              530: name: bs
        531: for: 
         532: control: 
          533: init: 
           534: expr: 
            535: name: i
            536: operator: =
            537: literal: 0
          538: condition: 
           539: expr: 
            540: name: i
            541: operator: <
            542: name: pps_num_subpics
          543: incr: 
           544: expr: 
            545: name: i
            546: operator: ++
         547: block: 
          548: block_content: 
           549: expr_stmt: 
            550: expr: 
             551: call: 
              552: name: gf_bs_read_int_log_idx
              553: argument_list: 
               554: argument: 
                555: expr: 
                 556: name: bs
               557: argument: 
                558: expr: 
                 559: name: pps_subpic_id_len
               560: argument: 
                561: expr: 
                 562: literal: "subpic_id"
               563: argument: 
                564: expr: 
                 565: name: i
    566: if_stmt: 
     567: if: 
      568: condition: 
       569: expr: 
        570: operator: !
        571: name: 
         572: name: pps
         573: operator: ->
         574: name: no_pic_partition_flag
      575: block: 
       576: block_content: 
        577: expr_stmt: 
         578: expr: 
          579: call: 
           580: name: gf_bs_read_int_log
           581: argument_list: 
            582: argument: 
             583: expr: 
              584: name: bs
            585: argument: 
             586: expr: 
              587: literal: 2
            588: argument: 
             589: expr: 
              590: literal: "pps_log2_ctu_size_minus5"
        591: decl_stmt: 
         592: decl: 
          593: type: 
           594: name: u32
          595: name: num_exp_tile_columns
          596: init: 
           597: expr: 
            598: literal: 1
            599: operator: +
            600: call: 
             601: name: gf_bs_read_ue_log
             602: argument_list: 
              603: argument: 
               604: expr: 
                605: name: bs
              606: argument: 
               607: expr: 
                608: literal: "num_exp_tile_columns_minus1"
        609: decl_stmt: 
         610: decl: 
          611: type: 
           612: name: u32
          613: name: num_exp_tile_rows
          614: init: 
           615: expr: 
            616: literal: 1
            617: operator: +
            618: call: 
             619: name: gf_bs_read_ue_log
             620: argument_list: 
              621: argument: 
               622: expr: 
                623: name: bs
              624: argument: 
               625: expr: 
                626: literal: "num_exp_tile_rows_minus1"
        627: for: 
         628: control: 
          629: init: 
           630: expr: 
            631: name: i
            632: operator: =
            633: literal: 0
          634: condition: 
           635: expr: 
            636: name: i
            637: operator: <
            638: name: num_exp_tile_columns
          639: incr: 
           640: expr: 
            641: name: i
            642: operator: ++
         643: block: 
          644: block_content: 
           645: expr_stmt: 
            646: expr: 
             647: call: 
              648: name: gf_bs_read_ue_log_idx
              649: argument_list: 
               650: argument: 
                651: expr: 
                 652: name: bs
               653: argument: 
                654: expr: 
                 655: literal: "tile_column_width_minus1"
               656: argument: 
                657: expr: 
                 658: name: i
        659: for: 
         660: control: 
          661: init: 
           662: expr: 
            663: name: i
            664: operator: =
            665: literal: 0
          666: condition: 
           667: expr: 
            668: name: i
            669: operator: <
            670: name: num_exp_tile_rows
          671: incr: 
           672: expr: 
            673: name: i
            674: operator: ++
         675: block: 
          676: block_content: 
           677: expr_stmt: 
            678: expr: 
             679: call: 
              680: name: gf_bs_read_ue_log_idx
              681: argument_list: 
               682: argument: 
                683: expr: 
                 684: name: bs
               685: argument: 
                686: expr: 
                 687: literal: "tile_row_height_minus1"
               688: argument: 
                689: expr: 
                 690: name: i
        691: comment: //todo parse the rest
        692: return: 
         693: expr: 
          694: name: pps_id
    695: comment: //todo parse the rest
    696: return: 
     697: expr: 
      698: name: pps_id

----------------------------------------
0: unit: 
 1: function: 
  2: type: 
   3: specifier: static
   4: name: s32
  5: name: gf_media_vvc_read_pps_bs_internal
  6: parameter_list: 
   7: parameter: 
    8: decl: 
     9: type: 
      10: name: GF_BitStream
      11: modifier: *
     12: name: bs
   13: parameter: 
    14: decl: 
     15: type: 
      16: name: VVCState
      17: modifier: *
     18: name: vvc
  19: block: 
   20: block_content: 
    21: decl_stmt: 
     22: decl: 
      23: type: 
       24: name: u32
      25: name: i
    26: decl_stmt: 
     27: decl: 
      28: type: 
       29: name: s32
      30: name: pps_id
    31: decl_stmt: 
     32: decl: 
      33: type: 
       34: name: VVC_PPS
       35: modifier: *
      36: name: pps
    37: comment: //NAL header already read
    38: expr_stmt: 
     39: expr: 
      40: name: pps_id
      41: operator: =
      42: call: 
       43: name: gf_bs_read_int_log
       44: argument_list: 
        45: argument: 
         46: expr: 
          47: name: bs
        48: argument: 
         49: expr: 
          50: literal: 6
        51: argument: 
         52: expr: 
          53: literal: "pps_id"
    54: if_stmt: 
     55: if: 
      56: condition: 
       57: expr: 
        58: operator: (
        59: name: pps_id
        60: operator: <
        61: literal: 0
        62: operator: )
        63: operator: ||
        64: operator: (
        65: name: pps_id
        66: operator: >=
        67: literal: 64
        68: operator: )
      69: block: 
       70: block_content: 
        71: expr_stmt: 
         72: expr: 
          73: call: 
           74: name: GF_LOG
           75: argument_list: 
            76: argument: 
             77: expr: 
              78: name: GF_LOG_ERROR
            79: argument: 
             80: expr: 
              81: name: GF_LOG_CODING
            82: argument: 
             83: expr: 
              84: operator: (
              85: literal: "[VVC] wrong PPS ID %d in PPS\n"
              86: operator: ,
              87: name: pps_id
              88: operator: )
        89: return: 
         90: expr: 
          91: operator: -
          92: literal: 1
    93: expr_stmt: 
     94: expr: 
      95: name: pps
      96: operator: =
      97: operator: &
      98: name: 
       99: name: vvc
       100: operator: ->
       101: name: pps
       102: index: 
        103: expr: 
         104: name: pps_id
    105: if_stmt: 
     106: if: 
      107: condition: 
       108: expr: 
        109: operator: !
        110: name: 
         111: name: pps
         112: operator: ->
         113: name: state
      114: block: 
       115: block_content: 
        116: expr_stmt: 
         117: expr: 
          118: name: 
           119: name: pps
           120: operator: ->
           121: name: id
          122: operator: =
          123: name: pps_id
        124: expr_stmt: 
         125: expr: 
          126: name: 
           127: name: pps
           128: operator: ->
           129: name: state
          130: operator: =
          131: literal: 1
    132: expr_stmt: 
     133: expr: 
      134: name: 
       135: name: pps
       136: operator: ->
       137: name: sps_id
      138: operator: =
      139: call: 
       140: name: gf_bs_read_int_log
       141: argument_list: 
        142: argument: 
         143: expr: 
          144: name: bs
        145: argument: 
         146: expr: 
          147: literal: 4
        148: argument: 
         149: expr: 
          150: literal: "sps_id"
    151: if_stmt: 
     152: if: 
      153: condition: 
       154: expr: 
        155: operator: (
        156: name: 
         157: name: pps
         158: operator: ->
         159: name: sps_id
        160: operator: <
        161: literal: 0
        162: operator: )
        163: operator: ||
        164: operator: (
        165: name: 
         166: name: pps
         167: operator: ->
         168: name: sps_id
        169: operator: >=
        170: literal: 16
        171: operator: )
      172: block: 
       173: block_content: 
        174: expr_stmt: 
         175: expr: 
          176: call: 
           177: name: GF_LOG
           178: argument_list: 
            179: argument: 
             180: expr: 
              181: name: GF_LOG_ERROR
            182: argument: 
             183: expr: 
              184: name: GF_LOG_CODING
            185: argument: 
             186: expr: 
              187: operator: (
              188: literal: "[VVC] wrong SPS ID %d in PPS\n"
              189: operator: ,
              190: name: 
               191: name: pps
               192: operator: ->
               193: name: sps_id
              194: operator: )
        195: expr_stmt: 
         196: expr: 
          197: name: 
           198: name: pps
           199: operator: ->
           200: name: sps_id
          201: operator: =
          202: literal: 0
        203: return: 
         204: expr: 
          205: operator: -
          206: literal: 1
    207: expr_stmt: 
     208: expr: 
      209: name: 
       210: name: vvc
       211: operator: ->
       212: name: sps_active_idx
      213: operator: =
      214: name: 
       215: name: pps
       216: operator: ->
       217: name: sps_id
    218: comment: /*set active sps*/
    219: expr_stmt: 
     220: expr: 
      221: name: 
       222: name: pps
       223: operator: ->
       224: name: mixed_nal_types
      225: operator: =
      226: call: 
       227: name: gf_bs_read_int_log
       228: argument_list: 
        229: argument: 
         230: expr: 
          231: name: bs
        232: argument: 
         233: expr: 
          234: literal: 1
        235: argument: 
         236: expr: 
          237: literal: "mixed_nal_types"
    238: expr_stmt: 
     239: expr: 
      240: name: 
       241: name: pps
       242: operator: ->
       243: name: width
      244: operator: =
      245: call: 
       246: name: gf_bs_read_ue_log
       247: argument_list: 
        248: argument: 
         249: expr: 
          250: name: bs
        251: argument: 
         252: expr: 
          253: literal: "width"
    254: expr_stmt: 
     255: expr: 
      256: name: 
       257: name: pps
       258: operator: ->
       259: name: height
      260: operator: =
      261: call: 
       262: name: gf_bs_read_ue_log
       263: argument_list: 
        264: argument: 
         265: expr: 
          266: name: bs
        267: argument: 
         268: expr: 
          269: literal: "height"
    270: expr_stmt: 
     271: expr: 
      272: name: 
       273: name: pps
       274: operator: ->
       275: name: conf_window
      276: operator: =
      277: call: 
       278: name: gf_bs_read_int_log
       279: argument_list: 
        280: argument: 
         281: expr: 
          282: name: bs
        283: argument: 
         284: expr: 
          285: literal: 1
        286: argument: 
         287: expr: 
          288: literal: "conformance_window_flag"
    289: if_stmt: 
     290: if: 
      291: condition: 
       292: expr: 
        293: name: 
         294: name: pps
         295: operator: ->
         296: name: conf_window
      297: block: 
       298: block_content: 
        299: expr_stmt: 
         300: expr: 
          301: name: 
           302: name: pps
           303: operator: ->
           304: name: cw_left
          305: operator: =
          306: call: 
           307: name: gf_bs_read_ue_log
           308: argument_list: 
            309: argument: 
             310: expr: 
              311: name: bs
            312: argument: 
             313: expr: 
              314: literal: "conf_win_left_offset"
        315: expr_stmt: 
         316: expr: 
          317: name: 
           318: name: pps
           319: operator: ->
           320: name: cw_right
          321: operator: =
          322: call: 
           323: name: gf_bs_read_ue_log
           324: argument_list: 
            325: argument: 
             326: expr: 
              327: name: bs
            328: argument: 
             329: expr: 
              330: literal: "conf_win_right_offset"
        331: expr_stmt: 
         332: expr: 
          333: name: 
           334: name: pps
           335: operator: ->
           336: name: cw_top
          337: operator: =
          338: call: 
           339: name: gf_bs_read_ue_log
           340: argument_list: 
            341: argument: 
             342: expr: 
              343: name: bs
            344: argument: 
             345: expr: 
              346: literal: "conf_win_top_offset"
        347: expr_stmt: 
         348: expr: 
          349: name: 
           350: name: pps
           351: operator: ->
           352: name: cw_bottom
          353: operator: =
          354: call: 
           355: name: gf_bs_read_ue_log
           356: argument_list: 
            357: argument: 
             358: expr: 
              359: name: bs
            360: argument: 
             361: expr: 
              362: literal: "conf_win_bottom_offset"
    363: comment: //scaling window
    364: if_stmt: 
     365: if: 
      366: condition: 
       367: expr: 
        368: call: 
         369: name: gf_bs_read_int_log
         370: argument_list: 
          371: argument: 
           372: expr: 
            373: name: bs
          374: argument: 
           375: expr: 
            376: literal: 1
          377: argument: 
           378: expr: 
            379: literal: "scaling_window_explicit_signalling_flag"
      380: block: 
       381: block_content: 
        382: expr_stmt: 
         383: expr: 
          384: call: 
           385: name: gf_bs_read_se_log
           386: argument_list: 
            387: argument: 
             388: expr: 
              389: name: bs
            390: argument: 
             391: expr: 
              392: literal: "scaling_win_left_offset"
        393: expr_stmt: 
         394: expr: 
          395: call: 
           396: name: gf_bs_read_se_log
           397: argument_list: 
            398: argument: 
             399: expr: 
              400: name: bs
            401: argument: 
             402: expr: 
              403: literal: "scaling_win_right_offset"
        404: expr_stmt: 
         405: expr: 
          406: call: 
           407: name: gf_bs_read_se_log
           408: argument_list: 
            409: argument: 
             410: expr: 
              411: name: bs
            412: argument: 
             413: expr: 
              414: literal: "scaling_win_top_offset"
        415: expr_stmt: 
         416: expr: 
          417: call: 
           418: name: gf_bs_read_se_log
           419: argument_list: 
            420: argument: 
             421: expr: 
              422: name: bs
            423: argument: 
             424: expr: 
              425: literal: "scaling_win_bottom_offset"
    426: expr_stmt: 
     427: expr: 
      428: name: 
       429: name: pps
       430: operator: ->
       431: name: output_flag_present_flag
      432: operator: =
      433: call: 
       434: name: gf_bs_read_int_log
       435: argument_list: 
        436: argument: 
         437: expr: 
          438: name: bs
        439: argument: 
         440: expr: 
          441: literal: 1
        442: argument: 
         443: expr: 
          444: literal: "output_flag_present_flag"
    445: expr_stmt: 
     446: expr: 
      447: name: 
       448: name: pps
       449: operator: ->
       450: name: no_pic_partition_flag
      451: operator: =
      452: call: 
       453: name: gf_bs_read_int_log
       454: argument_list: 
        455: argument: 
         456: expr: 
          457: name: bs
        458: argument: 
         459: expr: 
          460: literal: 1
        461: argument: 
         462: expr: 
          463: literal: "no_pic_partition_flag"
    464: expr_stmt: 
     465: expr: 
      466: name: 
       467: name: pps
       468: operator: ->
       469: name: subpic_id_mapping_present_flag
      470: operator: =
      471: call: 
       472: name: gf_bs_read_int_log
       473: argument_list: 
        474: argument: 
         475: expr: 
          476: name: bs
        477: argument: 
         478: expr: 
          479: literal: 1
        480: argument: 
         481: expr: 
          482: literal: "subpic_id_mapping_present_flag"
    483: if_stmt: 
     484: if: 
      485: condition: 
       486: expr: 
        487: name: 
         488: name: pps
         489: operator: ->
         490: name: subpic_id_mapping_present_flag
      491: block: 
       492: block_content: 
        493: decl_stmt: 
         494: decl: 
          495: type: 
           496: name: u32
          497: name: pps_subpic_id_len
         498: decl: 
          499: type: 
          500: name: pps_num_subpics
          501: init: 
           502: expr: 
            503: literal: 0
        504: if_stmt: 
         505: if: 
          506: condition: 
           507: expr: 
            508: operator: !
            509: name: 
             510: name: pps
             511: operator: ->
             512: name: no_pic_partition_flag
          513: block: 
           514: block_content: 
            515: expr_stmt: 
             516: expr: 
              517: name: pps_num_subpics
              518: operator: =
              519: literal: 1
              520: operator: +
              521: call: 
               522: name: gf_bs_read_ue_log
               523: argument_list: 
                524: argument: 
                 525: expr: 
                  526: name: bs
                527: argument: 
                 528: expr: 
                  529: literal: "pps_num_subpics_minus1"
        530: expr_stmt: 
         531: expr: 
          532: name: pps_subpic_id_len
          533: operator: =
          534: literal: 1
          535: operator: +
          536: call: 
           537: name: gf_bs_read_ue
           538: argument_list: 
            539: argument: 
             540: expr: 
              541: name: bs
        542: for: 
         543: control: 
          544: init: 
           545: expr: 
            546: name: i
            547: operator: =
            548: literal: 0
          549: condition: 
           550: expr: 
            551: name: i
            552: operator: <
            553: name: pps_num_subpics
          554: incr: 
           555: expr: 
            556: name: i
            557: operator: ++
         558: block: 
          559: block_content: 
           560: expr_stmt: 
            561: expr: 
             562: call: 
              563: name: gf_bs_read_int_log_idx
              564: argument_list: 
               565: argument: 
                566: expr: 
                 567: name: bs
               568: argument: 
                569: expr: 
                 570: name: pps_subpic_id_len
               571: argument: 
                572: expr: 
                 573: literal: "subpic_id"
               574: argument: 
                575: expr: 
                 576: name: i
    577: if_stmt: 
     578: if: 
      579: condition: 
       580: expr: 
        581: operator: !
        582: name: 
         583: name: pps
         584: operator: ->
         585: name: no_pic_partition_flag
      586: block: 
       587: block_content: 
        588: expr_stmt: 
         589: expr: 
          590: call: 
           591: name: gf_bs_read_int_log
           592: argument_list: 
            593: argument: 
             594: expr: 
              595: name: bs
            596: argument: 
             597: expr: 
              598: literal: 2
            599: argument: 
             600: expr: 
              601: literal: "pps_log2_ctu_size_minus5"
        602: decl_stmt: 
         603: decl: 
          604: type: 
           605: name: u32
          606: name: num_exp_tile_columns
          607: init: 
           608: expr: 
            609: literal: 1
            610: operator: +
            611: call: 
             612: name: gf_bs_read_ue_log
             613: argument_list: 
              614: argument: 
               615: expr: 
                616: name: bs
              617: argument: 
               618: expr: 
                619: literal: "num_exp_tile_columns_minus1"
        620: decl_stmt: 
         621: decl: 
          622: type: 
           623: name: u32
          624: name: num_exp_tile_rows
          625: init: 
           626: expr: 
            627: literal: 1
            628: operator: +
            629: call: 
             630: name: gf_bs_read_ue_log
             631: argument_list: 
              632: argument: 
               633: expr: 
                634: name: bs
              635: argument: 
               636: expr: 
                637: literal: "num_exp_tile_rows_minus1"
        638: for: 
         639: control: 
          640: init: 
           641: expr: 
            642: name: i
            643: operator: =
            644: literal: 0
          645: condition: 
           646: expr: 
            647: name: i
            648: operator: <
            649: name: num_exp_tile_columns
          650: incr: 
           651: expr: 
            652: name: i
            653: operator: ++
         654: block: 
          655: block_content: 
           656: expr_stmt: 
            657: expr: 
             658: call: 
              659: name: gf_bs_read_ue_log_idx
              660: argument_list: 
               661: argument: 
                662: expr: 
                 663: name: bs
               664: argument: 
                665: expr: 
                 666: literal: "tile_column_width_minus1"
               667: argument: 
                668: expr: 
                 669: name: i
        670: for: 
         671: control: 
          672: init: 
           673: expr: 
            674: name: i
            675: operator: =
            676: literal: 0
          677: condition: 
           678: expr: 
            679: name: i
            680: operator: <
            681: name: num_exp_tile_rows
          682: incr: 
           683: expr: 
            684: name: i
            685: operator: ++
         686: block: 
          687: block_content: 
           688: expr_stmt: 
            689: expr: 
             690: call: 
              691: name: gf_bs_read_ue_log_idx
              692: argument_list: 
               693: argument: 
                694: expr: 
                 695: name: bs
               696: argument: 
                697: expr: 
                 698: literal: "tile_row_height_minus1"
               699: argument: 
                700: expr: 
                 701: name: i
        702: comment: //todo parse the rest
        703: return: 
         704: expr: 
          705: name: pps_id
    706: comment: //todo parse the rest
    707: return: 
     708: expr: 
      709: name: pps_id
=====
0: function: 
 1: type: 
  2: specifier: static
  3: name: s32
 4: name: gf_media_vvc_read_pps_bs_internal
 5: parameter_list: 
  6: parameter: 
   7: decl: 
    8: type: 
     9: name: GF_BitStream
     10: modifier: *
    11: name: bs
  12: parameter: 
   13: decl: 
    14: type: 
     15: name: VVCState
     16: modifier: *
    17: name: vvc
 18: block: 
  19: block_content: 
   20: decl_stmt: 
    21: decl: 
     22: type: 
      23: name: u32
     24: name: i
   25: decl_stmt: 
    26: decl: 
     27: type: 
      28: name: s32
     29: name: pps_id
   30: decl_stmt: 
    31: decl: 
     32: type: 
      33: name: VVC_PPS
      34: modifier: *
     35: name: pps
   36: comment: //NAL header already read
   37: expr_stmt: 
    38: expr: 
     39: name: pps_id
     40: operator: =
     41: call: 
      42: name: gf_bs_read_int_log
      43: argument_list: 
       44: argument: 
        45: expr: 
         46: name: bs
       47: argument: 
        48: expr: 
         49: literal: 6
       50: argument: 
        51: expr: 
         52: literal: "pps_id"
   53: if_stmt: 
    54: if: 
     55: condition: 
      56: expr: 
       57: operator: (
       58: name: pps_id
       59: operator: <
       60: literal: 0
       61: operator: )
       62: operator: ||
       63: operator: (
       64: name: pps_id
       65: operator: >=
       66: literal: 64
       67: operator: )
     68: block: 
      69: block_content: 
       70: expr_stmt: 
        71: expr: 
         72: call: 
          73: name: GF_LOG
          74: argument_list: 
           75: argument: 
            76: expr: 
             77: name: GF_LOG_ERROR
           78: argument: 
            79: expr: 
             80: name: GF_LOG_CODING
           81: argument: 
            82: expr: 
             83: operator: (
             84: literal: "[VVC] wrong PPS ID %d in PPS\n"
             85: operator: ,
             86: name: pps_id
             87: operator: )
       88: return: 
        89: expr: 
         90: operator: -
         91: literal: 1
   92: expr_stmt: 
    93: expr: 
     94: name: pps
     95: operator: =
     96: operator: &
     97: name: 
      98: name: vvc
      99: operator: ->
      100: name: pps
      101: index: 
       102: expr: 
        103: name: pps_id
   104: if_stmt: 
    105: if: 
     106: condition: 
      107: expr: 
       108: operator: !
       109: name: 
        110: name: pps
        111: operator: ->
        112: name: state
     113: block: 
      114: block_content: 
       115: expr_stmt: 
        116: expr: 
         117: name: 
          118: name: pps
          119: operator: ->
          120: name: id
         121: operator: =
         122: name: pps_id
       123: expr_stmt: 
        124: expr: 
         125: name: 
          126: name: pps
          127: operator: ->
          128: name: state
         129: operator: =
         130: literal: 1
   131: expr_stmt: 
    132: expr: 
     133: name: 
      134: name: pps
      135: operator: ->
      136: name: sps_id
     137: operator: =
     138: call: 
      139: name: gf_bs_read_int_log
      140: argument_list: 
       141: argument: 
        142: expr: 
         143: name: bs
       144: argument: 
        145: expr: 
         146: literal: 4
       147: argument: 
        148: expr: 
         149: literal: "sps_id"
   150: if_stmt: 
    151: if: 
     152: condition: 
      153: expr: 
       154: name: 
        155: name: pps
        156: operator: ->
        157: name: sps_id
       158: operator: >=
       159: literal: 16
     160: block: 
      161: block_content: 
       162: expr_stmt: 
        163: expr: 
         164: call: 
          165: name: GF_LOG
          166: argument_list: 
           167: argument: 
            168: expr: 
             169: name: GF_LOG_ERROR
           170: argument: 
            171: expr: 
             172: name: GF_LOG_CODING
           173: argument: 
            174: expr: 
             175: operator: (
             176: literal: "[VVC] wrong SPS ID %d in PPS\n"
             177: operator: ,
             178: name: 
              179: name: pps
              180: operator: ->
              181: name: sps_id
             182: operator: )
       183: expr_stmt: 
        184: expr: 
         185: name: 
          186: name: pps
          187: operator: ->
          188: name: sps_id
         189: operator: =
         190: literal: 0
       191: return: 
        192: expr: 
         193: operator: -
         194: literal: 1
   195: expr_stmt: 
    196: expr: 
     197: name: 
      198: name: vvc
      199: operator: ->
      200: name: sps_active_idx
     201: operator: =
     202: name: 
      203: name: pps
      204: operator: ->
      205: name: sps_id
   206: comment: /*set active sps*/
   207: expr_stmt: 
    208: expr: 
     209: name: 
      210: name: pps
      211: operator: ->
      212: name: mixed_nal_types
     213: operator: =
     214: call: 
      215: name: gf_bs_read_int_log
      216: argument_list: 
       217: argument: 
        218: expr: 
         219: name: bs
       220: argument: 
        221: expr: 
         222: literal: 1
       223: argument: 
        224: expr: 
         225: literal: "mixed_nal_types"
   226: expr_stmt: 
    227: expr: 
     228: name: 
      229: name: pps
      230: operator: ->
      231: name: width
     232: operator: =
     233: call: 
      234: name: gf_bs_read_ue_log
      235: argument_list: 
       236: argument: 
        237: expr: 
         238: name: bs
       239: argument: 
        240: expr: 
         241: literal: "width"
   242: expr_stmt: 
    243: expr: 
     244: name: 
      245: name: pps
      246: operator: ->
      247: name: height
     248: operator: =
     249: call: 
      250: name: gf_bs_read_ue_log
      251: argument_list: 
       252: argument: 
        253: expr: 
         254: name: bs
       255: argument: 
        256: expr: 
         257: literal: "height"
   258: expr_stmt: 
    259: expr: 
     260: name: 
      261: name: pps
      262: operator: ->
      263: name: conf_window
     264: operator: =
     265: call: 
      266: name: gf_bs_read_int_log
      267: argument_list: 
       268: argument: 
        269: expr: 
         270: name: bs
       271: argument: 
        272: expr: 
         273: literal: 1
       274: argument: 
        275: expr: 
         276: literal: "conformance_window_flag"
   277: if_stmt: 
    278: if: 
     279: condition: 
      280: expr: 
       281: name: 
        282: name: pps
        283: operator: ->
        284: name: conf_window
     285: block: 
      286: block_content: 
       287: expr_stmt: 
        288: expr: 
         289: name: 
          290: name: pps
          291: operator: ->
          292: name: cw_left
         293: operator: =
         294: call: 
          295: name: gf_bs_read_ue_log
          296: argument_list: 
           297: argument: 
            298: expr: 
             299: name: bs
           300: argument: 
            301: expr: 
             302: literal: "conf_win_left_offset"
       303: expr_stmt: 
        304: expr: 
         305: name: 
          306: name: pps
          307: operator: ->
          308: name: cw_right
         309: operator: =
         310: call: 
          311: name: gf_bs_read_ue_log
          312: argument_list: 
           313: argument: 
            314: expr: 
             315: name: bs
           316: argument: 
            317: expr: 
             318: literal: "conf_win_right_offset"
       319: expr_stmt: 
        320: expr: 
         321: name: 
          322: name: pps
          323: operator: ->
          324: name: cw_top
         325: operator: =
         326: call: 
          327: name: gf_bs_read_ue_log
          328: argument_list: 
           329: argument: 
            330: expr: 
             331: name: bs
           332: argument: 
            333: expr: 
             334: literal: "conf_win_top_offset"
       335: expr_stmt: 
        336: expr: 
         337: name: 
          338: name: pps
          339: operator: ->
          340: name: cw_bottom
         341: operator: =
         342: call: 
          343: name: gf_bs_read_ue_log
          344: argument_list: 
           345: argument: 
            346: expr: 
             347: name: bs
           348: argument: 
            349: expr: 
             350: literal: "conf_win_bottom_offset"
   351: comment: //scaling window
   352: if_stmt: 
    353: if: 
     354: condition: 
      355: expr: 
       356: call: 
        357: name: gf_bs_read_int_log
        358: argument_list: 
         359: argument: 
          360: expr: 
           361: name: bs
         362: argument: 
          363: expr: 
           364: literal: 1
         365: argument: 
          366: expr: 
           367: literal: "scaling_window_explicit_signalling_flag"
     368: block: 
      369: block_content: 
       370: expr_stmt: 
        371: expr: 
         372: call: 
          373: name: gf_bs_read_se_log
          374: argument_list: 
           375: argument: 
            376: expr: 
             377: name: bs
           378: argument: 
            379: expr: 
             380: literal: "scaling_win_left_offset"
       381: expr_stmt: 
        382: expr: 
         383: call: 
          384: name: gf_bs_read_se_log
          385: argument_list: 
           386: argument: 
            387: expr: 
             388: name: bs
           389: argument: 
            390: expr: 
             391: literal: "scaling_win_right_offset"
       392: expr_stmt: 
        393: expr: 
         394: call: 
          395: name: gf_bs_read_se_log
          396: argument_list: 
           397: argument: 
            398: expr: 
             399: name: bs
           400: argument: 
            401: expr: 
             402: literal: "scaling_win_top_offset"
       403: expr_stmt: 
        404: expr: 
         405: call: 
          406: name: gf_bs_read_se_log
          407: argument_list: 
           408: argument: 
            409: expr: 
             410: name: bs
           411: argument: 
            412: expr: 
             413: literal: "scaling_win_bottom_offset"
   414: expr_stmt: 
    415: expr: 
     416: name: 
      417: name: pps
      418: operator: ->
      419: name: output_flag_present_flag
     420: operator: =
     421: call: 
      422: name: gf_bs_read_int_log
      423: argument_list: 
       424: argument: 
        425: expr: 
         426: name: bs
       427: argument: 
        428: expr: 
         429: literal: 1
       430: argument: 
        431: expr: 
         432: literal: "output_flag_present_flag"
   433: expr_stmt: 
    434: expr: 
     435: name: 
      436: name: pps
      437: operator: ->
      438: name: no_pic_partition_flag
     439: operator: =
     440: call: 
      441: name: gf_bs_read_int_log
      442: argument_list: 
       443: argument: 
        444: expr: 
         445: name: bs
       446: argument: 
        447: expr: 
         448: literal: 1
       449: argument: 
        450: expr: 
         451: literal: "no_pic_partition_flag"
   452: expr_stmt: 
    453: expr: 
     454: name: 
      455: name: pps
      456: operator: ->
      457: name: subpic_id_mapping_present_flag
     458: operator: =
     459: call: 
      460: name: gf_bs_read_int_log
      461: argument_list: 
       462: argument: 
        463: expr: 
         464: name: bs
       465: argument: 
        466: expr: 
         467: literal: 1
       468: argument: 
        469: expr: 
         470: literal: "subpic_id_mapping_present_flag"
   471: if_stmt: 
    472: if: 
     473: condition: 
      474: expr: 
       475: name: 
        476: name: pps
        477: operator: ->
        478: name: subpic_id_mapping_present_flag
     479: block: 
      480: block_content: 
       481: decl_stmt: 
        482: decl: 
         483: type: 
          484: name: u32
         485: name: pps_subpic_id_len
        486: decl: 
         487: type: 
         488: name: pps_num_subpics
         489: init: 
          490: expr: 
           491: literal: 0
       492: if_stmt: 
        493: if: 
         494: condition: 
          495: expr: 
           496: operator: !
           497: name: 
            498: name: pps
            499: operator: ->
            500: name: no_pic_partition_flag
         501: block: 
          502: block_content: 
           503: expr_stmt: 
            504: expr: 
             505: name: pps_num_subpics
             506: operator: =
             507: literal: 1
             508: operator: +
             509: call: 
              510: name: gf_bs_read_ue_log
              511: argument_list: 
               512: argument: 
                513: expr: 
                 514: name: bs
               515: argument: 
                516: expr: 
                 517: literal: "pps_num_subpics_minus1"
       518: expr_stmt: 
        519: expr: 
         520: name: pps_subpic_id_len
         521: operator: =
         522: literal: 1
         523: operator: +
         524: call: 
          525: name: gf_bs_read_ue
          526: argument_list: 
           527: argument: 
            528: expr: 
             529: name: bs
       530: for: 
        531: control: 
         532: init: 
          533: expr: 
           534: name: i
           535: operator: =
           536: literal: 0
         537: condition: 
          538: expr: 
           539: name: i
           540: operator: <
           541: name: pps_num_subpics
         542: incr: 
          543: expr: 
           544: name: i
           545: operator: ++
        546: block: 
         547: block_content: 
          548: expr_stmt: 
           549: expr: 
            550: call: 
             551: name: gf_bs_read_int_log_idx
             552: argument_list: 
              553: argument: 
               554: expr: 
                555: name: bs
              556: argument: 
               557: expr: 
                558: name: pps_subpic_id_len
              559: argument: 
               560: expr: 
                561: literal: "subpic_id"
              562: argument: 
               563: expr: 
                564: name: i
   565: if_stmt: 
    566: if: 
     567: condition: 
      568: expr: 
       569: operator: !
       570: name: 
        571: name: pps
        572: operator: ->
        573: name: no_pic_partition_flag
     574: block: 
      575: block_content: 
       576: expr_stmt: 
        577: expr: 
         578: call: 
          579: name: gf_bs_read_int_log
          580: argument_list: 
           581: argument: 
            582: expr: 
             583: name: bs
           584: argument: 
            585: expr: 
             586: literal: 2
           587: argument: 
            588: expr: 
             589: literal: "pps_log2_ctu_size_minus5"
       590: decl_stmt: 
        591: decl: 
         592: type: 
          593: name: u32
         594: name: num_exp_tile_columns
         595: init: 
          596: expr: 
           597: literal: 1
           598: operator: +
           599: call: 
            600: name: gf_bs_read_ue_log
            601: argument_list: 
             602: argument: 
              603: expr: 
               604: name: bs
             605: argument: 
              606: expr: 
               607: literal: "num_exp_tile_columns_minus1"
       608: decl_stmt: 
        609: decl: 
         610: type: 
          611: name: u32
         612: name: num_exp_tile_rows
         613: init: 
          614: expr: 
           615: literal: 1
           616: operator: +
           617: call: 
            618: name: gf_bs_read_ue_log
            619: argument_list: 
             620: argument: 
              621: expr: 
               622: name: bs
             623: argument: 
              624: expr: 
               625: literal: "num_exp_tile_rows_minus1"
       626: for: 
        627: control: 
         628: init: 
          629: expr: 
           630: name: i
           631: operator: =
           632: literal: 0
         633: condition: 
          634: expr: 
           635: name: i
           636: operator: <
           637: name: num_exp_tile_columns
         638: incr: 
          639: expr: 
           640: name: i
           641: operator: ++
        642: block: 
         643: block_content: 
          644: expr_stmt: 
           645: expr: 
            646: call: 
             647: name: gf_bs_read_ue_log_idx
             648: argument_list: 
              649: argument: 
               650: expr: 
                651: name: bs
              652: argument: 
               653: expr: 
                654: literal: "tile_column_width_minus1"
              655: argument: 
               656: expr: 
                657: name: i
       658: for: 
        659: control: 
         660: init: 
          661: expr: 
           662: name: i
           663: operator: =
           664: literal: 0
         665: condition: 
          666: expr: 
           667: name: i
           668: operator: <
           669: name: num_exp_tile_rows
         670: incr: 
          671: expr: 
           672: name: i
           673: operator: ++
        674: block: 
         675: block_content: 
          676: expr_stmt: 
           677: expr: 
            678: call: 
             679: name: gf_bs_read_ue_log_idx
             680: argument_list: 
              681: argument: 
               682: expr: 
                683: name: bs
              684: argument: 
               685: expr: 
                686: literal: "tile_row_height_minus1"
              687: argument: 
               688: expr: 
                689: name: i
       690: comment: //todo parse the rest
       691: return: 
        692: expr: 
         693: name: pps_id
   694: comment: //todo parse the rest
   695: return: 
    696: expr: 
     697: name: pps_id

----------------------------------------
0: function: 
 1: type: 
  2: specifier: static
  3: name: s32
 4: name: gf_media_vvc_read_pps_bs_internal
 5: parameter_list: 
  6: parameter: 
   7: decl: 
    8: type: 
     9: name: GF_BitStream
     10: modifier: *
    11: name: bs
  12: parameter: 
   13: decl: 
    14: type: 
     15: name: VVCState
     16: modifier: *
    17: name: vvc
 18: block: 
  19: block_content: 
   20: decl_stmt: 
    21: decl: 
     22: type: 
      23: name: u32
     24: name: i
   25: decl_stmt: 
    26: decl: 
     27: type: 
      28: name: s32
     29: name: pps_id
   30: decl_stmt: 
    31: decl: 
     32: type: 
      33: name: VVC_PPS
      34: modifier: *
     35: name: pps
   36: comment: //NAL header already read
   37: expr_stmt: 
    38: expr: 
     39: name: pps_id
     40: operator: =
     41: call: 
      42: name: gf_bs_read_int_log
      43: argument_list: 
       44: argument: 
        45: expr: 
         46: name: bs
       47: argument: 
        48: expr: 
         49: literal: 6
       50: argument: 
        51: expr: 
         52: literal: "pps_id"
   53: if_stmt: 
    54: if: 
     55: condition: 
      56: expr: 
       57: operator: (
       58: name: pps_id
       59: operator: <
       60: literal: 0
       61: operator: )
       62: operator: ||
       63: operator: (
       64: name: pps_id
       65: operator: >=
       66: literal: 64
       67: operator: )
     68: block: 
      69: block_content: 
       70: expr_stmt: 
        71: expr: 
         72: call: 
          73: name: GF_LOG
          74: argument_list: 
           75: argument: 
            76: expr: 
             77: name: GF_LOG_ERROR
           78: argument: 
            79: expr: 
             80: name: GF_LOG_CODING
           81: argument: 
            82: expr: 
             83: operator: (
             84: literal: "[VVC] wrong PPS ID %d in PPS\n"
             85: operator: ,
             86: name: pps_id
             87: operator: )
       88: return: 
        89: expr: 
         90: operator: -
         91: literal: 1
   92: expr_stmt: 
    93: expr: 
     94: name: pps
     95: operator: =
     96: operator: &
     97: name: 
      98: name: vvc
      99: operator: ->
      100: name: pps
      101: index: 
       102: expr: 
        103: name: pps_id
   104: if_stmt: 
    105: if: 
     106: condition: 
      107: expr: 
       108: operator: !
       109: name: 
        110: name: pps
        111: operator: ->
        112: name: state
     113: block: 
      114: block_content: 
       115: expr_stmt: 
        116: expr: 
         117: name: 
          118: name: pps
          119: operator: ->
          120: name: id
         121: operator: =
         122: name: pps_id
       123: expr_stmt: 
        124: expr: 
         125: name: 
          126: name: pps
          127: operator: ->
          128: name: state
         129: operator: =
         130: literal: 1
   131: expr_stmt: 
    132: expr: 
     133: name: 
      134: name: pps
      135: operator: ->
      136: name: sps_id
     137: operator: =
     138: call: 
      139: name: gf_bs_read_int_log
      140: argument_list: 
       141: argument: 
        142: expr: 
         143: name: bs
       144: argument: 
        145: expr: 
         146: literal: 4
       147: argument: 
        148: expr: 
         149: literal: "sps_id"
   150: if_stmt: 
    151: if: 
     152: condition: 
      153: expr: 
       154: operator: (
       155: name: 
        156: name: pps
        157: operator: ->
        158: name: sps_id
       159: operator: <
       160: literal: 0
       161: operator: )
       162: operator: ||
       163: operator: (
       164: name: 
        165: name: pps
        166: operator: ->
        167: name: sps_id
       168: operator: >=
       169: literal: 16
       170: operator: )
     171: block: 
      172: block_content: 
       173: expr_stmt: 
        174: expr: 
         175: call: 
          176: name: GF_LOG
          177: argument_list: 
           178: argument: 
            179: expr: 
             180: name: GF_LOG_ERROR
           181: argument: 
            182: expr: 
             183: name: GF_LOG_CODING
           184: argument: 
            185: expr: 
             186: operator: (
             187: literal: "[VVC] wrong SPS ID %d in PPS\n"
             188: operator: ,
             189: name: 
              190: name: pps
              191: operator: ->
              192: name: sps_id
             193: operator: )
       194: expr_stmt: 
        195: expr: 
         196: name: 
          197: name: pps
          198: operator: ->
          199: name: sps_id
         200: operator: =
         201: literal: 0
       202: return: 
        203: expr: 
         204: operator: -
         205: literal: 1
   206: expr_stmt: 
    207: expr: 
     208: name: 
      209: name: vvc
      210: operator: ->
      211: name: sps_active_idx
     212: operator: =
     213: name: 
      214: name: pps
      215: operator: ->
      216: name: sps_id
   217: comment: /*set active sps*/
   218: expr_stmt: 
    219: expr: 
     220: name: 
      221: name: pps
      222: operator: ->
      223: name: mixed_nal_types
     224: operator: =
     225: call: 
      226: name: gf_bs_read_int_log
      227: argument_list: 
       228: argument: 
        229: expr: 
         230: name: bs
       231: argument: 
        232: expr: 
         233: literal: 1
       234: argument: 
        235: expr: 
         236: literal: "mixed_nal_types"
   237: expr_stmt: 
    238: expr: 
     239: name: 
      240: name: pps
      241: operator: ->
      242: name: width
     243: operator: =
     244: call: 
      245: name: gf_bs_read_ue_log
      246: argument_list: 
       247: argument: 
        248: expr: 
         249: name: bs
       250: argument: 
        251: expr: 
         252: literal: "width"
   253: expr_stmt: 
    254: expr: 
     255: name: 
      256: name: pps
      257: operator: ->
      258: name: height
     259: operator: =
     260: call: 
      261: name: gf_bs_read_ue_log
      262: argument_list: 
       263: argument: 
        264: expr: 
         265: name: bs
       266: argument: 
        267: expr: 
         268: literal: "height"
   269: expr_stmt: 
    270: expr: 
     271: name: 
      272: name: pps
      273: operator: ->
      274: name: conf_window
     275: operator: =
     276: call: 
      277: name: gf_bs_read_int_log
      278: argument_list: 
       279: argument: 
        280: expr: 
         281: name: bs
       282: argument: 
        283: expr: 
         284: literal: 1
       285: argument: 
        286: expr: 
         287: literal: "conformance_window_flag"
   288: if_stmt: 
    289: if: 
     290: condition: 
      291: expr: 
       292: name: 
        293: name: pps
        294: operator: ->
        295: name: conf_window
     296: block: 
      297: block_content: 
       298: expr_stmt: 
        299: expr: 
         300: name: 
          301: name: pps
          302: operator: ->
          303: name: cw_left
         304: operator: =
         305: call: 
          306: name: gf_bs_read_ue_log
          307: argument_list: 
           308: argument: 
            309: expr: 
             310: name: bs
           311: argument: 
            312: expr: 
             313: literal: "conf_win_left_offset"
       314: expr_stmt: 
        315: expr: 
         316: name: 
          317: name: pps
          318: operator: ->
          319: name: cw_right
         320: operator: =
         321: call: 
          322: name: gf_bs_read_ue_log
          323: argument_list: 
           324: argument: 
            325: expr: 
             326: name: bs
           327: argument: 
            328: expr: 
             329: literal: "conf_win_right_offset"
       330: expr_stmt: 
        331: expr: 
         332: name: 
          333: name: pps
          334: operator: ->
          335: name: cw_top
         336: operator: =
         337: call: 
          338: name: gf_bs_read_ue_log
          339: argument_list: 
           340: argument: 
            341: expr: 
             342: name: bs
           343: argument: 
            344: expr: 
             345: literal: "conf_win_top_offset"
       346: expr_stmt: 
        347: expr: 
         348: name: 
          349: name: pps
          350: operator: ->
          351: name: cw_bottom
         352: operator: =
         353: call: 
          354: name: gf_bs_read_ue_log
          355: argument_list: 
           356: argument: 
            357: expr: 
             358: name: bs
           359: argument: 
            360: expr: 
             361: literal: "conf_win_bottom_offset"
   362: comment: //scaling window
   363: if_stmt: 
    364: if: 
     365: condition: 
      366: expr: 
       367: call: 
        368: name: gf_bs_read_int_log
        369: argument_list: 
         370: argument: 
          371: expr: 
           372: name: bs
         373: argument: 
          374: expr: 
           375: literal: 1
         376: argument: 
          377: expr: 
           378: literal: "scaling_window_explicit_signalling_flag"
     379: block: 
      380: block_content: 
       381: expr_stmt: 
        382: expr: 
         383: call: 
          384: name: gf_bs_read_se_log
          385: argument_list: 
           386: argument: 
            387: expr: 
             388: name: bs
           389: argument: 
            390: expr: 
             391: literal: "scaling_win_left_offset"
       392: expr_stmt: 
        393: expr: 
         394: call: 
          395: name: gf_bs_read_se_log
          396: argument_list: 
           397: argument: 
            398: expr: 
             399: name: bs
           400: argument: 
            401: expr: 
             402: literal: "scaling_win_right_offset"
       403: expr_stmt: 
        404: expr: 
         405: call: 
          406: name: gf_bs_read_se_log
          407: argument_list: 
           408: argument: 
            409: expr: 
             410: name: bs
           411: argument: 
            412: expr: 
             413: literal: "scaling_win_top_offset"
       414: expr_stmt: 
        415: expr: 
         416: call: 
          417: name: gf_bs_read_se_log
          418: argument_list: 
           419: argument: 
            420: expr: 
             421: name: bs
           422: argument: 
            423: expr: 
             424: literal: "scaling_win_bottom_offset"
   425: expr_stmt: 
    426: expr: 
     427: name: 
      428: name: pps
      429: operator: ->
      430: name: output_flag_present_flag
     431: operator: =
     432: call: 
      433: name: gf_bs_read_int_log
      434: argument_list: 
       435: argument: 
        436: expr: 
         437: name: bs
       438: argument: 
        439: expr: 
         440: literal: 1
       441: argument: 
        442: expr: 
         443: literal: "output_flag_present_flag"
   444: expr_stmt: 
    445: expr: 
     446: name: 
      447: name: pps
      448: operator: ->
      449: name: no_pic_partition_flag
     450: operator: =
     451: call: 
      452: name: gf_bs_read_int_log
      453: argument_list: 
       454: argument: 
        455: expr: 
         456: name: bs
       457: argument: 
        458: expr: 
         459: literal: 1
       460: argument: 
        461: expr: 
         462: literal: "no_pic_partition_flag"
   463: expr_stmt: 
    464: expr: 
     465: name: 
      466: name: pps
      467: operator: ->
      468: name: subpic_id_mapping_present_flag
     469: operator: =
     470: call: 
      471: name: gf_bs_read_int_log
      472: argument_list: 
       473: argument: 
        474: expr: 
         475: name: bs
       476: argument: 
        477: expr: 
         478: literal: 1
       479: argument: 
        480: expr: 
         481: literal: "subpic_id_mapping_present_flag"
   482: if_stmt: 
    483: if: 
     484: condition: 
      485: expr: 
       486: name: 
        487: name: pps
        488: operator: ->
        489: name: subpic_id_mapping_present_flag
     490: block: 
      491: block_content: 
       492: decl_stmt: 
        493: decl: 
         494: type: 
          495: name: u32
         496: name: pps_subpic_id_len
        497: decl: 
         498: type: 
         499: name: pps_num_subpics
         500: init: 
          501: expr: 
           502: literal: 0
       503: if_stmt: 
        504: if: 
         505: condition: 
          506: expr: 
           507: operator: !
           508: name: 
            509: name: pps
            510: operator: ->
            511: name: no_pic_partition_flag
         512: block: 
          513: block_content: 
           514: expr_stmt: 
            515: expr: 
             516: name: pps_num_subpics
             517: operator: =
             518: literal: 1
             519: operator: +
             520: call: 
              521: name: gf_bs_read_ue_log
              522: argument_list: 
               523: argument: 
                524: expr: 
                 525: name: bs
               526: argument: 
                527: expr: 
                 528: literal: "pps_num_subpics_minus1"
       529: expr_stmt: 
        530: expr: 
         531: name: pps_subpic_id_len
         532: operator: =
         533: literal: 1
         534: operator: +
         535: call: 
          536: name: gf_bs_read_ue
          537: argument_list: 
           538: argument: 
            539: expr: 
             540: name: bs
       541: for: 
        542: control: 
         543: init: 
          544: expr: 
           545: name: i
           546: operator: =
           547: literal: 0
         548: condition: 
          549: expr: 
           550: name: i
           551: operator: <
           552: name: pps_num_subpics
         553: incr: 
          554: expr: 
           555: name: i
           556: operator: ++
        557: block: 
         558: block_content: 
          559: expr_stmt: 
           560: expr: 
            561: call: 
             562: name: gf_bs_read_int_log_idx
             563: argument_list: 
              564: argument: 
               565: expr: 
                566: name: bs
              567: argument: 
               568: expr: 
                569: name: pps_subpic_id_len
              570: argument: 
               571: expr: 
                572: literal: "subpic_id"
              573: argument: 
               574: expr: 
                575: name: i
   576: if_stmt: 
    577: if: 
     578: condition: 
      579: expr: 
       580: operator: !
       581: name: 
        582: name: pps
        583: operator: ->
        584: name: no_pic_partition_flag
     585: block: 
      586: block_content: 
       587: expr_stmt: 
        588: expr: 
         589: call: 
          590: name: gf_bs_read_int_log
          591: argument_list: 
           592: argument: 
            593: expr: 
             594: name: bs
           595: argument: 
            596: expr: 
             597: literal: 2
           598: argument: 
            599: expr: 
             600: literal: "pps_log2_ctu_size_minus5"
       601: decl_stmt: 
        602: decl: 
         603: type: 
          604: name: u32
         605: name: num_exp_tile_columns
         606: init: 
          607: expr: 
           608: literal: 1
           609: operator: +
           610: call: 
            611: name: gf_bs_read_ue_log
            612: argument_list: 
             613: argument: 
              614: expr: 
               615: name: bs
             616: argument: 
              617: expr: 
               618: literal: "num_exp_tile_columns_minus1"
       619: decl_stmt: 
        620: decl: 
         621: type: 
          622: name: u32
         623: name: num_exp_tile_rows
         624: init: 
          625: expr: 
           626: literal: 1
           627: operator: +
           628: call: 
            629: name: gf_bs_read_ue_log
            630: argument_list: 
             631: argument: 
              632: expr: 
               633: name: bs
             634: argument: 
              635: expr: 
               636: literal: "num_exp_tile_rows_minus1"
       637: for: 
        638: control: 
         639: init: 
          640: expr: 
           641: name: i
           642: operator: =
           643: literal: 0
         644: condition: 
          645: expr: 
           646: name: i
           647: operator: <
           648: name: num_exp_tile_columns
         649: incr: 
          650: expr: 
           651: name: i
           652: operator: ++
        653: block: 
         654: block_content: 
          655: expr_stmt: 
           656: expr: 
            657: call: 
             658: name: gf_bs_read_ue_log_idx
             659: argument_list: 
              660: argument: 
               661: expr: 
                662: name: bs
              663: argument: 
               664: expr: 
                665: literal: "tile_column_width_minus1"
              666: argument: 
               667: expr: 
                668: name: i
       669: for: 
        670: control: 
         671: init: 
          672: expr: 
           673: name: i
           674: operator: =
           675: literal: 0
         676: condition: 
          677: expr: 
           678: name: i
           679: operator: <
           680: name: num_exp_tile_rows
         681: incr: 
          682: expr: 
           683: name: i
           684: operator: ++
        685: block: 
         686: block_content: 
          687: expr_stmt: 
           688: expr: 
            689: call: 
             690: name: gf_bs_read_ue_log_idx
             691: argument_list: 
              692: argument: 
               693: expr: 
                694: name: bs
              695: argument: 
               696: expr: 
                697: literal: "tile_row_height_minus1"
              698: argument: 
               699: expr: 
                700: name: i
       701: comment: //todo parse the rest
       702: return: 
        703: expr: 
         704: name: pps_id
   705: comment: //todo parse the rest
   706: return: 
    707: expr: 
     708: name: pps_id
=====
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: u32
    6: name: i
  7: decl_stmt: 
   8: decl: 
    9: type: 
     10: name: s32
    11: name: pps_id
  12: decl_stmt: 
   13: decl: 
    14: type: 
     15: name: VVC_PPS
     16: modifier: *
    17: name: pps
  18: comment: //NAL header already read
  19: expr_stmt: 
   20: expr: 
    21: name: pps_id
    22: operator: =
    23: call: 
     24: name: gf_bs_read_int_log
     25: argument_list: 
      26: argument: 
       27: expr: 
        28: name: bs
      29: argument: 
       30: expr: 
        31: literal: 6
      32: argument: 
       33: expr: 
        34: literal: "pps_id"
  35: if_stmt: 
   36: if: 
    37: condition: 
     38: expr: 
      39: operator: (
      40: name: pps_id
      41: operator: <
      42: literal: 0
      43: operator: )
      44: operator: ||
      45: operator: (
      46: name: pps_id
      47: operator: >=
      48: literal: 64
      49: operator: )
    50: block: 
     51: block_content: 
      52: expr_stmt: 
       53: expr: 
        54: call: 
         55: name: GF_LOG
         56: argument_list: 
          57: argument: 
           58: expr: 
            59: name: GF_LOG_ERROR
          60: argument: 
           61: expr: 
            62: name: GF_LOG_CODING
          63: argument: 
           64: expr: 
            65: operator: (
            66: literal: "[VVC] wrong PPS ID %d in PPS\n"
            67: operator: ,
            68: name: pps_id
            69: operator: )
      70: return: 
       71: expr: 
        72: operator: -
        73: literal: 1
  74: expr_stmt: 
   75: expr: 
    76: name: pps
    77: operator: =
    78: operator: &
    79: name: 
     80: name: vvc
     81: operator: ->
     82: name: pps
     83: index: 
      84: expr: 
       85: name: pps_id
  86: if_stmt: 
   87: if: 
    88: condition: 
     89: expr: 
      90: operator: !
      91: name: 
       92: name: pps
       93: operator: ->
       94: name: state
    95: block: 
     96: block_content: 
      97: expr_stmt: 
       98: expr: 
        99: name: 
         100: name: pps
         101: operator: ->
         102: name: id
        103: operator: =
        104: name: pps_id
      105: expr_stmt: 
       106: expr: 
        107: name: 
         108: name: pps
         109: operator: ->
         110: name: state
        111: operator: =
        112: literal: 1
  113: expr_stmt: 
   114: expr: 
    115: name: 
     116: name: pps
     117: operator: ->
     118: name: sps_id
    119: operator: =
    120: call: 
     121: name: gf_bs_read_int_log
     122: argument_list: 
      123: argument: 
       124: expr: 
        125: name: bs
      126: argument: 
       127: expr: 
        128: literal: 4
      129: argument: 
       130: expr: 
        131: literal: "sps_id"
  132: if_stmt: 
   133: if: 
    134: condition: 
     135: expr: 
      136: name: 
       137: name: pps
       138: operator: ->
       139: name: sps_id
      140: operator: >=
      141: literal: 16
    142: block: 
     143: block_content: 
      144: expr_stmt: 
       145: expr: 
        146: call: 
         147: name: GF_LOG
         148: argument_list: 
          149: argument: 
           150: expr: 
            151: name: GF_LOG_ERROR
          152: argument: 
           153: expr: 
            154: name: GF_LOG_CODING
          155: argument: 
           156: expr: 
            157: operator: (
            158: literal: "[VVC] wrong SPS ID %d in PPS\n"
            159: operator: ,
            160: name: 
             161: name: pps
             162: operator: ->
             163: name: sps_id
            164: operator: )
      165: expr_stmt: 
       166: expr: 
        167: name: 
         168: name: pps
         169: operator: ->
         170: name: sps_id
        171: operator: =
        172: literal: 0
      173: return: 
       174: expr: 
        175: operator: -
        176: literal: 1
  177: expr_stmt: 
   178: expr: 
    179: name: 
     180: name: vvc
     181: operator: ->
     182: name: sps_active_idx
    183: operator: =
    184: name: 
     185: name: pps
     186: operator: ->
     187: name: sps_id
  188: comment: /*set active sps*/
  189: expr_stmt: 
   190: expr: 
    191: name: 
     192: name: pps
     193: operator: ->
     194: name: mixed_nal_types
    195: operator: =
    196: call: 
     197: name: gf_bs_read_int_log
     198: argument_list: 
      199: argument: 
       200: expr: 
        201: name: bs
      202: argument: 
       203: expr: 
        204: literal: 1
      205: argument: 
       206: expr: 
        207: literal: "mixed_nal_types"
  208: expr_stmt: 
   209: expr: 
    210: name: 
     211: name: pps
     212: operator: ->
     213: name: width
    214: operator: =
    215: call: 
     216: name: gf_bs_read_ue_log
     217: argument_list: 
      218: argument: 
       219: expr: 
        220: name: bs
      221: argument: 
       222: expr: 
        223: literal: "width"
  224: expr_stmt: 
   225: expr: 
    226: name: 
     227: name: pps
     228: operator: ->
     229: name: height
    230: operator: =
    231: call: 
     232: name: gf_bs_read_ue_log
     233: argument_list: 
      234: argument: 
       235: expr: 
        236: name: bs
      237: argument: 
       238: expr: 
        239: literal: "height"
  240: expr_stmt: 
   241: expr: 
    242: name: 
     243: name: pps
     244: operator: ->
     245: name: conf_window
    246: operator: =
    247: call: 
     248: name: gf_bs_read_int_log
     249: argument_list: 
      250: argument: 
       251: expr: 
        252: name: bs
      253: argument: 
       254: expr: 
        255: literal: 1
      256: argument: 
       257: expr: 
        258: literal: "conformance_window_flag"
  259: if_stmt: 
   260: if: 
    261: condition: 
     262: expr: 
      263: name: 
       264: name: pps
       265: operator: ->
       266: name: conf_window
    267: block: 
     268: block_content: 
      269: expr_stmt: 
       270: expr: 
        271: name: 
         272: name: pps
         273: operator: ->
         274: name: cw_left
        275: operator: =
        276: call: 
         277: name: gf_bs_read_ue_log
         278: argument_list: 
          279: argument: 
           280: expr: 
            281: name: bs
          282: argument: 
           283: expr: 
            284: literal: "conf_win_left_offset"
      285: expr_stmt: 
       286: expr: 
        287: name: 
         288: name: pps
         289: operator: ->
         290: name: cw_right
        291: operator: =
        292: call: 
         293: name: gf_bs_read_ue_log
         294: argument_list: 
          295: argument: 
           296: expr: 
            297: name: bs
          298: argument: 
           299: expr: 
            300: literal: "conf_win_right_offset"
      301: expr_stmt: 
       302: expr: 
        303: name: 
         304: name: pps
         305: operator: ->
         306: name: cw_top
        307: operator: =
        308: call: 
         309: name: gf_bs_read_ue_log
         310: argument_list: 
          311: argument: 
           312: expr: 
            313: name: bs
          314: argument: 
           315: expr: 
            316: literal: "conf_win_top_offset"
      317: expr_stmt: 
       318: expr: 
        319: name: 
         320: name: pps
         321: operator: ->
         322: name: cw_bottom
        323: operator: =
        324: call: 
         325: name: gf_bs_read_ue_log
         326: argument_list: 
          327: argument: 
           328: expr: 
            329: name: bs
          330: argument: 
           331: expr: 
            332: literal: "conf_win_bottom_offset"
  333: comment: //scaling window
  334: if_stmt: 
   335: if: 
    336: condition: 
     337: expr: 
      338: call: 
       339: name: gf_bs_read_int_log
       340: argument_list: 
        341: argument: 
         342: expr: 
          343: name: bs
        344: argument: 
         345: expr: 
          346: literal: 1
        347: argument: 
         348: expr: 
          349: literal: "scaling_window_explicit_signalling_flag"
    350: block: 
     351: block_content: 
      352: expr_stmt: 
       353: expr: 
        354: call: 
         355: name: gf_bs_read_se_log
         356: argument_list: 
          357: argument: 
           358: expr: 
            359: name: bs
          360: argument: 
           361: expr: 
            362: literal: "scaling_win_left_offset"
      363: expr_stmt: 
       364: expr: 
        365: call: 
         366: name: gf_bs_read_se_log
         367: argument_list: 
          368: argument: 
           369: expr: 
            370: name: bs
          371: argument: 
           372: expr: 
            373: literal: "scaling_win_right_offset"
      374: expr_stmt: 
       375: expr: 
        376: call: 
         377: name: gf_bs_read_se_log
         378: argument_list: 
          379: argument: 
           380: expr: 
            381: name: bs
          382: argument: 
           383: expr: 
            384: literal: "scaling_win_top_offset"
      385: expr_stmt: 
       386: expr: 
        387: call: 
         388: name: gf_bs_read_se_log
         389: argument_list: 
          390: argument: 
           391: expr: 
            392: name: bs
          393: argument: 
           394: expr: 
            395: literal: "scaling_win_bottom_offset"
  396: expr_stmt: 
   397: expr: 
    398: name: 
     399: name: pps
     400: operator: ->
     401: name: output_flag_present_flag
    402: operator: =
    403: call: 
     404: name: gf_bs_read_int_log
     405: argument_list: 
      406: argument: 
       407: expr: 
        408: name: bs
      409: argument: 
       410: expr: 
        411: literal: 1
      412: argument: 
       413: expr: 
        414: literal: "output_flag_present_flag"
  415: expr_stmt: 
   416: expr: 
    417: name: 
     418: name: pps
     419: operator: ->
     420: name: no_pic_partition_flag
    421: operator: =
    422: call: 
     423: name: gf_bs_read_int_log
     424: argument_list: 
      425: argument: 
       426: expr: 
        427: name: bs
      428: argument: 
       429: expr: 
        430: literal: 1
      431: argument: 
       432: expr: 
        433: literal: "no_pic_partition_flag"
  434: expr_stmt: 
   435: expr: 
    436: name: 
     437: name: pps
     438: operator: ->
     439: name: subpic_id_mapping_present_flag
    440: operator: =
    441: call: 
     442: name: gf_bs_read_int_log
     443: argument_list: 
      444: argument: 
       445: expr: 
        446: name: bs
      447: argument: 
       448: expr: 
        449: literal: 1
      450: argument: 
       451: expr: 
        452: literal: "subpic_id_mapping_present_flag"
  453: if_stmt: 
   454: if: 
    455: condition: 
     456: expr: 
      457: name: 
       458: name: pps
       459: operator: ->
       460: name: subpic_id_mapping_present_flag
    461: block: 
     462: block_content: 
      463: decl_stmt: 
       464: decl: 
        465: type: 
         466: name: u32
        467: name: pps_subpic_id_len
       468: decl: 
        469: type: 
        470: name: pps_num_subpics
        471: init: 
         472: expr: 
          473: literal: 0
      474: if_stmt: 
       475: if: 
        476: condition: 
         477: expr: 
          478: operator: !
          479: name: 
           480: name: pps
           481: operator: ->
           482: name: no_pic_partition_flag
        483: block: 
         484: block_content: 
          485: expr_stmt: 
           486: expr: 
            487: name: pps_num_subpics
            488: operator: =
            489: literal: 1
            490: operator: +
            491: call: 
             492: name: gf_bs_read_ue_log
             493: argument_list: 
              494: argument: 
               495: expr: 
                496: name: bs
              497: argument: 
               498: expr: 
                499: literal: "pps_num_subpics_minus1"
      500: expr_stmt: 
       501: expr: 
        502: name: pps_subpic_id_len
        503: operator: =
        504: literal: 1
        505: operator: +
        506: call: 
         507: name: gf_bs_read_ue
         508: argument_list: 
          509: argument: 
           510: expr: 
            511: name: bs
      512: for: 
       513: control: 
        514: init: 
         515: expr: 
          516: name: i
          517: operator: =
          518: literal: 0
        519: condition: 
         520: expr: 
          521: name: i
          522: operator: <
          523: name: pps_num_subpics
        524: incr: 
         525: expr: 
          526: name: i
          527: operator: ++
       528: block: 
        529: block_content: 
         530: expr_stmt: 
          531: expr: 
           532: call: 
            533: name: gf_bs_read_int_log_idx
            534: argument_list: 
             535: argument: 
              536: expr: 
               537: name: bs
             538: argument: 
              539: expr: 
               540: name: pps_subpic_id_len
             541: argument: 
              542: expr: 
               543: literal: "subpic_id"
             544: argument: 
              545: expr: 
               546: name: i
  547: if_stmt: 
   548: if: 
    549: condition: 
     550: expr: 
      551: operator: !
      552: name: 
       553: name: pps
       554: operator: ->
       555: name: no_pic_partition_flag
    556: block: 
     557: block_content: 
      558: expr_stmt: 
       559: expr: 
        560: call: 
         561: name: gf_bs_read_int_log
         562: argument_list: 
          563: argument: 
           564: expr: 
            565: name: bs
          566: argument: 
           567: expr: 
            568: literal: 2
          569: argument: 
           570: expr: 
            571: literal: "pps_log2_ctu_size_minus5"
      572: decl_stmt: 
       573: decl: 
        574: type: 
         575: name: u32
        576: name: num_exp_tile_columns
        577: init: 
         578: expr: 
          579: literal: 1
          580: operator: +
          581: call: 
           582: name: gf_bs_read_ue_log
           583: argument_list: 
            584: argument: 
             585: expr: 
              586: name: bs
            587: argument: 
             588: expr: 
              589: literal: "num_exp_tile_columns_minus1"
      590: decl_stmt: 
       591: decl: 
        592: type: 
         593: name: u32
        594: name: num_exp_tile_rows
        595: init: 
         596: expr: 
          597: literal: 1
          598: operator: +
          599: call: 
           600: name: gf_bs_read_ue_log
           601: argument_list: 
            602: argument: 
             603: expr: 
              604: name: bs
            605: argument: 
             606: expr: 
              607: literal: "num_exp_tile_rows_minus1"
      608: for: 
       609: control: 
        610: init: 
         611: expr: 
          612: name: i
          613: operator: =
          614: literal: 0
        615: condition: 
         616: expr: 
          617: name: i
          618: operator: <
          619: name: num_exp_tile_columns
        620: incr: 
         621: expr: 
          622: name: i
          623: operator: ++
       624: block: 
        625: block_content: 
         626: expr_stmt: 
          627: expr: 
           628: call: 
            629: name: gf_bs_read_ue_log_idx
            630: argument_list: 
             631: argument: 
              632: expr: 
               633: name: bs
             634: argument: 
              635: expr: 
               636: literal: "tile_column_width_minus1"
             637: argument: 
              638: expr: 
               639: name: i
      640: for: 
       641: control: 
        642: init: 
         643: expr: 
          644: name: i
          645: operator: =
          646: literal: 0
        647: condition: 
         648: expr: 
          649: name: i
          650: operator: <
          651: name: num_exp_tile_rows
        652: incr: 
         653: expr: 
          654: name: i
          655: operator: ++
       656: block: 
        657: block_content: 
         658: expr_stmt: 
          659: expr: 
           660: call: 
            661: name: gf_bs_read_ue_log_idx
            662: argument_list: 
             663: argument: 
              664: expr: 
               665: name: bs
             666: argument: 
              667: expr: 
               668: literal: "tile_row_height_minus1"
             669: argument: 
              670: expr: 
               671: name: i
      672: comment: //todo parse the rest
      673: return: 
       674: expr: 
        675: name: pps_id
  676: comment: //todo parse the rest
  677: return: 
   678: expr: 
    679: name: pps_id

----------------------------------------
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: u32
    6: name: i
  7: decl_stmt: 
   8: decl: 
    9: type: 
     10: name: s32
    11: name: pps_id
  12: decl_stmt: 
   13: decl: 
    14: type: 
     15: name: VVC_PPS
     16: modifier: *
    17: name: pps
  18: comment: //NAL header already read
  19: expr_stmt: 
   20: expr: 
    21: name: pps_id
    22: operator: =
    23: call: 
     24: name: gf_bs_read_int_log
     25: argument_list: 
      26: argument: 
       27: expr: 
        28: name: bs
      29: argument: 
       30: expr: 
        31: literal: 6
      32: argument: 
       33: expr: 
        34: literal: "pps_id"
  35: if_stmt: 
   36: if: 
    37: condition: 
     38: expr: 
      39: operator: (
      40: name: pps_id
      41: operator: <
      42: literal: 0
      43: operator: )
      44: operator: ||
      45: operator: (
      46: name: pps_id
      47: operator: >=
      48: literal: 64
      49: operator: )
    50: block: 
     51: block_content: 
      52: expr_stmt: 
       53: expr: 
        54: call: 
         55: name: GF_LOG
         56: argument_list: 
          57: argument: 
           58: expr: 
            59: name: GF_LOG_ERROR
          60: argument: 
           61: expr: 
            62: name: GF_LOG_CODING
          63: argument: 
           64: expr: 
            65: operator: (
            66: literal: "[VVC] wrong PPS ID %d in PPS\n"
            67: operator: ,
            68: name: pps_id
            69: operator: )
      70: return: 
       71: expr: 
        72: operator: -
        73: literal: 1
  74: expr_stmt: 
   75: expr: 
    76: name: pps
    77: operator: =
    78: operator: &
    79: name: 
     80: name: vvc
     81: operator: ->
     82: name: pps
     83: index: 
      84: expr: 
       85: name: pps_id
  86: if_stmt: 
   87: if: 
    88: condition: 
     89: expr: 
      90: operator: !
      91: name: 
       92: name: pps
       93: operator: ->
       94: name: state
    95: block: 
     96: block_content: 
      97: expr_stmt: 
       98: expr: 
        99: name: 
         100: name: pps
         101: operator: ->
         102: name: id
        103: operator: =
        104: name: pps_id
      105: expr_stmt: 
       106: expr: 
        107: name: 
         108: name: pps
         109: operator: ->
         110: name: state
        111: operator: =
        112: literal: 1
  113: expr_stmt: 
   114: expr: 
    115: name: 
     116: name: pps
     117: operator: ->
     118: name: sps_id
    119: operator: =
    120: call: 
     121: name: gf_bs_read_int_log
     122: argument_list: 
      123: argument: 
       124: expr: 
        125: name: bs
      126: argument: 
       127: expr: 
        128: literal: 4
      129: argument: 
       130: expr: 
        131: literal: "sps_id"
  132: if_stmt: 
   133: if: 
    134: condition: 
     135: expr: 
      136: operator: (
      137: name: 
       138: name: pps
       139: operator: ->
       140: name: sps_id
      141: operator: <
      142: literal: 0
      143: operator: )
      144: operator: ||
      145: operator: (
      146: name: 
       147: name: pps
       148: operator: ->
       149: name: sps_id
      150: operator: >=
      151: literal: 16
      152: operator: )
    153: block: 
     154: block_content: 
      155: expr_stmt: 
       156: expr: 
        157: call: 
         158: name: GF_LOG
         159: argument_list: 
          160: argument: 
           161: expr: 
            162: name: GF_LOG_ERROR
          163: argument: 
           164: expr: 
            165: name: GF_LOG_CODING
          166: argument: 
           167: expr: 
            168: operator: (
            169: literal: "[VVC] wrong SPS ID %d in PPS\n"
            170: operator: ,
            171: name: 
             172: name: pps
             173: operator: ->
             174: name: sps_id
            175: operator: )
      176: expr_stmt: 
       177: expr: 
        178: name: 
         179: name: pps
         180: operator: ->
         181: name: sps_id
        182: operator: =
        183: literal: 0
      184: return: 
       185: expr: 
        186: operator: -
        187: literal: 1
  188: expr_stmt: 
   189: expr: 
    190: name: 
     191: name: vvc
     192: operator: ->
     193: name: sps_active_idx
    194: operator: =
    195: name: 
     196: name: pps
     197: operator: ->
     198: name: sps_id
  199: comment: /*set active sps*/
  200: expr_stmt: 
   201: expr: 
    202: name: 
     203: name: pps
     204: operator: ->
     205: name: mixed_nal_types
    206: operator: =
    207: call: 
     208: name: gf_bs_read_int_log
     209: argument_list: 
      210: argument: 
       211: expr: 
        212: name: bs
      213: argument: 
       214: expr: 
        215: literal: 1
      216: argument: 
       217: expr: 
        218: literal: "mixed_nal_types"
  219: expr_stmt: 
   220: expr: 
    221: name: 
     222: name: pps
     223: operator: ->
     224: name: width
    225: operator: =
    226: call: 
     227: name: gf_bs_read_ue_log
     228: argument_list: 
      229: argument: 
       230: expr: 
        231: name: bs
      232: argument: 
       233: expr: 
        234: literal: "width"
  235: expr_stmt: 
   236: expr: 
    237: name: 
     238: name: pps
     239: operator: ->
     240: name: height
    241: operator: =
    242: call: 
     243: name: gf_bs_read_ue_log
     244: argument_list: 
      245: argument: 
       246: expr: 
        247: name: bs
      248: argument: 
       249: expr: 
        250: literal: "height"
  251: expr_stmt: 
   252: expr: 
    253: name: 
     254: name: pps
     255: operator: ->
     256: name: conf_window
    257: operator: =
    258: call: 
     259: name: gf_bs_read_int_log
     260: argument_list: 
      261: argument: 
       262: expr: 
        263: name: bs
      264: argument: 
       265: expr: 
        266: literal: 1
      267: argument: 
       268: expr: 
        269: literal: "conformance_window_flag"
  270: if_stmt: 
   271: if: 
    272: condition: 
     273: expr: 
      274: name: 
       275: name: pps
       276: operator: ->
       277: name: conf_window
    278: block: 
     279: block_content: 
      280: expr_stmt: 
       281: expr: 
        282: name: 
         283: name: pps
         284: operator: ->
         285: name: cw_left
        286: operator: =
        287: call: 
         288: name: gf_bs_read_ue_log
         289: argument_list: 
          290: argument: 
           291: expr: 
            292: name: bs
          293: argument: 
           294: expr: 
            295: literal: "conf_win_left_offset"
      296: expr_stmt: 
       297: expr: 
        298: name: 
         299: name: pps
         300: operator: ->
         301: name: cw_right
        302: operator: =
        303: call: 
         304: name: gf_bs_read_ue_log
         305: argument_list: 
          306: argument: 
           307: expr: 
            308: name: bs
          309: argument: 
           310: expr: 
            311: literal: "conf_win_right_offset"
      312: expr_stmt: 
       313: expr: 
        314: name: 
         315: name: pps
         316: operator: ->
         317: name: cw_top
        318: operator: =
        319: call: 
         320: name: gf_bs_read_ue_log
         321: argument_list: 
          322: argument: 
           323: expr: 
            324: name: bs
          325: argument: 
           326: expr: 
            327: literal: "conf_win_top_offset"
      328: expr_stmt: 
       329: expr: 
        330: name: 
         331: name: pps
         332: operator: ->
         333: name: cw_bottom
        334: operator: =
        335: call: 
         336: name: gf_bs_read_ue_log
         337: argument_list: 
          338: argument: 
           339: expr: 
            340: name: bs
          341: argument: 
           342: expr: 
            343: literal: "conf_win_bottom_offset"
  344: comment: //scaling window
  345: if_stmt: 
   346: if: 
    347: condition: 
     348: expr: 
      349: call: 
       350: name: gf_bs_read_int_log
       351: argument_list: 
        352: argument: 
         353: expr: 
          354: name: bs
        355: argument: 
         356: expr: 
          357: literal: 1
        358: argument: 
         359: expr: 
          360: literal: "scaling_window_explicit_signalling_flag"
    361: block: 
     362: block_content: 
      363: expr_stmt: 
       364: expr: 
        365: call: 
         366: name: gf_bs_read_se_log
         367: argument_list: 
          368: argument: 
           369: expr: 
            370: name: bs
          371: argument: 
           372: expr: 
            373: literal: "scaling_win_left_offset"
      374: expr_stmt: 
       375: expr: 
        376: call: 
         377: name: gf_bs_read_se_log
         378: argument_list: 
          379: argument: 
           380: expr: 
            381: name: bs
          382: argument: 
           383: expr: 
            384: literal: "scaling_win_right_offset"
      385: expr_stmt: 
       386: expr: 
        387: call: 
         388: name: gf_bs_read_se_log
         389: argument_list: 
          390: argument: 
           391: expr: 
            392: name: bs
          393: argument: 
           394: expr: 
            395: literal: "scaling_win_top_offset"
      396: expr_stmt: 
       397: expr: 
        398: call: 
         399: name: gf_bs_read_se_log
         400: argument_list: 
          401: argument: 
           402: expr: 
            403: name: bs
          404: argument: 
           405: expr: 
            406: literal: "scaling_win_bottom_offset"
  407: expr_stmt: 
   408: expr: 
    409: name: 
     410: name: pps
     411: operator: ->
     412: name: output_flag_present_flag
    413: operator: =
    414: call: 
     415: name: gf_bs_read_int_log
     416: argument_list: 
      417: argument: 
       418: expr: 
        419: name: bs
      420: argument: 
       421: expr: 
        422: literal: 1
      423: argument: 
       424: expr: 
        425: literal: "output_flag_present_flag"
  426: expr_stmt: 
   427: expr: 
    428: name: 
     429: name: pps
     430: operator: ->
     431: name: no_pic_partition_flag
    432: operator: =
    433: call: 
     434: name: gf_bs_read_int_log
     435: argument_list: 
      436: argument: 
       437: expr: 
        438: name: bs
      439: argument: 
       440: expr: 
        441: literal: 1
      442: argument: 
       443: expr: 
        444: literal: "no_pic_partition_flag"
  445: expr_stmt: 
   446: expr: 
    447: name: 
     448: name: pps
     449: operator: ->
     450: name: subpic_id_mapping_present_flag
    451: operator: =
    452: call: 
     453: name: gf_bs_read_int_log
     454: argument_list: 
      455: argument: 
       456: expr: 
        457: name: bs
      458: argument: 
       459: expr: 
        460: literal: 1
      461: argument: 
       462: expr: 
        463: literal: "subpic_id_mapping_present_flag"
  464: if_stmt: 
   465: if: 
    466: condition: 
     467: expr: 
      468: name: 
       469: name: pps
       470: operator: ->
       471: name: subpic_id_mapping_present_flag
    472: block: 
     473: block_content: 
      474: decl_stmt: 
       475: decl: 
        476: type: 
         477: name: u32
        478: name: pps_subpic_id_len
       479: decl: 
        480: type: 
        481: name: pps_num_subpics
        482: init: 
         483: expr: 
          484: literal: 0
      485: if_stmt: 
       486: if: 
        487: condition: 
         488: expr: 
          489: operator: !
          490: name: 
           491: name: pps
           492: operator: ->
           493: name: no_pic_partition_flag
        494: block: 
         495: block_content: 
          496: expr_stmt: 
           497: expr: 
            498: name: pps_num_subpics
            499: operator: =
            500: literal: 1
            501: operator: +
            502: call: 
             503: name: gf_bs_read_ue_log
             504: argument_list: 
              505: argument: 
               506: expr: 
                507: name: bs
              508: argument: 
               509: expr: 
                510: literal: "pps_num_subpics_minus1"
      511: expr_stmt: 
       512: expr: 
        513: name: pps_subpic_id_len
        514: operator: =
        515: literal: 1
        516: operator: +
        517: call: 
         518: name: gf_bs_read_ue
         519: argument_list: 
          520: argument: 
           521: expr: 
            522: name: bs
      523: for: 
       524: control: 
        525: init: 
         526: expr: 
          527: name: i
          528: operator: =
          529: literal: 0
        530: condition: 
         531: expr: 
          532: name: i
          533: operator: <
          534: name: pps_num_subpics
        535: incr: 
         536: expr: 
          537: name: i
          538: operator: ++
       539: block: 
        540: block_content: 
         541: expr_stmt: 
          542: expr: 
           543: call: 
            544: name: gf_bs_read_int_log_idx
            545: argument_list: 
             546: argument: 
              547: expr: 
               548: name: bs
             549: argument: 
              550: expr: 
               551: name: pps_subpic_id_len
             552: argument: 
              553: expr: 
               554: literal: "subpic_id"
             555: argument: 
              556: expr: 
               557: name: i
  558: if_stmt: 
   559: if: 
    560: condition: 
     561: expr: 
      562: operator: !
      563: name: 
       564: name: pps
       565: operator: ->
       566: name: no_pic_partition_flag
    567: block: 
     568: block_content: 
      569: expr_stmt: 
       570: expr: 
        571: call: 
         572: name: gf_bs_read_int_log
         573: argument_list: 
          574: argument: 
           575: expr: 
            576: name: bs
          577: argument: 
           578: expr: 
            579: literal: 2
          580: argument: 
           581: expr: 
            582: literal: "pps_log2_ctu_size_minus5"
      583: decl_stmt: 
       584: decl: 
        585: type: 
         586: name: u32
        587: name: num_exp_tile_columns
        588: init: 
         589: expr: 
          590: literal: 1
          591: operator: +
          592: call: 
           593: name: gf_bs_read_ue_log
           594: argument_list: 
            595: argument: 
             596: expr: 
              597: name: bs
            598: argument: 
             599: expr: 
              600: literal: "num_exp_tile_columns_minus1"
      601: decl_stmt: 
       602: decl: 
        603: type: 
         604: name: u32
        605: name: num_exp_tile_rows
        606: init: 
         607: expr: 
          608: literal: 1
          609: operator: +
          610: call: 
           611: name: gf_bs_read_ue_log
           612: argument_list: 
            613: argument: 
             614: expr: 
              615: name: bs
            616: argument: 
             617: expr: 
              618: literal: "num_exp_tile_rows_minus1"
      619: for: 
       620: control: 
        621: init: 
         622: expr: 
          623: name: i
          624: operator: =
          625: literal: 0
        626: condition: 
         627: expr: 
          628: name: i
          629: operator: <
          630: name: num_exp_tile_columns
        631: incr: 
         632: expr: 
          633: name: i
          634: operator: ++
       635: block: 
        636: block_content: 
         637: expr_stmt: 
          638: expr: 
           639: call: 
            640: name: gf_bs_read_ue_log_idx
            641: argument_list: 
             642: argument: 
              643: expr: 
               644: name: bs
             645: argument: 
              646: expr: 
               647: literal: "tile_column_width_minus1"
             648: argument: 
              649: expr: 
               650: name: i
      651: for: 
       652: control: 
        653: init: 
         654: expr: 
          655: name: i
          656: operator: =
          657: literal: 0
        658: condition: 
         659: expr: 
          660: name: i
          661: operator: <
          662: name: num_exp_tile_rows
        663: incr: 
         664: expr: 
          665: name: i
          666: operator: ++
       667: block: 
        668: block_content: 
         669: expr_stmt: 
          670: expr: 
           671: call: 
            672: name: gf_bs_read_ue_log_idx
            673: argument_list: 
             674: argument: 
              675: expr: 
               676: name: bs
             677: argument: 
              678: expr: 
               679: literal: "tile_row_height_minus1"
             680: argument: 
              681: expr: 
               682: name: i
      683: comment: //todo parse the rest
      684: return: 
       685: expr: 
        686: name: pps_id
  687: comment: //todo parse the rest
  688: return: 
   689: expr: 
    690: name: pps_id
=====
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: u32
   5: name: i
 6: decl_stmt: 
  7: decl: 
   8: type: 
    9: name: s32
   10: name: pps_id
 11: decl_stmt: 
  12: decl: 
   13: type: 
    14: name: VVC_PPS
    15: modifier: *
   16: name: pps
 17: comment: //NAL header already read
 18: expr_stmt: 
  19: expr: 
   20: name: pps_id
   21: operator: =
   22: call: 
    23: name: gf_bs_read_int_log
    24: argument_list: 
     25: argument: 
      26: expr: 
       27: name: bs
     28: argument: 
      29: expr: 
       30: literal: 6
     31: argument: 
      32: expr: 
       33: literal: "pps_id"
 34: if_stmt: 
  35: if: 
   36: condition: 
    37: expr: 
     38: operator: (
     39: name: pps_id
     40: operator: <
     41: literal: 0
     42: operator: )
     43: operator: ||
     44: operator: (
     45: name: pps_id
     46: operator: >=
     47: literal: 64
     48: operator: )
   49: block: 
    50: block_content: 
     51: expr_stmt: 
      52: expr: 
       53: call: 
        54: name: GF_LOG
        55: argument_list: 
         56: argument: 
          57: expr: 
           58: name: GF_LOG_ERROR
         59: argument: 
          60: expr: 
           61: name: GF_LOG_CODING
         62: argument: 
          63: expr: 
           64: operator: (
           65: literal: "[VVC] wrong PPS ID %d in PPS\n"
           66: operator: ,
           67: name: pps_id
           68: operator: )
     69: return: 
      70: expr: 
       71: operator: -
       72: literal: 1
 73: expr_stmt: 
  74: expr: 
   75: name: pps
   76: operator: =
   77: operator: &
   78: name: 
    79: name: vvc
    80: operator: ->
    81: name: pps
    82: index: 
     83: expr: 
      84: name: pps_id
 85: if_stmt: 
  86: if: 
   87: condition: 
    88: expr: 
     89: operator: !
     90: name: 
      91: name: pps
      92: operator: ->
      93: name: state
   94: block: 
    95: block_content: 
     96: expr_stmt: 
      97: expr: 
       98: name: 
        99: name: pps
        100: operator: ->
        101: name: id
       102: operator: =
       103: name: pps_id
     104: expr_stmt: 
      105: expr: 
       106: name: 
        107: name: pps
        108: operator: ->
        109: name: state
       110: operator: =
       111: literal: 1
 112: expr_stmt: 
  113: expr: 
   114: name: 
    115: name: pps
    116: operator: ->
    117: name: sps_id
   118: operator: =
   119: call: 
    120: name: gf_bs_read_int_log
    121: argument_list: 
     122: argument: 
      123: expr: 
       124: name: bs
     125: argument: 
      126: expr: 
       127: literal: 4
     128: argument: 
      129: expr: 
       130: literal: "sps_id"
 131: if_stmt: 
  132: if: 
   133: condition: 
    134: expr: 
     135: name: 
      136: name: pps
      137: operator: ->
      138: name: sps_id
     139: operator: >=
     140: literal: 16
   141: block: 
    142: block_content: 
     143: expr_stmt: 
      144: expr: 
       145: call: 
        146: name: GF_LOG
        147: argument_list: 
         148: argument: 
          149: expr: 
           150: name: GF_LOG_ERROR
         151: argument: 
          152: expr: 
           153: name: GF_LOG_CODING
         154: argument: 
          155: expr: 
           156: operator: (
           157: literal: "[VVC] wrong SPS ID %d in PPS\n"
           158: operator: ,
           159: name: 
            160: name: pps
            161: operator: ->
            162: name: sps_id
           163: operator: )
     164: expr_stmt: 
      165: expr: 
       166: name: 
        167: name: pps
        168: operator: ->
        169: name: sps_id
       170: operator: =
       171: literal: 0
     172: return: 
      173: expr: 
       174: operator: -
       175: literal: 1
 176: expr_stmt: 
  177: expr: 
   178: name: 
    179: name: vvc
    180: operator: ->
    181: name: sps_active_idx
   182: operator: =
   183: name: 
    184: name: pps
    185: operator: ->
    186: name: sps_id
 187: comment: /*set active sps*/
 188: expr_stmt: 
  189: expr: 
   190: name: 
    191: name: pps
    192: operator: ->
    193: name: mixed_nal_types
   194: operator: =
   195: call: 
    196: name: gf_bs_read_int_log
    197: argument_list: 
     198: argument: 
      199: expr: 
       200: name: bs
     201: argument: 
      202: expr: 
       203: literal: 1
     204: argument: 
      205: expr: 
       206: literal: "mixed_nal_types"
 207: expr_stmt: 
  208: expr: 
   209: name: 
    210: name: pps
    211: operator: ->
    212: name: width
   213: operator: =
   214: call: 
    215: name: gf_bs_read_ue_log
    216: argument_list: 
     217: argument: 
      218: expr: 
       219: name: bs
     220: argument: 
      221: expr: 
       222: literal: "width"
 223: expr_stmt: 
  224: expr: 
   225: name: 
    226: name: pps
    227: operator: ->
    228: name: height
   229: operator: =
   230: call: 
    231: name: gf_bs_read_ue_log
    232: argument_list: 
     233: argument: 
      234: expr: 
       235: name: bs
     236: argument: 
      237: expr: 
       238: literal: "height"
 239: expr_stmt: 
  240: expr: 
   241: name: 
    242: name: pps
    243: operator: ->
    244: name: conf_window
   245: operator: =
   246: call: 
    247: name: gf_bs_read_int_log
    248: argument_list: 
     249: argument: 
      250: expr: 
       251: name: bs
     252: argument: 
      253: expr: 
       254: literal: 1
     255: argument: 
      256: expr: 
       257: literal: "conformance_window_flag"
 258: if_stmt: 
  259: if: 
   260: condition: 
    261: expr: 
     262: name: 
      263: name: pps
      264: operator: ->
      265: name: conf_window
   266: block: 
    267: block_content: 
     268: expr_stmt: 
      269: expr: 
       270: name: 
        271: name: pps
        272: operator: ->
        273: name: cw_left
       274: operator: =
       275: call: 
        276: name: gf_bs_read_ue_log
        277: argument_list: 
         278: argument: 
          279: expr: 
           280: name: bs
         281: argument: 
          282: expr: 
           283: literal: "conf_win_left_offset"
     284: expr_stmt: 
      285: expr: 
       286: name: 
        287: name: pps
        288: operator: ->
        289: name: cw_right
       290: operator: =
       291: call: 
        292: name: gf_bs_read_ue_log
        293: argument_list: 
         294: argument: 
          295: expr: 
           296: name: bs
         297: argument: 
          298: expr: 
           299: literal: "conf_win_right_offset"
     300: expr_stmt: 
      301: expr: 
       302: name: 
        303: name: pps
        304: operator: ->
        305: name: cw_top
       306: operator: =
       307: call: 
        308: name: gf_bs_read_ue_log
        309: argument_list: 
         310: argument: 
          311: expr: 
           312: name: bs
         313: argument: 
          314: expr: 
           315: literal: "conf_win_top_offset"
     316: expr_stmt: 
      317: expr: 
       318: name: 
        319: name: pps
        320: operator: ->
        321: name: cw_bottom
       322: operator: =
       323: call: 
        324: name: gf_bs_read_ue_log
        325: argument_list: 
         326: argument: 
          327: expr: 
           328: name: bs
         329: argument: 
          330: expr: 
           331: literal: "conf_win_bottom_offset"
 332: comment: //scaling window
 333: if_stmt: 
  334: if: 
   335: condition: 
    336: expr: 
     337: call: 
      338: name: gf_bs_read_int_log
      339: argument_list: 
       340: argument: 
        341: expr: 
         342: name: bs
       343: argument: 
        344: expr: 
         345: literal: 1
       346: argument: 
        347: expr: 
         348: literal: "scaling_window_explicit_signalling_flag"
   349: block: 
    350: block_content: 
     351: expr_stmt: 
      352: expr: 
       353: call: 
        354: name: gf_bs_read_se_log
        355: argument_list: 
         356: argument: 
          357: expr: 
           358: name: bs
         359: argument: 
          360: expr: 
           361: literal: "scaling_win_left_offset"
     362: expr_stmt: 
      363: expr: 
       364: call: 
        365: name: gf_bs_read_se_log
        366: argument_list: 
         367: argument: 
          368: expr: 
           369: name: bs
         370: argument: 
          371: expr: 
           372: literal: "scaling_win_right_offset"
     373: expr_stmt: 
      374: expr: 
       375: call: 
        376: name: gf_bs_read_se_log
        377: argument_list: 
         378: argument: 
          379: expr: 
           380: name: bs
         381: argument: 
          382: expr: 
           383: literal: "scaling_win_top_offset"
     384: expr_stmt: 
      385: expr: 
       386: call: 
        387: name: gf_bs_read_se_log
        388: argument_list: 
         389: argument: 
          390: expr: 
           391: name: bs
         392: argument: 
          393: expr: 
           394: literal: "scaling_win_bottom_offset"
 395: expr_stmt: 
  396: expr: 
   397: name: 
    398: name: pps
    399: operator: ->
    400: name: output_flag_present_flag
   401: operator: =
   402: call: 
    403: name: gf_bs_read_int_log
    404: argument_list: 
     405: argument: 
      406: expr: 
       407: name: bs
     408: argument: 
      409: expr: 
       410: literal: 1
     411: argument: 
      412: expr: 
       413: literal: "output_flag_present_flag"
 414: expr_stmt: 
  415: expr: 
   416: name: 
    417: name: pps
    418: operator: ->
    419: name: no_pic_partition_flag
   420: operator: =
   421: call: 
    422: name: gf_bs_read_int_log
    423: argument_list: 
     424: argument: 
      425: expr: 
       426: name: bs
     427: argument: 
      428: expr: 
       429: literal: 1
     430: argument: 
      431: expr: 
       432: literal: "no_pic_partition_flag"
 433: expr_stmt: 
  434: expr: 
   435: name: 
    436: name: pps
    437: operator: ->
    438: name: subpic_id_mapping_present_flag
   439: operator: =
   440: call: 
    441: name: gf_bs_read_int_log
    442: argument_list: 
     443: argument: 
      444: expr: 
       445: name: bs
     446: argument: 
      447: expr: 
       448: literal: 1
     449: argument: 
      450: expr: 
       451: literal: "subpic_id_mapping_present_flag"
 452: if_stmt: 
  453: if: 
   454: condition: 
    455: expr: 
     456: name: 
      457: name: pps
      458: operator: ->
      459: name: subpic_id_mapping_present_flag
   460: block: 
    461: block_content: 
     462: decl_stmt: 
      463: decl: 
       464: type: 
        465: name: u32
       466: name: pps_subpic_id_len
      467: decl: 
       468: type: 
       469: name: pps_num_subpics
       470: init: 
        471: expr: 
         472: literal: 0
     473: if_stmt: 
      474: if: 
       475: condition: 
        476: expr: 
         477: operator: !
         478: name: 
          479: name: pps
          480: operator: ->
          481: name: no_pic_partition_flag
       482: block: 
        483: block_content: 
         484: expr_stmt: 
          485: expr: 
           486: name: pps_num_subpics
           487: operator: =
           488: literal: 1
           489: operator: +
           490: call: 
            491: name: gf_bs_read_ue_log
            492: argument_list: 
             493: argument: 
              494: expr: 
               495: name: bs
             496: argument: 
              497: expr: 
               498: literal: "pps_num_subpics_minus1"
     499: expr_stmt: 
      500: expr: 
       501: name: pps_subpic_id_len
       502: operator: =
       503: literal: 1
       504: operator: +
       505: call: 
        506: name: gf_bs_read_ue
        507: argument_list: 
         508: argument: 
          509: expr: 
           510: name: bs
     511: for: 
      512: control: 
       513: init: 
        514: expr: 
         515: name: i
         516: operator: =
         517: literal: 0
       518: condition: 
        519: expr: 
         520: name: i
         521: operator: <
         522: name: pps_num_subpics
       523: incr: 
        524: expr: 
         525: name: i
         526: operator: ++
      527: block: 
       528: block_content: 
        529: expr_stmt: 
         530: expr: 
          531: call: 
           532: name: gf_bs_read_int_log_idx
           533: argument_list: 
            534: argument: 
             535: expr: 
              536: name: bs
            537: argument: 
             538: expr: 
              539: name: pps_subpic_id_len
            540: argument: 
             541: expr: 
              542: literal: "subpic_id"
            543: argument: 
             544: expr: 
              545: name: i
 546: if_stmt: 
  547: if: 
   548: condition: 
    549: expr: 
     550: operator: !
     551: name: 
      552: name: pps
      553: operator: ->
      554: name: no_pic_partition_flag
   555: block: 
    556: block_content: 
     557: expr_stmt: 
      558: expr: 
       559: call: 
        560: name: gf_bs_read_int_log
        561: argument_list: 
         562: argument: 
          563: expr: 
           564: name: bs
         565: argument: 
          566: expr: 
           567: literal: 2
         568: argument: 
          569: expr: 
           570: literal: "pps_log2_ctu_size_minus5"
     571: decl_stmt: 
      572: decl: 
       573: type: 
        574: name: u32
       575: name: num_exp_tile_columns
       576: init: 
        577: expr: 
         578: literal: 1
         579: operator: +
         580: call: 
          581: name: gf_bs_read_ue_log
          582: argument_list: 
           583: argument: 
            584: expr: 
             585: name: bs
           586: argument: 
            587: expr: 
             588: literal: "num_exp_tile_columns_minus1"
     589: decl_stmt: 
      590: decl: 
       591: type: 
        592: name: u32
       593: name: num_exp_tile_rows
       594: init: 
        595: expr: 
         596: literal: 1
         597: operator: +
         598: call: 
          599: name: gf_bs_read_ue_log
          600: argument_list: 
           601: argument: 
            602: expr: 
             603: name: bs
           604: argument: 
            605: expr: 
             606: literal: "num_exp_tile_rows_minus1"
     607: for: 
      608: control: 
       609: init: 
        610: expr: 
         611: name: i
         612: operator: =
         613: literal: 0
       614: condition: 
        615: expr: 
         616: name: i
         617: operator: <
         618: name: num_exp_tile_columns
       619: incr: 
        620: expr: 
         621: name: i
         622: operator: ++
      623: block: 
       624: block_content: 
        625: expr_stmt: 
         626: expr: 
          627: call: 
           628: name: gf_bs_read_ue_log_idx
           629: argument_list: 
            630: argument: 
             631: expr: 
              632: name: bs
            633: argument: 
             634: expr: 
              635: literal: "tile_column_width_minus1"
            636: argument: 
             637: expr: 
              638: name: i
     639: for: 
      640: control: 
       641: init: 
        642: expr: 
         643: name: i
         644: operator: =
         645: literal: 0
       646: condition: 
        647: expr: 
         648: name: i
         649: operator: <
         650: name: num_exp_tile_rows
       651: incr: 
        652: expr: 
         653: name: i
         654: operator: ++
      655: block: 
       656: block_content: 
        657: expr_stmt: 
         658: expr: 
          659: call: 
           660: name: gf_bs_read_ue_log_idx
           661: argument_list: 
            662: argument: 
             663: expr: 
              664: name: bs
            665: argument: 
             666: expr: 
              667: literal: "tile_row_height_minus1"
            668: argument: 
             669: expr: 
              670: name: i
     671: comment: //todo parse the rest
     672: return: 
      673: expr: 
       674: name: pps_id
 675: comment: //todo parse the rest
 676: return: 
  677: expr: 
   678: name: pps_id

----------------------------------------
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: u32
   5: name: i
 6: decl_stmt: 
  7: decl: 
   8: type: 
    9: name: s32
   10: name: pps_id
 11: decl_stmt: 
  12: decl: 
   13: type: 
    14: name: VVC_PPS
    15: modifier: *
   16: name: pps
 17: comment: //NAL header already read
 18: expr_stmt: 
  19: expr: 
   20: name: pps_id
   21: operator: =
   22: call: 
    23: name: gf_bs_read_int_log
    24: argument_list: 
     25: argument: 
      26: expr: 
       27: name: bs
     28: argument: 
      29: expr: 
       30: literal: 6
     31: argument: 
      32: expr: 
       33: literal: "pps_id"
 34: if_stmt: 
  35: if: 
   36: condition: 
    37: expr: 
     38: operator: (
     39: name: pps_id
     40: operator: <
     41: literal: 0
     42: operator: )
     43: operator: ||
     44: operator: (
     45: name: pps_id
     46: operator: >=
     47: literal: 64
     48: operator: )
   49: block: 
    50: block_content: 
     51: expr_stmt: 
      52: expr: 
       53: call: 
        54: name: GF_LOG
        55: argument_list: 
         56: argument: 
          57: expr: 
           58: name: GF_LOG_ERROR
         59: argument: 
          60: expr: 
           61: name: GF_LOG_CODING
         62: argument: 
          63: expr: 
           64: operator: (
           65: literal: "[VVC] wrong PPS ID %d in PPS\n"
           66: operator: ,
           67: name: pps_id
           68: operator: )
     69: return: 
      70: expr: 
       71: operator: -
       72: literal: 1
 73: expr_stmt: 
  74: expr: 
   75: name: pps
   76: operator: =
   77: operator: &
   78: name: 
    79: name: vvc
    80: operator: ->
    81: name: pps
    82: index: 
     83: expr: 
      84: name: pps_id
 85: if_stmt: 
  86: if: 
   87: condition: 
    88: expr: 
     89: operator: !
     90: name: 
      91: name: pps
      92: operator: ->
      93: name: state
   94: block: 
    95: block_content: 
     96: expr_stmt: 
      97: expr: 
       98: name: 
        99: name: pps
        100: operator: ->
        101: name: id
       102: operator: =
       103: name: pps_id
     104: expr_stmt: 
      105: expr: 
       106: name: 
        107: name: pps
        108: operator: ->
        109: name: state
       110: operator: =
       111: literal: 1
 112: expr_stmt: 
  113: expr: 
   114: name: 
    115: name: pps
    116: operator: ->
    117: name: sps_id
   118: operator: =
   119: call: 
    120: name: gf_bs_read_int_log
    121: argument_list: 
     122: argument: 
      123: expr: 
       124: name: bs
     125: argument: 
      126: expr: 
       127: literal: 4
     128: argument: 
      129: expr: 
       130: literal: "sps_id"
 131: if_stmt: 
  132: if: 
   133: condition: 
    134: expr: 
     135: operator: (
     136: name: 
      137: name: pps
      138: operator: ->
      139: name: sps_id
     140: operator: <
     141: literal: 0
     142: operator: )
     143: operator: ||
     144: operator: (
     145: name: 
      146: name: pps
      147: operator: ->
      148: name: sps_id
     149: operator: >=
     150: literal: 16
     151: operator: )
   152: block: 
    153: block_content: 
     154: expr_stmt: 
      155: expr: 
       156: call: 
        157: name: GF_LOG
        158: argument_list: 
         159: argument: 
          160: expr: 
           161: name: GF_LOG_ERROR
         162: argument: 
          163: expr: 
           164: name: GF_LOG_CODING
         165: argument: 
          166: expr: 
           167: operator: (
           168: literal: "[VVC] wrong SPS ID %d in PPS\n"
           169: operator: ,
           170: name: 
            171: name: pps
            172: operator: ->
            173: name: sps_id
           174: operator: )
     175: expr_stmt: 
      176: expr: 
       177: name: 
        178: name: pps
        179: operator: ->
        180: name: sps_id
       181: operator: =
       182: literal: 0
     183: return: 
      184: expr: 
       185: operator: -
       186: literal: 1
 187: expr_stmt: 
  188: expr: 
   189: name: 
    190: name: vvc
    191: operator: ->
    192: name: sps_active_idx
   193: operator: =
   194: name: 
    195: name: pps
    196: operator: ->
    197: name: sps_id
 198: comment: /*set active sps*/
 199: expr_stmt: 
  200: expr: 
   201: name: 
    202: name: pps
    203: operator: ->
    204: name: mixed_nal_types
   205: operator: =
   206: call: 
    207: name: gf_bs_read_int_log
    208: argument_list: 
     209: argument: 
      210: expr: 
       211: name: bs
     212: argument: 
      213: expr: 
       214: literal: 1
     215: argument: 
      216: expr: 
       217: literal: "mixed_nal_types"
 218: expr_stmt: 
  219: expr: 
   220: name: 
    221: name: pps
    222: operator: ->
    223: name: width
   224: operator: =
   225: call: 
    226: name: gf_bs_read_ue_log
    227: argument_list: 
     228: argument: 
      229: expr: 
       230: name: bs
     231: argument: 
      232: expr: 
       233: literal: "width"
 234: expr_stmt: 
  235: expr: 
   236: name: 
    237: name: pps
    238: operator: ->
    239: name: height
   240: operator: =
   241: call: 
    242: name: gf_bs_read_ue_log
    243: argument_list: 
     244: argument: 
      245: expr: 
       246: name: bs
     247: argument: 
      248: expr: 
       249: literal: "height"
 250: expr_stmt: 
  251: expr: 
   252: name: 
    253: name: pps
    254: operator: ->
    255: name: conf_window
   256: operator: =
   257: call: 
    258: name: gf_bs_read_int_log
    259: argument_list: 
     260: argument: 
      261: expr: 
       262: name: bs
     263: argument: 
      264: expr: 
       265: literal: 1
     266: argument: 
      267: expr: 
       268: literal: "conformance_window_flag"
 269: if_stmt: 
  270: if: 
   271: condition: 
    272: expr: 
     273: name: 
      274: name: pps
      275: operator: ->
      276: name: conf_window
   277: block: 
    278: block_content: 
     279: expr_stmt: 
      280: expr: 
       281: name: 
        282: name: pps
        283: operator: ->
        284: name: cw_left
       285: operator: =
       286: call: 
        287: name: gf_bs_read_ue_log
        288: argument_list: 
         289: argument: 
          290: expr: 
           291: name: bs
         292: argument: 
          293: expr: 
           294: literal: "conf_win_left_offset"
     295: expr_stmt: 
      296: expr: 
       297: name: 
        298: name: pps
        299: operator: ->
        300: name: cw_right
       301: operator: =
       302: call: 
        303: name: gf_bs_read_ue_log
        304: argument_list: 
         305: argument: 
          306: expr: 
           307: name: bs
         308: argument: 
          309: expr: 
           310: literal: "conf_win_right_offset"
     311: expr_stmt: 
      312: expr: 
       313: name: 
        314: name: pps
        315: operator: ->
        316: name: cw_top
       317: operator: =
       318: call: 
        319: name: gf_bs_read_ue_log
        320: argument_list: 
         321: argument: 
          322: expr: 
           323: name: bs
         324: argument: 
          325: expr: 
           326: literal: "conf_win_top_offset"
     327: expr_stmt: 
      328: expr: 
       329: name: 
        330: name: pps
        331: operator: ->
        332: name: cw_bottom
       333: operator: =
       334: call: 
        335: name: gf_bs_read_ue_log
        336: argument_list: 
         337: argument: 
          338: expr: 
           339: name: bs
         340: argument: 
          341: expr: 
           342: literal: "conf_win_bottom_offset"
 343: comment: //scaling window
 344: if_stmt: 
  345: if: 
   346: condition: 
    347: expr: 
     348: call: 
      349: name: gf_bs_read_int_log
      350: argument_list: 
       351: argument: 
        352: expr: 
         353: name: bs
       354: argument: 
        355: expr: 
         356: literal: 1
       357: argument: 
        358: expr: 
         359: literal: "scaling_window_explicit_signalling_flag"
   360: block: 
    361: block_content: 
     362: expr_stmt: 
      363: expr: 
       364: call: 
        365: name: gf_bs_read_se_log
        366: argument_list: 
         367: argument: 
          368: expr: 
           369: name: bs
         370: argument: 
          371: expr: 
           372: literal: "scaling_win_left_offset"
     373: expr_stmt: 
      374: expr: 
       375: call: 
        376: name: gf_bs_read_se_log
        377: argument_list: 
         378: argument: 
          379: expr: 
           380: name: bs
         381: argument: 
          382: expr: 
           383: literal: "scaling_win_right_offset"
     384: expr_stmt: 
      385: expr: 
       386: call: 
        387: name: gf_bs_read_se_log
        388: argument_list: 
         389: argument: 
          390: expr: 
           391: name: bs
         392: argument: 
          393: expr: 
           394: literal: "scaling_win_top_offset"
     395: expr_stmt: 
      396: expr: 
       397: call: 
        398: name: gf_bs_read_se_log
        399: argument_list: 
         400: argument: 
          401: expr: 
           402: name: bs
         403: argument: 
          404: expr: 
           405: literal: "scaling_win_bottom_offset"
 406: expr_stmt: 
  407: expr: 
   408: name: 
    409: name: pps
    410: operator: ->
    411: name: output_flag_present_flag
   412: operator: =
   413: call: 
    414: name: gf_bs_read_int_log
    415: argument_list: 
     416: argument: 
      417: expr: 
       418: name: bs
     419: argument: 
      420: expr: 
       421: literal: 1
     422: argument: 
      423: expr: 
       424: literal: "output_flag_present_flag"
 425: expr_stmt: 
  426: expr: 
   427: name: 
    428: name: pps
    429: operator: ->
    430: name: no_pic_partition_flag
   431: operator: =
   432: call: 
    433: name: gf_bs_read_int_log
    434: argument_list: 
     435: argument: 
      436: expr: 
       437: name: bs
     438: argument: 
      439: expr: 
       440: literal: 1
     441: argument: 
      442: expr: 
       443: literal: "no_pic_partition_flag"
 444: expr_stmt: 
  445: expr: 
   446: name: 
    447: name: pps
    448: operator: ->
    449: name: subpic_id_mapping_present_flag
   450: operator: =
   451: call: 
    452: name: gf_bs_read_int_log
    453: argument_list: 
     454: argument: 
      455: expr: 
       456: name: bs
     457: argument: 
      458: expr: 
       459: literal: 1
     460: argument: 
      461: expr: 
       462: literal: "subpic_id_mapping_present_flag"
 463: if_stmt: 
  464: if: 
   465: condition: 
    466: expr: 
     467: name: 
      468: name: pps
      469: operator: ->
      470: name: subpic_id_mapping_present_flag
   471: block: 
    472: block_content: 
     473: decl_stmt: 
      474: decl: 
       475: type: 
        476: name: u32
       477: name: pps_subpic_id_len
      478: decl: 
       479: type: 
       480: name: pps_num_subpics
       481: init: 
        482: expr: 
         483: literal: 0
     484: if_stmt: 
      485: if: 
       486: condition: 
        487: expr: 
         488: operator: !
         489: name: 
          490: name: pps
          491: operator: ->
          492: name: no_pic_partition_flag
       493: block: 
        494: block_content: 
         495: expr_stmt: 
          496: expr: 
           497: name: pps_num_subpics
           498: operator: =
           499: literal: 1
           500: operator: +
           501: call: 
            502: name: gf_bs_read_ue_log
            503: argument_list: 
             504: argument: 
              505: expr: 
               506: name: bs
             507: argument: 
              508: expr: 
               509: literal: "pps_num_subpics_minus1"
     510: expr_stmt: 
      511: expr: 
       512: name: pps_subpic_id_len
       513: operator: =
       514: literal: 1
       515: operator: +
       516: call: 
        517: name: gf_bs_read_ue
        518: argument_list: 
         519: argument: 
          520: expr: 
           521: name: bs
     522: for: 
      523: control: 
       524: init: 
        525: expr: 
         526: name: i
         527: operator: =
         528: literal: 0
       529: condition: 
        530: expr: 
         531: name: i
         532: operator: <
         533: name: pps_num_subpics
       534: incr: 
        535: expr: 
         536: name: i
         537: operator: ++
      538: block: 
       539: block_content: 
        540: expr_stmt: 
         541: expr: 
          542: call: 
           543: name: gf_bs_read_int_log_idx
           544: argument_list: 
            545: argument: 
             546: expr: 
              547: name: bs
            548: argument: 
             549: expr: 
              550: name: pps_subpic_id_len
            551: argument: 
             552: expr: 
              553: literal: "subpic_id"
            554: argument: 
             555: expr: 
              556: name: i
 557: if_stmt: 
  558: if: 
   559: condition: 
    560: expr: 
     561: operator: !
     562: name: 
      563: name: pps
      564: operator: ->
      565: name: no_pic_partition_flag
   566: block: 
    567: block_content: 
     568: expr_stmt: 
      569: expr: 
       570: call: 
        571: name: gf_bs_read_int_log
        572: argument_list: 
         573: argument: 
          574: expr: 
           575: name: bs
         576: argument: 
          577: expr: 
           578: literal: 2
         579: argument: 
          580: expr: 
           581: literal: "pps_log2_ctu_size_minus5"
     582: decl_stmt: 
      583: decl: 
       584: type: 
        585: name: u32
       586: name: num_exp_tile_columns
       587: init: 
        588: expr: 
         589: literal: 1
         590: operator: +
         591: call: 
          592: name: gf_bs_read_ue_log
          593: argument_list: 
           594: argument: 
            595: expr: 
             596: name: bs
           597: argument: 
            598: expr: 
             599: literal: "num_exp_tile_columns_minus1"
     600: decl_stmt: 
      601: decl: 
       602: type: 
        603: name: u32
       604: name: num_exp_tile_rows
       605: init: 
        606: expr: 
         607: literal: 1
         608: operator: +
         609: call: 
          610: name: gf_bs_read_ue_log
          611: argument_list: 
           612: argument: 
            613: expr: 
             614: name: bs
           615: argument: 
            616: expr: 
             617: literal: "num_exp_tile_rows_minus1"
     618: for: 
      619: control: 
       620: init: 
        621: expr: 
         622: name: i
         623: operator: =
         624: literal: 0
       625: condition: 
        626: expr: 
         627: name: i
         628: operator: <
         629: name: num_exp_tile_columns
       630: incr: 
        631: expr: 
         632: name: i
         633: operator: ++
      634: block: 
       635: block_content: 
        636: expr_stmt: 
         637: expr: 
          638: call: 
           639: name: gf_bs_read_ue_log_idx
           640: argument_list: 
            641: argument: 
             642: expr: 
              643: name: bs
            644: argument: 
             645: expr: 
              646: literal: "tile_column_width_minus1"
            647: argument: 
             648: expr: 
              649: name: i
     650: for: 
      651: control: 
       652: init: 
        653: expr: 
         654: name: i
         655: operator: =
         656: literal: 0
       657: condition: 
        658: expr: 
         659: name: i
         660: operator: <
         661: name: num_exp_tile_rows
       662: incr: 
        663: expr: 
         664: name: i
         665: operator: ++
      666: block: 
       667: block_content: 
        668: expr_stmt: 
         669: expr: 
          670: call: 
           671: name: gf_bs_read_ue_log_idx
           672: argument_list: 
            673: argument: 
             674: expr: 
              675: name: bs
            676: argument: 
             677: expr: 
              678: literal: "tile_row_height_minus1"
            679: argument: 
             680: expr: 
              681: name: i
     682: comment: //todo parse the rest
     683: return: 
      684: expr: 
       685: name: pps_id
 686: comment: //todo parse the rest
 687: return: 
  688: expr: 
   689: name: pps_id
=====
0: if_stmt: 
 1: if: 
  2: condition: 
   3: expr: 
    4: name: 
     5: name: pps
     6: operator: ->
     7: name: sps_id
    8: operator: >=
    9: literal: 16
  10: block: 
   11: block_content: 
    12: expr_stmt: 
     13: expr: 
      14: call: 
       15: name: GF_LOG
       16: argument_list: 
        17: argument: 
         18: expr: 
          19: name: GF_LOG_ERROR
        20: argument: 
         21: expr: 
          22: name: GF_LOG_CODING
        23: argument: 
         24: expr: 
          25: operator: (
          26: literal: "[VVC] wrong SPS ID %d in PPS\n"
          27: operator: ,
          28: name: 
           29: name: pps
           30: operator: ->
           31: name: sps_id
          32: operator: )
    33: expr_stmt: 
     34: expr: 
      35: name: 
       36: name: pps
       37: operator: ->
       38: name: sps_id
      39: operator: =
      40: literal: 0
    41: return: 
     42: expr: 
      43: operator: -
      44: literal: 1

----------------------------------------
0: if_stmt: 
 1: if: 
  2: condition: 
   3: expr: 
    4: operator: (
    5: name: 
     6: name: pps
     7: operator: ->
     8: name: sps_id
    9: operator: <
    10: literal: 0
    11: operator: )
    12: operator: ||
    13: operator: (
    14: name: 
     15: name: pps
     16: operator: ->
     17: name: sps_id
    18: operator: >=
    19: literal: 16
    20: operator: )
  21: block: 
   22: block_content: 
    23: expr_stmt: 
     24: expr: 
      25: call: 
       26: name: GF_LOG
       27: argument_list: 
        28: argument: 
         29: expr: 
          30: name: GF_LOG_ERROR
        31: argument: 
         32: expr: 
          33: name: GF_LOG_CODING
        34: argument: 
         35: expr: 
          36: operator: (
          37: literal: "[VVC] wrong SPS ID %d in PPS\n"
          38: operator: ,
          39: name: 
           40: name: pps
           41: operator: ->
           42: name: sps_id
          43: operator: )
    44: expr_stmt: 
     45: expr: 
      46: name: 
       47: name: pps
       48: operator: ->
       49: name: sps_id
      50: operator: =
      51: literal: 0
    52: return: 
     53: expr: 
      54: operator: -
      55: literal: 1
=====
0: if: 
 1: condition: 
  2: expr: 
   3: name: 
    4: name: pps
    5: operator: ->
    6: name: sps_id
   7: operator: >=
   8: literal: 16
 9: block: 
  10: block_content: 
   11: expr_stmt: 
    12: expr: 
     13: call: 
      14: name: GF_LOG
      15: argument_list: 
       16: argument: 
        17: expr: 
         18: name: GF_LOG_ERROR
       19: argument: 
        20: expr: 
         21: name: GF_LOG_CODING
       22: argument: 
        23: expr: 
         24: operator: (
         25: literal: "[VVC] wrong SPS ID %d in PPS\n"
         26: operator: ,
         27: name: 
          28: name: pps
          29: operator: ->
          30: name: sps_id
         31: operator: )
   32: expr_stmt: 
    33: expr: 
     34: name: 
      35: name: pps
      36: operator: ->
      37: name: sps_id
     38: operator: =
     39: literal: 0
   40: return: 
    41: expr: 
     42: operator: -
     43: literal: 1

----------------------------------------
0: if: 
 1: condition: 
  2: expr: 
   3: operator: (
   4: name: 
    5: name: pps
    6: operator: ->
    7: name: sps_id
   8: operator: <
   9: literal: 0
   10: operator: )
   11: operator: ||
   12: operator: (
   13: name: 
    14: name: pps
    15: operator: ->
    16: name: sps_id
   17: operator: >=
   18: literal: 16
   19: operator: )
 20: block: 
  21: block_content: 
   22: expr_stmt: 
    23: expr: 
     24: call: 
      25: name: GF_LOG
      26: argument_list: 
       27: argument: 
        28: expr: 
         29: name: GF_LOG_ERROR
       30: argument: 
        31: expr: 
         32: name: GF_LOG_CODING
       33: argument: 
        34: expr: 
         35: operator: (
         36: literal: "[VVC] wrong SPS ID %d in PPS\n"
         37: operator: ,
         38: name: 
          39: name: pps
          40: operator: ->
          41: name: sps_id
         42: operator: )
   43: expr_stmt: 
    44: expr: 
     45: name: 
      46: name: pps
      47: operator: ->
      48: name: sps_id
     49: operator: =
     50: literal: 0
   51: return: 
    52: expr: 
     53: operator: -
     54: literal: 1
=====
0: condition: 
 1: expr: 
  2: name: 
   3: name: pps
   4: operator: ->
   5: name: sps_id
  6: operator: >=
  7: literal: 16

----------------------------------------
0: condition: 
 1: expr: 
  2: operator: (
  3: name: 
   4: name: pps
   5: operator: ->
   6: name: sps_id
  7: operator: <
  8: literal: 0
  9: operator: )
  10: operator: ||
  11: operator: (
  12: name: 
   13: name: pps
   14: operator: ->
   15: name: sps_id
  16: operator: >=
  17: literal: 16
  18: operator: )
=====
0: expr: 
 1: name: 
  2: name: pps
  3: operator: ->
  4: name: sps_id
 5: operator: >=
 6: literal: 16

----------------------------------------
0: expr: 
 1: operator: (
 2: name: 
  3: name: pps
  4: operator: ->
  5: name: sps_id
 6: operator: <
 7: literal: 0
 8: operator: )
 9: operator: ||
 10: operator: (
 11: name: 
  12: name: pps
  13: operator: ->
  14: name: sps_id
 15: operator: >=
 16: literal: 16
 17: operator: )
=====
