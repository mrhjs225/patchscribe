0: unit: 
 1: function: 
  2: type: 
   3: specifier: static
   4: name: s32
  5: name: gf_hevc_read_pps_bs_internal
  6: parameter_list: 
   7: parameter: 
    8: decl: 
     9: type: 
      10: name: GF_BitStream
      11: modifier: *
     12: name: bs
   13: parameter: 
    14: decl: 
     15: type: 
      16: name: HEVCState
      17: modifier: *
     18: name: hevc
  19: block: 
   20: block_content: 
    21: decl_stmt: 
     22: decl: 
      23: type: 
       24: name: u32
      25: name: i
    26: decl_stmt: 
     27: decl: 
      28: type: 
       29: name: s32
      30: name: pps_id
    31: decl_stmt: 
     32: decl: 
      33: type: 
       34: name: HEVC_PPS
       35: modifier: *
      36: name: pps
    37: comment: //NAL header already read
    38: expr_stmt: 
     39: expr: 
      40: name: pps_id
      41: operator: =
      42: call: 
       43: name: gf_bs_read_ue_log
       44: argument_list: 
        45: argument: 
         46: expr: 
          47: name: bs
        48: argument: 
         49: expr: 
          50: literal: "pps_id"
    51: if_stmt: 
     52: if: 
      53: condition: 
       54: expr: 
        55: operator: (
        56: name: pps_id
        57: operator: <
        58: literal: 0
        59: operator: )
        60: operator: ||
        61: operator: (
        62: name: pps_id
        63: operator: >=
        64: literal: 64
        65: operator: )
      66: block: 
       67: block_content: 
        68: expr_stmt: 
         69: expr: 
          70: call: 
           71: name: GF_LOG
           72: argument_list: 
            73: argument: 
             74: expr: 
              75: name: GF_LOG_ERROR
            76: argument: 
             77: expr: 
              78: name: GF_LOG_CODING
            79: argument: 
             80: expr: 
              81: operator: (
              82: literal: "[HEVC] wrong PPS ID %d in PPS\n"
              83: operator: ,
              84: name: pps_id
              85: operator: )
        86: return: 
         87: expr: 
          88: operator: -
          89: literal: 1
    90: expr_stmt: 
     91: expr: 
      92: name: pps
      93: operator: =
      94: operator: &
      95: name: 
       96: name: hevc
       97: operator: ->
       98: name: pps
       99: index: 
        100: expr: 
         101: name: pps_id
    102: if_stmt: 
     103: if: 
      104: condition: 
       105: expr: 
        106: operator: !
        107: name: 
         108: name: pps
         109: operator: ->
         110: name: state
      111: block: 
       112: block_content: 
        113: expr_stmt: 
         114: expr: 
          115: name: 
           116: name: pps
           117: operator: ->
           118: name: id
          119: operator: =
          120: name: pps_id
        121: expr_stmt: 
         122: expr: 
          123: name: 
           124: name: pps
           125: operator: ->
           126: name: state
          127: operator: =
          128: literal: 1
    129: expr_stmt: 
     130: expr: 
      131: name: 
       132: name: pps
       133: operator: ->
       134: name: sps_id
      135: operator: =
      136: call: 
       137: name: gf_bs_read_ue_log
       138: argument_list: 
        139: argument: 
         140: expr: 
          141: name: bs
        142: argument: 
         143: expr: 
          144: literal: "sps_id"
    145: if_stmt: 
     146: if: 
      147: condition: 
       148: expr: 
        149: name: 
         150: name: pps
         151: operator: ->
         152: name: sps_id
        153: operator: >=
        154: literal: 16
      155: block: 
       156: block_content: 
        157: expr_stmt: 
         158: expr: 
          159: call: 
           160: name: GF_LOG
           161: argument_list: 
            162: argument: 
             163: expr: 
              164: name: GF_LOG_ERROR
            165: argument: 
             166: expr: 
              167: name: GF_LOG_CODING
            168: argument: 
             169: expr: 
              170: operator: (
              171: literal: "[HEVC] wrong SPS ID %d in PPS\n"
              172: operator: ,
              173: name: 
               174: name: pps
               175: operator: ->
               176: name: sps_id
              177: operator: )
        178: expr_stmt: 
         179: expr: 
          180: name: 
           181: name: pps
           182: operator: ->
           183: name: sps_id
          184: operator: =
          185: literal: 0
        186: return: 
         187: expr: 
          188: operator: -
          189: literal: 1
    190: expr_stmt: 
     191: expr: 
      192: name: 
       193: name: hevc
       194: operator: ->
       195: name: sps_active_idx
      196: operator: =
      197: name: 
       198: name: pps
       199: operator: ->
       200: name: sps_id
    201: comment: /*set active sps*/
    202: expr_stmt: 
     203: expr: 
      204: name: 
       205: name: pps
       206: operator: ->
       207: name: dependent_slice_segments_enabled_flag
      208: operator: =
      209: call: 
       210: name: gf_bs_read_int_log
       211: argument_list: 
        212: argument: 
         213: expr: 
          214: name: bs
        215: argument: 
         216: expr: 
          217: literal: 1
        218: argument: 
         219: expr: 
          220: literal: "dependent_slice_segments_enabled_flag"
    221: expr_stmt: 
     222: expr: 
      223: name: 
       224: name: pps
       225: operator: ->
       226: name: output_flag_present_flag
      227: operator: =
      228: call: 
       229: name: gf_bs_read_int_log
       230: argument_list: 
        231: argument: 
         232: expr: 
          233: name: bs
        234: argument: 
         235: expr: 
          236: literal: 1
        237: argument: 
         238: expr: 
          239: literal: "output_flag_present_flag"
    240: expr_stmt: 
     241: expr: 
      242: name: 
       243: name: pps
       244: operator: ->
       245: name: num_extra_slice_header_bits
      246: operator: =
      247: call: 
       248: name: gf_bs_read_int_log
       249: argument_list: 
        250: argument: 
         251: expr: 
          252: name: bs
        253: argument: 
         254: expr: 
          255: literal: 3
        256: argument: 
         257: expr: 
          258: literal: "num_extra_slice_header_bits"
    259: expr_stmt: 
     260: expr: 
      261: name: 
       262: name: pps
       263: operator: ->
       264: name: sign_data_hiding_flag
      265: operator: =
      266: call: 
       267: name: gf_bs_read_int_log
       268: argument_list: 
        269: argument: 
         270: expr: 
          271: name: bs
        272: argument: 
         273: expr: 
          274: literal: 1
        275: argument: 
         276: expr: 
          277: literal: "sign_data_hiding_flag"
    278: expr_stmt: 
     279: expr: 
      280: name: 
       281: name: pps
       282: operator: ->
       283: name: cabac_init_present_flag
      284: operator: =
      285: call: 
       286: name: gf_bs_read_int_log
       287: argument_list: 
        288: argument: 
         289: expr: 
          290: name: bs
        291: argument: 
         292: expr: 
          293: literal: 1
        294: argument: 
         295: expr: 
          296: literal: "cabac_init_present_flag"
    297: expr_stmt: 
     298: expr: 
      299: name: 
       300: name: pps
       301: operator: ->
       302: name: num_ref_idx_l0_default_active
      303: operator: =
      304: literal: 1
      305: operator: +
      306: call: 
       307: name: gf_bs_read_ue_log
       308: argument_list: 
        309: argument: 
         310: expr: 
          311: name: bs
        312: argument: 
         313: expr: 
          314: literal: "num_ref_idx_l0_default_active"
    315: expr_stmt: 
     316: expr: 
      317: name: 
       318: name: pps
       319: operator: ->
       320: name: num_ref_idx_l1_default_active
      321: operator: =
      322: literal: 1
      323: operator: +
      324: call: 
       325: name: gf_bs_read_ue_log
       326: argument_list: 
        327: argument: 
         328: expr: 
          329: name: bs
        330: argument: 
         331: expr: 
          332: literal: "num_ref_idx_l1_default_active"
    333: expr_stmt: 
     334: expr: 
      335: name: 
       336: name: pps
       337: operator: ->
       338: name: pic_init_qp_minus26
      339: operator: =
      340: call: 
       341: name: gf_bs_read_se_log
       342: argument_list: 
        343: argument: 
         344: expr: 
          345: name: bs
        346: argument: 
         347: expr: 
          348: literal: "pic_init_qp_minus26"
    349: expr_stmt: 
     350: expr: 
      351: name: 
       352: name: pps
       353: operator: ->
       354: name: constrained_intra_pred_flag
      355: operator: =
      356: call: 
       357: name: gf_bs_read_int_log
       358: argument_list: 
        359: argument: 
         360: expr: 
          361: name: bs
        362: argument: 
         363: expr: 
          364: literal: 1
        365: argument: 
         366: expr: 
          367: literal: "constrained_intra_pred_flag"
    368: expr_stmt: 
     369: expr: 
      370: name: 
       371: name: pps
       372: operator: ->
       373: name: transform_skip_enabled_flag
      374: operator: =
      375: call: 
       376: name: gf_bs_read_int_log
       377: argument_list: 
        378: argument: 
         379: expr: 
          380: name: bs
        381: argument: 
         382: expr: 
          383: literal: 1
        384: argument: 
         385: expr: 
          386: literal: "transform_skip_enabled_flag"
    387: if_stmt: 
     388: if: 
      389: condition: 
       390: expr: 
        391: operator: (
        392: name: 
         393: name: pps
         394: operator: ->
         395: name: cu_qp_delta_enabled_flag
        396: operator: =
        397: call: 
         398: name: gf_bs_read_int_log
         399: argument_list: 
          400: argument: 
           401: expr: 
            402: name: bs
          403: argument: 
           404: expr: 
            405: literal: 1
          406: argument: 
           407: expr: 
            408: literal: "cu_qp_delta_enabled_flag"
        409: operator: )
      410: block: 
       411: block_content: 
        412: expr_stmt: 
         413: expr: 
          414: name: 
           415: name: pps
           416: operator: ->
           417: name: diff_cu_qp_delta_depth
          418: operator: =
          419: call: 
           420: name: gf_bs_read_ue_log
           421: argument_list: 
            422: argument: 
             423: expr: 
              424: name: bs
            425: argument: 
             426: expr: 
              427: literal: "diff_cu_qp_delta_depth"
    428: expr_stmt: 
     429: expr: 
      430: name: 
       431: name: pps
       432: operator: ->
       433: name: pic_cb_qp_offset
      434: operator: =
      435: call: 
       436: name: gf_bs_read_se_log
       437: argument_list: 
        438: argument: 
         439: expr: 
          440: name: bs
        441: argument: 
         442: expr: 
          443: literal: "pic_cb_qp_offset"
    444: expr_stmt: 
     445: expr: 
      446: name: 
       447: name: pps
       448: operator: ->
       449: name: pic_cr_qp_offset
      450: operator: =
      451: call: 
       452: name: gf_bs_read_se_log
       453: argument_list: 
        454: argument: 
         455: expr: 
          456: name: bs
        457: argument: 
         458: expr: 
          459: literal: "pic_cr_qp_offset"
    460: expr_stmt: 
     461: expr: 
      462: name: 
       463: name: pps
       464: operator: ->
       465: name: slice_chroma_qp_offsets_present_flag
      466: operator: =
      467: call: 
       468: name: gf_bs_read_int_log
       469: argument_list: 
        470: argument: 
         471: expr: 
          472: name: bs
        473: argument: 
         474: expr: 
          475: literal: 1
        476: argument: 
         477: expr: 
          478: literal: "slice_chroma_qp_offsets_present_flag"
    479: expr_stmt: 
     480: expr: 
      481: name: 
       482: name: pps
       483: operator: ->
       484: name: weighted_pred_flag
      485: operator: =
      486: call: 
       487: name: gf_bs_read_int_log
       488: argument_list: 
        489: argument: 
         490: expr: 
          491: name: bs
        492: argument: 
         493: expr: 
          494: literal: 1
        495: argument: 
         496: expr: 
          497: literal: "weighted_pred_flag"
    498: expr_stmt: 
     499: expr: 
      500: name: 
       501: name: pps
       502: operator: ->
       503: name: weighted_bipred_flag
      504: operator: =
      505: call: 
       506: name: gf_bs_read_int_log
       507: argument_list: 
        508: argument: 
         509: expr: 
          510: name: bs
        511: argument: 
         512: expr: 
          513: literal: 1
        514: argument: 
         515: expr: 
          516: literal: "weighted_bipred_flag"
    517: expr_stmt: 
     518: expr: 
      519: name: 
       520: name: pps
       521: operator: ->
       522: name: transquant_bypass_enable_flag
      523: operator: =
      524: call: 
       525: name: gf_bs_read_int_log
       526: argument_list: 
        527: argument: 
         528: expr: 
          529: name: bs
        530: argument: 
         531: expr: 
          532: literal: 1
        533: argument: 
         534: expr: 
          535: literal: "transquant_bypass_enable_flag"
    536: expr_stmt: 
     537: expr: 
      538: name: 
       539: name: pps
       540: operator: ->
       541: name: tiles_enabled_flag
      542: operator: =
      543: call: 
       544: name: gf_bs_read_int_log
       545: argument_list: 
        546: argument: 
         547: expr: 
          548: name: bs
        549: argument: 
         550: expr: 
          551: literal: 1
        552: argument: 
         553: expr: 
          554: literal: "tiles_enabled_flag"
    555: expr_stmt: 
     556: expr: 
      557: name: 
       558: name: pps
       559: operator: ->
       560: name: entropy_coding_sync_enabled_flag
      561: operator: =
      562: call: 
       563: name: gf_bs_read_int_log
       564: argument_list: 
        565: argument: 
         566: expr: 
          567: name: bs
        568: argument: 
         569: expr: 
          570: literal: 1
        571: argument: 
         572: expr: 
          573: literal: "entropy_coding_sync_enabled_flag"
    574: if_stmt: 
     575: if: 
      576: condition: 
       577: expr: 
        578: name: 
         579: name: pps
         580: operator: ->
         581: name: tiles_enabled_flag
      582: block: 
       583: block_content: 
        584: expr_stmt: 
         585: expr: 
          586: name: 
           587: name: pps
           588: operator: ->
           589: name: num_tile_columns
          590: operator: =
          591: literal: 1
          592: operator: +
          593: call: 
           594: name: gf_bs_read_ue_log
           595: argument_list: 
            596: argument: 
             597: expr: 
              598: name: bs
            599: argument: 
             600: expr: 
              601: literal: "num_tile_columns_minus1"
        602: expr_stmt: 
         603: expr: 
          604: name: 
           605: name: pps
           606: operator: ->
           607: name: num_tile_rows
          608: operator: =
          609: literal: 1
          610: operator: +
          611: call: 
           612: name: gf_bs_read_ue_log
           613: argument_list: 
            614: argument: 
             615: expr: 
              616: name: bs
            617: argument: 
             618: expr: 
              619: literal: "num_tile_rows_minus1"
        620: expr_stmt: 
         621: expr: 
          622: name: 
           623: name: pps
           624: operator: ->
           625: name: uniform_spacing_flag
          626: operator: =
          627: call: 
           628: name: gf_bs_read_int_log
           629: argument_list: 
            630: argument: 
             631: expr: 
              632: name: bs
            633: argument: 
             634: expr: 
              635: literal: 1
            636: argument: 
             637: expr: 
              638: literal: "uniform_spacing_flag"
        639: if_stmt: 
         640: if: 
          641: condition: 
           642: expr: 
            643: operator: !
            644: name: 
             645: name: pps
             646: operator: ->
             647: name: uniform_spacing_flag
          648: block: 
           649: block_content: 
            650: for: 
             651: control: 
              652: init: 
               653: expr: 
                654: name: i
                655: operator: =
                656: literal: 0
              657: condition: 
               658: expr: 
                659: name: i
                660: operator: <
                661: name: 
                 662: name: pps
                 663: operator: ->
                 664: name: num_tile_columns
                665: operator: -
                666: literal: 1
              667: incr: 
               668: expr: 
                669: name: i
                670: operator: ++
             671: block: 
              672: block_content: 
               673: expr_stmt: 
                674: expr: 
                 675: name: 
                  676: name: pps
                  677: operator: ->
                  678: name: column_width
                  679: index: 
                   680: expr: 
                    681: name: i
                 682: operator: =
                 683: literal: 1
                 684: operator: +
                 685: call: 
                  686: name: gf_bs_read_ue_log_idx
                  687: argument_list: 
                   688: argument: 
                    689: expr: 
                     690: name: bs
                   691: argument: 
                    692: expr: 
                     693: literal: "column_width_minus1"
                   694: argument: 
                    695: expr: 
                     696: name: i
            697: for: 
             698: control: 
              699: init: 
               700: expr: 
                701: name: i
                702: operator: =
                703: literal: 0
              704: condition: 
               705: expr: 
                706: name: i
                707: operator: <
                708: name: 
                 709: name: pps
                 710: operator: ->
                 711: name: num_tile_rows
                712: operator: -
                713: literal: 1
              714: incr: 
               715: expr: 
                716: name: i
                717: operator: ++
             718: block: 
              719: block_content: 
               720: expr_stmt: 
                721: expr: 
                 722: name: 
                  723: name: pps
                  724: operator: ->
                  725: name: row_height
                  726: index: 
                   727: expr: 
                    728: name: i
                 729: operator: =
                 730: literal: 1
                 731: operator: +
                 732: call: 
                  733: name: gf_bs_read_ue_log_idx
                  734: argument_list: 
                   735: argument: 
                    736: expr: 
                     737: name: bs
                   738: argument: 
                    739: expr: 
                     740: literal: "row_height_minus1"
                   741: argument: 
                    742: expr: 
                     743: name: i
        744: expr_stmt: 
         745: expr: 
          746: name: 
           747: name: pps
           748: operator: ->
           749: name: loop_filter_across_tiles_enabled_flag
          750: operator: =
          751: call: 
           752: name: gf_bs_read_int_log
           753: argument_list: 
            754: argument: 
             755: expr: 
              756: name: bs
            757: argument: 
             758: expr: 
              759: literal: 1
            760: argument: 
             761: expr: 
              762: literal: "loop_filter_across_tiles_enabled_flag"
    763: expr_stmt: 
     764: expr: 
      765: name: 
       766: name: pps
       767: operator: ->
       768: name: loop_filter_across_slices_enabled_flag
      769: operator: =
      770: call: 
       771: name: gf_bs_read_int_log
       772: argument_list: 
        773: argument: 
         774: expr: 
          775: name: bs
        776: argument: 
         777: expr: 
          778: literal: 1
        779: argument: 
         780: expr: 
          781: literal: "loop_filter_across_slices_enabled_flag"
    782: if_stmt: 
     783: if: 
      784: condition: 
       785: expr: 
        786: operator: (
        787: name: 
         788: name: pps
         789: operator: ->
         790: name: deblocking_filter_control_present_flag
        791: operator: =
        792: call: 
         793: name: gf_bs_read_int_log
         794: argument_list: 
          795: argument: 
           796: expr: 
            797: name: bs
          798: argument: 
           799: expr: 
            800: literal: 1
          801: argument: 
           802: expr: 
            803: literal: "deblocking_filter_control_present_flag"
        804: operator: )
      805: block: 
       806: block_content: 
        807: expr_stmt: 
         808: expr: 
          809: name: 
           810: name: pps
           811: operator: ->
           812: name: deblocking_filter_override_enabled_flag
          813: operator: =
          814: call: 
           815: name: gf_bs_read_int_log
           816: argument_list: 
            817: argument: 
             818: expr: 
              819: name: bs
            820: argument: 
             821: expr: 
              822: literal: 1
            823: argument: 
             824: expr: 
              825: literal: "deblocking_filter_override_enabled_flag"
        826: if_stmt: 
         827: if: 
          828: condition: 
           829: expr: 
            830: operator: !
            831: operator: (
            832: name: 
             833: name: pps
             834: operator: ->
             835: name: pic_disable_deblocking_filter_flag
            836: operator: =
            837: call: 
             838: name: gf_bs_read_int_log
             839: argument_list: 
              840: argument: 
               841: expr: 
                842: name: bs
              843: argument: 
               844: expr: 
                845: literal: 1
              846: argument: 
               847: expr: 
                848: literal: "pic_disable_deblocking_filter_flag"
            849: operator: )
          850: block: 
           851: block_content: 
            852: expr_stmt: 
             853: expr: 
              854: name: 
               855: name: pps
               856: operator: ->
               857: name: beta_offset_div2
              858: operator: =
              859: call: 
               860: name: gf_bs_read_se_log
               861: argument_list: 
                862: argument: 
                 863: expr: 
                  864: name: bs
                865: argument: 
                 866: expr: 
                  867: literal: "beta_offset_div2"
            868: expr_stmt: 
             869: expr: 
              870: name: 
               871: name: pps
               872: operator: ->
               873: name: tc_offset_div2
              874: operator: =
              875: call: 
               876: name: gf_bs_read_se_log
               877: argument_list: 
                878: argument: 
                 879: expr: 
                  880: name: bs
                881: argument: 
                 882: expr: 
                  883: literal: "tc_offset_div2"
    884: if_stmt: 
     885: if: 
      886: condition: 
       887: expr: 
        888: operator: (
        889: name: 
         890: name: pps
         891: operator: ->
         892: name: pic_scaling_list_data_present_flag
        893: operator: =
        894: call: 
         895: name: gf_bs_read_int_log
         896: argument_list: 
          897: argument: 
           898: expr: 
            899: name: bs
          900: argument: 
           901: expr: 
            902: literal: 1
          903: argument: 
           904: expr: 
            905: literal: "pic_scaling_list_data_present_flag"
        906: operator: )
      907: block: 
       908: block_content: 
        909: expr_stmt: 
         910: expr: 
          911: call: 
           912: name: hevc_scaling_list_data
           913: argument_list: 
            914: argument: 
             915: expr: 
              916: name: bs
    917: expr_stmt: 
     918: expr: 
      919: name: 
       920: name: pps
       921: operator: ->
       922: name: lists_modification_present_flag
      923: operator: =
      924: call: 
       925: name: gf_bs_read_int_log
       926: argument_list: 
        927: argument: 
         928: expr: 
          929: name: bs
        930: argument: 
         931: expr: 
          932: literal: 1
        933: argument: 
         934: expr: 
          935: literal: "lists_modification_present_flag"
    936: expr_stmt: 
     937: expr: 
      938: name: 
       939: name: pps
       940: operator: ->
       941: name: log2_parallel_merge_level_minus2
      942: operator: =
      943: call: 
       944: name: gf_bs_read_ue_log
       945: argument_list: 
        946: argument: 
         947: expr: 
          948: name: bs
        949: argument: 
         950: expr: 
          951: literal: "log2_parallel_merge_level_minus2"
    952: expr_stmt: 
     953: expr: 
      954: name: 
       955: name: pps
       956: operator: ->
       957: name: slice_segment_header_extension_present_flag
      958: operator: =
      959: call: 
       960: name: gf_bs_read_int_log
       961: argument_list: 
        962: argument: 
         963: expr: 
          964: name: bs
        965: argument: 
         966: expr: 
          967: literal: 1
        968: argument: 
         969: expr: 
          970: literal: "slice_segment_header_extension_present_flag"
    971: if_stmt: 
     972: if: 
      973: condition: 
       974: expr: 
        975: call: 
         976: name: gf_bs_read_int_log
         977: argument_list: 
          978: argument: 
           979: expr: 
            980: name: bs
          981: argument: 
           982: expr: 
            983: literal: 1
          984: argument: 
           985: expr: 
            986: literal: "pps_extension_flag"
      987: block: 
       988: block_content: 
        989: if: 
         990: directive: if
         991: expr: 
          992: literal: 0
        993: comment: /*pps_extension_data_flag */
        994: endif: 
         995: directive: endif
    996: return: 
     997: expr: 
      998: name: pps_id

----------------------------------------
0: unit: 
 1: function: 
  2: type: 
   3: specifier: static
   4: name: s32
  5: name: gf_hevc_read_pps_bs_internal
  6: parameter_list: 
   7: parameter: 
    8: decl: 
     9: type: 
      10: name: GF_BitStream
      11: modifier: *
     12: name: bs
   13: parameter: 
    14: decl: 
     15: type: 
      16: name: HEVCState
      17: modifier: *
     18: name: hevc
  19: block: 
   20: block_content: 
    21: decl_stmt: 
     22: decl: 
      23: type: 
       24: name: u32
      25: name: i
    26: decl_stmt: 
     27: decl: 
      28: type: 
       29: name: s32
      30: name: pps_id
    31: decl_stmt: 
     32: decl: 
      33: type: 
       34: name: HEVC_PPS
       35: modifier: *
      36: name: pps
    37: comment: //NAL header already read
    38: expr_stmt: 
     39: expr: 
      40: name: pps_id
      41: operator: =
      42: call: 
       43: name: gf_bs_read_ue_log
       44: argument_list: 
        45: argument: 
         46: expr: 
          47: name: bs
        48: argument: 
         49: expr: 
          50: literal: "pps_id"
    51: if_stmt: 
     52: if: 
      53: condition: 
       54: expr: 
        55: operator: (
        56: name: pps_id
        57: operator: <
        58: literal: 0
        59: operator: )
        60: operator: ||
        61: operator: (
        62: name: pps_id
        63: operator: >=
        64: literal: 64
        65: operator: )
      66: block: 
       67: block_content: 
        68: expr_stmt: 
         69: expr: 
          70: call: 
           71: name: GF_LOG
           72: argument_list: 
            73: argument: 
             74: expr: 
              75: name: GF_LOG_ERROR
            76: argument: 
             77: expr: 
              78: name: GF_LOG_CODING
            79: argument: 
             80: expr: 
              81: operator: (
              82: literal: "[HEVC] wrong PPS ID %d in PPS\n"
              83: operator: ,
              84: name: pps_id
              85: operator: )
        86: return: 
         87: expr: 
          88: operator: -
          89: literal: 1
    90: expr_stmt: 
     91: expr: 
      92: name: pps
      93: operator: =
      94: operator: &
      95: name: 
       96: name: hevc
       97: operator: ->
       98: name: pps
       99: index: 
        100: expr: 
         101: name: pps_id
    102: if_stmt: 
     103: if: 
      104: condition: 
       105: expr: 
        106: operator: !
        107: name: 
         108: name: pps
         109: operator: ->
         110: name: state
      111: block: 
       112: block_content: 
        113: expr_stmt: 
         114: expr: 
          115: name: 
           116: name: pps
           117: operator: ->
           118: name: id
          119: operator: =
          120: name: pps_id
        121: expr_stmt: 
         122: expr: 
          123: name: 
           124: name: pps
           125: operator: ->
           126: name: state
          127: operator: =
          128: literal: 1
    129: expr_stmt: 
     130: expr: 
      131: name: 
       132: name: pps
       133: operator: ->
       134: name: sps_id
      135: operator: =
      136: call: 
       137: name: gf_bs_read_ue_log
       138: argument_list: 
        139: argument: 
         140: expr: 
          141: name: bs
        142: argument: 
         143: expr: 
          144: literal: "sps_id"
    145: if_stmt: 
     146: if: 
      147: condition: 
       148: expr: 
        149: operator: (
        150: name: 
         151: name: pps
         152: operator: ->
         153: name: sps_id
        154: operator: <
        155: literal: 0
        156: operator: )
        157: operator: ||
        158: operator: (
        159: name: 
         160: name: pps
         161: operator: ->
         162: name: sps_id
        163: operator: >=
        164: literal: 16
        165: operator: )
      166: block: 
       167: block_content: 
        168: expr_stmt: 
         169: expr: 
          170: call: 
           171: name: GF_LOG
           172: argument_list: 
            173: argument: 
             174: expr: 
              175: name: GF_LOG_ERROR
            176: argument: 
             177: expr: 
              178: name: GF_LOG_CODING
            179: argument: 
             180: expr: 
              181: operator: (
              182: literal: "[HEVC] wrong SPS ID %d in PPS\n"
              183: operator: ,
              184: name: 
               185: name: pps
               186: operator: ->
               187: name: sps_id
              188: operator: )
        189: expr_stmt: 
         190: expr: 
          191: name: 
           192: name: pps
           193: operator: ->
           194: name: sps_id
          195: operator: =
          196: literal: 0
        197: return: 
         198: expr: 
          199: operator: -
          200: literal: 1
    201: expr_stmt: 
     202: expr: 
      203: name: 
       204: name: hevc
       205: operator: ->
       206: name: sps_active_idx
      207: operator: =
      208: name: 
       209: name: pps
       210: operator: ->
       211: name: sps_id
    212: comment: /*set active sps*/
    213: expr_stmt: 
     214: expr: 
      215: name: 
       216: name: pps
       217: operator: ->
       218: name: dependent_slice_segments_enabled_flag
      219: operator: =
      220: call: 
       221: name: gf_bs_read_int_log
       222: argument_list: 
        223: argument: 
         224: expr: 
          225: name: bs
        226: argument: 
         227: expr: 
          228: literal: 1
        229: argument: 
         230: expr: 
          231: literal: "dependent_slice_segments_enabled_flag"
    232: expr_stmt: 
     233: expr: 
      234: name: 
       235: name: pps
       236: operator: ->
       237: name: output_flag_present_flag
      238: operator: =
      239: call: 
       240: name: gf_bs_read_int_log
       241: argument_list: 
        242: argument: 
         243: expr: 
          244: name: bs
        245: argument: 
         246: expr: 
          247: literal: 1
        248: argument: 
         249: expr: 
          250: literal: "output_flag_present_flag"
    251: expr_stmt: 
     252: expr: 
      253: name: 
       254: name: pps
       255: operator: ->
       256: name: num_extra_slice_header_bits
      257: operator: =
      258: call: 
       259: name: gf_bs_read_int_log
       260: argument_list: 
        261: argument: 
         262: expr: 
          263: name: bs
        264: argument: 
         265: expr: 
          266: literal: 3
        267: argument: 
         268: expr: 
          269: literal: "num_extra_slice_header_bits"
    270: expr_stmt: 
     271: expr: 
      272: name: 
       273: name: pps
       274: operator: ->
       275: name: sign_data_hiding_flag
      276: operator: =
      277: call: 
       278: name: gf_bs_read_int_log
       279: argument_list: 
        280: argument: 
         281: expr: 
          282: name: bs
        283: argument: 
         284: expr: 
          285: literal: 1
        286: argument: 
         287: expr: 
          288: literal: "sign_data_hiding_flag"
    289: expr_stmt: 
     290: expr: 
      291: name: 
       292: name: pps
       293: operator: ->
       294: name: cabac_init_present_flag
      295: operator: =
      296: call: 
       297: name: gf_bs_read_int_log
       298: argument_list: 
        299: argument: 
         300: expr: 
          301: name: bs
        302: argument: 
         303: expr: 
          304: literal: 1
        305: argument: 
         306: expr: 
          307: literal: "cabac_init_present_flag"
    308: expr_stmt: 
     309: expr: 
      310: name: 
       311: name: pps
       312: operator: ->
       313: name: num_ref_idx_l0_default_active
      314: operator: =
      315: literal: 1
      316: operator: +
      317: call: 
       318: name: gf_bs_read_ue_log
       319: argument_list: 
        320: argument: 
         321: expr: 
          322: name: bs
        323: argument: 
         324: expr: 
          325: literal: "num_ref_idx_l0_default_active"
    326: expr_stmt: 
     327: expr: 
      328: name: 
       329: name: pps
       330: operator: ->
       331: name: num_ref_idx_l1_default_active
      332: operator: =
      333: literal: 1
      334: operator: +
      335: call: 
       336: name: gf_bs_read_ue_log
       337: argument_list: 
        338: argument: 
         339: expr: 
          340: name: bs
        341: argument: 
         342: expr: 
          343: literal: "num_ref_idx_l1_default_active"
    344: expr_stmt: 
     345: expr: 
      346: name: 
       347: name: pps
       348: operator: ->
       349: name: pic_init_qp_minus26
      350: operator: =
      351: call: 
       352: name: gf_bs_read_se_log
       353: argument_list: 
        354: argument: 
         355: expr: 
          356: name: bs
        357: argument: 
         358: expr: 
          359: literal: "pic_init_qp_minus26"
    360: expr_stmt: 
     361: expr: 
      362: name: 
       363: name: pps
       364: operator: ->
       365: name: constrained_intra_pred_flag
      366: operator: =
      367: call: 
       368: name: gf_bs_read_int_log
       369: argument_list: 
        370: argument: 
         371: expr: 
          372: name: bs
        373: argument: 
         374: expr: 
          375: literal: 1
        376: argument: 
         377: expr: 
          378: literal: "constrained_intra_pred_flag"
    379: expr_stmt: 
     380: expr: 
      381: name: 
       382: name: pps
       383: operator: ->
       384: name: transform_skip_enabled_flag
      385: operator: =
      386: call: 
       387: name: gf_bs_read_int_log
       388: argument_list: 
        389: argument: 
         390: expr: 
          391: name: bs
        392: argument: 
         393: expr: 
          394: literal: 1
        395: argument: 
         396: expr: 
          397: literal: "transform_skip_enabled_flag"
    398: if_stmt: 
     399: if: 
      400: condition: 
       401: expr: 
        402: operator: (
        403: name: 
         404: name: pps
         405: operator: ->
         406: name: cu_qp_delta_enabled_flag
        407: operator: =
        408: call: 
         409: name: gf_bs_read_int_log
         410: argument_list: 
          411: argument: 
           412: expr: 
            413: name: bs
          414: argument: 
           415: expr: 
            416: literal: 1
          417: argument: 
           418: expr: 
            419: literal: "cu_qp_delta_enabled_flag"
        420: operator: )
      421: block: 
       422: block_content: 
        423: expr_stmt: 
         424: expr: 
          425: name: 
           426: name: pps
           427: operator: ->
           428: name: diff_cu_qp_delta_depth
          429: operator: =
          430: call: 
           431: name: gf_bs_read_ue_log
           432: argument_list: 
            433: argument: 
             434: expr: 
              435: name: bs
            436: argument: 
             437: expr: 
              438: literal: "diff_cu_qp_delta_depth"
    439: expr_stmt: 
     440: expr: 
      441: name: 
       442: name: pps
       443: operator: ->
       444: name: pic_cb_qp_offset
      445: operator: =
      446: call: 
       447: name: gf_bs_read_se_log
       448: argument_list: 
        449: argument: 
         450: expr: 
          451: name: bs
        452: argument: 
         453: expr: 
          454: literal: "pic_cb_qp_offset"
    455: expr_stmt: 
     456: expr: 
      457: name: 
       458: name: pps
       459: operator: ->
       460: name: pic_cr_qp_offset
      461: operator: =
      462: call: 
       463: name: gf_bs_read_se_log
       464: argument_list: 
        465: argument: 
         466: expr: 
          467: name: bs
        468: argument: 
         469: expr: 
          470: literal: "pic_cr_qp_offset"
    471: expr_stmt: 
     472: expr: 
      473: name: 
       474: name: pps
       475: operator: ->
       476: name: slice_chroma_qp_offsets_present_flag
      477: operator: =
      478: call: 
       479: name: gf_bs_read_int_log
       480: argument_list: 
        481: argument: 
         482: expr: 
          483: name: bs
        484: argument: 
         485: expr: 
          486: literal: 1
        487: argument: 
         488: expr: 
          489: literal: "slice_chroma_qp_offsets_present_flag"
    490: expr_stmt: 
     491: expr: 
      492: name: 
       493: name: pps
       494: operator: ->
       495: name: weighted_pred_flag
      496: operator: =
      497: call: 
       498: name: gf_bs_read_int_log
       499: argument_list: 
        500: argument: 
         501: expr: 
          502: name: bs
        503: argument: 
         504: expr: 
          505: literal: 1
        506: argument: 
         507: expr: 
          508: literal: "weighted_pred_flag"
    509: expr_stmt: 
     510: expr: 
      511: name: 
       512: name: pps
       513: operator: ->
       514: name: weighted_bipred_flag
      515: operator: =
      516: call: 
       517: name: gf_bs_read_int_log
       518: argument_list: 
        519: argument: 
         520: expr: 
          521: name: bs
        522: argument: 
         523: expr: 
          524: literal: 1
        525: argument: 
         526: expr: 
          527: literal: "weighted_bipred_flag"
    528: expr_stmt: 
     529: expr: 
      530: name: 
       531: name: pps
       532: operator: ->
       533: name: transquant_bypass_enable_flag
      534: operator: =
      535: call: 
       536: name: gf_bs_read_int_log
       537: argument_list: 
        538: argument: 
         539: expr: 
          540: name: bs
        541: argument: 
         542: expr: 
          543: literal: 1
        544: argument: 
         545: expr: 
          546: literal: "transquant_bypass_enable_flag"
    547: expr_stmt: 
     548: expr: 
      549: name: 
       550: name: pps
       551: operator: ->
       552: name: tiles_enabled_flag
      553: operator: =
      554: call: 
       555: name: gf_bs_read_int_log
       556: argument_list: 
        557: argument: 
         558: expr: 
          559: name: bs
        560: argument: 
         561: expr: 
          562: literal: 1
        563: argument: 
         564: expr: 
          565: literal: "tiles_enabled_flag"
    566: expr_stmt: 
     567: expr: 
      568: name: 
       569: name: pps
       570: operator: ->
       571: name: entropy_coding_sync_enabled_flag
      572: operator: =
      573: call: 
       574: name: gf_bs_read_int_log
       575: argument_list: 
        576: argument: 
         577: expr: 
          578: name: bs
        579: argument: 
         580: expr: 
          581: literal: 1
        582: argument: 
         583: expr: 
          584: literal: "entropy_coding_sync_enabled_flag"
    585: if_stmt: 
     586: if: 
      587: condition: 
       588: expr: 
        589: name: 
         590: name: pps
         591: operator: ->
         592: name: tiles_enabled_flag
      593: block: 
       594: block_content: 
        595: expr_stmt: 
         596: expr: 
          597: name: 
           598: name: pps
           599: operator: ->
           600: name: num_tile_columns
          601: operator: =
          602: literal: 1
          603: operator: +
          604: call: 
           605: name: gf_bs_read_ue_log
           606: argument_list: 
            607: argument: 
             608: expr: 
              609: name: bs
            610: argument: 
             611: expr: 
              612: literal: "num_tile_columns_minus1"
        613: expr_stmt: 
         614: expr: 
          615: name: 
           616: name: pps
           617: operator: ->
           618: name: num_tile_rows
          619: operator: =
          620: literal: 1
          621: operator: +
          622: call: 
           623: name: gf_bs_read_ue_log
           624: argument_list: 
            625: argument: 
             626: expr: 
              627: name: bs
            628: argument: 
             629: expr: 
              630: literal: "num_tile_rows_minus1"
        631: expr_stmt: 
         632: expr: 
          633: name: 
           634: name: pps
           635: operator: ->
           636: name: uniform_spacing_flag
          637: operator: =
          638: call: 
           639: name: gf_bs_read_int_log
           640: argument_list: 
            641: argument: 
             642: expr: 
              643: name: bs
            644: argument: 
             645: expr: 
              646: literal: 1
            647: argument: 
             648: expr: 
              649: literal: "uniform_spacing_flag"
        650: if_stmt: 
         651: if: 
          652: condition: 
           653: expr: 
            654: operator: !
            655: name: 
             656: name: pps
             657: operator: ->
             658: name: uniform_spacing_flag
          659: block: 
           660: block_content: 
            661: for: 
             662: control: 
              663: init: 
               664: expr: 
                665: name: i
                666: operator: =
                667: literal: 0
              668: condition: 
               669: expr: 
                670: name: i
                671: operator: <
                672: name: 
                 673: name: pps
                 674: operator: ->
                 675: name: num_tile_columns
                676: operator: -
                677: literal: 1
              678: incr: 
               679: expr: 
                680: name: i
                681: operator: ++
             682: block: 
              683: block_content: 
               684: expr_stmt: 
                685: expr: 
                 686: name: 
                  687: name: pps
                  688: operator: ->
                  689: name: column_width
                  690: index: 
                   691: expr: 
                    692: name: i
                 693: operator: =
                 694: literal: 1
                 695: operator: +
                 696: call: 
                  697: name: gf_bs_read_ue_log_idx
                  698: argument_list: 
                   699: argument: 
                    700: expr: 
                     701: name: bs
                   702: argument: 
                    703: expr: 
                     704: literal: "column_width_minus1"
                   705: argument: 
                    706: expr: 
                     707: name: i
            708: for: 
             709: control: 
              710: init: 
               711: expr: 
                712: name: i
                713: operator: =
                714: literal: 0
              715: condition: 
               716: expr: 
                717: name: i
                718: operator: <
                719: name: 
                 720: name: pps
                 721: operator: ->
                 722: name: num_tile_rows
                723: operator: -
                724: literal: 1
              725: incr: 
               726: expr: 
                727: name: i
                728: operator: ++
             729: block: 
              730: block_content: 
               731: expr_stmt: 
                732: expr: 
                 733: name: 
                  734: name: pps
                  735: operator: ->
                  736: name: row_height
                  737: index: 
                   738: expr: 
                    739: name: i
                 740: operator: =
                 741: literal: 1
                 742: operator: +
                 743: call: 
                  744: name: gf_bs_read_ue_log_idx
                  745: argument_list: 
                   746: argument: 
                    747: expr: 
                     748: name: bs
                   749: argument: 
                    750: expr: 
                     751: literal: "row_height_minus1"
                   752: argument: 
                    753: expr: 
                     754: name: i
        755: expr_stmt: 
         756: expr: 
          757: name: 
           758: name: pps
           759: operator: ->
           760: name: loop_filter_across_tiles_enabled_flag
          761: operator: =
          762: call: 
           763: name: gf_bs_read_int_log
           764: argument_list: 
            765: argument: 
             766: expr: 
              767: name: bs
            768: argument: 
             769: expr: 
              770: literal: 1
            771: argument: 
             772: expr: 
              773: literal: "loop_filter_across_tiles_enabled_flag"
    774: expr_stmt: 
     775: expr: 
      776: name: 
       777: name: pps
       778: operator: ->
       779: name: loop_filter_across_slices_enabled_flag
      780: operator: =
      781: call: 
       782: name: gf_bs_read_int_log
       783: argument_list: 
        784: argument: 
         785: expr: 
          786: name: bs
        787: argument: 
         788: expr: 
          789: literal: 1
        790: argument: 
         791: expr: 
          792: literal: "loop_filter_across_slices_enabled_flag"
    793: if_stmt: 
     794: if: 
      795: condition: 
       796: expr: 
        797: operator: (
        798: name: 
         799: name: pps
         800: operator: ->
         801: name: deblocking_filter_control_present_flag
        802: operator: =
        803: call: 
         804: name: gf_bs_read_int_log
         805: argument_list: 
          806: argument: 
           807: expr: 
            808: name: bs
          809: argument: 
           810: expr: 
            811: literal: 1
          812: argument: 
           813: expr: 
            814: literal: "deblocking_filter_control_present_flag"
        815: operator: )
      816: block: 
       817: block_content: 
        818: expr_stmt: 
         819: expr: 
          820: name: 
           821: name: pps
           822: operator: ->
           823: name: deblocking_filter_override_enabled_flag
          824: operator: =
          825: call: 
           826: name: gf_bs_read_int_log
           827: argument_list: 
            828: argument: 
             829: expr: 
              830: name: bs
            831: argument: 
             832: expr: 
              833: literal: 1
            834: argument: 
             835: expr: 
              836: literal: "deblocking_filter_override_enabled_flag"
        837: if_stmt: 
         838: if: 
          839: condition: 
           840: expr: 
            841: operator: !
            842: operator: (
            843: name: 
             844: name: pps
             845: operator: ->
             846: name: pic_disable_deblocking_filter_flag
            847: operator: =
            848: call: 
             849: name: gf_bs_read_int_log
             850: argument_list: 
              851: argument: 
               852: expr: 
                853: name: bs
              854: argument: 
               855: expr: 
                856: literal: 1
              857: argument: 
               858: expr: 
                859: literal: "pic_disable_deblocking_filter_flag"
            860: operator: )
          861: block: 
           862: block_content: 
            863: expr_stmt: 
             864: expr: 
              865: name: 
               866: name: pps
               867: operator: ->
               868: name: beta_offset_div2
              869: operator: =
              870: call: 
               871: name: gf_bs_read_se_log
               872: argument_list: 
                873: argument: 
                 874: expr: 
                  875: name: bs
                876: argument: 
                 877: expr: 
                  878: literal: "beta_offset_div2"
            879: expr_stmt: 
             880: expr: 
              881: name: 
               882: name: pps
               883: operator: ->
               884: name: tc_offset_div2
              885: operator: =
              886: call: 
               887: name: gf_bs_read_se_log
               888: argument_list: 
                889: argument: 
                 890: expr: 
                  891: name: bs
                892: argument: 
                 893: expr: 
                  894: literal: "tc_offset_div2"
    895: if_stmt: 
     896: if: 
      897: condition: 
       898: expr: 
        899: operator: (
        900: name: 
         901: name: pps
         902: operator: ->
         903: name: pic_scaling_list_data_present_flag
        904: operator: =
        905: call: 
         906: name: gf_bs_read_int_log
         907: argument_list: 
          908: argument: 
           909: expr: 
            910: name: bs
          911: argument: 
           912: expr: 
            913: literal: 1
          914: argument: 
           915: expr: 
            916: literal: "pic_scaling_list_data_present_flag"
        917: operator: )
      918: block: 
       919: block_content: 
        920: expr_stmt: 
         921: expr: 
          922: call: 
           923: name: hevc_scaling_list_data
           924: argument_list: 
            925: argument: 
             926: expr: 
              927: name: bs
    928: expr_stmt: 
     929: expr: 
      930: name: 
       931: name: pps
       932: operator: ->
       933: name: lists_modification_present_flag
      934: operator: =
      935: call: 
       936: name: gf_bs_read_int_log
       937: argument_list: 
        938: argument: 
         939: expr: 
          940: name: bs
        941: argument: 
         942: expr: 
          943: literal: 1
        944: argument: 
         945: expr: 
          946: literal: "lists_modification_present_flag"
    947: expr_stmt: 
     948: expr: 
      949: name: 
       950: name: pps
       951: operator: ->
       952: name: log2_parallel_merge_level_minus2
      953: operator: =
      954: call: 
       955: name: gf_bs_read_ue_log
       956: argument_list: 
        957: argument: 
         958: expr: 
          959: name: bs
        960: argument: 
         961: expr: 
          962: literal: "log2_parallel_merge_level_minus2"
    963: expr_stmt: 
     964: expr: 
      965: name: 
       966: name: pps
       967: operator: ->
       968: name: slice_segment_header_extension_present_flag
      969: operator: =
      970: call: 
       971: name: gf_bs_read_int_log
       972: argument_list: 
        973: argument: 
         974: expr: 
          975: name: bs
        976: argument: 
         977: expr: 
          978: literal: 1
        979: argument: 
         980: expr: 
          981: literal: "slice_segment_header_extension_present_flag"
    982: if_stmt: 
     983: if: 
      984: condition: 
       985: expr: 
        986: call: 
         987: name: gf_bs_read_int_log
         988: argument_list: 
          989: argument: 
           990: expr: 
            991: name: bs
          992: argument: 
           993: expr: 
            994: literal: 1
          995: argument: 
           996: expr: 
            997: literal: "pps_extension_flag"
      998: block: 
       999: block_content: 
        1000: if: 
         1001: directive: if
         1002: expr: 
          1003: literal: 0
        1004: comment: /*pps_extension_data_flag */
        1005: endif: 
         1006: directive: endif
    1007: return: 
     1008: expr: 
      1009: name: pps_id
=====
0: function: 
 1: type: 
  2: specifier: static
  3: name: s32
 4: name: gf_hevc_read_pps_bs_internal
 5: parameter_list: 
  6: parameter: 
   7: decl: 
    8: type: 
     9: name: GF_BitStream
     10: modifier: *
    11: name: bs
  12: parameter: 
   13: decl: 
    14: type: 
     15: name: HEVCState
     16: modifier: *
    17: name: hevc
 18: block: 
  19: block_content: 
   20: decl_stmt: 
    21: decl: 
     22: type: 
      23: name: u32
     24: name: i
   25: decl_stmt: 
    26: decl: 
     27: type: 
      28: name: s32
     29: name: pps_id
   30: decl_stmt: 
    31: decl: 
     32: type: 
      33: name: HEVC_PPS
      34: modifier: *
     35: name: pps
   36: comment: //NAL header already read
   37: expr_stmt: 
    38: expr: 
     39: name: pps_id
     40: operator: =
     41: call: 
      42: name: gf_bs_read_ue_log
      43: argument_list: 
       44: argument: 
        45: expr: 
         46: name: bs
       47: argument: 
        48: expr: 
         49: literal: "pps_id"
   50: if_stmt: 
    51: if: 
     52: condition: 
      53: expr: 
       54: operator: (
       55: name: pps_id
       56: operator: <
       57: literal: 0
       58: operator: )
       59: operator: ||
       60: operator: (
       61: name: pps_id
       62: operator: >=
       63: literal: 64
       64: operator: )
     65: block: 
      66: block_content: 
       67: expr_stmt: 
        68: expr: 
         69: call: 
          70: name: GF_LOG
          71: argument_list: 
           72: argument: 
            73: expr: 
             74: name: GF_LOG_ERROR
           75: argument: 
            76: expr: 
             77: name: GF_LOG_CODING
           78: argument: 
            79: expr: 
             80: operator: (
             81: literal: "[HEVC] wrong PPS ID %d in PPS\n"
             82: operator: ,
             83: name: pps_id
             84: operator: )
       85: return: 
        86: expr: 
         87: operator: -
         88: literal: 1
   89: expr_stmt: 
    90: expr: 
     91: name: pps
     92: operator: =
     93: operator: &
     94: name: 
      95: name: hevc
      96: operator: ->
      97: name: pps
      98: index: 
       99: expr: 
        100: name: pps_id
   101: if_stmt: 
    102: if: 
     103: condition: 
      104: expr: 
       105: operator: !
       106: name: 
        107: name: pps
        108: operator: ->
        109: name: state
     110: block: 
      111: block_content: 
       112: expr_stmt: 
        113: expr: 
         114: name: 
          115: name: pps
          116: operator: ->
          117: name: id
         118: operator: =
         119: name: pps_id
       120: expr_stmt: 
        121: expr: 
         122: name: 
          123: name: pps
          124: operator: ->
          125: name: state
         126: operator: =
         127: literal: 1
   128: expr_stmt: 
    129: expr: 
     130: name: 
      131: name: pps
      132: operator: ->
      133: name: sps_id
     134: operator: =
     135: call: 
      136: name: gf_bs_read_ue_log
      137: argument_list: 
       138: argument: 
        139: expr: 
         140: name: bs
       141: argument: 
        142: expr: 
         143: literal: "sps_id"
   144: if_stmt: 
    145: if: 
     146: condition: 
      147: expr: 
       148: name: 
        149: name: pps
        150: operator: ->
        151: name: sps_id
       152: operator: >=
       153: literal: 16
     154: block: 
      155: block_content: 
       156: expr_stmt: 
        157: expr: 
         158: call: 
          159: name: GF_LOG
          160: argument_list: 
           161: argument: 
            162: expr: 
             163: name: GF_LOG_ERROR
           164: argument: 
            165: expr: 
             166: name: GF_LOG_CODING
           167: argument: 
            168: expr: 
             169: operator: (
             170: literal: "[HEVC] wrong SPS ID %d in PPS\n"
             171: operator: ,
             172: name: 
              173: name: pps
              174: operator: ->
              175: name: sps_id
             176: operator: )
       177: expr_stmt: 
        178: expr: 
         179: name: 
          180: name: pps
          181: operator: ->
          182: name: sps_id
         183: operator: =
         184: literal: 0
       185: return: 
        186: expr: 
         187: operator: -
         188: literal: 1
   189: expr_stmt: 
    190: expr: 
     191: name: 
      192: name: hevc
      193: operator: ->
      194: name: sps_active_idx
     195: operator: =
     196: name: 
      197: name: pps
      198: operator: ->
      199: name: sps_id
   200: comment: /*set active sps*/
   201: expr_stmt: 
    202: expr: 
     203: name: 
      204: name: pps
      205: operator: ->
      206: name: dependent_slice_segments_enabled_flag
     207: operator: =
     208: call: 
      209: name: gf_bs_read_int_log
      210: argument_list: 
       211: argument: 
        212: expr: 
         213: name: bs
       214: argument: 
        215: expr: 
         216: literal: 1
       217: argument: 
        218: expr: 
         219: literal: "dependent_slice_segments_enabled_flag"
   220: expr_stmt: 
    221: expr: 
     222: name: 
      223: name: pps
      224: operator: ->
      225: name: output_flag_present_flag
     226: operator: =
     227: call: 
      228: name: gf_bs_read_int_log
      229: argument_list: 
       230: argument: 
        231: expr: 
         232: name: bs
       233: argument: 
        234: expr: 
         235: literal: 1
       236: argument: 
        237: expr: 
         238: literal: "output_flag_present_flag"
   239: expr_stmt: 
    240: expr: 
     241: name: 
      242: name: pps
      243: operator: ->
      244: name: num_extra_slice_header_bits
     245: operator: =
     246: call: 
      247: name: gf_bs_read_int_log
      248: argument_list: 
       249: argument: 
        250: expr: 
         251: name: bs
       252: argument: 
        253: expr: 
         254: literal: 3
       255: argument: 
        256: expr: 
         257: literal: "num_extra_slice_header_bits"
   258: expr_stmt: 
    259: expr: 
     260: name: 
      261: name: pps
      262: operator: ->
      263: name: sign_data_hiding_flag
     264: operator: =
     265: call: 
      266: name: gf_bs_read_int_log
      267: argument_list: 
       268: argument: 
        269: expr: 
         270: name: bs
       271: argument: 
        272: expr: 
         273: literal: 1
       274: argument: 
        275: expr: 
         276: literal: "sign_data_hiding_flag"
   277: expr_stmt: 
    278: expr: 
     279: name: 
      280: name: pps
      281: operator: ->
      282: name: cabac_init_present_flag
     283: operator: =
     284: call: 
      285: name: gf_bs_read_int_log
      286: argument_list: 
       287: argument: 
        288: expr: 
         289: name: bs
       290: argument: 
        291: expr: 
         292: literal: 1
       293: argument: 
        294: expr: 
         295: literal: "cabac_init_present_flag"
   296: expr_stmt: 
    297: expr: 
     298: name: 
      299: name: pps
      300: operator: ->
      301: name: num_ref_idx_l0_default_active
     302: operator: =
     303: literal: 1
     304: operator: +
     305: call: 
      306: name: gf_bs_read_ue_log
      307: argument_list: 
       308: argument: 
        309: expr: 
         310: name: bs
       311: argument: 
        312: expr: 
         313: literal: "num_ref_idx_l0_default_active"
   314: expr_stmt: 
    315: expr: 
     316: name: 
      317: name: pps
      318: operator: ->
      319: name: num_ref_idx_l1_default_active
     320: operator: =
     321: literal: 1
     322: operator: +
     323: call: 
      324: name: gf_bs_read_ue_log
      325: argument_list: 
       326: argument: 
        327: expr: 
         328: name: bs
       329: argument: 
        330: expr: 
         331: literal: "num_ref_idx_l1_default_active"
   332: expr_stmt: 
    333: expr: 
     334: name: 
      335: name: pps
      336: operator: ->
      337: name: pic_init_qp_minus26
     338: operator: =
     339: call: 
      340: name: gf_bs_read_se_log
      341: argument_list: 
       342: argument: 
        343: expr: 
         344: name: bs
       345: argument: 
        346: expr: 
         347: literal: "pic_init_qp_minus26"
   348: expr_stmt: 
    349: expr: 
     350: name: 
      351: name: pps
      352: operator: ->
      353: name: constrained_intra_pred_flag
     354: operator: =
     355: call: 
      356: name: gf_bs_read_int_log
      357: argument_list: 
       358: argument: 
        359: expr: 
         360: name: bs
       361: argument: 
        362: expr: 
         363: literal: 1
       364: argument: 
        365: expr: 
         366: literal: "constrained_intra_pred_flag"
   367: expr_stmt: 
    368: expr: 
     369: name: 
      370: name: pps
      371: operator: ->
      372: name: transform_skip_enabled_flag
     373: operator: =
     374: call: 
      375: name: gf_bs_read_int_log
      376: argument_list: 
       377: argument: 
        378: expr: 
         379: name: bs
       380: argument: 
        381: expr: 
         382: literal: 1
       383: argument: 
        384: expr: 
         385: literal: "transform_skip_enabled_flag"
   386: if_stmt: 
    387: if: 
     388: condition: 
      389: expr: 
       390: operator: (
       391: name: 
        392: name: pps
        393: operator: ->
        394: name: cu_qp_delta_enabled_flag
       395: operator: =
       396: call: 
        397: name: gf_bs_read_int_log
        398: argument_list: 
         399: argument: 
          400: expr: 
           401: name: bs
         402: argument: 
          403: expr: 
           404: literal: 1
         405: argument: 
          406: expr: 
           407: literal: "cu_qp_delta_enabled_flag"
       408: operator: )
     409: block: 
      410: block_content: 
       411: expr_stmt: 
        412: expr: 
         413: name: 
          414: name: pps
          415: operator: ->
          416: name: diff_cu_qp_delta_depth
         417: operator: =
         418: call: 
          419: name: gf_bs_read_ue_log
          420: argument_list: 
           421: argument: 
            422: expr: 
             423: name: bs
           424: argument: 
            425: expr: 
             426: literal: "diff_cu_qp_delta_depth"
   427: expr_stmt: 
    428: expr: 
     429: name: 
      430: name: pps
      431: operator: ->
      432: name: pic_cb_qp_offset
     433: operator: =
     434: call: 
      435: name: gf_bs_read_se_log
      436: argument_list: 
       437: argument: 
        438: expr: 
         439: name: bs
       440: argument: 
        441: expr: 
         442: literal: "pic_cb_qp_offset"
   443: expr_stmt: 
    444: expr: 
     445: name: 
      446: name: pps
      447: operator: ->
      448: name: pic_cr_qp_offset
     449: operator: =
     450: call: 
      451: name: gf_bs_read_se_log
      452: argument_list: 
       453: argument: 
        454: expr: 
         455: name: bs
       456: argument: 
        457: expr: 
         458: literal: "pic_cr_qp_offset"
   459: expr_stmt: 
    460: expr: 
     461: name: 
      462: name: pps
      463: operator: ->
      464: name: slice_chroma_qp_offsets_present_flag
     465: operator: =
     466: call: 
      467: name: gf_bs_read_int_log
      468: argument_list: 
       469: argument: 
        470: expr: 
         471: name: bs
       472: argument: 
        473: expr: 
         474: literal: 1
       475: argument: 
        476: expr: 
         477: literal: "slice_chroma_qp_offsets_present_flag"
   478: expr_stmt: 
    479: expr: 
     480: name: 
      481: name: pps
      482: operator: ->
      483: name: weighted_pred_flag
     484: operator: =
     485: call: 
      486: name: gf_bs_read_int_log
      487: argument_list: 
       488: argument: 
        489: expr: 
         490: name: bs
       491: argument: 
        492: expr: 
         493: literal: 1
       494: argument: 
        495: expr: 
         496: literal: "weighted_pred_flag"
   497: expr_stmt: 
    498: expr: 
     499: name: 
      500: name: pps
      501: operator: ->
      502: name: weighted_bipred_flag
     503: operator: =
     504: call: 
      505: name: gf_bs_read_int_log
      506: argument_list: 
       507: argument: 
        508: expr: 
         509: name: bs
       510: argument: 
        511: expr: 
         512: literal: 1
       513: argument: 
        514: expr: 
         515: literal: "weighted_bipred_flag"
   516: expr_stmt: 
    517: expr: 
     518: name: 
      519: name: pps
      520: operator: ->
      521: name: transquant_bypass_enable_flag
     522: operator: =
     523: call: 
      524: name: gf_bs_read_int_log
      525: argument_list: 
       526: argument: 
        527: expr: 
         528: name: bs
       529: argument: 
        530: expr: 
         531: literal: 1
       532: argument: 
        533: expr: 
         534: literal: "transquant_bypass_enable_flag"
   535: expr_stmt: 
    536: expr: 
     537: name: 
      538: name: pps
      539: operator: ->
      540: name: tiles_enabled_flag
     541: operator: =
     542: call: 
      543: name: gf_bs_read_int_log
      544: argument_list: 
       545: argument: 
        546: expr: 
         547: name: bs
       548: argument: 
        549: expr: 
         550: literal: 1
       551: argument: 
        552: expr: 
         553: literal: "tiles_enabled_flag"
   554: expr_stmt: 
    555: expr: 
     556: name: 
      557: name: pps
      558: operator: ->
      559: name: entropy_coding_sync_enabled_flag
     560: operator: =
     561: call: 
      562: name: gf_bs_read_int_log
      563: argument_list: 
       564: argument: 
        565: expr: 
         566: name: bs
       567: argument: 
        568: expr: 
         569: literal: 1
       570: argument: 
        571: expr: 
         572: literal: "entropy_coding_sync_enabled_flag"
   573: if_stmt: 
    574: if: 
     575: condition: 
      576: expr: 
       577: name: 
        578: name: pps
        579: operator: ->
        580: name: tiles_enabled_flag
     581: block: 
      582: block_content: 
       583: expr_stmt: 
        584: expr: 
         585: name: 
          586: name: pps
          587: operator: ->
          588: name: num_tile_columns
         589: operator: =
         590: literal: 1
         591: operator: +
         592: call: 
          593: name: gf_bs_read_ue_log
          594: argument_list: 
           595: argument: 
            596: expr: 
             597: name: bs
           598: argument: 
            599: expr: 
             600: literal: "num_tile_columns_minus1"
       601: expr_stmt: 
        602: expr: 
         603: name: 
          604: name: pps
          605: operator: ->
          606: name: num_tile_rows
         607: operator: =
         608: literal: 1
         609: operator: +
         610: call: 
          611: name: gf_bs_read_ue_log
          612: argument_list: 
           613: argument: 
            614: expr: 
             615: name: bs
           616: argument: 
            617: expr: 
             618: literal: "num_tile_rows_minus1"
       619: expr_stmt: 
        620: expr: 
         621: name: 
          622: name: pps
          623: operator: ->
          624: name: uniform_spacing_flag
         625: operator: =
         626: call: 
          627: name: gf_bs_read_int_log
          628: argument_list: 
           629: argument: 
            630: expr: 
             631: name: bs
           632: argument: 
            633: expr: 
             634: literal: 1
           635: argument: 
            636: expr: 
             637: literal: "uniform_spacing_flag"
       638: if_stmt: 
        639: if: 
         640: condition: 
          641: expr: 
           642: operator: !
           643: name: 
            644: name: pps
            645: operator: ->
            646: name: uniform_spacing_flag
         647: block: 
          648: block_content: 
           649: for: 
            650: control: 
             651: init: 
              652: expr: 
               653: name: i
               654: operator: =
               655: literal: 0
             656: condition: 
              657: expr: 
               658: name: i
               659: operator: <
               660: name: 
                661: name: pps
                662: operator: ->
                663: name: num_tile_columns
               664: operator: -
               665: literal: 1
             666: incr: 
              667: expr: 
               668: name: i
               669: operator: ++
            670: block: 
             671: block_content: 
              672: expr_stmt: 
               673: expr: 
                674: name: 
                 675: name: pps
                 676: operator: ->
                 677: name: column_width
                 678: index: 
                  679: expr: 
                   680: name: i
                681: operator: =
                682: literal: 1
                683: operator: +
                684: call: 
                 685: name: gf_bs_read_ue_log_idx
                 686: argument_list: 
                  687: argument: 
                   688: expr: 
                    689: name: bs
                  690: argument: 
                   691: expr: 
                    692: literal: "column_width_minus1"
                  693: argument: 
                   694: expr: 
                    695: name: i
           696: for: 
            697: control: 
             698: init: 
              699: expr: 
               700: name: i
               701: operator: =
               702: literal: 0
             703: condition: 
              704: expr: 
               705: name: i
               706: operator: <
               707: name: 
                708: name: pps
                709: operator: ->
                710: name: num_tile_rows
               711: operator: -
               712: literal: 1
             713: incr: 
              714: expr: 
               715: name: i
               716: operator: ++
            717: block: 
             718: block_content: 
              719: expr_stmt: 
               720: expr: 
                721: name: 
                 722: name: pps
                 723: operator: ->
                 724: name: row_height
                 725: index: 
                  726: expr: 
                   727: name: i
                728: operator: =
                729: literal: 1
                730: operator: +
                731: call: 
                 732: name: gf_bs_read_ue_log_idx
                 733: argument_list: 
                  734: argument: 
                   735: expr: 
                    736: name: bs
                  737: argument: 
                   738: expr: 
                    739: literal: "row_height_minus1"
                  740: argument: 
                   741: expr: 
                    742: name: i
       743: expr_stmt: 
        744: expr: 
         745: name: 
          746: name: pps
          747: operator: ->
          748: name: loop_filter_across_tiles_enabled_flag
         749: operator: =
         750: call: 
          751: name: gf_bs_read_int_log
          752: argument_list: 
           753: argument: 
            754: expr: 
             755: name: bs
           756: argument: 
            757: expr: 
             758: literal: 1
           759: argument: 
            760: expr: 
             761: literal: "loop_filter_across_tiles_enabled_flag"
   762: expr_stmt: 
    763: expr: 
     764: name: 
      765: name: pps
      766: operator: ->
      767: name: loop_filter_across_slices_enabled_flag
     768: operator: =
     769: call: 
      770: name: gf_bs_read_int_log
      771: argument_list: 
       772: argument: 
        773: expr: 
         774: name: bs
       775: argument: 
        776: expr: 
         777: literal: 1
       778: argument: 
        779: expr: 
         780: literal: "loop_filter_across_slices_enabled_flag"
   781: if_stmt: 
    782: if: 
     783: condition: 
      784: expr: 
       785: operator: (
       786: name: 
        787: name: pps
        788: operator: ->
        789: name: deblocking_filter_control_present_flag
       790: operator: =
       791: call: 
        792: name: gf_bs_read_int_log
        793: argument_list: 
         794: argument: 
          795: expr: 
           796: name: bs
         797: argument: 
          798: expr: 
           799: literal: 1
         800: argument: 
          801: expr: 
           802: literal: "deblocking_filter_control_present_flag"
       803: operator: )
     804: block: 
      805: block_content: 
       806: expr_stmt: 
        807: expr: 
         808: name: 
          809: name: pps
          810: operator: ->
          811: name: deblocking_filter_override_enabled_flag
         812: operator: =
         813: call: 
          814: name: gf_bs_read_int_log
          815: argument_list: 
           816: argument: 
            817: expr: 
             818: name: bs
           819: argument: 
            820: expr: 
             821: literal: 1
           822: argument: 
            823: expr: 
             824: literal: "deblocking_filter_override_enabled_flag"
       825: if_stmt: 
        826: if: 
         827: condition: 
          828: expr: 
           829: operator: !
           830: operator: (
           831: name: 
            832: name: pps
            833: operator: ->
            834: name: pic_disable_deblocking_filter_flag
           835: operator: =
           836: call: 
            837: name: gf_bs_read_int_log
            838: argument_list: 
             839: argument: 
              840: expr: 
               841: name: bs
             842: argument: 
              843: expr: 
               844: literal: 1
             845: argument: 
              846: expr: 
               847: literal: "pic_disable_deblocking_filter_flag"
           848: operator: )
         849: block: 
          850: block_content: 
           851: expr_stmt: 
            852: expr: 
             853: name: 
              854: name: pps
              855: operator: ->
              856: name: beta_offset_div2
             857: operator: =
             858: call: 
              859: name: gf_bs_read_se_log
              860: argument_list: 
               861: argument: 
                862: expr: 
                 863: name: bs
               864: argument: 
                865: expr: 
                 866: literal: "beta_offset_div2"
           867: expr_stmt: 
            868: expr: 
             869: name: 
              870: name: pps
              871: operator: ->
              872: name: tc_offset_div2
             873: operator: =
             874: call: 
              875: name: gf_bs_read_se_log
              876: argument_list: 
               877: argument: 
                878: expr: 
                 879: name: bs
               880: argument: 
                881: expr: 
                 882: literal: "tc_offset_div2"
   883: if_stmt: 
    884: if: 
     885: condition: 
      886: expr: 
       887: operator: (
       888: name: 
        889: name: pps
        890: operator: ->
        891: name: pic_scaling_list_data_present_flag
       892: operator: =
       893: call: 
        894: name: gf_bs_read_int_log
        895: argument_list: 
         896: argument: 
          897: expr: 
           898: name: bs
         899: argument: 
          900: expr: 
           901: literal: 1
         902: argument: 
          903: expr: 
           904: literal: "pic_scaling_list_data_present_flag"
       905: operator: )
     906: block: 
      907: block_content: 
       908: expr_stmt: 
        909: expr: 
         910: call: 
          911: name: hevc_scaling_list_data
          912: argument_list: 
           913: argument: 
            914: expr: 
             915: name: bs
   916: expr_stmt: 
    917: expr: 
     918: name: 
      919: name: pps
      920: operator: ->
      921: name: lists_modification_present_flag
     922: operator: =
     923: call: 
      924: name: gf_bs_read_int_log
      925: argument_list: 
       926: argument: 
        927: expr: 
         928: name: bs
       929: argument: 
        930: expr: 
         931: literal: 1
       932: argument: 
        933: expr: 
         934: literal: "lists_modification_present_flag"
   935: expr_stmt: 
    936: expr: 
     937: name: 
      938: name: pps
      939: operator: ->
      940: name: log2_parallel_merge_level_minus2
     941: operator: =
     942: call: 
      943: name: gf_bs_read_ue_log
      944: argument_list: 
       945: argument: 
        946: expr: 
         947: name: bs
       948: argument: 
        949: expr: 
         950: literal: "log2_parallel_merge_level_minus2"
   951: expr_stmt: 
    952: expr: 
     953: name: 
      954: name: pps
      955: operator: ->
      956: name: slice_segment_header_extension_present_flag
     957: operator: =
     958: call: 
      959: name: gf_bs_read_int_log
      960: argument_list: 
       961: argument: 
        962: expr: 
         963: name: bs
       964: argument: 
        965: expr: 
         966: literal: 1
       967: argument: 
        968: expr: 
         969: literal: "slice_segment_header_extension_present_flag"
   970: if_stmt: 
    971: if: 
     972: condition: 
      973: expr: 
       974: call: 
        975: name: gf_bs_read_int_log
        976: argument_list: 
         977: argument: 
          978: expr: 
           979: name: bs
         980: argument: 
          981: expr: 
           982: literal: 1
         983: argument: 
          984: expr: 
           985: literal: "pps_extension_flag"
     986: block: 
      987: block_content: 
       988: if: 
        989: directive: if
        990: expr: 
         991: literal: 0
       992: comment: /*pps_extension_data_flag */
       993: endif: 
        994: directive: endif
   995: return: 
    996: expr: 
     997: name: pps_id

----------------------------------------
0: function: 
 1: type: 
  2: specifier: static
  3: name: s32
 4: name: gf_hevc_read_pps_bs_internal
 5: parameter_list: 
  6: parameter: 
   7: decl: 
    8: type: 
     9: name: GF_BitStream
     10: modifier: *
    11: name: bs
  12: parameter: 
   13: decl: 
    14: type: 
     15: name: HEVCState
     16: modifier: *
    17: name: hevc
 18: block: 
  19: block_content: 
   20: decl_stmt: 
    21: decl: 
     22: type: 
      23: name: u32
     24: name: i
   25: decl_stmt: 
    26: decl: 
     27: type: 
      28: name: s32
     29: name: pps_id
   30: decl_stmt: 
    31: decl: 
     32: type: 
      33: name: HEVC_PPS
      34: modifier: *
     35: name: pps
   36: comment: //NAL header already read
   37: expr_stmt: 
    38: expr: 
     39: name: pps_id
     40: operator: =
     41: call: 
      42: name: gf_bs_read_ue_log
      43: argument_list: 
       44: argument: 
        45: expr: 
         46: name: bs
       47: argument: 
        48: expr: 
         49: literal: "pps_id"
   50: if_stmt: 
    51: if: 
     52: condition: 
      53: expr: 
       54: operator: (
       55: name: pps_id
       56: operator: <
       57: literal: 0
       58: operator: )
       59: operator: ||
       60: operator: (
       61: name: pps_id
       62: operator: >=
       63: literal: 64
       64: operator: )
     65: block: 
      66: block_content: 
       67: expr_stmt: 
        68: expr: 
         69: call: 
          70: name: GF_LOG
          71: argument_list: 
           72: argument: 
            73: expr: 
             74: name: GF_LOG_ERROR
           75: argument: 
            76: expr: 
             77: name: GF_LOG_CODING
           78: argument: 
            79: expr: 
             80: operator: (
             81: literal: "[HEVC] wrong PPS ID %d in PPS\n"
             82: operator: ,
             83: name: pps_id
             84: operator: )
       85: return: 
        86: expr: 
         87: operator: -
         88: literal: 1
   89: expr_stmt: 
    90: expr: 
     91: name: pps
     92: operator: =
     93: operator: &
     94: name: 
      95: name: hevc
      96: operator: ->
      97: name: pps
      98: index: 
       99: expr: 
        100: name: pps_id
   101: if_stmt: 
    102: if: 
     103: condition: 
      104: expr: 
       105: operator: !
       106: name: 
        107: name: pps
        108: operator: ->
        109: name: state
     110: block: 
      111: block_content: 
       112: expr_stmt: 
        113: expr: 
         114: name: 
          115: name: pps
          116: operator: ->
          117: name: id
         118: operator: =
         119: name: pps_id
       120: expr_stmt: 
        121: expr: 
         122: name: 
          123: name: pps
          124: operator: ->
          125: name: state
         126: operator: =
         127: literal: 1
   128: expr_stmt: 
    129: expr: 
     130: name: 
      131: name: pps
      132: operator: ->
      133: name: sps_id
     134: operator: =
     135: call: 
      136: name: gf_bs_read_ue_log
      137: argument_list: 
       138: argument: 
        139: expr: 
         140: name: bs
       141: argument: 
        142: expr: 
         143: literal: "sps_id"
   144: if_stmt: 
    145: if: 
     146: condition: 
      147: expr: 
       148: operator: (
       149: name: 
        150: name: pps
        151: operator: ->
        152: name: sps_id
       153: operator: <
       154: literal: 0
       155: operator: )
       156: operator: ||
       157: operator: (
       158: name: 
        159: name: pps
        160: operator: ->
        161: name: sps_id
       162: operator: >=
       163: literal: 16
       164: operator: )
     165: block: 
      166: block_content: 
       167: expr_stmt: 
        168: expr: 
         169: call: 
          170: name: GF_LOG
          171: argument_list: 
           172: argument: 
            173: expr: 
             174: name: GF_LOG_ERROR
           175: argument: 
            176: expr: 
             177: name: GF_LOG_CODING
           178: argument: 
            179: expr: 
             180: operator: (
             181: literal: "[HEVC] wrong SPS ID %d in PPS\n"
             182: operator: ,
             183: name: 
              184: name: pps
              185: operator: ->
              186: name: sps_id
             187: operator: )
       188: expr_stmt: 
        189: expr: 
         190: name: 
          191: name: pps
          192: operator: ->
          193: name: sps_id
         194: operator: =
         195: literal: 0
       196: return: 
        197: expr: 
         198: operator: -
         199: literal: 1
   200: expr_stmt: 
    201: expr: 
     202: name: 
      203: name: hevc
      204: operator: ->
      205: name: sps_active_idx
     206: operator: =
     207: name: 
      208: name: pps
      209: operator: ->
      210: name: sps_id
   211: comment: /*set active sps*/
   212: expr_stmt: 
    213: expr: 
     214: name: 
      215: name: pps
      216: operator: ->
      217: name: dependent_slice_segments_enabled_flag
     218: operator: =
     219: call: 
      220: name: gf_bs_read_int_log
      221: argument_list: 
       222: argument: 
        223: expr: 
         224: name: bs
       225: argument: 
        226: expr: 
         227: literal: 1
       228: argument: 
        229: expr: 
         230: literal: "dependent_slice_segments_enabled_flag"
   231: expr_stmt: 
    232: expr: 
     233: name: 
      234: name: pps
      235: operator: ->
      236: name: output_flag_present_flag
     237: operator: =
     238: call: 
      239: name: gf_bs_read_int_log
      240: argument_list: 
       241: argument: 
        242: expr: 
         243: name: bs
       244: argument: 
        245: expr: 
         246: literal: 1
       247: argument: 
        248: expr: 
         249: literal: "output_flag_present_flag"
   250: expr_stmt: 
    251: expr: 
     252: name: 
      253: name: pps
      254: operator: ->
      255: name: num_extra_slice_header_bits
     256: operator: =
     257: call: 
      258: name: gf_bs_read_int_log
      259: argument_list: 
       260: argument: 
        261: expr: 
         262: name: bs
       263: argument: 
        264: expr: 
         265: literal: 3
       266: argument: 
        267: expr: 
         268: literal: "num_extra_slice_header_bits"
   269: expr_stmt: 
    270: expr: 
     271: name: 
      272: name: pps
      273: operator: ->
      274: name: sign_data_hiding_flag
     275: operator: =
     276: call: 
      277: name: gf_bs_read_int_log
      278: argument_list: 
       279: argument: 
        280: expr: 
         281: name: bs
       282: argument: 
        283: expr: 
         284: literal: 1
       285: argument: 
        286: expr: 
         287: literal: "sign_data_hiding_flag"
   288: expr_stmt: 
    289: expr: 
     290: name: 
      291: name: pps
      292: operator: ->
      293: name: cabac_init_present_flag
     294: operator: =
     295: call: 
      296: name: gf_bs_read_int_log
      297: argument_list: 
       298: argument: 
        299: expr: 
         300: name: bs
       301: argument: 
        302: expr: 
         303: literal: 1
       304: argument: 
        305: expr: 
         306: literal: "cabac_init_present_flag"
   307: expr_stmt: 
    308: expr: 
     309: name: 
      310: name: pps
      311: operator: ->
      312: name: num_ref_idx_l0_default_active
     313: operator: =
     314: literal: 1
     315: operator: +
     316: call: 
      317: name: gf_bs_read_ue_log
      318: argument_list: 
       319: argument: 
        320: expr: 
         321: name: bs
       322: argument: 
        323: expr: 
         324: literal: "num_ref_idx_l0_default_active"
   325: expr_stmt: 
    326: expr: 
     327: name: 
      328: name: pps
      329: operator: ->
      330: name: num_ref_idx_l1_default_active
     331: operator: =
     332: literal: 1
     333: operator: +
     334: call: 
      335: name: gf_bs_read_ue_log
      336: argument_list: 
       337: argument: 
        338: expr: 
         339: name: bs
       340: argument: 
        341: expr: 
         342: literal: "num_ref_idx_l1_default_active"
   343: expr_stmt: 
    344: expr: 
     345: name: 
      346: name: pps
      347: operator: ->
      348: name: pic_init_qp_minus26
     349: operator: =
     350: call: 
      351: name: gf_bs_read_se_log
      352: argument_list: 
       353: argument: 
        354: expr: 
         355: name: bs
       356: argument: 
        357: expr: 
         358: literal: "pic_init_qp_minus26"
   359: expr_stmt: 
    360: expr: 
     361: name: 
      362: name: pps
      363: operator: ->
      364: name: constrained_intra_pred_flag
     365: operator: =
     366: call: 
      367: name: gf_bs_read_int_log
      368: argument_list: 
       369: argument: 
        370: expr: 
         371: name: bs
       372: argument: 
        373: expr: 
         374: literal: 1
       375: argument: 
        376: expr: 
         377: literal: "constrained_intra_pred_flag"
   378: expr_stmt: 
    379: expr: 
     380: name: 
      381: name: pps
      382: operator: ->
      383: name: transform_skip_enabled_flag
     384: operator: =
     385: call: 
      386: name: gf_bs_read_int_log
      387: argument_list: 
       388: argument: 
        389: expr: 
         390: name: bs
       391: argument: 
        392: expr: 
         393: literal: 1
       394: argument: 
        395: expr: 
         396: literal: "transform_skip_enabled_flag"
   397: if_stmt: 
    398: if: 
     399: condition: 
      400: expr: 
       401: operator: (
       402: name: 
        403: name: pps
        404: operator: ->
        405: name: cu_qp_delta_enabled_flag
       406: operator: =
       407: call: 
        408: name: gf_bs_read_int_log
        409: argument_list: 
         410: argument: 
          411: expr: 
           412: name: bs
         413: argument: 
          414: expr: 
           415: literal: 1
         416: argument: 
          417: expr: 
           418: literal: "cu_qp_delta_enabled_flag"
       419: operator: )
     420: block: 
      421: block_content: 
       422: expr_stmt: 
        423: expr: 
         424: name: 
          425: name: pps
          426: operator: ->
          427: name: diff_cu_qp_delta_depth
         428: operator: =
         429: call: 
          430: name: gf_bs_read_ue_log
          431: argument_list: 
           432: argument: 
            433: expr: 
             434: name: bs
           435: argument: 
            436: expr: 
             437: literal: "diff_cu_qp_delta_depth"
   438: expr_stmt: 
    439: expr: 
     440: name: 
      441: name: pps
      442: operator: ->
      443: name: pic_cb_qp_offset
     444: operator: =
     445: call: 
      446: name: gf_bs_read_se_log
      447: argument_list: 
       448: argument: 
        449: expr: 
         450: name: bs
       451: argument: 
        452: expr: 
         453: literal: "pic_cb_qp_offset"
   454: expr_stmt: 
    455: expr: 
     456: name: 
      457: name: pps
      458: operator: ->
      459: name: pic_cr_qp_offset
     460: operator: =
     461: call: 
      462: name: gf_bs_read_se_log
      463: argument_list: 
       464: argument: 
        465: expr: 
         466: name: bs
       467: argument: 
        468: expr: 
         469: literal: "pic_cr_qp_offset"
   470: expr_stmt: 
    471: expr: 
     472: name: 
      473: name: pps
      474: operator: ->
      475: name: slice_chroma_qp_offsets_present_flag
     476: operator: =
     477: call: 
      478: name: gf_bs_read_int_log
      479: argument_list: 
       480: argument: 
        481: expr: 
         482: name: bs
       483: argument: 
        484: expr: 
         485: literal: 1
       486: argument: 
        487: expr: 
         488: literal: "slice_chroma_qp_offsets_present_flag"
   489: expr_stmt: 
    490: expr: 
     491: name: 
      492: name: pps
      493: operator: ->
      494: name: weighted_pred_flag
     495: operator: =
     496: call: 
      497: name: gf_bs_read_int_log
      498: argument_list: 
       499: argument: 
        500: expr: 
         501: name: bs
       502: argument: 
        503: expr: 
         504: literal: 1
       505: argument: 
        506: expr: 
         507: literal: "weighted_pred_flag"
   508: expr_stmt: 
    509: expr: 
     510: name: 
      511: name: pps
      512: operator: ->
      513: name: weighted_bipred_flag
     514: operator: =
     515: call: 
      516: name: gf_bs_read_int_log
      517: argument_list: 
       518: argument: 
        519: expr: 
         520: name: bs
       521: argument: 
        522: expr: 
         523: literal: 1
       524: argument: 
        525: expr: 
         526: literal: "weighted_bipred_flag"
   527: expr_stmt: 
    528: expr: 
     529: name: 
      530: name: pps
      531: operator: ->
      532: name: transquant_bypass_enable_flag
     533: operator: =
     534: call: 
      535: name: gf_bs_read_int_log
      536: argument_list: 
       537: argument: 
        538: expr: 
         539: name: bs
       540: argument: 
        541: expr: 
         542: literal: 1
       543: argument: 
        544: expr: 
         545: literal: "transquant_bypass_enable_flag"
   546: expr_stmt: 
    547: expr: 
     548: name: 
      549: name: pps
      550: operator: ->
      551: name: tiles_enabled_flag
     552: operator: =
     553: call: 
      554: name: gf_bs_read_int_log
      555: argument_list: 
       556: argument: 
        557: expr: 
         558: name: bs
       559: argument: 
        560: expr: 
         561: literal: 1
       562: argument: 
        563: expr: 
         564: literal: "tiles_enabled_flag"
   565: expr_stmt: 
    566: expr: 
     567: name: 
      568: name: pps
      569: operator: ->
      570: name: entropy_coding_sync_enabled_flag
     571: operator: =
     572: call: 
      573: name: gf_bs_read_int_log
      574: argument_list: 
       575: argument: 
        576: expr: 
         577: name: bs
       578: argument: 
        579: expr: 
         580: literal: 1
       581: argument: 
        582: expr: 
         583: literal: "entropy_coding_sync_enabled_flag"
   584: if_stmt: 
    585: if: 
     586: condition: 
      587: expr: 
       588: name: 
        589: name: pps
        590: operator: ->
        591: name: tiles_enabled_flag
     592: block: 
      593: block_content: 
       594: expr_stmt: 
        595: expr: 
         596: name: 
          597: name: pps
          598: operator: ->
          599: name: num_tile_columns
         600: operator: =
         601: literal: 1
         602: operator: +
         603: call: 
          604: name: gf_bs_read_ue_log
          605: argument_list: 
           606: argument: 
            607: expr: 
             608: name: bs
           609: argument: 
            610: expr: 
             611: literal: "num_tile_columns_minus1"
       612: expr_stmt: 
        613: expr: 
         614: name: 
          615: name: pps
          616: operator: ->
          617: name: num_tile_rows
         618: operator: =
         619: literal: 1
         620: operator: +
         621: call: 
          622: name: gf_bs_read_ue_log
          623: argument_list: 
           624: argument: 
            625: expr: 
             626: name: bs
           627: argument: 
            628: expr: 
             629: literal: "num_tile_rows_minus1"
       630: expr_stmt: 
        631: expr: 
         632: name: 
          633: name: pps
          634: operator: ->
          635: name: uniform_spacing_flag
         636: operator: =
         637: call: 
          638: name: gf_bs_read_int_log
          639: argument_list: 
           640: argument: 
            641: expr: 
             642: name: bs
           643: argument: 
            644: expr: 
             645: literal: 1
           646: argument: 
            647: expr: 
             648: literal: "uniform_spacing_flag"
       649: if_stmt: 
        650: if: 
         651: condition: 
          652: expr: 
           653: operator: !
           654: name: 
            655: name: pps
            656: operator: ->
            657: name: uniform_spacing_flag
         658: block: 
          659: block_content: 
           660: for: 
            661: control: 
             662: init: 
              663: expr: 
               664: name: i
               665: operator: =
               666: literal: 0
             667: condition: 
              668: expr: 
               669: name: i
               670: operator: <
               671: name: 
                672: name: pps
                673: operator: ->
                674: name: num_tile_columns
               675: operator: -
               676: literal: 1
             677: incr: 
              678: expr: 
               679: name: i
               680: operator: ++
            681: block: 
             682: block_content: 
              683: expr_stmt: 
               684: expr: 
                685: name: 
                 686: name: pps
                 687: operator: ->
                 688: name: column_width
                 689: index: 
                  690: expr: 
                   691: name: i
                692: operator: =
                693: literal: 1
                694: operator: +
                695: call: 
                 696: name: gf_bs_read_ue_log_idx
                 697: argument_list: 
                  698: argument: 
                   699: expr: 
                    700: name: bs
                  701: argument: 
                   702: expr: 
                    703: literal: "column_width_minus1"
                  704: argument: 
                   705: expr: 
                    706: name: i
           707: for: 
            708: control: 
             709: init: 
              710: expr: 
               711: name: i
               712: operator: =
               713: literal: 0
             714: condition: 
              715: expr: 
               716: name: i
               717: operator: <
               718: name: 
                719: name: pps
                720: operator: ->
                721: name: num_tile_rows
               722: operator: -
               723: literal: 1
             724: incr: 
              725: expr: 
               726: name: i
               727: operator: ++
            728: block: 
             729: block_content: 
              730: expr_stmt: 
               731: expr: 
                732: name: 
                 733: name: pps
                 734: operator: ->
                 735: name: row_height
                 736: index: 
                  737: expr: 
                   738: name: i
                739: operator: =
                740: literal: 1
                741: operator: +
                742: call: 
                 743: name: gf_bs_read_ue_log_idx
                 744: argument_list: 
                  745: argument: 
                   746: expr: 
                    747: name: bs
                  748: argument: 
                   749: expr: 
                    750: literal: "row_height_minus1"
                  751: argument: 
                   752: expr: 
                    753: name: i
       754: expr_stmt: 
        755: expr: 
         756: name: 
          757: name: pps
          758: operator: ->
          759: name: loop_filter_across_tiles_enabled_flag
         760: operator: =
         761: call: 
          762: name: gf_bs_read_int_log
          763: argument_list: 
           764: argument: 
            765: expr: 
             766: name: bs
           767: argument: 
            768: expr: 
             769: literal: 1
           770: argument: 
            771: expr: 
             772: literal: "loop_filter_across_tiles_enabled_flag"
   773: expr_stmt: 
    774: expr: 
     775: name: 
      776: name: pps
      777: operator: ->
      778: name: loop_filter_across_slices_enabled_flag
     779: operator: =
     780: call: 
      781: name: gf_bs_read_int_log
      782: argument_list: 
       783: argument: 
        784: expr: 
         785: name: bs
       786: argument: 
        787: expr: 
         788: literal: 1
       789: argument: 
        790: expr: 
         791: literal: "loop_filter_across_slices_enabled_flag"
   792: if_stmt: 
    793: if: 
     794: condition: 
      795: expr: 
       796: operator: (
       797: name: 
        798: name: pps
        799: operator: ->
        800: name: deblocking_filter_control_present_flag
       801: operator: =
       802: call: 
        803: name: gf_bs_read_int_log
        804: argument_list: 
         805: argument: 
          806: expr: 
           807: name: bs
         808: argument: 
          809: expr: 
           810: literal: 1
         811: argument: 
          812: expr: 
           813: literal: "deblocking_filter_control_present_flag"
       814: operator: )
     815: block: 
      816: block_content: 
       817: expr_stmt: 
        818: expr: 
         819: name: 
          820: name: pps
          821: operator: ->
          822: name: deblocking_filter_override_enabled_flag
         823: operator: =
         824: call: 
          825: name: gf_bs_read_int_log
          826: argument_list: 
           827: argument: 
            828: expr: 
             829: name: bs
           830: argument: 
            831: expr: 
             832: literal: 1
           833: argument: 
            834: expr: 
             835: literal: "deblocking_filter_override_enabled_flag"
       836: if_stmt: 
        837: if: 
         838: condition: 
          839: expr: 
           840: operator: !
           841: operator: (
           842: name: 
            843: name: pps
            844: operator: ->
            845: name: pic_disable_deblocking_filter_flag
           846: operator: =
           847: call: 
            848: name: gf_bs_read_int_log
            849: argument_list: 
             850: argument: 
              851: expr: 
               852: name: bs
             853: argument: 
              854: expr: 
               855: literal: 1
             856: argument: 
              857: expr: 
               858: literal: "pic_disable_deblocking_filter_flag"
           859: operator: )
         860: block: 
          861: block_content: 
           862: expr_stmt: 
            863: expr: 
             864: name: 
              865: name: pps
              866: operator: ->
              867: name: beta_offset_div2
             868: operator: =
             869: call: 
              870: name: gf_bs_read_se_log
              871: argument_list: 
               872: argument: 
                873: expr: 
                 874: name: bs
               875: argument: 
                876: expr: 
                 877: literal: "beta_offset_div2"
           878: expr_stmt: 
            879: expr: 
             880: name: 
              881: name: pps
              882: operator: ->
              883: name: tc_offset_div2
             884: operator: =
             885: call: 
              886: name: gf_bs_read_se_log
              887: argument_list: 
               888: argument: 
                889: expr: 
                 890: name: bs
               891: argument: 
                892: expr: 
                 893: literal: "tc_offset_div2"
   894: if_stmt: 
    895: if: 
     896: condition: 
      897: expr: 
       898: operator: (
       899: name: 
        900: name: pps
        901: operator: ->
        902: name: pic_scaling_list_data_present_flag
       903: operator: =
       904: call: 
        905: name: gf_bs_read_int_log
        906: argument_list: 
         907: argument: 
          908: expr: 
           909: name: bs
         910: argument: 
          911: expr: 
           912: literal: 1
         913: argument: 
          914: expr: 
           915: literal: "pic_scaling_list_data_present_flag"
       916: operator: )
     917: block: 
      918: block_content: 
       919: expr_stmt: 
        920: expr: 
         921: call: 
          922: name: hevc_scaling_list_data
          923: argument_list: 
           924: argument: 
            925: expr: 
             926: name: bs
   927: expr_stmt: 
    928: expr: 
     929: name: 
      930: name: pps
      931: operator: ->
      932: name: lists_modification_present_flag
     933: operator: =
     934: call: 
      935: name: gf_bs_read_int_log
      936: argument_list: 
       937: argument: 
        938: expr: 
         939: name: bs
       940: argument: 
        941: expr: 
         942: literal: 1
       943: argument: 
        944: expr: 
         945: literal: "lists_modification_present_flag"
   946: expr_stmt: 
    947: expr: 
     948: name: 
      949: name: pps
      950: operator: ->
      951: name: log2_parallel_merge_level_minus2
     952: operator: =
     953: call: 
      954: name: gf_bs_read_ue_log
      955: argument_list: 
       956: argument: 
        957: expr: 
         958: name: bs
       959: argument: 
        960: expr: 
         961: literal: "log2_parallel_merge_level_minus2"
   962: expr_stmt: 
    963: expr: 
     964: name: 
      965: name: pps
      966: operator: ->
      967: name: slice_segment_header_extension_present_flag
     968: operator: =
     969: call: 
      970: name: gf_bs_read_int_log
      971: argument_list: 
       972: argument: 
        973: expr: 
         974: name: bs
       975: argument: 
        976: expr: 
         977: literal: 1
       978: argument: 
        979: expr: 
         980: literal: "slice_segment_header_extension_present_flag"
   981: if_stmt: 
    982: if: 
     983: condition: 
      984: expr: 
       985: call: 
        986: name: gf_bs_read_int_log
        987: argument_list: 
         988: argument: 
          989: expr: 
           990: name: bs
         991: argument: 
          992: expr: 
           993: literal: 1
         994: argument: 
          995: expr: 
           996: literal: "pps_extension_flag"
     997: block: 
      998: block_content: 
       999: if: 
        1000: directive: if
        1001: expr: 
         1002: literal: 0
       1003: comment: /*pps_extension_data_flag */
       1004: endif: 
        1005: directive: endif
   1006: return: 
    1007: expr: 
     1008: name: pps_id
=====
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: u32
    6: name: i
  7: decl_stmt: 
   8: decl: 
    9: type: 
     10: name: s32
    11: name: pps_id
  12: decl_stmt: 
   13: decl: 
    14: type: 
     15: name: HEVC_PPS
     16: modifier: *
    17: name: pps
  18: comment: //NAL header already read
  19: expr_stmt: 
   20: expr: 
    21: name: pps_id
    22: operator: =
    23: call: 
     24: name: gf_bs_read_ue_log
     25: argument_list: 
      26: argument: 
       27: expr: 
        28: name: bs
      29: argument: 
       30: expr: 
        31: literal: "pps_id"
  32: if_stmt: 
   33: if: 
    34: condition: 
     35: expr: 
      36: operator: (
      37: name: pps_id
      38: operator: <
      39: literal: 0
      40: operator: )
      41: operator: ||
      42: operator: (
      43: name: pps_id
      44: operator: >=
      45: literal: 64
      46: operator: )
    47: block: 
     48: block_content: 
      49: expr_stmt: 
       50: expr: 
        51: call: 
         52: name: GF_LOG
         53: argument_list: 
          54: argument: 
           55: expr: 
            56: name: GF_LOG_ERROR
          57: argument: 
           58: expr: 
            59: name: GF_LOG_CODING
          60: argument: 
           61: expr: 
            62: operator: (
            63: literal: "[HEVC] wrong PPS ID %d in PPS\n"
            64: operator: ,
            65: name: pps_id
            66: operator: )
      67: return: 
       68: expr: 
        69: operator: -
        70: literal: 1
  71: expr_stmt: 
   72: expr: 
    73: name: pps
    74: operator: =
    75: operator: &
    76: name: 
     77: name: hevc
     78: operator: ->
     79: name: pps
     80: index: 
      81: expr: 
       82: name: pps_id
  83: if_stmt: 
   84: if: 
    85: condition: 
     86: expr: 
      87: operator: !
      88: name: 
       89: name: pps
       90: operator: ->
       91: name: state
    92: block: 
     93: block_content: 
      94: expr_stmt: 
       95: expr: 
        96: name: 
         97: name: pps
         98: operator: ->
         99: name: id
        100: operator: =
        101: name: pps_id
      102: expr_stmt: 
       103: expr: 
        104: name: 
         105: name: pps
         106: operator: ->
         107: name: state
        108: operator: =
        109: literal: 1
  110: expr_stmt: 
   111: expr: 
    112: name: 
     113: name: pps
     114: operator: ->
     115: name: sps_id
    116: operator: =
    117: call: 
     118: name: gf_bs_read_ue_log
     119: argument_list: 
      120: argument: 
       121: expr: 
        122: name: bs
      123: argument: 
       124: expr: 
        125: literal: "sps_id"
  126: if_stmt: 
   127: if: 
    128: condition: 
     129: expr: 
      130: name: 
       131: name: pps
       132: operator: ->
       133: name: sps_id
      134: operator: >=
      135: literal: 16
    136: block: 
     137: block_content: 
      138: expr_stmt: 
       139: expr: 
        140: call: 
         141: name: GF_LOG
         142: argument_list: 
          143: argument: 
           144: expr: 
            145: name: GF_LOG_ERROR
          146: argument: 
           147: expr: 
            148: name: GF_LOG_CODING
          149: argument: 
           150: expr: 
            151: operator: (
            152: literal: "[HEVC] wrong SPS ID %d in PPS\n"
            153: operator: ,
            154: name: 
             155: name: pps
             156: operator: ->
             157: name: sps_id
            158: operator: )
      159: expr_stmt: 
       160: expr: 
        161: name: 
         162: name: pps
         163: operator: ->
         164: name: sps_id
        165: operator: =
        166: literal: 0
      167: return: 
       168: expr: 
        169: operator: -
        170: literal: 1
  171: expr_stmt: 
   172: expr: 
    173: name: 
     174: name: hevc
     175: operator: ->
     176: name: sps_active_idx
    177: operator: =
    178: name: 
     179: name: pps
     180: operator: ->
     181: name: sps_id
  182: comment: /*set active sps*/
  183: expr_stmt: 
   184: expr: 
    185: name: 
     186: name: pps
     187: operator: ->
     188: name: dependent_slice_segments_enabled_flag
    189: operator: =
    190: call: 
     191: name: gf_bs_read_int_log
     192: argument_list: 
      193: argument: 
       194: expr: 
        195: name: bs
      196: argument: 
       197: expr: 
        198: literal: 1
      199: argument: 
       200: expr: 
        201: literal: "dependent_slice_segments_enabled_flag"
  202: expr_stmt: 
   203: expr: 
    204: name: 
     205: name: pps
     206: operator: ->
     207: name: output_flag_present_flag
    208: operator: =
    209: call: 
     210: name: gf_bs_read_int_log
     211: argument_list: 
      212: argument: 
       213: expr: 
        214: name: bs
      215: argument: 
       216: expr: 
        217: literal: 1
      218: argument: 
       219: expr: 
        220: literal: "output_flag_present_flag"
  221: expr_stmt: 
   222: expr: 
    223: name: 
     224: name: pps
     225: operator: ->
     226: name: num_extra_slice_header_bits
    227: operator: =
    228: call: 
     229: name: gf_bs_read_int_log
     230: argument_list: 
      231: argument: 
       232: expr: 
        233: name: bs
      234: argument: 
       235: expr: 
        236: literal: 3
      237: argument: 
       238: expr: 
        239: literal: "num_extra_slice_header_bits"
  240: expr_stmt: 
   241: expr: 
    242: name: 
     243: name: pps
     244: operator: ->
     245: name: sign_data_hiding_flag
    246: operator: =
    247: call: 
     248: name: gf_bs_read_int_log
     249: argument_list: 
      250: argument: 
       251: expr: 
        252: name: bs
      253: argument: 
       254: expr: 
        255: literal: 1
      256: argument: 
       257: expr: 
        258: literal: "sign_data_hiding_flag"
  259: expr_stmt: 
   260: expr: 
    261: name: 
     262: name: pps
     263: operator: ->
     264: name: cabac_init_present_flag
    265: operator: =
    266: call: 
     267: name: gf_bs_read_int_log
     268: argument_list: 
      269: argument: 
       270: expr: 
        271: name: bs
      272: argument: 
       273: expr: 
        274: literal: 1
      275: argument: 
       276: expr: 
        277: literal: "cabac_init_present_flag"
  278: expr_stmt: 
   279: expr: 
    280: name: 
     281: name: pps
     282: operator: ->
     283: name: num_ref_idx_l0_default_active
    284: operator: =
    285: literal: 1
    286: operator: +
    287: call: 
     288: name: gf_bs_read_ue_log
     289: argument_list: 
      290: argument: 
       291: expr: 
        292: name: bs
      293: argument: 
       294: expr: 
        295: literal: "num_ref_idx_l0_default_active"
  296: expr_stmt: 
   297: expr: 
    298: name: 
     299: name: pps
     300: operator: ->
     301: name: num_ref_idx_l1_default_active
    302: operator: =
    303: literal: 1
    304: operator: +
    305: call: 
     306: name: gf_bs_read_ue_log
     307: argument_list: 
      308: argument: 
       309: expr: 
        310: name: bs
      311: argument: 
       312: expr: 
        313: literal: "num_ref_idx_l1_default_active"
  314: expr_stmt: 
   315: expr: 
    316: name: 
     317: name: pps
     318: operator: ->
     319: name: pic_init_qp_minus26
    320: operator: =
    321: call: 
     322: name: gf_bs_read_se_log
     323: argument_list: 
      324: argument: 
       325: expr: 
        326: name: bs
      327: argument: 
       328: expr: 
        329: literal: "pic_init_qp_minus26"
  330: expr_stmt: 
   331: expr: 
    332: name: 
     333: name: pps
     334: operator: ->
     335: name: constrained_intra_pred_flag
    336: operator: =
    337: call: 
     338: name: gf_bs_read_int_log
     339: argument_list: 
      340: argument: 
       341: expr: 
        342: name: bs
      343: argument: 
       344: expr: 
        345: literal: 1
      346: argument: 
       347: expr: 
        348: literal: "constrained_intra_pred_flag"
  349: expr_stmt: 
   350: expr: 
    351: name: 
     352: name: pps
     353: operator: ->
     354: name: transform_skip_enabled_flag
    355: operator: =
    356: call: 
     357: name: gf_bs_read_int_log
     358: argument_list: 
      359: argument: 
       360: expr: 
        361: name: bs
      362: argument: 
       363: expr: 
        364: literal: 1
      365: argument: 
       366: expr: 
        367: literal: "transform_skip_enabled_flag"
  368: if_stmt: 
   369: if: 
    370: condition: 
     371: expr: 
      372: operator: (
      373: name: 
       374: name: pps
       375: operator: ->
       376: name: cu_qp_delta_enabled_flag
      377: operator: =
      378: call: 
       379: name: gf_bs_read_int_log
       380: argument_list: 
        381: argument: 
         382: expr: 
          383: name: bs
        384: argument: 
         385: expr: 
          386: literal: 1
        387: argument: 
         388: expr: 
          389: literal: "cu_qp_delta_enabled_flag"
      390: operator: )
    391: block: 
     392: block_content: 
      393: expr_stmt: 
       394: expr: 
        395: name: 
         396: name: pps
         397: operator: ->
         398: name: diff_cu_qp_delta_depth
        399: operator: =
        400: call: 
         401: name: gf_bs_read_ue_log
         402: argument_list: 
          403: argument: 
           404: expr: 
            405: name: bs
          406: argument: 
           407: expr: 
            408: literal: "diff_cu_qp_delta_depth"
  409: expr_stmt: 
   410: expr: 
    411: name: 
     412: name: pps
     413: operator: ->
     414: name: pic_cb_qp_offset
    415: operator: =
    416: call: 
     417: name: gf_bs_read_se_log
     418: argument_list: 
      419: argument: 
       420: expr: 
        421: name: bs
      422: argument: 
       423: expr: 
        424: literal: "pic_cb_qp_offset"
  425: expr_stmt: 
   426: expr: 
    427: name: 
     428: name: pps
     429: operator: ->
     430: name: pic_cr_qp_offset
    431: operator: =
    432: call: 
     433: name: gf_bs_read_se_log
     434: argument_list: 
      435: argument: 
       436: expr: 
        437: name: bs
      438: argument: 
       439: expr: 
        440: literal: "pic_cr_qp_offset"
  441: expr_stmt: 
   442: expr: 
    443: name: 
     444: name: pps
     445: operator: ->
     446: name: slice_chroma_qp_offsets_present_flag
    447: operator: =
    448: call: 
     449: name: gf_bs_read_int_log
     450: argument_list: 
      451: argument: 
       452: expr: 
        453: name: bs
      454: argument: 
       455: expr: 
        456: literal: 1
      457: argument: 
       458: expr: 
        459: literal: "slice_chroma_qp_offsets_present_flag"
  460: expr_stmt: 
   461: expr: 
    462: name: 
     463: name: pps
     464: operator: ->
     465: name: weighted_pred_flag
    466: operator: =
    467: call: 
     468: name: gf_bs_read_int_log
     469: argument_list: 
      470: argument: 
       471: expr: 
        472: name: bs
      473: argument: 
       474: expr: 
        475: literal: 1
      476: argument: 
       477: expr: 
        478: literal: "weighted_pred_flag"
  479: expr_stmt: 
   480: expr: 
    481: name: 
     482: name: pps
     483: operator: ->
     484: name: weighted_bipred_flag
    485: operator: =
    486: call: 
     487: name: gf_bs_read_int_log
     488: argument_list: 
      489: argument: 
       490: expr: 
        491: name: bs
      492: argument: 
       493: expr: 
        494: literal: 1
      495: argument: 
       496: expr: 
        497: literal: "weighted_bipred_flag"
  498: expr_stmt: 
   499: expr: 
    500: name: 
     501: name: pps
     502: operator: ->
     503: name: transquant_bypass_enable_flag
    504: operator: =
    505: call: 
     506: name: gf_bs_read_int_log
     507: argument_list: 
      508: argument: 
       509: expr: 
        510: name: bs
      511: argument: 
       512: expr: 
        513: literal: 1
      514: argument: 
       515: expr: 
        516: literal: "transquant_bypass_enable_flag"
  517: expr_stmt: 
   518: expr: 
    519: name: 
     520: name: pps
     521: operator: ->
     522: name: tiles_enabled_flag
    523: operator: =
    524: call: 
     525: name: gf_bs_read_int_log
     526: argument_list: 
      527: argument: 
       528: expr: 
        529: name: bs
      530: argument: 
       531: expr: 
        532: literal: 1
      533: argument: 
       534: expr: 
        535: literal: "tiles_enabled_flag"
  536: expr_stmt: 
   537: expr: 
    538: name: 
     539: name: pps
     540: operator: ->
     541: name: entropy_coding_sync_enabled_flag
    542: operator: =
    543: call: 
     544: name: gf_bs_read_int_log
     545: argument_list: 
      546: argument: 
       547: expr: 
        548: name: bs
      549: argument: 
       550: expr: 
        551: literal: 1
      552: argument: 
       553: expr: 
        554: literal: "entropy_coding_sync_enabled_flag"
  555: if_stmt: 
   556: if: 
    557: condition: 
     558: expr: 
      559: name: 
       560: name: pps
       561: operator: ->
       562: name: tiles_enabled_flag
    563: block: 
     564: block_content: 
      565: expr_stmt: 
       566: expr: 
        567: name: 
         568: name: pps
         569: operator: ->
         570: name: num_tile_columns
        571: operator: =
        572: literal: 1
        573: operator: +
        574: call: 
         575: name: gf_bs_read_ue_log
         576: argument_list: 
          577: argument: 
           578: expr: 
            579: name: bs
          580: argument: 
           581: expr: 
            582: literal: "num_tile_columns_minus1"
      583: expr_stmt: 
       584: expr: 
        585: name: 
         586: name: pps
         587: operator: ->
         588: name: num_tile_rows
        589: operator: =
        590: literal: 1
        591: operator: +
        592: call: 
         593: name: gf_bs_read_ue_log
         594: argument_list: 
          595: argument: 
           596: expr: 
            597: name: bs
          598: argument: 
           599: expr: 
            600: literal: "num_tile_rows_minus1"
      601: expr_stmt: 
       602: expr: 
        603: name: 
         604: name: pps
         605: operator: ->
         606: name: uniform_spacing_flag
        607: operator: =
        608: call: 
         609: name: gf_bs_read_int_log
         610: argument_list: 
          611: argument: 
           612: expr: 
            613: name: bs
          614: argument: 
           615: expr: 
            616: literal: 1
          617: argument: 
           618: expr: 
            619: literal: "uniform_spacing_flag"
      620: if_stmt: 
       621: if: 
        622: condition: 
         623: expr: 
          624: operator: !
          625: name: 
           626: name: pps
           627: operator: ->
           628: name: uniform_spacing_flag
        629: block: 
         630: block_content: 
          631: for: 
           632: control: 
            633: init: 
             634: expr: 
              635: name: i
              636: operator: =
              637: literal: 0
            638: condition: 
             639: expr: 
              640: name: i
              641: operator: <
              642: name: 
               643: name: pps
               644: operator: ->
               645: name: num_tile_columns
              646: operator: -
              647: literal: 1
            648: incr: 
             649: expr: 
              650: name: i
              651: operator: ++
           652: block: 
            653: block_content: 
             654: expr_stmt: 
              655: expr: 
               656: name: 
                657: name: pps
                658: operator: ->
                659: name: column_width
                660: index: 
                 661: expr: 
                  662: name: i
               663: operator: =
               664: literal: 1
               665: operator: +
               666: call: 
                667: name: gf_bs_read_ue_log_idx
                668: argument_list: 
                 669: argument: 
                  670: expr: 
                   671: name: bs
                 672: argument: 
                  673: expr: 
                   674: literal: "column_width_minus1"
                 675: argument: 
                  676: expr: 
                   677: name: i
          678: for: 
           679: control: 
            680: init: 
             681: expr: 
              682: name: i
              683: operator: =
              684: literal: 0
            685: condition: 
             686: expr: 
              687: name: i
              688: operator: <
              689: name: 
               690: name: pps
               691: operator: ->
               692: name: num_tile_rows
              693: operator: -
              694: literal: 1
            695: incr: 
             696: expr: 
              697: name: i
              698: operator: ++
           699: block: 
            700: block_content: 
             701: expr_stmt: 
              702: expr: 
               703: name: 
                704: name: pps
                705: operator: ->
                706: name: row_height
                707: index: 
                 708: expr: 
                  709: name: i
               710: operator: =
               711: literal: 1
               712: operator: +
               713: call: 
                714: name: gf_bs_read_ue_log_idx
                715: argument_list: 
                 716: argument: 
                  717: expr: 
                   718: name: bs
                 719: argument: 
                  720: expr: 
                   721: literal: "row_height_minus1"
                 722: argument: 
                  723: expr: 
                   724: name: i
      725: expr_stmt: 
       726: expr: 
        727: name: 
         728: name: pps
         729: operator: ->
         730: name: loop_filter_across_tiles_enabled_flag
        731: operator: =
        732: call: 
         733: name: gf_bs_read_int_log
         734: argument_list: 
          735: argument: 
           736: expr: 
            737: name: bs
          738: argument: 
           739: expr: 
            740: literal: 1
          741: argument: 
           742: expr: 
            743: literal: "loop_filter_across_tiles_enabled_flag"
  744: expr_stmt: 
   745: expr: 
    746: name: 
     747: name: pps
     748: operator: ->
     749: name: loop_filter_across_slices_enabled_flag
    750: operator: =
    751: call: 
     752: name: gf_bs_read_int_log
     753: argument_list: 
      754: argument: 
       755: expr: 
        756: name: bs
      757: argument: 
       758: expr: 
        759: literal: 1
      760: argument: 
       761: expr: 
        762: literal: "loop_filter_across_slices_enabled_flag"
  763: if_stmt: 
   764: if: 
    765: condition: 
     766: expr: 
      767: operator: (
      768: name: 
       769: name: pps
       770: operator: ->
       771: name: deblocking_filter_control_present_flag
      772: operator: =
      773: call: 
       774: name: gf_bs_read_int_log
       775: argument_list: 
        776: argument: 
         777: expr: 
          778: name: bs
        779: argument: 
         780: expr: 
          781: literal: 1
        782: argument: 
         783: expr: 
          784: literal: "deblocking_filter_control_present_flag"
      785: operator: )
    786: block: 
     787: block_content: 
      788: expr_stmt: 
       789: expr: 
        790: name: 
         791: name: pps
         792: operator: ->
         793: name: deblocking_filter_override_enabled_flag
        794: operator: =
        795: call: 
         796: name: gf_bs_read_int_log
         797: argument_list: 
          798: argument: 
           799: expr: 
            800: name: bs
          801: argument: 
           802: expr: 
            803: literal: 1
          804: argument: 
           805: expr: 
            806: literal: "deblocking_filter_override_enabled_flag"
      807: if_stmt: 
       808: if: 
        809: condition: 
         810: expr: 
          811: operator: !
          812: operator: (
          813: name: 
           814: name: pps
           815: operator: ->
           816: name: pic_disable_deblocking_filter_flag
          817: operator: =
          818: call: 
           819: name: gf_bs_read_int_log
           820: argument_list: 
            821: argument: 
             822: expr: 
              823: name: bs
            824: argument: 
             825: expr: 
              826: literal: 1
            827: argument: 
             828: expr: 
              829: literal: "pic_disable_deblocking_filter_flag"
          830: operator: )
        831: block: 
         832: block_content: 
          833: expr_stmt: 
           834: expr: 
            835: name: 
             836: name: pps
             837: operator: ->
             838: name: beta_offset_div2
            839: operator: =
            840: call: 
             841: name: gf_bs_read_se_log
             842: argument_list: 
              843: argument: 
               844: expr: 
                845: name: bs
              846: argument: 
               847: expr: 
                848: literal: "beta_offset_div2"
          849: expr_stmt: 
           850: expr: 
            851: name: 
             852: name: pps
             853: operator: ->
             854: name: tc_offset_div2
            855: operator: =
            856: call: 
             857: name: gf_bs_read_se_log
             858: argument_list: 
              859: argument: 
               860: expr: 
                861: name: bs
              862: argument: 
               863: expr: 
                864: literal: "tc_offset_div2"
  865: if_stmt: 
   866: if: 
    867: condition: 
     868: expr: 
      869: operator: (
      870: name: 
       871: name: pps
       872: operator: ->
       873: name: pic_scaling_list_data_present_flag
      874: operator: =
      875: call: 
       876: name: gf_bs_read_int_log
       877: argument_list: 
        878: argument: 
         879: expr: 
          880: name: bs
        881: argument: 
         882: expr: 
          883: literal: 1
        884: argument: 
         885: expr: 
          886: literal: "pic_scaling_list_data_present_flag"
      887: operator: )
    888: block: 
     889: block_content: 
      890: expr_stmt: 
       891: expr: 
        892: call: 
         893: name: hevc_scaling_list_data
         894: argument_list: 
          895: argument: 
           896: expr: 
            897: name: bs
  898: expr_stmt: 
   899: expr: 
    900: name: 
     901: name: pps
     902: operator: ->
     903: name: lists_modification_present_flag
    904: operator: =
    905: call: 
     906: name: gf_bs_read_int_log
     907: argument_list: 
      908: argument: 
       909: expr: 
        910: name: bs
      911: argument: 
       912: expr: 
        913: literal: 1
      914: argument: 
       915: expr: 
        916: literal: "lists_modification_present_flag"
  917: expr_stmt: 
   918: expr: 
    919: name: 
     920: name: pps
     921: operator: ->
     922: name: log2_parallel_merge_level_minus2
    923: operator: =
    924: call: 
     925: name: gf_bs_read_ue_log
     926: argument_list: 
      927: argument: 
       928: expr: 
        929: name: bs
      930: argument: 
       931: expr: 
        932: literal: "log2_parallel_merge_level_minus2"
  933: expr_stmt: 
   934: expr: 
    935: name: 
     936: name: pps
     937: operator: ->
     938: name: slice_segment_header_extension_present_flag
    939: operator: =
    940: call: 
     941: name: gf_bs_read_int_log
     942: argument_list: 
      943: argument: 
       944: expr: 
        945: name: bs
      946: argument: 
       947: expr: 
        948: literal: 1
      949: argument: 
       950: expr: 
        951: literal: "slice_segment_header_extension_present_flag"
  952: if_stmt: 
   953: if: 
    954: condition: 
     955: expr: 
      956: call: 
       957: name: gf_bs_read_int_log
       958: argument_list: 
        959: argument: 
         960: expr: 
          961: name: bs
        962: argument: 
         963: expr: 
          964: literal: 1
        965: argument: 
         966: expr: 
          967: literal: "pps_extension_flag"
    968: block: 
     969: block_content: 
      970: if: 
       971: directive: if
       972: expr: 
        973: literal: 0
      974: comment: /*pps_extension_data_flag */
      975: endif: 
       976: directive: endif
  977: return: 
   978: expr: 
    979: name: pps_id

----------------------------------------
0: block: 
 1: block_content: 
  2: decl_stmt: 
   3: decl: 
    4: type: 
     5: name: u32
    6: name: i
  7: decl_stmt: 
   8: decl: 
    9: type: 
     10: name: s32
    11: name: pps_id
  12: decl_stmt: 
   13: decl: 
    14: type: 
     15: name: HEVC_PPS
     16: modifier: *
    17: name: pps
  18: comment: //NAL header already read
  19: expr_stmt: 
   20: expr: 
    21: name: pps_id
    22: operator: =
    23: call: 
     24: name: gf_bs_read_ue_log
     25: argument_list: 
      26: argument: 
       27: expr: 
        28: name: bs
      29: argument: 
       30: expr: 
        31: literal: "pps_id"
  32: if_stmt: 
   33: if: 
    34: condition: 
     35: expr: 
      36: operator: (
      37: name: pps_id
      38: operator: <
      39: literal: 0
      40: operator: )
      41: operator: ||
      42: operator: (
      43: name: pps_id
      44: operator: >=
      45: literal: 64
      46: operator: )
    47: block: 
     48: block_content: 
      49: expr_stmt: 
       50: expr: 
        51: call: 
         52: name: GF_LOG
         53: argument_list: 
          54: argument: 
           55: expr: 
            56: name: GF_LOG_ERROR
          57: argument: 
           58: expr: 
            59: name: GF_LOG_CODING
          60: argument: 
           61: expr: 
            62: operator: (
            63: literal: "[HEVC] wrong PPS ID %d in PPS\n"
            64: operator: ,
            65: name: pps_id
            66: operator: )
      67: return: 
       68: expr: 
        69: operator: -
        70: literal: 1
  71: expr_stmt: 
   72: expr: 
    73: name: pps
    74: operator: =
    75: operator: &
    76: name: 
     77: name: hevc
     78: operator: ->
     79: name: pps
     80: index: 
      81: expr: 
       82: name: pps_id
  83: if_stmt: 
   84: if: 
    85: condition: 
     86: expr: 
      87: operator: !
      88: name: 
       89: name: pps
       90: operator: ->
       91: name: state
    92: block: 
     93: block_content: 
      94: expr_stmt: 
       95: expr: 
        96: name: 
         97: name: pps
         98: operator: ->
         99: name: id
        100: operator: =
        101: name: pps_id
      102: expr_stmt: 
       103: expr: 
        104: name: 
         105: name: pps
         106: operator: ->
         107: name: state
        108: operator: =
        109: literal: 1
  110: expr_stmt: 
   111: expr: 
    112: name: 
     113: name: pps
     114: operator: ->
     115: name: sps_id
    116: operator: =
    117: call: 
     118: name: gf_bs_read_ue_log
     119: argument_list: 
      120: argument: 
       121: expr: 
        122: name: bs
      123: argument: 
       124: expr: 
        125: literal: "sps_id"
  126: if_stmt: 
   127: if: 
    128: condition: 
     129: expr: 
      130: operator: (
      131: name: 
       132: name: pps
       133: operator: ->
       134: name: sps_id
      135: operator: <
      136: literal: 0
      137: operator: )
      138: operator: ||
      139: operator: (
      140: name: 
       141: name: pps
       142: operator: ->
       143: name: sps_id
      144: operator: >=
      145: literal: 16
      146: operator: )
    147: block: 
     148: block_content: 
      149: expr_stmt: 
       150: expr: 
        151: call: 
         152: name: GF_LOG
         153: argument_list: 
          154: argument: 
           155: expr: 
            156: name: GF_LOG_ERROR
          157: argument: 
           158: expr: 
            159: name: GF_LOG_CODING
          160: argument: 
           161: expr: 
            162: operator: (
            163: literal: "[HEVC] wrong SPS ID %d in PPS\n"
            164: operator: ,
            165: name: 
             166: name: pps
             167: operator: ->
             168: name: sps_id
            169: operator: )
      170: expr_stmt: 
       171: expr: 
        172: name: 
         173: name: pps
         174: operator: ->
         175: name: sps_id
        176: operator: =
        177: literal: 0
      178: return: 
       179: expr: 
        180: operator: -
        181: literal: 1
  182: expr_stmt: 
   183: expr: 
    184: name: 
     185: name: hevc
     186: operator: ->
     187: name: sps_active_idx
    188: operator: =
    189: name: 
     190: name: pps
     191: operator: ->
     192: name: sps_id
  193: comment: /*set active sps*/
  194: expr_stmt: 
   195: expr: 
    196: name: 
     197: name: pps
     198: operator: ->
     199: name: dependent_slice_segments_enabled_flag
    200: operator: =
    201: call: 
     202: name: gf_bs_read_int_log
     203: argument_list: 
      204: argument: 
       205: expr: 
        206: name: bs
      207: argument: 
       208: expr: 
        209: literal: 1
      210: argument: 
       211: expr: 
        212: literal: "dependent_slice_segments_enabled_flag"
  213: expr_stmt: 
   214: expr: 
    215: name: 
     216: name: pps
     217: operator: ->
     218: name: output_flag_present_flag
    219: operator: =
    220: call: 
     221: name: gf_bs_read_int_log
     222: argument_list: 
      223: argument: 
       224: expr: 
        225: name: bs
      226: argument: 
       227: expr: 
        228: literal: 1
      229: argument: 
       230: expr: 
        231: literal: "output_flag_present_flag"
  232: expr_stmt: 
   233: expr: 
    234: name: 
     235: name: pps
     236: operator: ->
     237: name: num_extra_slice_header_bits
    238: operator: =
    239: call: 
     240: name: gf_bs_read_int_log
     241: argument_list: 
      242: argument: 
       243: expr: 
        244: name: bs
      245: argument: 
       246: expr: 
        247: literal: 3
      248: argument: 
       249: expr: 
        250: literal: "num_extra_slice_header_bits"
  251: expr_stmt: 
   252: expr: 
    253: name: 
     254: name: pps
     255: operator: ->
     256: name: sign_data_hiding_flag
    257: operator: =
    258: call: 
     259: name: gf_bs_read_int_log
     260: argument_list: 
      261: argument: 
       262: expr: 
        263: name: bs
      264: argument: 
       265: expr: 
        266: literal: 1
      267: argument: 
       268: expr: 
        269: literal: "sign_data_hiding_flag"
  270: expr_stmt: 
   271: expr: 
    272: name: 
     273: name: pps
     274: operator: ->
     275: name: cabac_init_present_flag
    276: operator: =
    277: call: 
     278: name: gf_bs_read_int_log
     279: argument_list: 
      280: argument: 
       281: expr: 
        282: name: bs
      283: argument: 
       284: expr: 
        285: literal: 1
      286: argument: 
       287: expr: 
        288: literal: "cabac_init_present_flag"
  289: expr_stmt: 
   290: expr: 
    291: name: 
     292: name: pps
     293: operator: ->
     294: name: num_ref_idx_l0_default_active
    295: operator: =
    296: literal: 1
    297: operator: +
    298: call: 
     299: name: gf_bs_read_ue_log
     300: argument_list: 
      301: argument: 
       302: expr: 
        303: name: bs
      304: argument: 
       305: expr: 
        306: literal: "num_ref_idx_l0_default_active"
  307: expr_stmt: 
   308: expr: 
    309: name: 
     310: name: pps
     311: operator: ->
     312: name: num_ref_idx_l1_default_active
    313: operator: =
    314: literal: 1
    315: operator: +
    316: call: 
     317: name: gf_bs_read_ue_log
     318: argument_list: 
      319: argument: 
       320: expr: 
        321: name: bs
      322: argument: 
       323: expr: 
        324: literal: "num_ref_idx_l1_default_active"
  325: expr_stmt: 
   326: expr: 
    327: name: 
     328: name: pps
     329: operator: ->
     330: name: pic_init_qp_minus26
    331: operator: =
    332: call: 
     333: name: gf_bs_read_se_log
     334: argument_list: 
      335: argument: 
       336: expr: 
        337: name: bs
      338: argument: 
       339: expr: 
        340: literal: "pic_init_qp_minus26"
  341: expr_stmt: 
   342: expr: 
    343: name: 
     344: name: pps
     345: operator: ->
     346: name: constrained_intra_pred_flag
    347: operator: =
    348: call: 
     349: name: gf_bs_read_int_log
     350: argument_list: 
      351: argument: 
       352: expr: 
        353: name: bs
      354: argument: 
       355: expr: 
        356: literal: 1
      357: argument: 
       358: expr: 
        359: literal: "constrained_intra_pred_flag"
  360: expr_stmt: 
   361: expr: 
    362: name: 
     363: name: pps
     364: operator: ->
     365: name: transform_skip_enabled_flag
    366: operator: =
    367: call: 
     368: name: gf_bs_read_int_log
     369: argument_list: 
      370: argument: 
       371: expr: 
        372: name: bs
      373: argument: 
       374: expr: 
        375: literal: 1
      376: argument: 
       377: expr: 
        378: literal: "transform_skip_enabled_flag"
  379: if_stmt: 
   380: if: 
    381: condition: 
     382: expr: 
      383: operator: (
      384: name: 
       385: name: pps
       386: operator: ->
       387: name: cu_qp_delta_enabled_flag
      388: operator: =
      389: call: 
       390: name: gf_bs_read_int_log
       391: argument_list: 
        392: argument: 
         393: expr: 
          394: name: bs
        395: argument: 
         396: expr: 
          397: literal: 1
        398: argument: 
         399: expr: 
          400: literal: "cu_qp_delta_enabled_flag"
      401: operator: )
    402: block: 
     403: block_content: 
      404: expr_stmt: 
       405: expr: 
        406: name: 
         407: name: pps
         408: operator: ->
         409: name: diff_cu_qp_delta_depth
        410: operator: =
        411: call: 
         412: name: gf_bs_read_ue_log
         413: argument_list: 
          414: argument: 
           415: expr: 
            416: name: bs
          417: argument: 
           418: expr: 
            419: literal: "diff_cu_qp_delta_depth"
  420: expr_stmt: 
   421: expr: 
    422: name: 
     423: name: pps
     424: operator: ->
     425: name: pic_cb_qp_offset
    426: operator: =
    427: call: 
     428: name: gf_bs_read_se_log
     429: argument_list: 
      430: argument: 
       431: expr: 
        432: name: bs
      433: argument: 
       434: expr: 
        435: literal: "pic_cb_qp_offset"
  436: expr_stmt: 
   437: expr: 
    438: name: 
     439: name: pps
     440: operator: ->
     441: name: pic_cr_qp_offset
    442: operator: =
    443: call: 
     444: name: gf_bs_read_se_log
     445: argument_list: 
      446: argument: 
       447: expr: 
        448: name: bs
      449: argument: 
       450: expr: 
        451: literal: "pic_cr_qp_offset"
  452: expr_stmt: 
   453: expr: 
    454: name: 
     455: name: pps
     456: operator: ->
     457: name: slice_chroma_qp_offsets_present_flag
    458: operator: =
    459: call: 
     460: name: gf_bs_read_int_log
     461: argument_list: 
      462: argument: 
       463: expr: 
        464: name: bs
      465: argument: 
       466: expr: 
        467: literal: 1
      468: argument: 
       469: expr: 
        470: literal: "slice_chroma_qp_offsets_present_flag"
  471: expr_stmt: 
   472: expr: 
    473: name: 
     474: name: pps
     475: operator: ->
     476: name: weighted_pred_flag
    477: operator: =
    478: call: 
     479: name: gf_bs_read_int_log
     480: argument_list: 
      481: argument: 
       482: expr: 
        483: name: bs
      484: argument: 
       485: expr: 
        486: literal: 1
      487: argument: 
       488: expr: 
        489: literal: "weighted_pred_flag"
  490: expr_stmt: 
   491: expr: 
    492: name: 
     493: name: pps
     494: operator: ->
     495: name: weighted_bipred_flag
    496: operator: =
    497: call: 
     498: name: gf_bs_read_int_log
     499: argument_list: 
      500: argument: 
       501: expr: 
        502: name: bs
      503: argument: 
       504: expr: 
        505: literal: 1
      506: argument: 
       507: expr: 
        508: literal: "weighted_bipred_flag"
  509: expr_stmt: 
   510: expr: 
    511: name: 
     512: name: pps
     513: operator: ->
     514: name: transquant_bypass_enable_flag
    515: operator: =
    516: call: 
     517: name: gf_bs_read_int_log
     518: argument_list: 
      519: argument: 
       520: expr: 
        521: name: bs
      522: argument: 
       523: expr: 
        524: literal: 1
      525: argument: 
       526: expr: 
        527: literal: "transquant_bypass_enable_flag"
  528: expr_stmt: 
   529: expr: 
    530: name: 
     531: name: pps
     532: operator: ->
     533: name: tiles_enabled_flag
    534: operator: =
    535: call: 
     536: name: gf_bs_read_int_log
     537: argument_list: 
      538: argument: 
       539: expr: 
        540: name: bs
      541: argument: 
       542: expr: 
        543: literal: 1
      544: argument: 
       545: expr: 
        546: literal: "tiles_enabled_flag"
  547: expr_stmt: 
   548: expr: 
    549: name: 
     550: name: pps
     551: operator: ->
     552: name: entropy_coding_sync_enabled_flag
    553: operator: =
    554: call: 
     555: name: gf_bs_read_int_log
     556: argument_list: 
      557: argument: 
       558: expr: 
        559: name: bs
      560: argument: 
       561: expr: 
        562: literal: 1
      563: argument: 
       564: expr: 
        565: literal: "entropy_coding_sync_enabled_flag"
  566: if_stmt: 
   567: if: 
    568: condition: 
     569: expr: 
      570: name: 
       571: name: pps
       572: operator: ->
       573: name: tiles_enabled_flag
    574: block: 
     575: block_content: 
      576: expr_stmt: 
       577: expr: 
        578: name: 
         579: name: pps
         580: operator: ->
         581: name: num_tile_columns
        582: operator: =
        583: literal: 1
        584: operator: +
        585: call: 
         586: name: gf_bs_read_ue_log
         587: argument_list: 
          588: argument: 
           589: expr: 
            590: name: bs
          591: argument: 
           592: expr: 
            593: literal: "num_tile_columns_minus1"
      594: expr_stmt: 
       595: expr: 
        596: name: 
         597: name: pps
         598: operator: ->
         599: name: num_tile_rows
        600: operator: =
        601: literal: 1
        602: operator: +
        603: call: 
         604: name: gf_bs_read_ue_log
         605: argument_list: 
          606: argument: 
           607: expr: 
            608: name: bs
          609: argument: 
           610: expr: 
            611: literal: "num_tile_rows_minus1"
      612: expr_stmt: 
       613: expr: 
        614: name: 
         615: name: pps
         616: operator: ->
         617: name: uniform_spacing_flag
        618: operator: =
        619: call: 
         620: name: gf_bs_read_int_log
         621: argument_list: 
          622: argument: 
           623: expr: 
            624: name: bs
          625: argument: 
           626: expr: 
            627: literal: 1
          628: argument: 
           629: expr: 
            630: literal: "uniform_spacing_flag"
      631: if_stmt: 
       632: if: 
        633: condition: 
         634: expr: 
          635: operator: !
          636: name: 
           637: name: pps
           638: operator: ->
           639: name: uniform_spacing_flag
        640: block: 
         641: block_content: 
          642: for: 
           643: control: 
            644: init: 
             645: expr: 
              646: name: i
              647: operator: =
              648: literal: 0
            649: condition: 
             650: expr: 
              651: name: i
              652: operator: <
              653: name: 
               654: name: pps
               655: operator: ->
               656: name: num_tile_columns
              657: operator: -
              658: literal: 1
            659: incr: 
             660: expr: 
              661: name: i
              662: operator: ++
           663: block: 
            664: block_content: 
             665: expr_stmt: 
              666: expr: 
               667: name: 
                668: name: pps
                669: operator: ->
                670: name: column_width
                671: index: 
                 672: expr: 
                  673: name: i
               674: operator: =
               675: literal: 1
               676: operator: +
               677: call: 
                678: name: gf_bs_read_ue_log_idx
                679: argument_list: 
                 680: argument: 
                  681: expr: 
                   682: name: bs
                 683: argument: 
                  684: expr: 
                   685: literal: "column_width_minus1"
                 686: argument: 
                  687: expr: 
                   688: name: i
          689: for: 
           690: control: 
            691: init: 
             692: expr: 
              693: name: i
              694: operator: =
              695: literal: 0
            696: condition: 
             697: expr: 
              698: name: i
              699: operator: <
              700: name: 
               701: name: pps
               702: operator: ->
               703: name: num_tile_rows
              704: operator: -
              705: literal: 1
            706: incr: 
             707: expr: 
              708: name: i
              709: operator: ++
           710: block: 
            711: block_content: 
             712: expr_stmt: 
              713: expr: 
               714: name: 
                715: name: pps
                716: operator: ->
                717: name: row_height
                718: index: 
                 719: expr: 
                  720: name: i
               721: operator: =
               722: literal: 1
               723: operator: +
               724: call: 
                725: name: gf_bs_read_ue_log_idx
                726: argument_list: 
                 727: argument: 
                  728: expr: 
                   729: name: bs
                 730: argument: 
                  731: expr: 
                   732: literal: "row_height_minus1"
                 733: argument: 
                  734: expr: 
                   735: name: i
      736: expr_stmt: 
       737: expr: 
        738: name: 
         739: name: pps
         740: operator: ->
         741: name: loop_filter_across_tiles_enabled_flag
        742: operator: =
        743: call: 
         744: name: gf_bs_read_int_log
         745: argument_list: 
          746: argument: 
           747: expr: 
            748: name: bs
          749: argument: 
           750: expr: 
            751: literal: 1
          752: argument: 
           753: expr: 
            754: literal: "loop_filter_across_tiles_enabled_flag"
  755: expr_stmt: 
   756: expr: 
    757: name: 
     758: name: pps
     759: operator: ->
     760: name: loop_filter_across_slices_enabled_flag
    761: operator: =
    762: call: 
     763: name: gf_bs_read_int_log
     764: argument_list: 
      765: argument: 
       766: expr: 
        767: name: bs
      768: argument: 
       769: expr: 
        770: literal: 1
      771: argument: 
       772: expr: 
        773: literal: "loop_filter_across_slices_enabled_flag"
  774: if_stmt: 
   775: if: 
    776: condition: 
     777: expr: 
      778: operator: (
      779: name: 
       780: name: pps
       781: operator: ->
       782: name: deblocking_filter_control_present_flag
      783: operator: =
      784: call: 
       785: name: gf_bs_read_int_log
       786: argument_list: 
        787: argument: 
         788: expr: 
          789: name: bs
        790: argument: 
         791: expr: 
          792: literal: 1
        793: argument: 
         794: expr: 
          795: literal: "deblocking_filter_control_present_flag"
      796: operator: )
    797: block: 
     798: block_content: 
      799: expr_stmt: 
       800: expr: 
        801: name: 
         802: name: pps
         803: operator: ->
         804: name: deblocking_filter_override_enabled_flag
        805: operator: =
        806: call: 
         807: name: gf_bs_read_int_log
         808: argument_list: 
          809: argument: 
           810: expr: 
            811: name: bs
          812: argument: 
           813: expr: 
            814: literal: 1
          815: argument: 
           816: expr: 
            817: literal: "deblocking_filter_override_enabled_flag"
      818: if_stmt: 
       819: if: 
        820: condition: 
         821: expr: 
          822: operator: !
          823: operator: (
          824: name: 
           825: name: pps
           826: operator: ->
           827: name: pic_disable_deblocking_filter_flag
          828: operator: =
          829: call: 
           830: name: gf_bs_read_int_log
           831: argument_list: 
            832: argument: 
             833: expr: 
              834: name: bs
            835: argument: 
             836: expr: 
              837: literal: 1
            838: argument: 
             839: expr: 
              840: literal: "pic_disable_deblocking_filter_flag"
          841: operator: )
        842: block: 
         843: block_content: 
          844: expr_stmt: 
           845: expr: 
            846: name: 
             847: name: pps
             848: operator: ->
             849: name: beta_offset_div2
            850: operator: =
            851: call: 
             852: name: gf_bs_read_se_log
             853: argument_list: 
              854: argument: 
               855: expr: 
                856: name: bs
              857: argument: 
               858: expr: 
                859: literal: "beta_offset_div2"
          860: expr_stmt: 
           861: expr: 
            862: name: 
             863: name: pps
             864: operator: ->
             865: name: tc_offset_div2
            866: operator: =
            867: call: 
             868: name: gf_bs_read_se_log
             869: argument_list: 
              870: argument: 
               871: expr: 
                872: name: bs
              873: argument: 
               874: expr: 
                875: literal: "tc_offset_div2"
  876: if_stmt: 
   877: if: 
    878: condition: 
     879: expr: 
      880: operator: (
      881: name: 
       882: name: pps
       883: operator: ->
       884: name: pic_scaling_list_data_present_flag
      885: operator: =
      886: call: 
       887: name: gf_bs_read_int_log
       888: argument_list: 
        889: argument: 
         890: expr: 
          891: name: bs
        892: argument: 
         893: expr: 
          894: literal: 1
        895: argument: 
         896: expr: 
          897: literal: "pic_scaling_list_data_present_flag"
      898: operator: )
    899: block: 
     900: block_content: 
      901: expr_stmt: 
       902: expr: 
        903: call: 
         904: name: hevc_scaling_list_data
         905: argument_list: 
          906: argument: 
           907: expr: 
            908: name: bs
  909: expr_stmt: 
   910: expr: 
    911: name: 
     912: name: pps
     913: operator: ->
     914: name: lists_modification_present_flag
    915: operator: =
    916: call: 
     917: name: gf_bs_read_int_log
     918: argument_list: 
      919: argument: 
       920: expr: 
        921: name: bs
      922: argument: 
       923: expr: 
        924: literal: 1
      925: argument: 
       926: expr: 
        927: literal: "lists_modification_present_flag"
  928: expr_stmt: 
   929: expr: 
    930: name: 
     931: name: pps
     932: operator: ->
     933: name: log2_parallel_merge_level_minus2
    934: operator: =
    935: call: 
     936: name: gf_bs_read_ue_log
     937: argument_list: 
      938: argument: 
       939: expr: 
        940: name: bs
      941: argument: 
       942: expr: 
        943: literal: "log2_parallel_merge_level_minus2"
  944: expr_stmt: 
   945: expr: 
    946: name: 
     947: name: pps
     948: operator: ->
     949: name: slice_segment_header_extension_present_flag
    950: operator: =
    951: call: 
     952: name: gf_bs_read_int_log
     953: argument_list: 
      954: argument: 
       955: expr: 
        956: name: bs
      957: argument: 
       958: expr: 
        959: literal: 1
      960: argument: 
       961: expr: 
        962: literal: "slice_segment_header_extension_present_flag"
  963: if_stmt: 
   964: if: 
    965: condition: 
     966: expr: 
      967: call: 
       968: name: gf_bs_read_int_log
       969: argument_list: 
        970: argument: 
         971: expr: 
          972: name: bs
        973: argument: 
         974: expr: 
          975: literal: 1
        976: argument: 
         977: expr: 
          978: literal: "pps_extension_flag"
    979: block: 
     980: block_content: 
      981: if: 
       982: directive: if
       983: expr: 
        984: literal: 0
      985: comment: /*pps_extension_data_flag */
      986: endif: 
       987: directive: endif
  988: return: 
   989: expr: 
    990: name: pps_id
=====
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: u32
   5: name: i
 6: decl_stmt: 
  7: decl: 
   8: type: 
    9: name: s32
   10: name: pps_id
 11: decl_stmt: 
  12: decl: 
   13: type: 
    14: name: HEVC_PPS
    15: modifier: *
   16: name: pps
 17: comment: //NAL header already read
 18: expr_stmt: 
  19: expr: 
   20: name: pps_id
   21: operator: =
   22: call: 
    23: name: gf_bs_read_ue_log
    24: argument_list: 
     25: argument: 
      26: expr: 
       27: name: bs
     28: argument: 
      29: expr: 
       30: literal: "pps_id"
 31: if_stmt: 
  32: if: 
   33: condition: 
    34: expr: 
     35: operator: (
     36: name: pps_id
     37: operator: <
     38: literal: 0
     39: operator: )
     40: operator: ||
     41: operator: (
     42: name: pps_id
     43: operator: >=
     44: literal: 64
     45: operator: )
   46: block: 
    47: block_content: 
     48: expr_stmt: 
      49: expr: 
       50: call: 
        51: name: GF_LOG
        52: argument_list: 
         53: argument: 
          54: expr: 
           55: name: GF_LOG_ERROR
         56: argument: 
          57: expr: 
           58: name: GF_LOG_CODING
         59: argument: 
          60: expr: 
           61: operator: (
           62: literal: "[HEVC] wrong PPS ID %d in PPS\n"
           63: operator: ,
           64: name: pps_id
           65: operator: )
     66: return: 
      67: expr: 
       68: operator: -
       69: literal: 1
 70: expr_stmt: 
  71: expr: 
   72: name: pps
   73: operator: =
   74: operator: &
   75: name: 
    76: name: hevc
    77: operator: ->
    78: name: pps
    79: index: 
     80: expr: 
      81: name: pps_id
 82: if_stmt: 
  83: if: 
   84: condition: 
    85: expr: 
     86: operator: !
     87: name: 
      88: name: pps
      89: operator: ->
      90: name: state
   91: block: 
    92: block_content: 
     93: expr_stmt: 
      94: expr: 
       95: name: 
        96: name: pps
        97: operator: ->
        98: name: id
       99: operator: =
       100: name: pps_id
     101: expr_stmt: 
      102: expr: 
       103: name: 
        104: name: pps
        105: operator: ->
        106: name: state
       107: operator: =
       108: literal: 1
 109: expr_stmt: 
  110: expr: 
   111: name: 
    112: name: pps
    113: operator: ->
    114: name: sps_id
   115: operator: =
   116: call: 
    117: name: gf_bs_read_ue_log
    118: argument_list: 
     119: argument: 
      120: expr: 
       121: name: bs
     122: argument: 
      123: expr: 
       124: literal: "sps_id"
 125: if_stmt: 
  126: if: 
   127: condition: 
    128: expr: 
     129: name: 
      130: name: pps
      131: operator: ->
      132: name: sps_id
     133: operator: >=
     134: literal: 16
   135: block: 
    136: block_content: 
     137: expr_stmt: 
      138: expr: 
       139: call: 
        140: name: GF_LOG
        141: argument_list: 
         142: argument: 
          143: expr: 
           144: name: GF_LOG_ERROR
         145: argument: 
          146: expr: 
           147: name: GF_LOG_CODING
         148: argument: 
          149: expr: 
           150: operator: (
           151: literal: "[HEVC] wrong SPS ID %d in PPS\n"
           152: operator: ,
           153: name: 
            154: name: pps
            155: operator: ->
            156: name: sps_id
           157: operator: )
     158: expr_stmt: 
      159: expr: 
       160: name: 
        161: name: pps
        162: operator: ->
        163: name: sps_id
       164: operator: =
       165: literal: 0
     166: return: 
      167: expr: 
       168: operator: -
       169: literal: 1
 170: expr_stmt: 
  171: expr: 
   172: name: 
    173: name: hevc
    174: operator: ->
    175: name: sps_active_idx
   176: operator: =
   177: name: 
    178: name: pps
    179: operator: ->
    180: name: sps_id
 181: comment: /*set active sps*/
 182: expr_stmt: 
  183: expr: 
   184: name: 
    185: name: pps
    186: operator: ->
    187: name: dependent_slice_segments_enabled_flag
   188: operator: =
   189: call: 
    190: name: gf_bs_read_int_log
    191: argument_list: 
     192: argument: 
      193: expr: 
       194: name: bs
     195: argument: 
      196: expr: 
       197: literal: 1
     198: argument: 
      199: expr: 
       200: literal: "dependent_slice_segments_enabled_flag"
 201: expr_stmt: 
  202: expr: 
   203: name: 
    204: name: pps
    205: operator: ->
    206: name: output_flag_present_flag
   207: operator: =
   208: call: 
    209: name: gf_bs_read_int_log
    210: argument_list: 
     211: argument: 
      212: expr: 
       213: name: bs
     214: argument: 
      215: expr: 
       216: literal: 1
     217: argument: 
      218: expr: 
       219: literal: "output_flag_present_flag"
 220: expr_stmt: 
  221: expr: 
   222: name: 
    223: name: pps
    224: operator: ->
    225: name: num_extra_slice_header_bits
   226: operator: =
   227: call: 
    228: name: gf_bs_read_int_log
    229: argument_list: 
     230: argument: 
      231: expr: 
       232: name: bs
     233: argument: 
      234: expr: 
       235: literal: 3
     236: argument: 
      237: expr: 
       238: literal: "num_extra_slice_header_bits"
 239: expr_stmt: 
  240: expr: 
   241: name: 
    242: name: pps
    243: operator: ->
    244: name: sign_data_hiding_flag
   245: operator: =
   246: call: 
    247: name: gf_bs_read_int_log
    248: argument_list: 
     249: argument: 
      250: expr: 
       251: name: bs
     252: argument: 
      253: expr: 
       254: literal: 1
     255: argument: 
      256: expr: 
       257: literal: "sign_data_hiding_flag"
 258: expr_stmt: 
  259: expr: 
   260: name: 
    261: name: pps
    262: operator: ->
    263: name: cabac_init_present_flag
   264: operator: =
   265: call: 
    266: name: gf_bs_read_int_log
    267: argument_list: 
     268: argument: 
      269: expr: 
       270: name: bs
     271: argument: 
      272: expr: 
       273: literal: 1
     274: argument: 
      275: expr: 
       276: literal: "cabac_init_present_flag"
 277: expr_stmt: 
  278: expr: 
   279: name: 
    280: name: pps
    281: operator: ->
    282: name: num_ref_idx_l0_default_active
   283: operator: =
   284: literal: 1
   285: operator: +
   286: call: 
    287: name: gf_bs_read_ue_log
    288: argument_list: 
     289: argument: 
      290: expr: 
       291: name: bs
     292: argument: 
      293: expr: 
       294: literal: "num_ref_idx_l0_default_active"
 295: expr_stmt: 
  296: expr: 
   297: name: 
    298: name: pps
    299: operator: ->
    300: name: num_ref_idx_l1_default_active
   301: operator: =
   302: literal: 1
   303: operator: +
   304: call: 
    305: name: gf_bs_read_ue_log
    306: argument_list: 
     307: argument: 
      308: expr: 
       309: name: bs
     310: argument: 
      311: expr: 
       312: literal: "num_ref_idx_l1_default_active"
 313: expr_stmt: 
  314: expr: 
   315: name: 
    316: name: pps
    317: operator: ->
    318: name: pic_init_qp_minus26
   319: operator: =
   320: call: 
    321: name: gf_bs_read_se_log
    322: argument_list: 
     323: argument: 
      324: expr: 
       325: name: bs
     326: argument: 
      327: expr: 
       328: literal: "pic_init_qp_minus26"
 329: expr_stmt: 
  330: expr: 
   331: name: 
    332: name: pps
    333: operator: ->
    334: name: constrained_intra_pred_flag
   335: operator: =
   336: call: 
    337: name: gf_bs_read_int_log
    338: argument_list: 
     339: argument: 
      340: expr: 
       341: name: bs
     342: argument: 
      343: expr: 
       344: literal: 1
     345: argument: 
      346: expr: 
       347: literal: "constrained_intra_pred_flag"
 348: expr_stmt: 
  349: expr: 
   350: name: 
    351: name: pps
    352: operator: ->
    353: name: transform_skip_enabled_flag
   354: operator: =
   355: call: 
    356: name: gf_bs_read_int_log
    357: argument_list: 
     358: argument: 
      359: expr: 
       360: name: bs
     361: argument: 
      362: expr: 
       363: literal: 1
     364: argument: 
      365: expr: 
       366: literal: "transform_skip_enabled_flag"
 367: if_stmt: 
  368: if: 
   369: condition: 
    370: expr: 
     371: operator: (
     372: name: 
      373: name: pps
      374: operator: ->
      375: name: cu_qp_delta_enabled_flag
     376: operator: =
     377: call: 
      378: name: gf_bs_read_int_log
      379: argument_list: 
       380: argument: 
        381: expr: 
         382: name: bs
       383: argument: 
        384: expr: 
         385: literal: 1
       386: argument: 
        387: expr: 
         388: literal: "cu_qp_delta_enabled_flag"
     389: operator: )
   390: block: 
    391: block_content: 
     392: expr_stmt: 
      393: expr: 
       394: name: 
        395: name: pps
        396: operator: ->
        397: name: diff_cu_qp_delta_depth
       398: operator: =
       399: call: 
        400: name: gf_bs_read_ue_log
        401: argument_list: 
         402: argument: 
          403: expr: 
           404: name: bs
         405: argument: 
          406: expr: 
           407: literal: "diff_cu_qp_delta_depth"
 408: expr_stmt: 
  409: expr: 
   410: name: 
    411: name: pps
    412: operator: ->
    413: name: pic_cb_qp_offset
   414: operator: =
   415: call: 
    416: name: gf_bs_read_se_log
    417: argument_list: 
     418: argument: 
      419: expr: 
       420: name: bs
     421: argument: 
      422: expr: 
       423: literal: "pic_cb_qp_offset"
 424: expr_stmt: 
  425: expr: 
   426: name: 
    427: name: pps
    428: operator: ->
    429: name: pic_cr_qp_offset
   430: operator: =
   431: call: 
    432: name: gf_bs_read_se_log
    433: argument_list: 
     434: argument: 
      435: expr: 
       436: name: bs
     437: argument: 
      438: expr: 
       439: literal: "pic_cr_qp_offset"
 440: expr_stmt: 
  441: expr: 
   442: name: 
    443: name: pps
    444: operator: ->
    445: name: slice_chroma_qp_offsets_present_flag
   446: operator: =
   447: call: 
    448: name: gf_bs_read_int_log
    449: argument_list: 
     450: argument: 
      451: expr: 
       452: name: bs
     453: argument: 
      454: expr: 
       455: literal: 1
     456: argument: 
      457: expr: 
       458: literal: "slice_chroma_qp_offsets_present_flag"
 459: expr_stmt: 
  460: expr: 
   461: name: 
    462: name: pps
    463: operator: ->
    464: name: weighted_pred_flag
   465: operator: =
   466: call: 
    467: name: gf_bs_read_int_log
    468: argument_list: 
     469: argument: 
      470: expr: 
       471: name: bs
     472: argument: 
      473: expr: 
       474: literal: 1
     475: argument: 
      476: expr: 
       477: literal: "weighted_pred_flag"
 478: expr_stmt: 
  479: expr: 
   480: name: 
    481: name: pps
    482: operator: ->
    483: name: weighted_bipred_flag
   484: operator: =
   485: call: 
    486: name: gf_bs_read_int_log
    487: argument_list: 
     488: argument: 
      489: expr: 
       490: name: bs
     491: argument: 
      492: expr: 
       493: literal: 1
     494: argument: 
      495: expr: 
       496: literal: "weighted_bipred_flag"
 497: expr_stmt: 
  498: expr: 
   499: name: 
    500: name: pps
    501: operator: ->
    502: name: transquant_bypass_enable_flag
   503: operator: =
   504: call: 
    505: name: gf_bs_read_int_log
    506: argument_list: 
     507: argument: 
      508: expr: 
       509: name: bs
     510: argument: 
      511: expr: 
       512: literal: 1
     513: argument: 
      514: expr: 
       515: literal: "transquant_bypass_enable_flag"
 516: expr_stmt: 
  517: expr: 
   518: name: 
    519: name: pps
    520: operator: ->
    521: name: tiles_enabled_flag
   522: operator: =
   523: call: 
    524: name: gf_bs_read_int_log
    525: argument_list: 
     526: argument: 
      527: expr: 
       528: name: bs
     529: argument: 
      530: expr: 
       531: literal: 1
     532: argument: 
      533: expr: 
       534: literal: "tiles_enabled_flag"
 535: expr_stmt: 
  536: expr: 
   537: name: 
    538: name: pps
    539: operator: ->
    540: name: entropy_coding_sync_enabled_flag
   541: operator: =
   542: call: 
    543: name: gf_bs_read_int_log
    544: argument_list: 
     545: argument: 
      546: expr: 
       547: name: bs
     548: argument: 
      549: expr: 
       550: literal: 1
     551: argument: 
      552: expr: 
       553: literal: "entropy_coding_sync_enabled_flag"
 554: if_stmt: 
  555: if: 
   556: condition: 
    557: expr: 
     558: name: 
      559: name: pps
      560: operator: ->
      561: name: tiles_enabled_flag
   562: block: 
    563: block_content: 
     564: expr_stmt: 
      565: expr: 
       566: name: 
        567: name: pps
        568: operator: ->
        569: name: num_tile_columns
       570: operator: =
       571: literal: 1
       572: operator: +
       573: call: 
        574: name: gf_bs_read_ue_log
        575: argument_list: 
         576: argument: 
          577: expr: 
           578: name: bs
         579: argument: 
          580: expr: 
           581: literal: "num_tile_columns_minus1"
     582: expr_stmt: 
      583: expr: 
       584: name: 
        585: name: pps
        586: operator: ->
        587: name: num_tile_rows
       588: operator: =
       589: literal: 1
       590: operator: +
       591: call: 
        592: name: gf_bs_read_ue_log
        593: argument_list: 
         594: argument: 
          595: expr: 
           596: name: bs
         597: argument: 
          598: expr: 
           599: literal: "num_tile_rows_minus1"
     600: expr_stmt: 
      601: expr: 
       602: name: 
        603: name: pps
        604: operator: ->
        605: name: uniform_spacing_flag
       606: operator: =
       607: call: 
        608: name: gf_bs_read_int_log
        609: argument_list: 
         610: argument: 
          611: expr: 
           612: name: bs
         613: argument: 
          614: expr: 
           615: literal: 1
         616: argument: 
          617: expr: 
           618: literal: "uniform_spacing_flag"
     619: if_stmt: 
      620: if: 
       621: condition: 
        622: expr: 
         623: operator: !
         624: name: 
          625: name: pps
          626: operator: ->
          627: name: uniform_spacing_flag
       628: block: 
        629: block_content: 
         630: for: 
          631: control: 
           632: init: 
            633: expr: 
             634: name: i
             635: operator: =
             636: literal: 0
           637: condition: 
            638: expr: 
             639: name: i
             640: operator: <
             641: name: 
              642: name: pps
              643: operator: ->
              644: name: num_tile_columns
             645: operator: -
             646: literal: 1
           647: incr: 
            648: expr: 
             649: name: i
             650: operator: ++
          651: block: 
           652: block_content: 
            653: expr_stmt: 
             654: expr: 
              655: name: 
               656: name: pps
               657: operator: ->
               658: name: column_width
               659: index: 
                660: expr: 
                 661: name: i
              662: operator: =
              663: literal: 1
              664: operator: +
              665: call: 
               666: name: gf_bs_read_ue_log_idx
               667: argument_list: 
                668: argument: 
                 669: expr: 
                  670: name: bs
                671: argument: 
                 672: expr: 
                  673: literal: "column_width_minus1"
                674: argument: 
                 675: expr: 
                  676: name: i
         677: for: 
          678: control: 
           679: init: 
            680: expr: 
             681: name: i
             682: operator: =
             683: literal: 0
           684: condition: 
            685: expr: 
             686: name: i
             687: operator: <
             688: name: 
              689: name: pps
              690: operator: ->
              691: name: num_tile_rows
             692: operator: -
             693: literal: 1
           694: incr: 
            695: expr: 
             696: name: i
             697: operator: ++
          698: block: 
           699: block_content: 
            700: expr_stmt: 
             701: expr: 
              702: name: 
               703: name: pps
               704: operator: ->
               705: name: row_height
               706: index: 
                707: expr: 
                 708: name: i
              709: operator: =
              710: literal: 1
              711: operator: +
              712: call: 
               713: name: gf_bs_read_ue_log_idx
               714: argument_list: 
                715: argument: 
                 716: expr: 
                  717: name: bs
                718: argument: 
                 719: expr: 
                  720: literal: "row_height_minus1"
                721: argument: 
                 722: expr: 
                  723: name: i
     724: expr_stmt: 
      725: expr: 
       726: name: 
        727: name: pps
        728: operator: ->
        729: name: loop_filter_across_tiles_enabled_flag
       730: operator: =
       731: call: 
        732: name: gf_bs_read_int_log
        733: argument_list: 
         734: argument: 
          735: expr: 
           736: name: bs
         737: argument: 
          738: expr: 
           739: literal: 1
         740: argument: 
          741: expr: 
           742: literal: "loop_filter_across_tiles_enabled_flag"
 743: expr_stmt: 
  744: expr: 
   745: name: 
    746: name: pps
    747: operator: ->
    748: name: loop_filter_across_slices_enabled_flag
   749: operator: =
   750: call: 
    751: name: gf_bs_read_int_log
    752: argument_list: 
     753: argument: 
      754: expr: 
       755: name: bs
     756: argument: 
      757: expr: 
       758: literal: 1
     759: argument: 
      760: expr: 
       761: literal: "loop_filter_across_slices_enabled_flag"
 762: if_stmt: 
  763: if: 
   764: condition: 
    765: expr: 
     766: operator: (
     767: name: 
      768: name: pps
      769: operator: ->
      770: name: deblocking_filter_control_present_flag
     771: operator: =
     772: call: 
      773: name: gf_bs_read_int_log
      774: argument_list: 
       775: argument: 
        776: expr: 
         777: name: bs
       778: argument: 
        779: expr: 
         780: literal: 1
       781: argument: 
        782: expr: 
         783: literal: "deblocking_filter_control_present_flag"
     784: operator: )
   785: block: 
    786: block_content: 
     787: expr_stmt: 
      788: expr: 
       789: name: 
        790: name: pps
        791: operator: ->
        792: name: deblocking_filter_override_enabled_flag
       793: operator: =
       794: call: 
        795: name: gf_bs_read_int_log
        796: argument_list: 
         797: argument: 
          798: expr: 
           799: name: bs
         800: argument: 
          801: expr: 
           802: literal: 1
         803: argument: 
          804: expr: 
           805: literal: "deblocking_filter_override_enabled_flag"
     806: if_stmt: 
      807: if: 
       808: condition: 
        809: expr: 
         810: operator: !
         811: operator: (
         812: name: 
          813: name: pps
          814: operator: ->
          815: name: pic_disable_deblocking_filter_flag
         816: operator: =
         817: call: 
          818: name: gf_bs_read_int_log
          819: argument_list: 
           820: argument: 
            821: expr: 
             822: name: bs
           823: argument: 
            824: expr: 
             825: literal: 1
           826: argument: 
            827: expr: 
             828: literal: "pic_disable_deblocking_filter_flag"
         829: operator: )
       830: block: 
        831: block_content: 
         832: expr_stmt: 
          833: expr: 
           834: name: 
            835: name: pps
            836: operator: ->
            837: name: beta_offset_div2
           838: operator: =
           839: call: 
            840: name: gf_bs_read_se_log
            841: argument_list: 
             842: argument: 
              843: expr: 
               844: name: bs
             845: argument: 
              846: expr: 
               847: literal: "beta_offset_div2"
         848: expr_stmt: 
          849: expr: 
           850: name: 
            851: name: pps
            852: operator: ->
            853: name: tc_offset_div2
           854: operator: =
           855: call: 
            856: name: gf_bs_read_se_log
            857: argument_list: 
             858: argument: 
              859: expr: 
               860: name: bs
             861: argument: 
              862: expr: 
               863: literal: "tc_offset_div2"
 864: if_stmt: 
  865: if: 
   866: condition: 
    867: expr: 
     868: operator: (
     869: name: 
      870: name: pps
      871: operator: ->
      872: name: pic_scaling_list_data_present_flag
     873: operator: =
     874: call: 
      875: name: gf_bs_read_int_log
      876: argument_list: 
       877: argument: 
        878: expr: 
         879: name: bs
       880: argument: 
        881: expr: 
         882: literal: 1
       883: argument: 
        884: expr: 
         885: literal: "pic_scaling_list_data_present_flag"
     886: operator: )
   887: block: 
    888: block_content: 
     889: expr_stmt: 
      890: expr: 
       891: call: 
        892: name: hevc_scaling_list_data
        893: argument_list: 
         894: argument: 
          895: expr: 
           896: name: bs
 897: expr_stmt: 
  898: expr: 
   899: name: 
    900: name: pps
    901: operator: ->
    902: name: lists_modification_present_flag
   903: operator: =
   904: call: 
    905: name: gf_bs_read_int_log
    906: argument_list: 
     907: argument: 
      908: expr: 
       909: name: bs
     910: argument: 
      911: expr: 
       912: literal: 1
     913: argument: 
      914: expr: 
       915: literal: "lists_modification_present_flag"
 916: expr_stmt: 
  917: expr: 
   918: name: 
    919: name: pps
    920: operator: ->
    921: name: log2_parallel_merge_level_minus2
   922: operator: =
   923: call: 
    924: name: gf_bs_read_ue_log
    925: argument_list: 
     926: argument: 
      927: expr: 
       928: name: bs
     929: argument: 
      930: expr: 
       931: literal: "log2_parallel_merge_level_minus2"
 932: expr_stmt: 
  933: expr: 
   934: name: 
    935: name: pps
    936: operator: ->
    937: name: slice_segment_header_extension_present_flag
   938: operator: =
   939: call: 
    940: name: gf_bs_read_int_log
    941: argument_list: 
     942: argument: 
      943: expr: 
       944: name: bs
     945: argument: 
      946: expr: 
       947: literal: 1
     948: argument: 
      949: expr: 
       950: literal: "slice_segment_header_extension_present_flag"
 951: if_stmt: 
  952: if: 
   953: condition: 
    954: expr: 
     955: call: 
      956: name: gf_bs_read_int_log
      957: argument_list: 
       958: argument: 
        959: expr: 
         960: name: bs
       961: argument: 
        962: expr: 
         963: literal: 1
       964: argument: 
        965: expr: 
         966: literal: "pps_extension_flag"
   967: block: 
    968: block_content: 
     969: if: 
      970: directive: if
      971: expr: 
       972: literal: 0
     973: comment: /*pps_extension_data_flag */
     974: endif: 
      975: directive: endif
 976: return: 
  977: expr: 
   978: name: pps_id

----------------------------------------
0: block_content: 
 1: decl_stmt: 
  2: decl: 
   3: type: 
    4: name: u32
   5: name: i
 6: decl_stmt: 
  7: decl: 
   8: type: 
    9: name: s32
   10: name: pps_id
 11: decl_stmt: 
  12: decl: 
   13: type: 
    14: name: HEVC_PPS
    15: modifier: *
   16: name: pps
 17: comment: //NAL header already read
 18: expr_stmt: 
  19: expr: 
   20: name: pps_id
   21: operator: =
   22: call: 
    23: name: gf_bs_read_ue_log
    24: argument_list: 
     25: argument: 
      26: expr: 
       27: name: bs
     28: argument: 
      29: expr: 
       30: literal: "pps_id"
 31: if_stmt: 
  32: if: 
   33: condition: 
    34: expr: 
     35: operator: (
     36: name: pps_id
     37: operator: <
     38: literal: 0
     39: operator: )
     40: operator: ||
     41: operator: (
     42: name: pps_id
     43: operator: >=
     44: literal: 64
     45: operator: )
   46: block: 
    47: block_content: 
     48: expr_stmt: 
      49: expr: 
       50: call: 
        51: name: GF_LOG
        52: argument_list: 
         53: argument: 
          54: expr: 
           55: name: GF_LOG_ERROR
         56: argument: 
          57: expr: 
           58: name: GF_LOG_CODING
         59: argument: 
          60: expr: 
           61: operator: (
           62: literal: "[HEVC] wrong PPS ID %d in PPS\n"
           63: operator: ,
           64: name: pps_id
           65: operator: )
     66: return: 
      67: expr: 
       68: operator: -
       69: literal: 1
 70: expr_stmt: 
  71: expr: 
   72: name: pps
   73: operator: =
   74: operator: &
   75: name: 
    76: name: hevc
    77: operator: ->
    78: name: pps
    79: index: 
     80: expr: 
      81: name: pps_id
 82: if_stmt: 
  83: if: 
   84: condition: 
    85: expr: 
     86: operator: !
     87: name: 
      88: name: pps
      89: operator: ->
      90: name: state
   91: block: 
    92: block_content: 
     93: expr_stmt: 
      94: expr: 
       95: name: 
        96: name: pps
        97: operator: ->
        98: name: id
       99: operator: =
       100: name: pps_id
     101: expr_stmt: 
      102: expr: 
       103: name: 
        104: name: pps
        105: operator: ->
        106: name: state
       107: operator: =
       108: literal: 1
 109: expr_stmt: 
  110: expr: 
   111: name: 
    112: name: pps
    113: operator: ->
    114: name: sps_id
   115: operator: =
   116: call: 
    117: name: gf_bs_read_ue_log
    118: argument_list: 
     119: argument: 
      120: expr: 
       121: name: bs
     122: argument: 
      123: expr: 
       124: literal: "sps_id"
 125: if_stmt: 
  126: if: 
   127: condition: 
    128: expr: 
     129: operator: (
     130: name: 
      131: name: pps
      132: operator: ->
      133: name: sps_id
     134: operator: <
     135: literal: 0
     136: operator: )
     137: operator: ||
     138: operator: (
     139: name: 
      140: name: pps
      141: operator: ->
      142: name: sps_id
     143: operator: >=
     144: literal: 16
     145: operator: )
   146: block: 
    147: block_content: 
     148: expr_stmt: 
      149: expr: 
       150: call: 
        151: name: GF_LOG
        152: argument_list: 
         153: argument: 
          154: expr: 
           155: name: GF_LOG_ERROR
         156: argument: 
          157: expr: 
           158: name: GF_LOG_CODING
         159: argument: 
          160: expr: 
           161: operator: (
           162: literal: "[HEVC] wrong SPS ID %d in PPS\n"
           163: operator: ,
           164: name: 
            165: name: pps
            166: operator: ->
            167: name: sps_id
           168: operator: )
     169: expr_stmt: 
      170: expr: 
       171: name: 
        172: name: pps
        173: operator: ->
        174: name: sps_id
       175: operator: =
       176: literal: 0
     177: return: 
      178: expr: 
       179: operator: -
       180: literal: 1
 181: expr_stmt: 
  182: expr: 
   183: name: 
    184: name: hevc
    185: operator: ->
    186: name: sps_active_idx
   187: operator: =
   188: name: 
    189: name: pps
    190: operator: ->
    191: name: sps_id
 192: comment: /*set active sps*/
 193: expr_stmt: 
  194: expr: 
   195: name: 
    196: name: pps
    197: operator: ->
    198: name: dependent_slice_segments_enabled_flag
   199: operator: =
   200: call: 
    201: name: gf_bs_read_int_log
    202: argument_list: 
     203: argument: 
      204: expr: 
       205: name: bs
     206: argument: 
      207: expr: 
       208: literal: 1
     209: argument: 
      210: expr: 
       211: literal: "dependent_slice_segments_enabled_flag"
 212: expr_stmt: 
  213: expr: 
   214: name: 
    215: name: pps
    216: operator: ->
    217: name: output_flag_present_flag
   218: operator: =
   219: call: 
    220: name: gf_bs_read_int_log
    221: argument_list: 
     222: argument: 
      223: expr: 
       224: name: bs
     225: argument: 
      226: expr: 
       227: literal: 1
     228: argument: 
      229: expr: 
       230: literal: "output_flag_present_flag"
 231: expr_stmt: 
  232: expr: 
   233: name: 
    234: name: pps
    235: operator: ->
    236: name: num_extra_slice_header_bits
   237: operator: =
   238: call: 
    239: name: gf_bs_read_int_log
    240: argument_list: 
     241: argument: 
      242: expr: 
       243: name: bs
     244: argument: 
      245: expr: 
       246: literal: 3
     247: argument: 
      248: expr: 
       249: literal: "num_extra_slice_header_bits"
 250: expr_stmt: 
  251: expr: 
   252: name: 
    253: name: pps
    254: operator: ->
    255: name: sign_data_hiding_flag
   256: operator: =
   257: call: 
    258: name: gf_bs_read_int_log
    259: argument_list: 
     260: argument: 
      261: expr: 
       262: name: bs
     263: argument: 
      264: expr: 
       265: literal: 1
     266: argument: 
      267: expr: 
       268: literal: "sign_data_hiding_flag"
 269: expr_stmt: 
  270: expr: 
   271: name: 
    272: name: pps
    273: operator: ->
    274: name: cabac_init_present_flag
   275: operator: =
   276: call: 
    277: name: gf_bs_read_int_log
    278: argument_list: 
     279: argument: 
      280: expr: 
       281: name: bs
     282: argument: 
      283: expr: 
       284: literal: 1
     285: argument: 
      286: expr: 
       287: literal: "cabac_init_present_flag"
 288: expr_stmt: 
  289: expr: 
   290: name: 
    291: name: pps
    292: operator: ->
    293: name: num_ref_idx_l0_default_active
   294: operator: =
   295: literal: 1
   296: operator: +
   297: call: 
    298: name: gf_bs_read_ue_log
    299: argument_list: 
     300: argument: 
      301: expr: 
       302: name: bs
     303: argument: 
      304: expr: 
       305: literal: "num_ref_idx_l0_default_active"
 306: expr_stmt: 
  307: expr: 
   308: name: 
    309: name: pps
    310: operator: ->
    311: name: num_ref_idx_l1_default_active
   312: operator: =
   313: literal: 1
   314: operator: +
   315: call: 
    316: name: gf_bs_read_ue_log
    317: argument_list: 
     318: argument: 
      319: expr: 
       320: name: bs
     321: argument: 
      322: expr: 
       323: literal: "num_ref_idx_l1_default_active"
 324: expr_stmt: 
  325: expr: 
   326: name: 
    327: name: pps
    328: operator: ->
    329: name: pic_init_qp_minus26
   330: operator: =
   331: call: 
    332: name: gf_bs_read_se_log
    333: argument_list: 
     334: argument: 
      335: expr: 
       336: name: bs
     337: argument: 
      338: expr: 
       339: literal: "pic_init_qp_minus26"
 340: expr_stmt: 
  341: expr: 
   342: name: 
    343: name: pps
    344: operator: ->
    345: name: constrained_intra_pred_flag
   346: operator: =
   347: call: 
    348: name: gf_bs_read_int_log
    349: argument_list: 
     350: argument: 
      351: expr: 
       352: name: bs
     353: argument: 
      354: expr: 
       355: literal: 1
     356: argument: 
      357: expr: 
       358: literal: "constrained_intra_pred_flag"
 359: expr_stmt: 
  360: expr: 
   361: name: 
    362: name: pps
    363: operator: ->
    364: name: transform_skip_enabled_flag
   365: operator: =
   366: call: 
    367: name: gf_bs_read_int_log
    368: argument_list: 
     369: argument: 
      370: expr: 
       371: name: bs
     372: argument: 
      373: expr: 
       374: literal: 1
     375: argument: 
      376: expr: 
       377: literal: "transform_skip_enabled_flag"
 378: if_stmt: 
  379: if: 
   380: condition: 
    381: expr: 
     382: operator: (
     383: name: 
      384: name: pps
      385: operator: ->
      386: name: cu_qp_delta_enabled_flag
     387: operator: =
     388: call: 
      389: name: gf_bs_read_int_log
      390: argument_list: 
       391: argument: 
        392: expr: 
         393: name: bs
       394: argument: 
        395: expr: 
         396: literal: 1
       397: argument: 
        398: expr: 
         399: literal: "cu_qp_delta_enabled_flag"
     400: operator: )
   401: block: 
    402: block_content: 
     403: expr_stmt: 
      404: expr: 
       405: name: 
        406: name: pps
        407: operator: ->
        408: name: diff_cu_qp_delta_depth
       409: operator: =
       410: call: 
        411: name: gf_bs_read_ue_log
        412: argument_list: 
         413: argument: 
          414: expr: 
           415: name: bs
         416: argument: 
          417: expr: 
           418: literal: "diff_cu_qp_delta_depth"
 419: expr_stmt: 
  420: expr: 
   421: name: 
    422: name: pps
    423: operator: ->
    424: name: pic_cb_qp_offset
   425: operator: =
   426: call: 
    427: name: gf_bs_read_se_log
    428: argument_list: 
     429: argument: 
      430: expr: 
       431: name: bs
     432: argument: 
      433: expr: 
       434: literal: "pic_cb_qp_offset"
 435: expr_stmt: 
  436: expr: 
   437: name: 
    438: name: pps
    439: operator: ->
    440: name: pic_cr_qp_offset
   441: operator: =
   442: call: 
    443: name: gf_bs_read_se_log
    444: argument_list: 
     445: argument: 
      446: expr: 
       447: name: bs
     448: argument: 
      449: expr: 
       450: literal: "pic_cr_qp_offset"
 451: expr_stmt: 
  452: expr: 
   453: name: 
    454: name: pps
    455: operator: ->
    456: name: slice_chroma_qp_offsets_present_flag
   457: operator: =
   458: call: 
    459: name: gf_bs_read_int_log
    460: argument_list: 
     461: argument: 
      462: expr: 
       463: name: bs
     464: argument: 
      465: expr: 
       466: literal: 1
     467: argument: 
      468: expr: 
       469: literal: "slice_chroma_qp_offsets_present_flag"
 470: expr_stmt: 
  471: expr: 
   472: name: 
    473: name: pps
    474: operator: ->
    475: name: weighted_pred_flag
   476: operator: =
   477: call: 
    478: name: gf_bs_read_int_log
    479: argument_list: 
     480: argument: 
      481: expr: 
       482: name: bs
     483: argument: 
      484: expr: 
       485: literal: 1
     486: argument: 
      487: expr: 
       488: literal: "weighted_pred_flag"
 489: expr_stmt: 
  490: expr: 
   491: name: 
    492: name: pps
    493: operator: ->
    494: name: weighted_bipred_flag
   495: operator: =
   496: call: 
    497: name: gf_bs_read_int_log
    498: argument_list: 
     499: argument: 
      500: expr: 
       501: name: bs
     502: argument: 
      503: expr: 
       504: literal: 1
     505: argument: 
      506: expr: 
       507: literal: "weighted_bipred_flag"
 508: expr_stmt: 
  509: expr: 
   510: name: 
    511: name: pps
    512: operator: ->
    513: name: transquant_bypass_enable_flag
   514: operator: =
   515: call: 
    516: name: gf_bs_read_int_log
    517: argument_list: 
     518: argument: 
      519: expr: 
       520: name: bs
     521: argument: 
      522: expr: 
       523: literal: 1
     524: argument: 
      525: expr: 
       526: literal: "transquant_bypass_enable_flag"
 527: expr_stmt: 
  528: expr: 
   529: name: 
    530: name: pps
    531: operator: ->
    532: name: tiles_enabled_flag
   533: operator: =
   534: call: 
    535: name: gf_bs_read_int_log
    536: argument_list: 
     537: argument: 
      538: expr: 
       539: name: bs
     540: argument: 
      541: expr: 
       542: literal: 1
     543: argument: 
      544: expr: 
       545: literal: "tiles_enabled_flag"
 546: expr_stmt: 
  547: expr: 
   548: name: 
    549: name: pps
    550: operator: ->
    551: name: entropy_coding_sync_enabled_flag
   552: operator: =
   553: call: 
    554: name: gf_bs_read_int_log
    555: argument_list: 
     556: argument: 
      557: expr: 
       558: name: bs
     559: argument: 
      560: expr: 
       561: literal: 1
     562: argument: 
      563: expr: 
       564: literal: "entropy_coding_sync_enabled_flag"
 565: if_stmt: 
  566: if: 
   567: condition: 
    568: expr: 
     569: name: 
      570: name: pps
      571: operator: ->
      572: name: tiles_enabled_flag
   573: block: 
    574: block_content: 
     575: expr_stmt: 
      576: expr: 
       577: name: 
        578: name: pps
        579: operator: ->
        580: name: num_tile_columns
       581: operator: =
       582: literal: 1
       583: operator: +
       584: call: 
        585: name: gf_bs_read_ue_log
        586: argument_list: 
         587: argument: 
          588: expr: 
           589: name: bs
         590: argument: 
          591: expr: 
           592: literal: "num_tile_columns_minus1"
     593: expr_stmt: 
      594: expr: 
       595: name: 
        596: name: pps
        597: operator: ->
        598: name: num_tile_rows
       599: operator: =
       600: literal: 1
       601: operator: +
       602: call: 
        603: name: gf_bs_read_ue_log
        604: argument_list: 
         605: argument: 
          606: expr: 
           607: name: bs
         608: argument: 
          609: expr: 
           610: literal: "num_tile_rows_minus1"
     611: expr_stmt: 
      612: expr: 
       613: name: 
        614: name: pps
        615: operator: ->
        616: name: uniform_spacing_flag
       617: operator: =
       618: call: 
        619: name: gf_bs_read_int_log
        620: argument_list: 
         621: argument: 
          622: expr: 
           623: name: bs
         624: argument: 
          625: expr: 
           626: literal: 1
         627: argument: 
          628: expr: 
           629: literal: "uniform_spacing_flag"
     630: if_stmt: 
      631: if: 
       632: condition: 
        633: expr: 
         634: operator: !
         635: name: 
          636: name: pps
          637: operator: ->
          638: name: uniform_spacing_flag
       639: block: 
        640: block_content: 
         641: for: 
          642: control: 
           643: init: 
            644: expr: 
             645: name: i
             646: operator: =
             647: literal: 0
           648: condition: 
            649: expr: 
             650: name: i
             651: operator: <
             652: name: 
              653: name: pps
              654: operator: ->
              655: name: num_tile_columns
             656: operator: -
             657: literal: 1
           658: incr: 
            659: expr: 
             660: name: i
             661: operator: ++
          662: block: 
           663: block_content: 
            664: expr_stmt: 
             665: expr: 
              666: name: 
               667: name: pps
               668: operator: ->
               669: name: column_width
               670: index: 
                671: expr: 
                 672: name: i
              673: operator: =
              674: literal: 1
              675: operator: +
              676: call: 
               677: name: gf_bs_read_ue_log_idx
               678: argument_list: 
                679: argument: 
                 680: expr: 
                  681: name: bs
                682: argument: 
                 683: expr: 
                  684: literal: "column_width_minus1"
                685: argument: 
                 686: expr: 
                  687: name: i
         688: for: 
          689: control: 
           690: init: 
            691: expr: 
             692: name: i
             693: operator: =
             694: literal: 0
           695: condition: 
            696: expr: 
             697: name: i
             698: operator: <
             699: name: 
              700: name: pps
              701: operator: ->
              702: name: num_tile_rows
             703: operator: -
             704: literal: 1
           705: incr: 
            706: expr: 
             707: name: i
             708: operator: ++
          709: block: 
           710: block_content: 
            711: expr_stmt: 
             712: expr: 
              713: name: 
               714: name: pps
               715: operator: ->
               716: name: row_height
               717: index: 
                718: expr: 
                 719: name: i
              720: operator: =
              721: literal: 1
              722: operator: +
              723: call: 
               724: name: gf_bs_read_ue_log_idx
               725: argument_list: 
                726: argument: 
                 727: expr: 
                  728: name: bs
                729: argument: 
                 730: expr: 
                  731: literal: "row_height_minus1"
                732: argument: 
                 733: expr: 
                  734: name: i
     735: expr_stmt: 
      736: expr: 
       737: name: 
        738: name: pps
        739: operator: ->
        740: name: loop_filter_across_tiles_enabled_flag
       741: operator: =
       742: call: 
        743: name: gf_bs_read_int_log
        744: argument_list: 
         745: argument: 
          746: expr: 
           747: name: bs
         748: argument: 
          749: expr: 
           750: literal: 1
         751: argument: 
          752: expr: 
           753: literal: "loop_filter_across_tiles_enabled_flag"
 754: expr_stmt: 
  755: expr: 
   756: name: 
    757: name: pps
    758: operator: ->
    759: name: loop_filter_across_slices_enabled_flag
   760: operator: =
   761: call: 
    762: name: gf_bs_read_int_log
    763: argument_list: 
     764: argument: 
      765: expr: 
       766: name: bs
     767: argument: 
      768: expr: 
       769: literal: 1
     770: argument: 
      771: expr: 
       772: literal: "loop_filter_across_slices_enabled_flag"
 773: if_stmt: 
  774: if: 
   775: condition: 
    776: expr: 
     777: operator: (
     778: name: 
      779: name: pps
      780: operator: ->
      781: name: deblocking_filter_control_present_flag
     782: operator: =
     783: call: 
      784: name: gf_bs_read_int_log
      785: argument_list: 
       786: argument: 
        787: expr: 
         788: name: bs
       789: argument: 
        790: expr: 
         791: literal: 1
       792: argument: 
        793: expr: 
         794: literal: "deblocking_filter_control_present_flag"
     795: operator: )
   796: block: 
    797: block_content: 
     798: expr_stmt: 
      799: expr: 
       800: name: 
        801: name: pps
        802: operator: ->
        803: name: deblocking_filter_override_enabled_flag
       804: operator: =
       805: call: 
        806: name: gf_bs_read_int_log
        807: argument_list: 
         808: argument: 
          809: expr: 
           810: name: bs
         811: argument: 
          812: expr: 
           813: literal: 1
         814: argument: 
          815: expr: 
           816: literal: "deblocking_filter_override_enabled_flag"
     817: if_stmt: 
      818: if: 
       819: condition: 
        820: expr: 
         821: operator: !
         822: operator: (
         823: name: 
          824: name: pps
          825: operator: ->
          826: name: pic_disable_deblocking_filter_flag
         827: operator: =
         828: call: 
          829: name: gf_bs_read_int_log
          830: argument_list: 
           831: argument: 
            832: expr: 
             833: name: bs
           834: argument: 
            835: expr: 
             836: literal: 1
           837: argument: 
            838: expr: 
             839: literal: "pic_disable_deblocking_filter_flag"
         840: operator: )
       841: block: 
        842: block_content: 
         843: expr_stmt: 
          844: expr: 
           845: name: 
            846: name: pps
            847: operator: ->
            848: name: beta_offset_div2
           849: operator: =
           850: call: 
            851: name: gf_bs_read_se_log
            852: argument_list: 
             853: argument: 
              854: expr: 
               855: name: bs
             856: argument: 
              857: expr: 
               858: literal: "beta_offset_div2"
         859: expr_stmt: 
          860: expr: 
           861: name: 
            862: name: pps
            863: operator: ->
            864: name: tc_offset_div2
           865: operator: =
           866: call: 
            867: name: gf_bs_read_se_log
            868: argument_list: 
             869: argument: 
              870: expr: 
               871: name: bs
             872: argument: 
              873: expr: 
               874: literal: "tc_offset_div2"
 875: if_stmt: 
  876: if: 
   877: condition: 
    878: expr: 
     879: operator: (
     880: name: 
      881: name: pps
      882: operator: ->
      883: name: pic_scaling_list_data_present_flag
     884: operator: =
     885: call: 
      886: name: gf_bs_read_int_log
      887: argument_list: 
       888: argument: 
        889: expr: 
         890: name: bs
       891: argument: 
        892: expr: 
         893: literal: 1
       894: argument: 
        895: expr: 
         896: literal: "pic_scaling_list_data_present_flag"
     897: operator: )
   898: block: 
    899: block_content: 
     900: expr_stmt: 
      901: expr: 
       902: call: 
        903: name: hevc_scaling_list_data
        904: argument_list: 
         905: argument: 
          906: expr: 
           907: name: bs
 908: expr_stmt: 
  909: expr: 
   910: name: 
    911: name: pps
    912: operator: ->
    913: name: lists_modification_present_flag
   914: operator: =
   915: call: 
    916: name: gf_bs_read_int_log
    917: argument_list: 
     918: argument: 
      919: expr: 
       920: name: bs
     921: argument: 
      922: expr: 
       923: literal: 1
     924: argument: 
      925: expr: 
       926: literal: "lists_modification_present_flag"
 927: expr_stmt: 
  928: expr: 
   929: name: 
    930: name: pps
    931: operator: ->
    932: name: log2_parallel_merge_level_minus2
   933: operator: =
   934: call: 
    935: name: gf_bs_read_ue_log
    936: argument_list: 
     937: argument: 
      938: expr: 
       939: name: bs
     940: argument: 
      941: expr: 
       942: literal: "log2_parallel_merge_level_minus2"
 943: expr_stmt: 
  944: expr: 
   945: name: 
    946: name: pps
    947: operator: ->
    948: name: slice_segment_header_extension_present_flag
   949: operator: =
   950: call: 
    951: name: gf_bs_read_int_log
    952: argument_list: 
     953: argument: 
      954: expr: 
       955: name: bs
     956: argument: 
      957: expr: 
       958: literal: 1
     959: argument: 
      960: expr: 
       961: literal: "slice_segment_header_extension_present_flag"
 962: if_stmt: 
  963: if: 
   964: condition: 
    965: expr: 
     966: call: 
      967: name: gf_bs_read_int_log
      968: argument_list: 
       969: argument: 
        970: expr: 
         971: name: bs
       972: argument: 
        973: expr: 
         974: literal: 1
       975: argument: 
        976: expr: 
         977: literal: "pps_extension_flag"
   978: block: 
    979: block_content: 
     980: if: 
      981: directive: if
      982: expr: 
       983: literal: 0
     984: comment: /*pps_extension_data_flag */
     985: endif: 
      986: directive: endif
 987: return: 
  988: expr: 
   989: name: pps_id
=====
0: if_stmt: 
 1: if: 
  2: condition: 
   3: expr: 
    4: name: 
     5: name: pps
     6: operator: ->
     7: name: sps_id
    8: operator: >=
    9: literal: 16
  10: block: 
   11: block_content: 
    12: expr_stmt: 
     13: expr: 
      14: call: 
       15: name: GF_LOG
       16: argument_list: 
        17: argument: 
         18: expr: 
          19: name: GF_LOG_ERROR
        20: argument: 
         21: expr: 
          22: name: GF_LOG_CODING
        23: argument: 
         24: expr: 
          25: operator: (
          26: literal: "[HEVC] wrong SPS ID %d in PPS\n"
          27: operator: ,
          28: name: 
           29: name: pps
           30: operator: ->
           31: name: sps_id
          32: operator: )
    33: expr_stmt: 
     34: expr: 
      35: name: 
       36: name: pps
       37: operator: ->
       38: name: sps_id
      39: operator: =
      40: literal: 0
    41: return: 
     42: expr: 
      43: operator: -
      44: literal: 1

----------------------------------------
0: if_stmt: 
 1: if: 
  2: condition: 
   3: expr: 
    4: operator: (
    5: name: 
     6: name: pps
     7: operator: ->
     8: name: sps_id
    9: operator: <
    10: literal: 0
    11: operator: )
    12: operator: ||
    13: operator: (
    14: name: 
     15: name: pps
     16: operator: ->
     17: name: sps_id
    18: operator: >=
    19: literal: 16
    20: operator: )
  21: block: 
   22: block_content: 
    23: expr_stmt: 
     24: expr: 
      25: call: 
       26: name: GF_LOG
       27: argument_list: 
        28: argument: 
         29: expr: 
          30: name: GF_LOG_ERROR
        31: argument: 
         32: expr: 
          33: name: GF_LOG_CODING
        34: argument: 
         35: expr: 
          36: operator: (
          37: literal: "[HEVC] wrong SPS ID %d in PPS\n"
          38: operator: ,
          39: name: 
           40: name: pps
           41: operator: ->
           42: name: sps_id
          43: operator: )
    44: expr_stmt: 
     45: expr: 
      46: name: 
       47: name: pps
       48: operator: ->
       49: name: sps_id
      50: operator: =
      51: literal: 0
    52: return: 
     53: expr: 
      54: operator: -
      55: literal: 1
=====
0: if: 
 1: condition: 
  2: expr: 
   3: name: 
    4: name: pps
    5: operator: ->
    6: name: sps_id
   7: operator: >=
   8: literal: 16
 9: block: 
  10: block_content: 
   11: expr_stmt: 
    12: expr: 
     13: call: 
      14: name: GF_LOG
      15: argument_list: 
       16: argument: 
        17: expr: 
         18: name: GF_LOG_ERROR
       19: argument: 
        20: expr: 
         21: name: GF_LOG_CODING
       22: argument: 
        23: expr: 
         24: operator: (
         25: literal: "[HEVC] wrong SPS ID %d in PPS\n"
         26: operator: ,
         27: name: 
          28: name: pps
          29: operator: ->
          30: name: sps_id
         31: operator: )
   32: expr_stmt: 
    33: expr: 
     34: name: 
      35: name: pps
      36: operator: ->
      37: name: sps_id
     38: operator: =
     39: literal: 0
   40: return: 
    41: expr: 
     42: operator: -
     43: literal: 1

----------------------------------------
0: if: 
 1: condition: 
  2: expr: 
   3: operator: (
   4: name: 
    5: name: pps
    6: operator: ->
    7: name: sps_id
   8: operator: <
   9: literal: 0
   10: operator: )
   11: operator: ||
   12: operator: (
   13: name: 
    14: name: pps
    15: operator: ->
    16: name: sps_id
   17: operator: >=
   18: literal: 16
   19: operator: )
 20: block: 
  21: block_content: 
   22: expr_stmt: 
    23: expr: 
     24: call: 
      25: name: GF_LOG
      26: argument_list: 
       27: argument: 
        28: expr: 
         29: name: GF_LOG_ERROR
       30: argument: 
        31: expr: 
         32: name: GF_LOG_CODING
       33: argument: 
        34: expr: 
         35: operator: (
         36: literal: "[HEVC] wrong SPS ID %d in PPS\n"
         37: operator: ,
         38: name: 
          39: name: pps
          40: operator: ->
          41: name: sps_id
         42: operator: )
   43: expr_stmt: 
    44: expr: 
     45: name: 
      46: name: pps
      47: operator: ->
      48: name: sps_id
     49: operator: =
     50: literal: 0
   51: return: 
    52: expr: 
     53: operator: -
     54: literal: 1
=====
0: condition: 
 1: expr: 
  2: name: 
   3: name: pps
   4: operator: ->
   5: name: sps_id
  6: operator: >=
  7: literal: 16

----------------------------------------
0: condition: 
 1: expr: 
  2: operator: (
  3: name: 
   4: name: pps
   5: operator: ->
   6: name: sps_id
  7: operator: <
  8: literal: 0
  9: operator: )
  10: operator: ||
  11: operator: (
  12: name: 
   13: name: pps
   14: operator: ->
   15: name: sps_id
  16: operator: >=
  17: literal: 16
  18: operator: )
=====
0: expr: 
 1: name: 
  2: name: pps
  3: operator: ->
  4: name: sps_id
 5: operator: >=
 6: literal: 16

----------------------------------------
0: expr: 
 1: operator: (
 2: name: 
  3: name: pps
  4: operator: ->
  5: name: sps_id
 6: operator: <
 7: literal: 0
 8: operator: )
 9: operator: ||
 10: operator: (
 11: name: 
  12: name: pps
  13: operator: ->
  14: name: sps_id
 15: operator: >=
 16: literal: 16
 17: operator: )
=====
