[
  {
    "id": "CWE-125___CVE-2024-25116.c___1-64___13.c",
    "source": "static int CFReserve_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    RedisModule_AutoMemory(ctx);\n\n    if (argc < 3 || (argc % 2) == 0) {\n        return RedisModule_WrongArity(ctx);\n    }\n\n    long long capacity;\n    if (RedisModule_StringToLongLong(argv[2], &capacity)) {\n        return RedisModule_ReplyWithError(ctx, \"Bad capacity\");\n    }\n\n    long long maxIterations = CF_MAX_ITERATIONS;\n    int mi_loc = RMUtil_ArgIndex(\"MAXITERATIONS\", argv, argc);\n    if (mi_loc != -1) {\n        if (RedisModule_StringToLongLong(argv[mi_loc + 1], &maxIterations) != REDISMODULE_OK) {\n            return RedisModule_ReplyWithError(ctx, \"Couldn't parse MAXITERATIONS\");\n        } else if (maxIterations <= 0) {\n            return RedisModule_ReplyWithError(\n                ctx, \"MAXITERATIONS parameter needs to be a positive integer\");\n        }\n    }\n\n    long long bucketSize = CF_DEFAULT_BUCKETSIZE;\n    int bs_loc = RMUtil_ArgIndex(\"BUCKETSIZE\", argv, argc);\n    if (bs_loc != -1) {\n        if (RedisModule_StringToLongLong(argv[bs_loc + 1], &bucketSize) != REDISMODULE_OK) {\n            return RedisModule_ReplyWithError(ctx, \"Couldn't parse BUCKETSIZE\");\n        } else if (bucketSize <= 0) {\n            return RedisModule_ReplyWithError(\n                ctx, \"BUCKETSIZE parameter needs to be a positive integer\");\n        }\n    }\n\n    long long expansion = CF_DEFAULT_EXPANSION;\n    int ex_loc = RMUtil_ArgIndex(\"EXPANSION\", argv, argc);\n    if (ex_loc != -1) {\n        if (RedisModule_StringToLongLong(argv[ex_loc + 1], &expansion) != REDISMODULE_OK) {\n            return RedisModule_ReplyWithError(ctx, \"Couldn't parse EXPANSION\");\n        } else if (expansion < 0) {\n            return RedisModule_ReplyWithError(\n                ctx, \"EXPANSION parameter needs to be a non-negative integer\");\n        }\n    }\n\n    if (bucketSize * 2 > capacity) {\n        return RedisModule_ReplyWithError(ctx, \"Capacity must be at least (BucketSize * 2)\");\n    }\n\n    CuckooFilter *cf;\n    RedisModuleKey *key = RedisModule_OpenKey(ctx, argv[1], REDISMODULE_READ | REDISMODULE_WRITE);\n    int status = cfGetFilter(key, &cf);\n    if (status != SB_EMPTY) {\n        return RedisModule_ReplyWithError(ctx, statusStrerror(status));\n    }\n\n    cf = cfCreate(key, capacity, bucketSize, maxIterations, expansion);\n    if (cf == NULL) {\n        return RedisModule_ReplyWithError(ctx, \"Couldn't create Cuckoo Filter\"); // LCOV_EXCL_LINE\n    } else {\n        RedisModule_ReplicateVerbatim(ctx);\n        return RedisModule_ReplyWithSimpleString(ctx, \"OK\");\n    }\n}\n",
    "vuln_line": 13,
    "cwe_id": "CWE-125",
    "signature": "long long maxIterations = CF_MAX_ITERATIONS;",
    "expected_success": true,
    "max_iterations": 5,
    "cve_id": "CVE-2024-25116",
    "ground_truth": "static int CFReserve_RedisCommand(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {\n    RedisModule_AutoMemory(ctx);\n\n    if (argc < 3 || (argc % 2) == 0) {\n        return RedisModule_WrongArity(ctx);\n    }\n\n    long long capacity;\n    if (RedisModule_StringToLongLong(argv[2], &capacity)) {\n        return RedisModule_ReplyWithError(ctx, \"Bad capacity\");\n    }\n\n    long long maxIterations = CF_DEFAULT_MAX_ITERATIONS;\n    int mi_loc = RMUtil_ArgIndex(\"MAXITERATIONS\", argv, argc);\n    if (mi_loc != -1) {\n        if (RedisModule_StringToLongLong(argv[mi_loc + 1], &maxIterations) != REDISMODULE_OK) {\n            return RedisModule_ReplyWithError(ctx, \"Couldn't parse MAXITERATIONS\");\n        } else if (maxIterations <= 0 || maxIterations > CF_MAX_ITERATIONS) {\n            return RedisModule_ReplyWithError(\n                ctx, \"MAXITERATIONS: value must be an integer between 1 and 65535, inclusive.\");\n        }\n    }\n\n    long long bucketSize = CF_DEFAULT_BUCKETSIZE;\n    int bs_loc = RMUtil_ArgIndex(\"BUCKETSIZE\", argv, argc);\n    if (bs_loc != -1) {\n        if (RedisModule_StringToLongLong(argv[bs_loc + 1], &bucketSize) != REDISMODULE_OK) {\n            return RedisModule_ReplyWithError(ctx, \"Couldn't parse BUCKETSIZE\");\n        } else if (bucketSize <= 0 || bucketSize > CF_MAX_BUCKET_SIZE) {\n            return RedisModule_ReplyWithError(\n                ctx, \"BUCKETSIZE: value must be an integer between 1 and 255, inclusive.\");\n        }\n    }\n\n    long long expansion = CF_DEFAULT_EXPANSION;\n    int ex_loc = RMUtil_ArgIndex(\"EXPANSION\", argv, argc);\n    if (ex_loc != -1) {\n        if (RedisModule_StringToLongLong(argv[ex_loc + 1], &expansion) != REDISMODULE_OK) {\n            return RedisModule_ReplyWithError(ctx, \"Couldn't parse EXPANSION\");\n        } else if (expansion < 0 || expansion > CF_MAX_EXPANSION) {\n            return RedisModule_ReplyWithError(\n                ctx, \"EXPANSION: value must be an integer between 0 and 32768, inclusive.\");\n        }\n    }\n\n    if (bucketSize * 2 > capacity) {\n        return RedisModule_ReplyWithError(ctx, \"Capacity must be at least (BucketSize * 2)\");\n    }\n\n    CuckooFilter *cf;\n    RedisModuleKey *key = RedisModule_OpenKey(ctx, argv[1], REDISMODULE_READ | REDISMODULE_WRITE);\n    int status = cfGetFilter(key, &cf);\n    if (status != SB_EMPTY) {\n        return RedisModule_ReplyWithError(ctx, statusStrerror(status));\n    }\n\n    cf = cfCreate(key, capacity, bucketSize, maxIterations, expansion);\n    if (cf == NULL) {\n        return RedisModule_ReplyWithError(ctx, \"Couldn't create Cuckoo Filter\"); // LCOV_EXCL_LINE\n    } else {\n        RedisModule_ReplicateVerbatim(ctx);\n        return RedisModule_ReplyWithSimpleString(ctx, \"OK\");\n    }\n}\n",
    "metadata": {
      "line_hint": "13.c",
      "range": "1-64",
      "dataset": "zeroday_repair",
      "path": "/home/hjs/research/patchscribe/datasets/zeroday_repair/CWE-125___CVE-2024-25116.c___1-64___13.c"
    }
  },
  {
    "id": "CWE-125___CVE-2024-29489.c___1-59___5.c",
    "source": "static ecma_value_t JERRY_ATTR_NOINLINE\necma_op_function_call_constructor (vm_frame_ctx_shared_args_t *shared_args_p, /**< shared data */\n                                   ecma_object_t *scope_p, /**< lexical environment to use */\n                                   ecma_value_t this_binding) /**< value of 'ThisBinding' */\n{\n  shared_args_p->header.status_flags |= VM_FRAME_CTX_SHARED_NON_ARROW_FUNC;\n\n  ecma_value_t ret_value;\n\n  if (JERRY_CONTEXT (current_new_target_p) == NULL)\n  {\n    ret_value = ecma_raise_type_error (ECMA_ERR_CLASS_CONSTRUCTOR_REQUIRES_NEW);\n    goto exit;\n  }\n\n  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) shared_args_p->header.function_object_p;\n  if (ECMA_GET_THIRD_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))\n  {\n    this_binding = ECMA_VALUE_UNINITIALIZED;\n  }\n\n  ecma_op_create_environment_record (scope_p, this_binding, shared_args_p->header.function_object_p);\n\n#if JERRY_BUILTIN_REALMS\n  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);\n  JERRY_CONTEXT (global_object_p) = ecma_op_function_get_realm (shared_args_p->header.bytecode_header_p);\n#endif /* JERRY_BUILTIN_REALMS */\n\n  ret_value = vm_run (&shared_args_p->header, this_binding, scope_p);\n\n#if JERRY_BUILTIN_REALMS\n  JERRY_CONTEXT (global_object_p) = saved_global_object_p;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  /* ECMAScript v6, 9.2.2.13 */\n  if (JERRY_UNLIKELY (this_binding == ECMA_VALUE_UNINITIALIZED))\n  {\n    if (!ECMA_IS_VALUE_ERROR (ret_value) && !ecma_is_value_object (ret_value))\n    {\n      if (!ecma_is_value_undefined (ret_value))\n      {\n        ecma_free_value (ret_value);\n        ret_value = ecma_raise_type_error (ECMA_ERR_DERIVED_CTOR_RETURN_NOR_OBJECT_OR_UNDEFINED);\n      }\n      else\n      {\n        ret_value = ecma_op_get_this_binding (scope_p);\n      }\n    }\n  }\n\nexit:\n  if (JERRY_UNLIKELY (shared_args_p->header.status_flags & VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV))\n  {\n    ecma_deref_object (scope_p);\n  }\n\n  return ret_value;\n} /* ecma_op_function_call_constructor */\n",
    "vuln_line": 5,
    "cwe_id": "CWE-125",
    "signature": "{",
    "expected_success": true,
    "max_iterations": 5,
    "cve_id": "CVE-2024-29489",
    "ground_truth": "static ecma_value_t JERRY_ATTR_NOINLINE\necma_op_function_call_constructor (vm_frame_ctx_shared_args_t *shared_args_p, /**< shared data */\n                                   ecma_object_t *scope_p, /**< lexical environment to use */\n                                   ecma_value_t this_binding) /**< value of 'ThisBinding' */\n{\n  ECMA_CHECK_STACK_USAGE ();\n\n  shared_args_p->header.status_flags |= VM_FRAME_CTX_SHARED_NON_ARROW_FUNC;\n\n  ecma_value_t ret_value;\n\n  if (JERRY_CONTEXT (current_new_target_p) == NULL)\n  {\n    ret_value = ecma_raise_type_error (ECMA_ERR_CLASS_CONSTRUCTOR_REQUIRES_NEW);\n    goto exit;\n  }\n\n  ecma_extended_object_t *ext_func_p = (ecma_extended_object_t *) shared_args_p->header.function_object_p;\n  if (ECMA_GET_THIRD_BIT_FROM_POINTER_TAG (ext_func_p->u.function.scope_cp))\n  {\n    this_binding = ECMA_VALUE_UNINITIALIZED;\n  }\n\n  ecma_op_create_environment_record (scope_p, this_binding, shared_args_p->header.function_object_p);\n\n#if JERRY_BUILTIN_REALMS\n  ecma_global_object_t *saved_global_object_p = JERRY_CONTEXT (global_object_p);\n  JERRY_CONTEXT (global_object_p) = ecma_op_function_get_realm (shared_args_p->header.bytecode_header_p);\n#endif /* JERRY_BUILTIN_REALMS */\n\n  ret_value = vm_run (&shared_args_p->header, this_binding, scope_p);\n\n#if JERRY_BUILTIN_REALMS\n  JERRY_CONTEXT (global_object_p) = saved_global_object_p;\n#endif /* JERRY_BUILTIN_REALMS */\n\n  /* ECMAScript v6, 9.2.2.13 */\n  if (JERRY_UNLIKELY (this_binding == ECMA_VALUE_UNINITIALIZED))\n  {\n    if (!ECMA_IS_VALUE_ERROR (ret_value) && !ecma_is_value_object (ret_value))\n    {\n      if (!ecma_is_value_undefined (ret_value))\n      {\n        ecma_free_value (ret_value);\n        ret_value = ecma_raise_type_error (ECMA_ERR_DERIVED_CTOR_RETURN_NOR_OBJECT_OR_UNDEFINED);\n      }\n      else\n      {\n        ret_value = ecma_op_get_this_binding (scope_p);\n      }\n    }\n  }\n\nexit:\n  if (JERRY_UNLIKELY (shared_args_p->header.status_flags & VM_FRAME_CTX_SHARED_FREE_LOCAL_ENV))\n  {\n    ecma_deref_object (scope_p);\n  }\n\n  return ret_value;\n} /* ecma_op_function_call_constructor */\n",
    "metadata": {
      "line_hint": "5.c",
      "range": "1-59",
      "dataset": "zeroday_repair",
      "path": "/home/hjs/research/patchscribe/datasets/zeroday_repair/CWE-125___CVE-2024-29489.c___1-59___5.c"
    }
  },
  {
    "id": "CWE-125___CVE-2024-31584.c___1-48___23.c",
    "source": "mobile::Module FlatbufferLoader::parseModule(\n    mobile::serialization::Module* module,\n    char* end) {\n  module_ = module;\n  all_ivalues_.clear();\n  all_types_.clear();\n  storages_.clear();\n  storage_loaded_.clear();\n  module_parsed_ = false;\n\n  const auto* ivalues = module->ivalues();\n  TORCH_CHECK(\n      ivalues && module->object_types(),\n      \"Parsing flatbuffer module: Corrupted ivalues/object_types field\");\n  TORCH_CHECK(\n      reinterpret_cast<const char*>(ivalues) < end, \"Corrupted ivalues field\");\n  all_ivalues_.resize(ivalues->size());\n  all_types_.resize(module->object_types()->size());\n  storages_.resize(module->storage_data_size());\n  storage_loaded_.resize(module->storage_data_size(), false);\n\n  mobile_ivalue_size_ = module_->mobile_ivalue_size();\n  if (mobile_ivalue_size_ == 0) {\n    mobile_ivalue_size_ = ivalues->size();\n  }\n\n  for (uint32_t i = 0; i < mobile_ivalue_size_; i++) {\n    const auto* ival = ivalues->Get(i);\n    TORCH_CHECK(\n        reinterpret_cast<const char*>(ival) < end, \"Corrupted ivalue item\")\n    parseAndPopulate(i, ival);\n  }\n  IValue& module_ivalue = getIValue(module->state_obj());\n\n  // register functions\n  for (const auto& f : all_functions_) {\n    uint32_t class_index =\n        ivalues->Get(f.first)->val_as_Function()->class_type();\n    ClassTypePtr class_type = all_types_[class_index];\n    class_type->addMethod(f.second);\n  }\n\n  module_parsed_ = true;\n  auto m = mobile::Module(module_ivalue.toObject(), mcu_);\n  m.set_min_operator_version(module->operator_version());\n  m.set_bytecode_version(module->bytecode_version());\n  return m;\n}\n",
    "vuln_line": 23,
    "cwe_id": "CWE-125",
    "signature": "if (mobile_ivalue_size_ == 0) {",
    "expected_success": true,
    "max_iterations": 5,
    "cve_id": "CVE-2024-31584",
    "ground_truth": "mobile::Module FlatbufferLoader::parseModule(\n    mobile::serialization::Module* module,\n    char* end) {\n  module_ = module;\n  all_ivalues_.clear();\n  all_types_.clear();\n  storages_.clear();\n  storage_loaded_.clear();\n  module_parsed_ = false;\n\n  const auto* ivalues = module->ivalues();\n  TORCH_CHECK(\n      ivalues && module->object_types(),\n      \"Parsing flatbuffer module: Corrupted ivalues/object_types field\");\n  TORCH_CHECK(\n      reinterpret_cast<const char*>(ivalues) < end, \"Corrupted ivalues field\");\n  all_ivalues_.resize(ivalues->size());\n  all_types_.resize(module->object_types()->size());\n  storages_.resize(module->storage_data_size());\n  storage_loaded_.resize(module->storage_data_size(), false);\n\n  mobile_ivalue_size_ = module_->mobile_ivalue_size();\n  if (mobile_ivalue_size_ == 0 || mobile_ivalue_size_ > ivalues->size()) {\n    mobile_ivalue_size_ = ivalues->size();\n  }\n\n  for (uint32_t i = 0; i < mobile_ivalue_size_; i++) {\n    const auto* ival = ivalues->Get(i);\n    TORCH_CHECK(\n        reinterpret_cast<const char*>(ival) < end, \"Corrupted ivalue item\")\n    parseAndPopulate(i, ival);\n  }\n  IValue& module_ivalue = getIValue(module->state_obj());\n\n  // register functions\n  for (const auto& f : all_functions_) {\n    uint32_t class_index =\n        ivalues->Get(f.first)->val_as_Function()->class_type();\n    ClassTypePtr class_type = all_types_[class_index];\n    class_type->addMethod(f.second);\n  }\n\n  module_parsed_ = true;\n  auto m = mobile::Module(module_ivalue.toObject(), mcu_);\n  m.set_min_operator_version(module->operator_version());\n  m.set_bytecode_version(module->bytecode_version());\n  return m;\n}\n",
    "metadata": {
      "line_hint": "23.c",
      "range": "1-48",
      "dataset": "zeroday_repair",
      "path": "/home/hjs/research/patchscribe/datasets/zeroday_repair/CWE-125___CVE-2024-31584.c___1-48___23.c"
    }
  }
]